
AVRGCC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  0000082c  000008c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000082c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008a  0080011c  0080011c  000008dc  2**0
                  ALLOC
  3 .stab         00000954  00000000  00000000  000008dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000016e  00000000  00000000  00001230  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000040  00000000  00000000  0000139e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001a5  00000000  00000000  000013de  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000e1b  00000000  00000000  00001583  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000002cd  00000000  00000000  0000239e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000aa3  00000000  00000000  0000266b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000190  00000000  00000000  00003110  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000381  00000000  00000000  000032a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000668  00000000  00000000  00003621  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000063  00000000  00000000  00003c89  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000058  00000000  00000000  00003cec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
   8:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
   c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  10:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  14:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  18:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  1c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  20:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  24:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  28:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  2c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  30:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  34:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  38:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  3c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  40:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  44:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  48:	0c 94 35 02 	jmp	0x46a	; 0x46a <__vector_18>
  4c:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__vector_19>
  50:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  54:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  58:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  5c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  60:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  64:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  68:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  6c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  70:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  74:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  78:	0c 94 fb 02 	jmp	0x5f6	; 0x5f6 <__vector_30>
  7c:	0c 94 31 03 	jmp	0x662	; 0x662 <__vector_31>
  80:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  84:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  88:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>

0000008c <__c.1664>:
  8c:	42 75 66 66 65 72 20 6f 76 65 72 66 6c 6f 77 20     Buffer overflow 
  9c:	65 72 72 6f 72 3a 20 00                             error: .

000000a4 <__c.1662>:
  a4:	55 41 52 54 20 4f 76 65 72 72 75 6e 20 45 72 72     UART Overrun Err
  b4:	6f 72 3a 20 00                                      or: .

000000b9 <__c.1660>:
  b9:	55 41 52 54 20 46 72 61 6d 65 20 45 72 72 6f 72     UART Frame Error
  c9:	3a 20 00                                            : .

000000cc <__c.1658>:
  cc:	53 74 72 69 6e 67 20 73 74 6f 72 65 64 20 69 6e     String stored in
  dc:	20 46 4c 41 53 48 0a 00                              FLASH..

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d0 e1       	ldi	r29, 0x10	; 16
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
  f0:	11 e0       	ldi	r17, 0x01	; 1
  f2:	a0 e0       	ldi	r26, 0x00	; 0
  f4:	b1 e0       	ldi	r27, 0x01	; 1
  f6:	ec e2       	ldi	r30, 0x2C	; 44
  f8:	f8 e0       	ldi	r31, 0x08	; 8
  fa:	00 e0       	ldi	r16, 0x00	; 0
  fc:	0b bf       	out	0x3b, r16	; 59
  fe:	02 c0       	rjmp	.+4      	; 0x104 <__do_copy_data+0x14>
 100:	07 90       	elpm	r0, Z+
 102:	0d 92       	st	X+, r0
 104:	ac 31       	cpi	r26, 0x1C	; 28
 106:	b1 07       	cpc	r27, r17
 108:	d9 f7       	brne	.-10     	; 0x100 <__do_copy_data+0x10>

0000010a <__do_clear_bss>:
 10a:	11 e0       	ldi	r17, 0x01	; 1
 10c:	ac e1       	ldi	r26, 0x1C	; 28
 10e:	b1 e0       	ldi	r27, 0x01	; 1
 110:	01 c0       	rjmp	.+2      	; 0x114 <.do_clear_bss_start>

00000112 <.do_clear_bss_loop>:
 112:	1d 92       	st	X+, r1

00000114 <.do_clear_bss_start>:
 114:	a6 3a       	cpi	r26, 0xA6	; 166
 116:	b1 07       	cpc	r27, r17
 118:	e1 f7       	brne	.-8      	; 0x112 <.do_clear_bss_loop>
 11a:	0e 94 c8 01 	call	0x390	; 0x390 <main>
 11e:	0c 94 14 04 	jmp	0x828	; 0x828 <_exit>

00000122 <__bad_interrupt>:
 122:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000126 <lcd_write_4>:
  Exit:     no parameters
  Notes:    use either time delays or the busy flag
*/
void lcd_write_4(uint8_t theByte)
{
    lcd_D7_port &= ~(1<<lcd_D7_bit);                        // assume that data is '0'
 126:	af 98       	cbi	0x15, 7	; 21
    if (theByte & 1<<7) lcd_D7_port |= (1<<lcd_D7_bit);     // make data = '1' if necessary
 128:	88 23       	and	r24, r24
 12a:	0c f4       	brge	.+2      	; 0x12e <lcd_write_4+0x8>
 12c:	af 9a       	sbi	0x15, 7	; 21

    lcd_D6_port &= ~(1<<lcd_D6_bit);                        // repeat for each data bit
 12e:	ae 98       	cbi	0x15, 6	; 21
    if (theByte & 1<<6) lcd_D6_port |= (1<<lcd_D6_bit);
 130:	86 fd       	sbrc	r24, 6
 132:	ae 9a       	sbi	0x15, 6	; 21

    lcd_D5_port &= ~(1<<lcd_D5_bit);
 134:	ad 98       	cbi	0x15, 5	; 21
    if (theByte & 1<<5) lcd_D5_port |= (1<<lcd_D5_bit);
 136:	85 fd       	sbrc	r24, 5
 138:	ad 9a       	sbi	0x15, 5	; 21

    lcd_D4_port &= ~(1<<lcd_D4_bit);
 13a:	ac 98       	cbi	0x15, 4	; 21
    if (theByte & 1<<4) lcd_D4_port |= (1<<lcd_D4_bit);
 13c:	84 fd       	sbrc	r24, 4
 13e:	ac 9a       	sbi	0x15, 4	; 21

// write the data
                                                    // 'Address set-up time' (40 nS)
    lcd_E_port |= (1<<lcd_E_bit);                   // Enable pin high
 140:	97 9a       	sbi	0x12, 7	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 142:	00 00       	nop
    _delay_us(1);                                   // implement 'Data set-up time' (80 nS) and 'Enable pulse width' (230 nS)
    lcd_E_port &= ~(1<<lcd_E_bit);                  // Enable pin low
 144:	97 98       	cbi	0x12, 7	; 18
 146:	00 00       	nop
    _delay_us(1);                                   // implement 'Data hold time' (10 nS) and 'Enable cycle time' (500 nS)
}
 148:	08 95       	ret

0000014a <lcd_write_instruction_4d>:
  Entry:    (theInstruction) is the information to be sent to the instruction register
  Exit:     no parameters
  Notes:    does not deal with RW (busy flag is not implemented)
*/
void lcd_write_instruction_4d(uint8_t theInstruction)
{
 14a:	1f 93       	push	r17
 14c:	18 2f       	mov	r17, r24
    lcd_RS_port &= ~(1<<lcd_RS_bit);                // select the Instruction Register (RS low)
 14e:	95 98       	cbi	0x12, 5	; 18
    lcd_E_port &= ~(1<<lcd_E_bit);                  // make sure E is initially low
 150:	97 98       	cbi	0x12, 7	; 18
    lcd_write_4(theInstruction);                    // write the upper 4-bits of the data
 152:	0e 94 93 00 	call	0x126	; 0x126 <lcd_write_4>
    lcd_write_4(theInstruction << 4);               // write the lower 4-bits of the data
 156:	81 2f       	mov	r24, r17
 158:	82 95       	swap	r24
 15a:	80 7f       	andi	r24, 0xF0	; 240
 15c:	0e 94 93 00 	call	0x126	; 0x126 <lcd_write_4>
}
 160:	1f 91       	pop	r17
 162:	08 95       	ret

00000164 <lcd_write_character_4d>:
  Exit:     no parameters
  Notes:    does not deal with RW (busy flag is not implemented)
*/

void lcd_write_character_4d(uint8_t theData)
{
 164:	1f 93       	push	r17
 166:	18 2f       	mov	r17, r24
    lcd_RS_port |= (1<<lcd_RS_bit);                 // select the Data Register (RS high)
 168:	95 9a       	sbi	0x12, 5	; 18
    lcd_E_port &= ~(1<<lcd_E_bit);                  // make sure E is initially low
 16a:	97 98       	cbi	0x12, 7	; 18
    lcd_write_4(theData);                           // write the upper 4-bits of the data
 16c:	0e 94 93 00 	call	0x126	; 0x126 <lcd_write_4>
    lcd_write_4(theData << 4);                      // write the lower 4-bits of the data
 170:	81 2f       	mov	r24, r17
 172:	82 95       	swap	r24
 174:	80 7f       	andi	r24, 0xF0	; 240
 176:	0e 94 93 00 	call	0x126	; 0x126 <lcd_write_4>
}
 17a:	1f 91       	pop	r17
 17c:	08 95       	ret

0000017e <lcd_write_string_4d>:
  Entry:    (theString) is the string to be displayed
  Exit:     no parameters
  Notes:    uses time delays rather than checking the busy flag
*/
void lcd_write_string_4d(uint8_t theString[])
{
 17e:	0f 93       	push	r16
 180:	1f 93       	push	r17
 182:	df 93       	push	r29
 184:	cf 93       	push	r28
 186:	00 d0       	rcall	.+0      	; 0x188 <lcd_write_string_4d+0xa>
 188:	cd b7       	in	r28, 0x3d	; 61
 18a:	de b7       	in	r29, 0x3e	; 62
 18c:	8c 01       	movw	r16, r24
    volatile int i = 0;                             // character counter*/
 18e:	1a 82       	std	Y+2, r1	; 0x02
 190:	19 82       	std	Y+1, r1	; 0x01
    while (theString[i] != 0)
 192:	e9 81       	ldd	r30, Y+1	; 0x01
 194:	fa 81       	ldd	r31, Y+2	; 0x02
 196:	e8 0f       	add	r30, r24
 198:	f9 1f       	adc	r31, r25
 19a:	80 81       	ld	r24, Z
 19c:	88 23       	and	r24, r24
 19e:	b9 f0       	breq	.+46     	; 0x1ce <lcd_write_string_4d+0x50>
    {
        lcd_write_character_4d(theString[i]);
 1a0:	e9 81       	ldd	r30, Y+1	; 0x01
 1a2:	fa 81       	ldd	r31, Y+2	; 0x02
 1a4:	e0 0f       	add	r30, r16
 1a6:	f1 1f       	adc	r31, r17
 1a8:	80 81       	ld	r24, Z
 1aa:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_write_character_4d>
        i++;
 1ae:	89 81       	ldd	r24, Y+1	; 0x01
 1b0:	9a 81       	ldd	r25, Y+2	; 0x02
 1b2:	01 96       	adiw	r24, 0x01	; 1
 1b4:	9a 83       	std	Y+2, r25	; 0x02
 1b6:	89 83       	std	Y+1, r24	; 0x01
 1b8:	8a e1       	ldi	r24, 0x1A	; 26
 1ba:	8a 95       	dec	r24
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <lcd_write_string_4d+0x3c>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <lcd_write_string_4d+0x42>
  Notes:    uses time delays rather than checking the busy flag
*/
void lcd_write_string_4d(uint8_t theString[])
{
    volatile int i = 0;                             // character counter*/
    while (theString[i] != 0)
 1c0:	e9 81       	ldd	r30, Y+1	; 0x01
 1c2:	fa 81       	ldd	r31, Y+2	; 0x02
 1c4:	e0 0f       	add	r30, r16
 1c6:	f1 1f       	adc	r31, r17
 1c8:	80 81       	ld	r24, Z
 1ca:	88 23       	and	r24, r24
 1cc:	49 f7       	brne	.-46     	; 0x1a0 <lcd_write_string_4d+0x22>
    {
        lcd_write_character_4d(theString[i]);
        i++;
        _delay_us(80);                              // 40 uS delay (min)
    }
}
 1ce:	0f 90       	pop	r0
 1d0:	0f 90       	pop	r0
 1d2:	cf 91       	pop	r28
 1d4:	df 91       	pop	r29
 1d6:	1f 91       	pop	r17
 1d8:	0f 91       	pop	r16
 1da:	08 95       	ret

000001dc <lcd_puthex>:
void CopyStringtoLCD(const uint8_t *FlashLoc);
void LCDsendChar(uint8_t ch);


void lcd_puthex(const char data)
{
 1dc:	1f 93       	push	r17
 1de:	18 2f       	mov	r17, r24
 1e0:	8a e1       	ldi	r24, 0x1A	; 26
 1e2:	8a 95       	dec	r24
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <lcd_puthex+0x6>
 1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <lcd_puthex+0xc>
	//lcd_write_character_4d('0');
	//_delay_us(80);
	//print 'x'
	//lcd_write_character_4d('x');
	//_delay_us(80);
	(((data>>4)&0x0F)<=9) ? (temp='0'+((data>>4)&0x0F)) : (temp='A'+ ((data>>4)&0x0F)-0x0A);
 1e8:	81 2f       	mov	r24, r17
 1ea:	82 95       	swap	r24
 1ec:	8f 70       	andi	r24, 0x0F	; 15
 1ee:	28 2f       	mov	r18, r24
 1f0:	30 e0       	ldi	r19, 0x00	; 0
 1f2:	2a 30       	cpi	r18, 0x0A	; 10
 1f4:	31 05       	cpc	r19, r1
 1f6:	14 f4       	brge	.+4      	; 0x1fc <lcd_puthex+0x20>
 1f8:	80 5d       	subi	r24, 0xD0	; 208
 1fa:	01 c0       	rjmp	.+2      	; 0x1fe <lcd_puthex+0x22>
 1fc:	89 5c       	subi	r24, 0xC9	; 201
 1fe:	9a e1       	ldi	r25, 0x1A	; 26
 200:	9a 95       	dec	r25
 202:	f1 f7       	brne	.-4      	; 0x200 <lcd_puthex+0x24>
 204:	00 c0       	rjmp	.+0      	; 0x206 <lcd_puthex+0x2a>
	_delay_us(80);
	//print high nibble as hex
	lcd_write_character_4d(temp);
 206:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_write_character_4d>
 20a:	8a e1       	ldi	r24, 0x1A	; 26
 20c:	8a 95       	dec	r24
 20e:	f1 f7       	brne	.-4      	; 0x20c <lcd_puthex+0x30>
 210:	00 c0       	rjmp	.+0      	; 0x212 <lcd_puthex+0x36>
	_delay_us(80);
	((data&0x0F)<=9) ? (temp='0'+ (data&0x0F)) : (temp='A'+ (data&0x0F)-0x0A);
 212:	21 2f       	mov	r18, r17
 214:	30 e0       	ldi	r19, 0x00	; 0
 216:	2f 70       	andi	r18, 0x0F	; 15
 218:	30 70       	andi	r19, 0x00	; 0
 21a:	2a 30       	cpi	r18, 0x0A	; 10
 21c:	31 05       	cpc	r19, r1
 21e:	24 f4       	brge	.+8      	; 0x228 <lcd_puthex+0x4c>
 220:	1f 70       	andi	r17, 0x0F	; 15
 222:	81 2f       	mov	r24, r17
 224:	80 5d       	subi	r24, 0xD0	; 208
 226:	03 c0       	rjmp	.+6      	; 0x22e <lcd_puthex+0x52>
 228:	1f 70       	andi	r17, 0x0F	; 15
 22a:	81 2f       	mov	r24, r17
 22c:	89 5c       	subi	r24, 0xC9	; 201
	lcd_write_character_4d(temp);
 22e:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_write_character_4d>
 232:	9a e1       	ldi	r25, 0x1A	; 26
 234:	9a 95       	dec	r25
 236:	f1 f7       	brne	.-4      	; 0x234 <lcd_puthex+0x58>
 238:	00 c0       	rjmp	.+0      	; 0x23a <lcd_puthex+0x5e>
	_delay_us(80);
	//print low nibble as hex
}
 23a:	1f 91       	pop	r17
 23c:	08 95       	ret

0000023e <lcd_init_4d>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 23e:	87 ea       	ldi	r24, 0xA7	; 167
 240:	91 e6       	ldi	r25, 0x61	; 97
 242:	01 97       	sbiw	r24, 0x01	; 1
 244:	f1 f7       	brne	.-4      	; 0x242 <lcd_init_4d+0x4>
 246:	00 c0       	rjmp	.+0      	; 0x248 <lcd_init_4d+0xa>
 248:	00 00       	nop
void lcd_init_4d(void)
{
// Power-up delay
    _delay_ms(100);                                 // initial 40 mSec delay

    lcd_RS_port &= ~(1<<lcd_RS_bit);                // select the Instruction Register (RS low)
 24a:	95 98       	cbi	0x12, 5	; 18
    lcd_E_port &= ~(1<<lcd_E_bit);                  // make sure E is initially low
 24c:	97 98       	cbi	0x12, 7	; 18

// Reset the LCD controller
    lcd_write_4(lcd_FunctionReset);                 // first part of reset sequence
 24e:	80 e3       	ldi	r24, 0x30	; 48
 250:	0e 94 93 00 	call	0x126	; 0x126 <lcd_write_4>
 254:	83 ec       	ldi	r24, 0xC3	; 195
 256:	99 e0       	ldi	r25, 0x09	; 9
 258:	01 97       	sbiw	r24, 0x01	; 1
 25a:	f1 f7       	brne	.-4      	; 0x258 <lcd_init_4d+0x1a>
 25c:	00 c0       	rjmp	.+0      	; 0x25e <lcd_init_4d+0x20>
 25e:	00 00       	nop
    _delay_ms(10);                                  // 4.1 mS delay (min)

    lcd_write_4(lcd_FunctionReset);                 // second part of reset sequence
 260:	80 e3       	ldi	r24, 0x30	; 48
 262:	0e 94 93 00 	call	0x126	; 0x126 <lcd_write_4>
 266:	89 ef       	ldi	r24, 0xF9	; 249
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	01 97       	sbiw	r24, 0x01	; 1
 26c:	f1 f7       	brne	.-4      	; 0x26a <lcd_init_4d+0x2c>
 26e:	00 c0       	rjmp	.+0      	; 0x270 <lcd_init_4d+0x32>
 270:	00 00       	nop
    _delay_ms(1);                                 // 100uS delay (min)

    lcd_write_4(lcd_FunctionReset);                 // third part of reset sequence
 272:	80 e3       	ldi	r24, 0x30	; 48
 274:	0e 94 93 00 	call	0x126	; 0x126 <lcd_write_4>
 278:	89 ef       	ldi	r24, 0xF9	; 249
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	01 97       	sbiw	r24, 0x01	; 1
 27e:	f1 f7       	brne	.-4      	; 0x27c <lcd_init_4d+0x3e>
 280:	00 c0       	rjmp	.+0      	; 0x282 <lcd_init_4d+0x44>
 282:	00 00       	nop
// Preliminary Function Set instruction - used only to set the 4-bit mode.
// The number of lines or the font cannot be set at this time since the controller is still in the
//  8-bit mode, but the data transfer mode can be changed since this parameter is determined by one 
//  of the upper four bits of the instruction.
 
    lcd_write_4(lcd_FunctionSet4bit);               // set 4-bit mode
 284:	88 e2       	ldi	r24, 0x28	; 40
 286:	0e 94 93 00 	call	0x126	; 0x126 <lcd_write_4>
 28a:	89 ef       	ldi	r24, 0xF9	; 249
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	01 97       	sbiw	r24, 0x01	; 1
 290:	f1 f7       	brne	.-4      	; 0x28e <lcd_init_4d+0x50>
 292:	00 c0       	rjmp	.+0      	; 0x294 <lcd_init_4d+0x56>
 294:	00 00       	nop
    _delay_ms(1);                                  // 40uS delay (min)

// Function Set instruction
    lcd_write_instruction_4d(lcd_FunctionSet4bit);   // set mode, lines, and font
 296:	88 e2       	ldi	r24, 0x28	; 40
 298:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_write_instruction_4d>
 29c:	89 ef       	ldi	r24, 0xF9	; 249
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	01 97       	sbiw	r24, 0x01	; 1
 2a2:	f1 f7       	brne	.-4      	; 0x2a0 <lcd_init_4d+0x62>
 2a4:	00 c0       	rjmp	.+0      	; 0x2a6 <lcd_init_4d+0x68>
 2a6:	00 00       	nop
// The next three instructions are specified in the data sheet as part of the initialization routine, 
//  so it is a good idea (but probably not necessary) to do them just as specified and then redo them 
//  later if the application requires a different configuration.

// Display On/Off Control instruction
    lcd_write_instruction_4d(lcd_DisplayOff);        // turn display OFF
 2a8:	88 e0       	ldi	r24, 0x08	; 8
 2aa:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_write_instruction_4d>
 2ae:	89 ef       	ldi	r24, 0xF9	; 249
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	01 97       	sbiw	r24, 0x01	; 1
 2b4:	f1 f7       	brne	.-4      	; 0x2b2 <lcd_init_4d+0x74>
 2b6:	00 c0       	rjmp	.+0      	; 0x2b8 <lcd_init_4d+0x7a>
 2b8:	00 00       	nop
    _delay_ms(1);                                  // 40uS delay (min)

// Clear Display instruction
    lcd_write_instruction_4d(lcd_Clear);             // clear display RAM
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_write_instruction_4d>
 2c0:	87 ee       	ldi	r24, 0xE7	; 231
 2c2:	93 e0       	ldi	r25, 0x03	; 3
 2c4:	01 97       	sbiw	r24, 0x01	; 1
 2c6:	f1 f7       	brne	.-4      	; 0x2c4 <lcd_init_4d+0x86>
 2c8:	00 c0       	rjmp	.+0      	; 0x2ca <lcd_init_4d+0x8c>
 2ca:	00 00       	nop
    _delay_ms(4);                                   // 1.64 mS delay (min)

// ; Entry Mode Set instruction
    lcd_write_instruction_4d(lcd_EntryMode);         // set desired shift characteristics
 2cc:	86 e0       	ldi	r24, 0x06	; 6
 2ce:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_write_instruction_4d>
 2d2:	89 ef       	ldi	r24, 0xF9	; 249
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	01 97       	sbiw	r24, 0x01	; 1
 2d8:	f1 f7       	brne	.-4      	; 0x2d6 <lcd_init_4d+0x98>
 2da:	00 c0       	rjmp	.+0      	; 0x2dc <lcd_init_4d+0x9e>
 2dc:	00 00       	nop

// This is the end of the LCD controller initialization as specified in the data sheet, but the display
//  has been left in the OFF condition.  This is a good time to turn the display back ON.
 
// Display On/Off Control instruction
    lcd_write_instruction_4d(lcd_DisplayOn);         // turn the display ON
 2de:	8c e0       	ldi	r24, 0x0C	; 12
 2e0:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_write_instruction_4d>
 2e4:	89 ef       	ldi	r24, 0xF9	; 249
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	01 97       	sbiw	r24, 0x01	; 1
 2ea:	f1 f7       	brne	.-4      	; 0x2e8 <lcd_init_4d+0xaa>
 2ec:	00 c0       	rjmp	.+0      	; 0x2ee <lcd_init_4d+0xb0>
 2ee:	00 00       	nop
    _delay_ms(1);                                  // 40uS delay (min)
}
 2f0:	08 95       	ret

000002f2 <LCDsendChar>:

void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{

	//4 bit part
	PORTC=(ch&0b11110000);
 2f2:	98 2f       	mov	r25, r24
 2f4:	90 7f       	andi	r25, 0xF0	; 240
 2f6:	95 bb       	out	0x15, r25	; 21
	PORTD|=1<<lcd_RS_bit ;
 2f8:	95 9a       	sbi	0x12, 5	; 18
	PORTG|=1<<lcd_E_bit;		
 2fa:	e5 e6       	ldi	r30, 0x65	; 101
 2fc:	f0 e0       	ldi	r31, 0x00	; 0
 2fe:	90 81       	ld	r25, Z
 300:	90 68       	ori	r25, 0x80	; 128
 302:	90 83       	st	Z, r25
 304:	a9 ef       	ldi	r26, 0xF9	; 249
 306:	b0 e0       	ldi	r27, 0x00	; 0
 308:	11 97       	sbiw	r26, 0x01	; 1
 30a:	f1 f7       	brne	.-4      	; 0x308 <LCDsendChar+0x16>
 30c:	00 c0       	rjmp	.+0      	; 0x30e <LCDsendChar+0x1c>
 30e:	00 00       	nop
	_delay_ms(1);
	PORTG&=~(1<<lcd_E_bit);	
 310:	90 81       	ld	r25, Z
 312:	9f 77       	andi	r25, 0x7F	; 127
 314:	90 83       	st	Z, r25
	PORTD&=~(1<<lcd_RS_bit);
 316:	95 98       	cbi	0x12, 5	; 18
 318:	a9 ef       	ldi	r26, 0xF9	; 249
 31a:	b0 e0       	ldi	r27, 0x00	; 0
 31c:	11 97       	sbiw	r26, 0x01	; 1
 31e:	f1 f7       	brne	.-4      	; 0x31c <LCDsendChar+0x2a>
 320:	00 c0       	rjmp	.+0      	; 0x322 <LCDsendChar+0x30>
 322:	00 00       	nop
	_delay_ms(1);
	PORTC=((ch&0b00001111)<<4);
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	82 95       	swap	r24
 328:	92 95       	swap	r25
 32a:	90 7f       	andi	r25, 0xF0	; 240
 32c:	98 27       	eor	r25, r24
 32e:	80 7f       	andi	r24, 0xF0	; 240
 330:	98 27       	eor	r25, r24
 332:	85 bb       	out	0x15, r24	; 21
	PORTD|=1<<lcd_RS_bit;
 334:	95 9a       	sbi	0x12, 5	; 18
	PORTG|=1<<lcd_E_bit;		
 336:	80 81       	ld	r24, Z
 338:	80 68       	ori	r24, 0x80	; 128
 33a:	80 83       	st	Z, r24
 33c:	89 ef       	ldi	r24, 0xF9	; 249
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	01 97       	sbiw	r24, 0x01	; 1
 342:	f1 f7       	brne	.-4      	; 0x340 <LCDsendChar+0x4e>
 344:	00 c0       	rjmp	.+0      	; 0x346 <LCDsendChar+0x54>
 346:	00 00       	nop
	_delay_ms(1);
	PORTG&=~(1<<lcd_E_bit);	
 348:	80 81       	ld	r24, Z
 34a:	8f 77       	andi	r24, 0x7F	; 127
 34c:	80 83       	st	Z, r24
	PORTD&=~(1<<lcd_RS_bit);
 34e:	95 98       	cbi	0x12, 5	; 18
 350:	a9 ef       	ldi	r26, 0xF9	; 249
 352:	b0 e0       	ldi	r27, 0x00	; 0
 354:	11 97       	sbiw	r26, 0x01	; 1
 356:	f1 f7       	brne	.-4      	; 0x354 <LCDsendChar+0x62>
 358:	00 c0       	rjmp	.+0      	; 0x35a <LCDsendChar+0x68>
 35a:	00 00       	nop
	_delay_ms(1);
}
 35c:	08 95       	ret

0000035e <CopyStringtoLCD>:
    _delay_us(1);                                   // implement 'Data set-up time' (80 nS) and 'Enable pulse width' (230 nS)
    lcd_E_port &= ~(1<<lcd_E_bit);                  // Enable pin low
    _delay_us(1);                                   // implement 'Data hold time' (10 nS) and 'Enable cycle time' (500 nS)
}
void CopyStringtoLCD(const uint8_t *FlashLoc)
{
 35e:	1f 93       	push	r17
 360:	cf 93       	push	r28
 362:	df 93       	push	r29
 364:	ec 01       	movw	r28, r24
	uint8_t i;
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
 366:	fe 01       	movw	r30, r28
 368:	24 91       	lpm	r18, Z+
 36a:	22 23       	and	r18, r18
 36c:	69 f0       	breq	.+26     	; 0x388 <CopyStringtoLCD+0x2a>
 36e:	10 e0       	ldi	r17, 0x00	; 0
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
 370:	fc 01       	movw	r30, r24
 372:	84 91       	lpm	r24, Z+
 374:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LCDsendChar>
    _delay_us(1);                                   // implement 'Data hold time' (10 nS) and 'Enable cycle time' (500 nS)
}
void CopyStringtoLCD(const uint8_t *FlashLoc)
{
	uint8_t i;
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
 378:	1f 5f       	subi	r17, 0xFF	; 255
 37a:	ce 01       	movw	r24, r28
 37c:	81 0f       	add	r24, r17
 37e:	91 1d       	adc	r25, r1
 380:	fc 01       	movw	r30, r24
 382:	24 91       	lpm	r18, Z+
 384:	22 23       	and	r18, r18
 386:	a1 f7       	brne	.-24     	; 0x370 <CopyStringtoLCD+0x12>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
 388:	df 91       	pop	r29
 38a:	cf 91       	pop	r28
 38c:	1f 91       	pop	r17
 38e:	08 95       	ret

00000390 <main>:
/* Define UART buad rate here */
#define UART_BAUD_RATE      9600      


int main(void)
{
 390:	af 92       	push	r10
 392:	bf 92       	push	r11
 394:	cf 92       	push	r12
 396:	df 92       	push	r13
 398:	ef 92       	push	r14
 39a:	ff 92       	push	r15
 39c:	0f 93       	push	r16
 39e:	1f 93       	push	r17
 3a0:	df 93       	push	r29
 3a2:	cf 93       	push	r28
 3a4:	cd b7       	in	r28, 0x3d	; 61
 3a6:	de b7       	in	r29, 0x3e	; 62
 3a8:	27 97       	sbiw	r28, 0x07	; 7
 3aa:	0f b6       	in	r0, 0x3f	; 63
 3ac:	f8 94       	cli
 3ae:	de bf       	out	0x3e, r29	; 62
 3b0:	0f be       	out	0x3f, r0	; 63
 3b2:	cd bf       	out	0x3d, r28	; 61
	DDRC = 0xFF;    // lcd pins
 3b4:	8f ef       	ldi	r24, 0xFF	; 255
 3b6:	84 bb       	out	0x14, r24	; 20
	// configure the microprocessor pins for the control lines
    lcd_E_ddr |= (1<<lcd_E_bit);                    // E line - output
 3b8:	8f 9a       	sbi	0x11, 7	; 17
    lcd_RS_ddr |= (1<<lcd_RS_bit);                  // RS line - output
 3ba:	8d 9a       	sbi	0x11, 5	; 17
 
    lcd_RS_port &= ~(1<<lcd_RS_bit);
 3bc:	95 98       	cbi	0x12, 5	; 18
	
    unsigned int c;
    char buffer[7];
    int  num=134;

    lcd_init_4d();
 3be:	0e 94 1f 01 	call	0x23e	; 0x23e <lcd_init_4d>
	lcd_write_instruction_4d(lcd_Clear);
 3c2:	81 e0       	ldi	r24, 0x01	; 1
 3c4:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_write_instruction_4d>
 3c8:	83 ec       	ldi	r24, 0xC3	; 195
 3ca:	99 e0       	ldi	r25, 0x09	; 9
 3cc:	01 97       	sbiw	r24, 0x01	; 1
 3ce:	f1 f7       	brne	.-4      	; 0x3cc <main+0x3c>
 3d0:	00 c0       	rjmp	.+0      	; 0x3d2 <main+0x42>
 3d2:	00 00       	nop
    _delay_ms(10);
    lcd_write_string_4d("main");
 3d4:	80 e0       	ldi	r24, 0x00	; 0
 3d6:	91 e0       	ldi	r25, 0x01	; 1
 3d8:	0e 94 bf 00 	call	0x17e	; 0x17e <lcd_write_string_4d>
     *  with the macro 
     *  UART_BAUD_SELECT() (normal speed mode )
     *  or 
     *  UART_BAUD_SELECT_DOUBLE_SPEED() ( double speed mode)
     */
    uart1_init( UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU) ); 
 3dc:	86 e0       	ldi	r24, 0x06	; 6
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	0e 94 60 03 	call	0x6c0	; 0x6c0 <uart1_init>
    
    /*
     * now enable interrupt, since UART library is interrupt controlled
     */
    sei();
 3e4:	78 94       	sei
     *  The string is buffered by the uart library in a circular buffer
     *  and one character at a time is transmitted to the UART using interrupts.
     *  uart_puts() blocks if it can not write the whole string to the circular 
     *  buffer
     */
    uart1_puts("String stored in SRAM\n");
 3e6:	85 e0       	ldi	r24, 0x05	; 5
 3e8:	91 e0       	ldi	r25, 0x01	; 1
 3ea:	0e 94 ae 03 	call	0x75c	; 0x75c <uart1_puts>
    
    /*
     * Transmit string from program memory to UART
     */
    uart1_puts_P("String stored in FLASH\n");
 3ee:	8c ec       	ldi	r24, 0xCC	; 204
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	0e 94 bd 03 	call	0x77a	; 0x77a <uart1_puts_p>
        
    /* 
     * Use standard avr-libc functions to convert numbers into string
     * before transmitting via UART
     */     
    itoa( num, buffer, 10);   // convert interger into string (decimal format)         
 3f6:	86 e8       	ldi	r24, 0x86	; 134
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	8e 01       	movw	r16, r28
 3fc:	0f 5f       	subi	r16, 0xFF	; 255
 3fe:	1f 4f       	sbci	r17, 0xFF	; 255
 400:	b8 01       	movw	r22, r16
 402:	4a e0       	ldi	r20, 0x0A	; 10
 404:	50 e0       	ldi	r21, 0x00	; 0
 406:	0e 94 cf 03 	call	0x79e	; 0x79e <itoa>
    uart1_puts(buffer);        // and transmit string to UART
 40a:	c8 01       	movw	r24, r16
 40c:	0e 94 ae 03 	call	0x75c	; 0x75c <uart1_puts>

    
    /*
     * Transmit single character to UART
     */
    uart1_putc('\r');
 410:	8d e0       	ldi	r24, 0x0D	; 13
 412:	0e 94 99 03 	call	0x732	; 0x732 <uart1_putc>
            {
                /* 
                 * We are not reading the receive buffer fast enough,
                 * one or more received character have been dropped 
                 */
                uart1_puts_P("Buffer overflow error: ");
 416:	0f 2e       	mov	r0, r31
 418:	fc e8       	ldi	r31, 0x8C	; 140
 41a:	ef 2e       	mov	r14, r31
 41c:	f0 e0       	ldi	r31, 0x00	; 0
 41e:	ff 2e       	mov	r15, r31
 420:	f0 2d       	mov	r31, r0
                /* 
                 * Overrun, a character already present in the UART UDR register was 
                 * not read by the interrupt handler before the next character arrived,
                 * one or more received characters have been dropped
                 */
                uart1_puts_P("UART Overrun Error: ");
 422:	0f 2e       	mov	r0, r31
 424:	f4 ea       	ldi	r31, 0xA4	; 164
 426:	cf 2e       	mov	r12, r31
 428:	f0 e0       	ldi	r31, 0x00	; 0
 42a:	df 2e       	mov	r13, r31
 42c:	f0 2d       	mov	r31, r0
             * check for Frame or Overrun error
             */
            if ( c & UART_FRAME_ERROR )
            {
                /* Framing Error detected, i.e no stop bit detected */
                uart1_puts_P("UART Frame Error: ");
 42e:	0f 2e       	mov	r0, r31
 430:	f9 eb       	ldi	r31, 0xB9	; 185
 432:	af 2e       	mov	r10, r31
 434:	f0 e0       	ldi	r31, 0x00	; 0
 436:	bf 2e       	mov	r11, r31
 438:	f0 2d       	mov	r31, r0
         * uart_getc() returns in the lower byte the received character and 
         * in the higher byte (bitmask) the last receive error
         * UART_NO_DATA is returned when no data is available.
         *
         */
        c = uart1_getc();
 43a:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <uart1_getc>
 43e:	8c 01       	movw	r16, r24
        if ( c & UART_NO_DATA )
 440:	90 fd       	sbrc	r25, 0
 442:	fb cf       	rjmp	.-10     	; 0x43a <main+0xaa>
        {
            /*
             * new data available from UART
             * check for Frame or Overrun error
             */
            if ( c & UART_FRAME_ERROR )
 444:	94 ff       	sbrs	r25, 4
 446:	03 c0       	rjmp	.+6      	; 0x44e <main+0xbe>
            {
                /* Framing Error detected, i.e no stop bit detected */
                uart1_puts_P("UART Frame Error: ");
 448:	c5 01       	movw	r24, r10
 44a:	0e 94 bd 03 	call	0x77a	; 0x77a <uart1_puts_p>
            }
            if ( c & UART_OVERRUN_ERROR )
 44e:	13 ff       	sbrs	r17, 3
 450:	03 c0       	rjmp	.+6      	; 0x458 <main+0xc8>
                /* 
                 * Overrun, a character already present in the UART UDR register was 
                 * not read by the interrupt handler before the next character arrived,
                 * one or more received characters have been dropped
                 */
                uart1_puts_P("UART Overrun Error: ");
 452:	c6 01       	movw	r24, r12
 454:	0e 94 bd 03 	call	0x77a	; 0x77a <uart1_puts_p>
            }
            if ( c & UART_BUFFER_OVERFLOW )
 458:	11 ff       	sbrs	r17, 1
 45a:	03 c0       	rjmp	.+6      	; 0x462 <main+0xd2>
            {
                /* 
                 * We are not reading the receive buffer fast enough,
                 * one or more received character have been dropped 
                 */
                uart1_puts_P("Buffer overflow error: ");
 45c:	c7 01       	movw	r24, r14
 45e:	0e 94 bd 03 	call	0x77a	; 0x77a <uart1_puts_p>
            }
            /* 
             * send received character back
             */
            uart1_putc( (unsigned char)c );
 462:	80 2f       	mov	r24, r16
 464:	0e 94 99 03 	call	0x732	; 0x732 <uart1_putc>
 468:	e8 cf       	rjmp	.-48     	; 0x43a <main+0xaa>

0000046a <__vector_18>:
ISR (UART0_RECEIVE_INTERRUPT)	
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
 46a:	1f 92       	push	r1
 46c:	0f 92       	push	r0
 46e:	0f b6       	in	r0, 0x3f	; 63
 470:	0f 92       	push	r0
 472:	0b b6       	in	r0, 0x3b	; 59
 474:	0f 92       	push	r0
 476:	11 24       	eor	r1, r1
 478:	2f 93       	push	r18
 47a:	3f 93       	push	r19
 47c:	8f 93       	push	r24
 47e:	9f 93       	push	r25
 480:	ef 93       	push	r30
 482:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */
    usr  = UART0_STATUS;
 484:	2b b1       	in	r18, 0x0b	; 11
    data = UART0_DATA;
 486:	3c b1       	in	r19, 0x0c	; 12
#elif defined(FE) && defined(DOR)
    lastRxError = usr & (_BV(FE)|_BV(DOR) );
#endif

    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
 488:	80 91 83 01 	lds	r24, 0x0183
 48c:	8f 5f       	subi	r24, 0xFF	; 255
 48e:	8f 71       	andi	r24, 0x1F	; 31
    
    if ( tmphead == UART_RxTail ) {
 490:	90 91 84 01 	lds	r25, 0x0184
 494:	89 17       	cp	r24, r25
 496:	49 f0       	breq	.+18     	; 0x4aa <__vector_18+0x40>
    usr  = UART0_STATUS;
    data = UART0_DATA;
    
    /* get FEn (Frame Error) DORn (Data OverRun) UPEn (USART Parity Error) bits */
#if defined(FE) && defined(DOR) && defined(UPE)
    lastRxError = usr & (_BV(FE)|_BV(DOR)|_BV(UPE) );
 498:	2c 71       	andi	r18, 0x1C	; 28
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART_RxHead = tmphead;
 49a:	80 93 83 01 	sts	0x0183, r24
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
 49e:	e5 e8       	ldi	r30, 0x85	; 133
 4a0:	f1 e0       	ldi	r31, 0x01	; 1
 4a2:	e8 0f       	add	r30, r24
 4a4:	f1 1d       	adc	r31, r1
 4a6:	30 83       	st	Z, r19
 4a8:	01 c0       	rjmp	.+2      	; 0x4ac <__vector_18+0x42>
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
 4aa:	22 e0       	ldi	r18, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError |= lastRxError;   
 4ac:	90 91 a5 01 	lds	r25, 0x01A5
 4b0:	82 2f       	mov	r24, r18
 4b2:	89 2b       	or	r24, r25
 4b4:	80 93 a5 01 	sts	0x01A5, r24
}
 4b8:	ff 91       	pop	r31
 4ba:	ef 91       	pop	r30
 4bc:	9f 91       	pop	r25
 4be:	8f 91       	pop	r24
 4c0:	3f 91       	pop	r19
 4c2:	2f 91       	pop	r18
 4c4:	0f 90       	pop	r0
 4c6:	0b be       	out	0x3b, r0	; 59
 4c8:	0f 90       	pop	r0
 4ca:	0f be       	out	0x3f, r0	; 63
 4cc:	0f 90       	pop	r0
 4ce:	1f 90       	pop	r1
 4d0:	18 95       	reti

000004d2 <__vector_19>:
ISR (UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
 4d2:	1f 92       	push	r1
 4d4:	0f 92       	push	r0
 4d6:	0f b6       	in	r0, 0x3f	; 63
 4d8:	0f 92       	push	r0
 4da:	0b b6       	in	r0, 0x3b	; 59
 4dc:	0f 92       	push	r0
 4de:	11 24       	eor	r1, r1
 4e0:	8f 93       	push	r24
 4e2:	9f 93       	push	r25
 4e4:	ef 93       	push	r30
 4e6:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
 4e8:	90 91 61 01 	lds	r25, 0x0161
 4ec:	80 91 62 01 	lds	r24, 0x0162
 4f0:	98 17       	cp	r25, r24
 4f2:	69 f0       	breq	.+26     	; 0x50e <__vector_19+0x3c>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
 4f4:	80 91 62 01 	lds	r24, 0x0162
 4f8:	8f 5f       	subi	r24, 0xFF	; 255
 4fa:	8f 71       	andi	r24, 0x1F	; 31
        UART_TxTail = tmptail;
 4fc:	80 93 62 01 	sts	0x0162, r24
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
 500:	e3 e6       	ldi	r30, 0x63	; 99
 502:	f1 e0       	ldi	r31, 0x01	; 1
 504:	e8 0f       	add	r30, r24
 506:	f1 1d       	adc	r31, r1
 508:	80 81       	ld	r24, Z
 50a:	8c b9       	out	0x0c, r24	; 12
 50c:	01 c0       	rjmp	.+2      	; 0x510 <__vector_19+0x3e>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
 50e:	55 98       	cbi	0x0a, 5	; 10
    }
}
 510:	ff 91       	pop	r31
 512:	ef 91       	pop	r30
 514:	9f 91       	pop	r25
 516:	8f 91       	pop	r24
 518:	0f 90       	pop	r0
 51a:	0b be       	out	0x3b, r0	; 59
 51c:	0f 90       	pop	r0
 51e:	0f be       	out	0x3f, r0	; 63
 520:	0f 90       	pop	r0
 522:	1f 90       	pop	r1
 524:	18 95       	reti

00000526 <uart_init>:
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
    UART_TxHead = 0;
 526:	10 92 61 01 	sts	0x0161, r1
    UART_TxTail = 0;
 52a:	10 92 62 01 	sts	0x0162, r1
    UART_RxHead = 0;
 52e:	10 92 83 01 	sts	0x0183, r1
    UART_RxTail = 0;
 532:	10 92 84 01 	sts	0x0184, r1
#endif
#endif
#endif

    /* Set baud rate */
    if ( baudrate & 0x8000 )
 536:	99 23       	and	r25, r25
 538:	14 f4       	brge	.+4      	; 0x53e <uart_init+0x18>
    {
        #if UART0_BIT_U2X
        UART0_STATUS = (1<<UART0_BIT_U2X);  //Enable 2x speed 
 53a:	22 e0       	ldi	r18, 0x02	; 2
 53c:	2b b9       	out	0x0b, r18	; 11
        #endif
    } 
    #if defined(UART0_UBRRH)
    UART0_UBRRH = (unsigned char)((baudrate>>8)&0x80) ;
 53e:	29 2f       	mov	r18, r25
 540:	20 78       	andi	r18, 0x80	; 128
 542:	20 93 90 00 	sts	0x0090, r18
    #endif    
    UART0_UBRRL = (unsigned char) (baudrate&0x00FF);
 546:	89 b9       	out	0x09, r24	; 9
      
    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(UART0_BIT_RXCIE)|(1<<UART0_BIT_RXEN)|(1<<UART0_BIT_TXEN);
 548:	88 e9       	ldi	r24, 0x98	; 152
 54a:	8a b9       	out	0x0a, r24	; 10
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef UART0_CONTROLC
    #ifdef UART0_BIT_URSEL
    UART0_CONTROLC = (1<<UART0_BIT_URSEL)|(1<<UART0_BIT_UCSZ1)|(1<<UART0_BIT_UCSZ0);
    #else
    UART0_CONTROLC = (1<<UART0_BIT_UCSZ1)|(1<<UART0_BIT_UCSZ0);
 54c:	86 e0       	ldi	r24, 0x06	; 6
 54e:	80 93 95 00 	sts	0x0095, r24
    #endif 
    #endif

}/* uart_init */
 552:	08 95       	ret

00000554 <uart_getc>:
    unsigned char tmptail;
    unsigned char data;
    unsigned char lastRxError;


    if ( UART_RxHead == UART_RxTail ) {
 554:	90 91 83 01 	lds	r25, 0x0183
 558:	80 91 84 01 	lds	r24, 0x0184
 55c:	98 17       	cp	r25, r24
 55e:	a1 f0       	breq	.+40     	; 0x588 <uart_getc+0x34>
        return UART_NO_DATA;   /* no data available */
    }
    
    /* calculate buffer index */
    tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
 560:	80 91 84 01 	lds	r24, 0x0184
 564:	8f 5f       	subi	r24, 0xFF	; 255
 566:	8f 71       	andi	r24, 0x1F	; 31
    
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
 568:	e5 e8       	ldi	r30, 0x85	; 133
 56a:	f1 e0       	ldi	r31, 0x01	; 1
 56c:	e8 0f       	add	r30, r24
 56e:	f1 1d       	adc	r31, r1
 570:	90 81       	ld	r25, Z
    lastRxError = UART_LastRxError;
 572:	40 91 a5 01 	lds	r20, 0x01A5
    
    /* store buffer index */
    UART_RxTail = tmptail; 
 576:	80 93 84 01 	sts	0x0184, r24
    
    UART_LastRxError = 0;
 57a:	10 92 a5 01 	sts	0x01A5, r1
    return (lastRxError << 8) + data;
 57e:	34 2f       	mov	r19, r20
 580:	20 e0       	ldi	r18, 0x00	; 0
 582:	29 0f       	add	r18, r25
 584:	31 1d       	adc	r19, r1
 586:	02 c0       	rjmp	.+4      	; 0x58c <uart_getc+0x38>
    unsigned char data;
    unsigned char lastRxError;


    if ( UART_RxHead == UART_RxTail ) {
        return UART_NO_DATA;   /* no data available */
 588:	20 e0       	ldi	r18, 0x00	; 0
 58a:	31 e0       	ldi	r19, 0x01	; 1
    UART_RxTail = tmptail; 
    
    UART_LastRxError = 0;
    return (lastRxError << 8) + data;

}/* uart_getc */
 58c:	82 2f       	mov	r24, r18
 58e:	93 2f       	mov	r25, r19
 590:	08 95       	ret

00000592 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 592:	20 91 61 01 	lds	r18, 0x0161
 596:	2f 5f       	subi	r18, 0xFF	; 255
 598:	2f 71       	andi	r18, 0x1F	; 31
    
    while ( tmphead == UART_TxTail ){
 59a:	90 91 62 01 	lds	r25, 0x0162
 59e:	29 17       	cp	r18, r25
 5a0:	e1 f3       	breq	.-8      	; 0x59a <uart_putc+0x8>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
 5a2:	e3 e6       	ldi	r30, 0x63	; 99
 5a4:	f1 e0       	ldi	r31, 0x01	; 1
 5a6:	e2 0f       	add	r30, r18
 5a8:	f1 1d       	adc	r31, r1
 5aa:	80 83       	st	Z, r24
    UART_TxHead = tmphead;
 5ac:	20 93 61 01 	sts	0x0161, r18

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
 5b0:	55 9a       	sbi	0x0a, 5	; 10

}/* uart_putc */
 5b2:	08 95       	ret

000005b4 <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
 5b4:	cf 93       	push	r28
 5b6:	df 93       	push	r29
 5b8:	ec 01       	movw	r28, r24
    while (*s) 
 5ba:	88 81       	ld	r24, Y
 5bc:	88 23       	and	r24, r24
 5be:	31 f0       	breq	.+12     	; 0x5cc <uart_puts+0x18>
Function: uart_puts()
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
 5c0:	21 96       	adiw	r28, 0x01	; 1
{
    while (*s) 
      uart_putc(*s++);
 5c2:	0e 94 c9 02 	call	0x592	; 0x592 <uart_putc>
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    while (*s) 
 5c6:	89 91       	ld	r24, Y+
 5c8:	88 23       	and	r24, r24
 5ca:	d9 f7       	brne	.-10     	; 0x5c2 <uart_puts+0xe>
      uart_putc(*s++);

}/* uart_puts */
 5cc:	df 91       	pop	r29
 5ce:	cf 91       	pop	r28
 5d0:	08 95       	ret

000005d2 <uart_puts_p>:
Purpose:  transmit string from program memory to UART
Input:    program memory string to be transmitted
Returns:  none
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
 5d2:	cf 93       	push	r28
 5d4:	df 93       	push	r29
 5d6:	ec 01       	movw	r28, r24
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
 5d8:	fc 01       	movw	r30, r24
 5da:	84 91       	lpm	r24, Z+
 5dc:	88 23       	and	r24, r24
 5de:	41 f0       	breq	.+16     	; 0x5f0 <uart_puts_p+0x1e>
 5e0:	21 96       	adiw	r28, 0x01	; 1
      uart_putc(c);
 5e2:	0e 94 c9 02 	call	0x592	; 0x592 <uart_putc>
 5e6:	fe 01       	movw	r30, r28
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
 5e8:	21 96       	adiw	r28, 0x01	; 1
 5ea:	84 91       	lpm	r24, Z+
 5ec:	88 23       	and	r24, r24
 5ee:	c9 f7       	brne	.-14     	; 0x5e2 <uart_puts_p+0x10>
      uart_putc(c);

}/* uart_puts_p */
 5f0:	df 91       	pop	r29
 5f2:	cf 91       	pop	r28
 5f4:	08 95       	ret

000005f6 <__vector_30>:
ISR(UART1_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART1 Receive Complete interrupt
Purpose:  called when the UART1 has received a character
**************************************************************************/
{
 5f6:	1f 92       	push	r1
 5f8:	0f 92       	push	r0
 5fa:	0f b6       	in	r0, 0x3f	; 63
 5fc:	0f 92       	push	r0
 5fe:	0b b6       	in	r0, 0x3b	; 59
 600:	0f 92       	push	r0
 602:	11 24       	eor	r1, r1
 604:	2f 93       	push	r18
 606:	3f 93       	push	r19
 608:	8f 93       	push	r24
 60a:	9f 93       	push	r25
 60c:	ef 93       	push	r30
 60e:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */ 
    usr  = UART1_STATUS;
 610:	20 91 9b 00 	lds	r18, 0x009B
    data = UART1_DATA;
 614:	30 91 9c 00 	lds	r19, 0x009C
    
    /* get FEn (Frame Error) DORn (Data OverRun) UPEn (USART Parity Error) bits */
    lastRxError = usr & (_BV(FE1)|_BV(DOR1)|_BV(UPE1) );
            
    /* calculate buffer index */ 
    tmphead = ( UART1_RxHead + 1) & UART_RX_BUFFER_MASK;
 618:	80 91 3e 01 	lds	r24, 0x013E
 61c:	8f 5f       	subi	r24, 0xFF	; 255
 61e:	8f 71       	andi	r24, 0x1F	; 31
    
    if ( tmphead == UART1_RxTail ) {
 620:	90 91 3f 01 	lds	r25, 0x013F
 624:	89 17       	cp	r24, r25
 626:	49 f0       	breq	.+18     	; 0x63a <__vector_30+0x44>
    /* read UART status register and UART data register */ 
    usr  = UART1_STATUS;
    data = UART1_DATA;
    
    /* get FEn (Frame Error) DORn (Data OverRun) UPEn (USART Parity Error) bits */
    lastRxError = usr & (_BV(FE1)|_BV(DOR1)|_BV(UPE1) );
 628:	2c 71       	andi	r18, 0x1C	; 28
    if ( tmphead == UART1_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART1_RxHead = tmphead;
 62a:	80 93 3e 01 	sts	0x013E, r24
        /* store received data in buffer */
        UART1_RxBuf[tmphead] = data;
 62e:	e0 e4       	ldi	r30, 0x40	; 64
 630:	f1 e0       	ldi	r31, 0x01	; 1
 632:	e8 0f       	add	r30, r24
 634:	f1 1d       	adc	r31, r1
 636:	30 83       	st	Z, r19
 638:	01 c0       	rjmp	.+2      	; 0x63c <__vector_30+0x46>
    /* calculate buffer index */ 
    tmphead = ( UART1_RxHead + 1) & UART_RX_BUFFER_MASK;
    
    if ( tmphead == UART1_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
 63a:	22 e0       	ldi	r18, 0x02	; 2
        /* store new index */
        UART1_RxHead = tmphead;
        /* store received data in buffer */
        UART1_RxBuf[tmphead] = data;
    }
    UART1_LastRxError |= lastRxError;   
 63c:	90 91 60 01 	lds	r25, 0x0160
 640:	82 2f       	mov	r24, r18
 642:	89 2b       	or	r24, r25
 644:	80 93 60 01 	sts	0x0160, r24
}
 648:	ff 91       	pop	r31
 64a:	ef 91       	pop	r30
 64c:	9f 91       	pop	r25
 64e:	8f 91       	pop	r24
 650:	3f 91       	pop	r19
 652:	2f 91       	pop	r18
 654:	0f 90       	pop	r0
 656:	0b be       	out	0x3b, r0	; 59
 658:	0f 90       	pop	r0
 65a:	0f be       	out	0x3f, r0	; 63
 65c:	0f 90       	pop	r0
 65e:	1f 90       	pop	r1
 660:	18 95       	reti

00000662 <__vector_31>:
ISR(UART1_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART1 Data Register Empty interrupt
Purpose:  called when the UART1 is ready to transmit the next byte
**************************************************************************/
{
 662:	1f 92       	push	r1
 664:	0f 92       	push	r0
 666:	0f b6       	in	r0, 0x3f	; 63
 668:	0f 92       	push	r0
 66a:	0b b6       	in	r0, 0x3b	; 59
 66c:	0f 92       	push	r0
 66e:	11 24       	eor	r1, r1
 670:	8f 93       	push	r24
 672:	9f 93       	push	r25
 674:	ef 93       	push	r30
 676:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART1_TxHead != UART1_TxTail) {
 678:	90 91 1c 01 	lds	r25, 0x011C
 67c:	80 91 1d 01 	lds	r24, 0x011D
 680:	98 17       	cp	r25, r24
 682:	71 f0       	breq	.+28     	; 0x6a0 <__vector_31+0x3e>
        /* calculate and store new buffer index */
        tmptail = (UART1_TxTail + 1) & UART_TX_BUFFER_MASK;
 684:	80 91 1d 01 	lds	r24, 0x011D
 688:	8f 5f       	subi	r24, 0xFF	; 255
 68a:	8f 71       	andi	r24, 0x1F	; 31
        UART1_TxTail = tmptail;
 68c:	80 93 1d 01 	sts	0x011D, r24
        /* get one byte from buffer and write it to UART */
        UART1_DATA = UART1_TxBuf[tmptail];  /* start transmission */
 690:	ee e1       	ldi	r30, 0x1E	; 30
 692:	f1 e0       	ldi	r31, 0x01	; 1
 694:	e8 0f       	add	r30, r24
 696:	f1 1d       	adc	r31, r1
 698:	80 81       	ld	r24, Z
 69a:	80 93 9c 00 	sts	0x009C, r24
 69e:	05 c0       	rjmp	.+10     	; 0x6aa <__vector_31+0x48>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART1_CONTROL &= ~_BV(UART1_UDRIE);
 6a0:	ea e9       	ldi	r30, 0x9A	; 154
 6a2:	f0 e0       	ldi	r31, 0x00	; 0
 6a4:	80 81       	ld	r24, Z
 6a6:	8f 7d       	andi	r24, 0xDF	; 223
 6a8:	80 83       	st	Z, r24
    }
}
 6aa:	ff 91       	pop	r31
 6ac:	ef 91       	pop	r30
 6ae:	9f 91       	pop	r25
 6b0:	8f 91       	pop	r24
 6b2:	0f 90       	pop	r0
 6b4:	0b be       	out	0x3b, r0	; 59
 6b6:	0f 90       	pop	r0
 6b8:	0f be       	out	0x3f, r0	; 63
 6ba:	0f 90       	pop	r0
 6bc:	1f 90       	pop	r1
 6be:	18 95       	reti

000006c0 <uart1_init>:
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart1_init(unsigned int baudrate)
{
    UART1_TxHead = 0;
 6c0:	10 92 1c 01 	sts	0x011C, r1
    UART1_TxTail = 0;
 6c4:	10 92 1d 01 	sts	0x011D, r1
    UART1_RxHead = 0;
 6c8:	10 92 3e 01 	sts	0x013E, r1
    UART1_RxTail = 0;
 6cc:	10 92 3f 01 	sts	0x013F, r1
#endif
#endif
#endif

    /* Set baud rate */
    if ( baudrate & 0x8000 ) 
 6d0:	99 23       	and	r25, r25
 6d2:	1c f4       	brge	.+6      	; 0x6da <uart1_init+0x1a>
    {
        #if UART1_BIT_U2X
    	UART1_STATUS = (1<<UART1_BIT_U2X);  //Enable 2x speed 
 6d4:	22 e0       	ldi	r18, 0x02	; 2
 6d6:	20 93 9b 00 	sts	0x009B, r18
        #endif
    }
    UART1_UBRRH = (unsigned char)((baudrate>>8)&0x80) ;
 6da:	29 2f       	mov	r18, r25
 6dc:	20 78       	andi	r18, 0x80	; 128
 6de:	20 93 98 00 	sts	0x0098, r18
    UART1_UBRRL = (unsigned char) baudrate;
 6e2:	80 93 99 00 	sts	0x0099, r24
        
    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART1_CONTROL = _BV(UART1_BIT_RXCIE)|(1<<UART1_BIT_RXEN)|(1<<UART1_BIT_TXEN);    
 6e6:	88 e9       	ldi	r24, 0x98	; 152
 6e8:	80 93 9a 00 	sts	0x009A, r24
    
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */   
    #ifdef UART1_BIT_URSEL
    UART1_CONTROLC = (1<<UART1_BIT_URSEL)|(1<<UART1_BIT_UCSZ1)|(1<<UART1_BIT_UCSZ0);
    #else
    UART1_CONTROLC = (1<<UART1_BIT_UCSZ1)|(1<<UART1_BIT_UCSZ0);
 6ec:	86 e0       	ldi	r24, 0x06	; 6
 6ee:	80 93 9d 00 	sts	0x009D, r24
    #endif 
    
}/* uart_init */
 6f2:	08 95       	ret

000006f4 <uart1_getc>:
    unsigned char tmptail;
    unsigned int  data;
    unsigned char lastRxError;


    if ( UART1_RxHead == UART1_RxTail ) {
 6f4:	90 91 3e 01 	lds	r25, 0x013E
 6f8:	80 91 3f 01 	lds	r24, 0x013F
 6fc:	98 17       	cp	r25, r24
 6fe:	a1 f0       	breq	.+40     	; 0x728 <uart1_getc+0x34>
        return UART_NO_DATA;   /* no data available */
    }
    
    /* calculate buffer index */
    tmptail = (UART1_RxTail + 1) & UART_RX_BUFFER_MASK;
 700:	80 91 3f 01 	lds	r24, 0x013F
 704:	8f 5f       	subi	r24, 0xFF	; 255
 706:	8f 71       	andi	r24, 0x1F	; 31
    
    /* get data from receive buffer */
    data = UART1_RxBuf[tmptail];
 708:	e0 e4       	ldi	r30, 0x40	; 64
 70a:	f1 e0       	ldi	r31, 0x01	; 1
 70c:	e8 0f       	add	r30, r24
 70e:	f1 1d       	adc	r31, r1
 710:	90 81       	ld	r25, Z
    lastRxError = UART1_LastRxError;
 712:	40 91 60 01 	lds	r20, 0x0160
    
    /* store buffer index */
    UART1_RxTail = tmptail; 
 716:	80 93 3f 01 	sts	0x013F, r24
    
    UART1_LastRxError = 0;
 71a:	10 92 60 01 	sts	0x0160, r1
    return (lastRxError << 8) + data;
 71e:	34 2f       	mov	r19, r20
 720:	20 e0       	ldi	r18, 0x00	; 0
 722:	29 0f       	add	r18, r25
 724:	31 1d       	adc	r19, r1
 726:	02 c0       	rjmp	.+4      	; 0x72c <uart1_getc+0x38>
    unsigned int  data;
    unsigned char lastRxError;


    if ( UART1_RxHead == UART1_RxTail ) {
        return UART_NO_DATA;   /* no data available */
 728:	20 e0       	ldi	r18, 0x00	; 0
 72a:	31 e0       	ldi	r19, 0x01	; 1
    UART1_RxTail = tmptail; 
    
    UART1_LastRxError = 0;
    return (lastRxError << 8) + data;

}/* uart1_getc */
 72c:	82 2f       	mov	r24, r18
 72e:	93 2f       	mov	r25, r19
 730:	08 95       	ret

00000732 <uart1_putc>:
void uart1_putc(unsigned char data)
{
    unsigned char tmphead;

    
    tmphead  = (UART1_TxHead + 1) & UART_TX_BUFFER_MASK;
 732:	20 91 1c 01 	lds	r18, 0x011C
 736:	2f 5f       	subi	r18, 0xFF	; 255
 738:	2f 71       	andi	r18, 0x1F	; 31
    
    while ( tmphead == UART1_TxTail ){
 73a:	90 91 1d 01 	lds	r25, 0x011D
 73e:	29 17       	cp	r18, r25
 740:	e1 f3       	breq	.-8      	; 0x73a <uart1_putc+0x8>
        ;/* wait for free space in buffer */
    }
    
    UART1_TxBuf[tmphead] = data;
 742:	ee e1       	ldi	r30, 0x1E	; 30
 744:	f1 e0       	ldi	r31, 0x01	; 1
 746:	e2 0f       	add	r30, r18
 748:	f1 1d       	adc	r31, r1
 74a:	80 83       	st	Z, r24
    UART1_TxHead = tmphead;
 74c:	20 93 1c 01 	sts	0x011C, r18

    /* enable UDRE interrupt */
    UART1_CONTROL    |= _BV(UART1_UDRIE);
 750:	ea e9       	ldi	r30, 0x9A	; 154
 752:	f0 e0       	ldi	r31, 0x00	; 0
 754:	80 81       	ld	r24, Z
 756:	80 62       	ori	r24, 0x20	; 32
 758:	80 83       	st	Z, r24

}/* uart1_putc */
 75a:	08 95       	ret

0000075c <uart1_puts>:
Purpose:  transmit string to UART1
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart1_puts(const char *s )
{
 75c:	cf 93       	push	r28
 75e:	df 93       	push	r29
 760:	ec 01       	movw	r28, r24
    while (*s) 
 762:	88 81       	ld	r24, Y
 764:	88 23       	and	r24, r24
 766:	31 f0       	breq	.+12     	; 0x774 <uart1_puts+0x18>
Function: uart1_puts()
Purpose:  transmit string to UART1
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart1_puts(const char *s )
 768:	21 96       	adiw	r28, 0x01	; 1
{
    while (*s) 
      uart1_putc(*s++);
 76a:	0e 94 99 03 	call	0x732	; 0x732 <uart1_putc>
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart1_puts(const char *s )
{
    while (*s) 
 76e:	89 91       	ld	r24, Y+
 770:	88 23       	and	r24, r24
 772:	d9 f7       	brne	.-10     	; 0x76a <uart1_puts+0xe>
      uart1_putc(*s++);

}/* uart1_puts */
 774:	df 91       	pop	r29
 776:	cf 91       	pop	r28
 778:	08 95       	ret

0000077a <uart1_puts_p>:
Purpose:  transmit string from program memory to UART1
Input:    program memory string to be transmitted
Returns:  none
**************************************************************************/
void uart1_puts_p(const char *progmem_s )
{
 77a:	cf 93       	push	r28
 77c:	df 93       	push	r29
 77e:	ec 01       	movw	r28, r24
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
 780:	fc 01       	movw	r30, r24
 782:	84 91       	lpm	r24, Z+
 784:	88 23       	and	r24, r24
 786:	41 f0       	breq	.+16     	; 0x798 <uart1_puts_p+0x1e>
 788:	21 96       	adiw	r28, 0x01	; 1
      uart1_putc(c);
 78a:	0e 94 99 03 	call	0x732	; 0x732 <uart1_putc>
 78e:	fe 01       	movw	r30, r28
**************************************************************************/
void uart1_puts_p(const char *progmem_s )
{
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
 790:	21 96       	adiw	r28, 0x01	; 1
 792:	84 91       	lpm	r24, Z+
 794:	88 23       	and	r24, r24
 796:	c9 f7       	brne	.-14     	; 0x78a <uart1_puts_p+0x10>
      uart1_putc(c);

}/* uart1_puts_p */
 798:	df 91       	pop	r29
 79a:	cf 91       	pop	r28
 79c:	08 95       	ret

0000079e <itoa>:
 79e:	fb 01       	movw	r30, r22
 7a0:	9f 01       	movw	r18, r30
 7a2:	e8 94       	clt
 7a4:	42 30       	cpi	r20, 0x02	; 2
 7a6:	c4 f0       	brlt	.+48     	; 0x7d8 <itoa+0x3a>
 7a8:	45 32       	cpi	r20, 0x25	; 37
 7aa:	b4 f4       	brge	.+44     	; 0x7d8 <itoa+0x3a>
 7ac:	4a 30       	cpi	r20, 0x0A	; 10
 7ae:	29 f4       	brne	.+10     	; 0x7ba <itoa+0x1c>
 7b0:	97 fb       	bst	r25, 7
 7b2:	1e f4       	brtc	.+6      	; 0x7ba <itoa+0x1c>
 7b4:	90 95       	com	r25
 7b6:	81 95       	neg	r24
 7b8:	9f 4f       	sbci	r25, 0xFF	; 255
 7ba:	64 2f       	mov	r22, r20
 7bc:	77 27       	eor	r23, r23
 7be:	0e 94 00 04 	call	0x800	; 0x800 <__udivmodhi4>
 7c2:	80 5d       	subi	r24, 0xD0	; 208
 7c4:	8a 33       	cpi	r24, 0x3A	; 58
 7c6:	0c f0       	brlt	.+2      	; 0x7ca <itoa+0x2c>
 7c8:	89 5d       	subi	r24, 0xD9	; 217
 7ca:	81 93       	st	Z+, r24
 7cc:	cb 01       	movw	r24, r22
 7ce:	00 97       	sbiw	r24, 0x00	; 0
 7d0:	a1 f7       	brne	.-24     	; 0x7ba <itoa+0x1c>
 7d2:	16 f4       	brtc	.+4      	; 0x7d8 <itoa+0x3a>
 7d4:	5d e2       	ldi	r21, 0x2D	; 45
 7d6:	51 93       	st	Z+, r21
 7d8:	10 82       	st	Z, r1
 7da:	c9 01       	movw	r24, r18
 7dc:	0c 94 f0 03 	jmp	0x7e0	; 0x7e0 <strrev>

000007e0 <strrev>:
 7e0:	dc 01       	movw	r26, r24
 7e2:	fc 01       	movw	r30, r24
 7e4:	67 2f       	mov	r22, r23
 7e6:	71 91       	ld	r23, Z+
 7e8:	77 23       	and	r23, r23
 7ea:	e1 f7       	brne	.-8      	; 0x7e4 <strrev+0x4>
 7ec:	32 97       	sbiw	r30, 0x02	; 2
 7ee:	04 c0       	rjmp	.+8      	; 0x7f8 <strrev+0x18>
 7f0:	7c 91       	ld	r23, X
 7f2:	6d 93       	st	X+, r22
 7f4:	70 83       	st	Z, r23
 7f6:	62 91       	ld	r22, -Z
 7f8:	ae 17       	cp	r26, r30
 7fa:	bf 07       	cpc	r27, r31
 7fc:	c8 f3       	brcs	.-14     	; 0x7f0 <strrev+0x10>
 7fe:	08 95       	ret

00000800 <__udivmodhi4>:
 800:	aa 1b       	sub	r26, r26
 802:	bb 1b       	sub	r27, r27
 804:	51 e1       	ldi	r21, 0x11	; 17
 806:	07 c0       	rjmp	.+14     	; 0x816 <__udivmodhi4_ep>

00000808 <__udivmodhi4_loop>:
 808:	aa 1f       	adc	r26, r26
 80a:	bb 1f       	adc	r27, r27
 80c:	a6 17       	cp	r26, r22
 80e:	b7 07       	cpc	r27, r23
 810:	10 f0       	brcs	.+4      	; 0x816 <__udivmodhi4_ep>
 812:	a6 1b       	sub	r26, r22
 814:	b7 0b       	sbc	r27, r23

00000816 <__udivmodhi4_ep>:
 816:	88 1f       	adc	r24, r24
 818:	99 1f       	adc	r25, r25
 81a:	5a 95       	dec	r21
 81c:	a9 f7       	brne	.-22     	; 0x808 <__udivmodhi4_loop>
 81e:	80 95       	com	r24
 820:	90 95       	com	r25
 822:	bc 01       	movw	r22, r24
 824:	cd 01       	movw	r24, r26
 826:	08 95       	ret

00000828 <_exit>:
 828:	f8 94       	cli

0000082a <__stop_program>:
 82a:	ff cf       	rjmp	.-2      	; 0x82a <__stop_program>
