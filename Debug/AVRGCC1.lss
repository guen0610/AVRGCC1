
AVRGCC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001ba  00800100  00002002  00002096  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002002  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008e  008002ba  008002ba  00002250  2**0
                  ALLOC
  3 .stab         00001164  00000000  00000000  00002250  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000046b  00000000  00000000  000033b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000108  00000000  00000000  0000381f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000404  00000000  00000000  00003927  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000248a  00000000  00000000  00003d2b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000a9d  00000000  00000000  000061b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000022dc  00000000  00000000  00006c52  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000320  00000000  00000000  00008f30  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000094f  00000000  00000000  00009250  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001a3f  00000000  00000000  00009b9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 000001fe  00000000  00000000  0000b5de  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000000e0  00000000  00000000  0000b7dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 be 00 	jmp	0x17c	; 0x17c <__ctors_end>
       4:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
       8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
       c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      10:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      14:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      18:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      1c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      20:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      24:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      28:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      2c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      30:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      34:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      38:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      3c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      40:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      44:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      48:	0c 94 a0 09 	jmp	0x1340	; 0x1340 <__vector_18>
      4c:	0c 94 d4 09 	jmp	0x13a8	; 0x13a8 <__vector_19>
      50:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      54:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      58:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      5c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      60:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      64:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      68:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      6c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      70:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      74:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      78:	0c 94 66 0a 	jmp	0x14cc	; 0x14cc <__vector_30>
      7c:	0c 94 9c 0a 	jmp	0x1538	; 0x1538 <__vector_31>
      80:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      84:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      88:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>

0000008c <__c.2051>:
      8c:	41 54 2b 48 54 54 50 41 43 54 49 4f 4e 3d 30 0d     AT+HTTPACTION=0.
	...

0000009d <__c.2049>:
      9d:	41 54 2b 48 54 54 50 41 43 54 49 4f 4e 3d 31 0d     AT+HTTPACTION=1.
	...

000000ae <__c.2047>:
      ae:	41 54 2b 48 54 54 50 50 41 52 41 3d 22 43 4f 4e     AT+HTTPPARA="CON
      be:	54 45 4e 54 22 2c 22 61 70 70 6c 69 63 61 74 69     TENT","applicati
      ce:	6f 6e 2f 6a 73 6f 6e 22 0d 00                       on/json"..

000000d8 <__c.2045>:
      d8:	41 54 2b 48 54 54 50 50 41 52 41 3d 22 43 49 44     AT+HTTPPARA="CID
      e8:	22 2c 31 0d 00                                      ",1..

000000ed <__c.2043>:
      ed:	41 54 2b 48 54 54 50 49 4e 49 54 0d 00              AT+HTTPINIT..

000000fa <__c.2030>:
      fa:	41 54 2b 48 54 54 50 54 45 52 4d 0d 00              AT+HTTPTERM..

00000107 <__c.2019>:
     107:	41 54 2b 53 41 50 42 52 3d 31 2c 31 0d 00           AT+SAPBR=1,1..

00000115 <__c.2014>:
     115:	41 54 2b 53 41 50 42 52 3d 30 2c 31 0d 00           AT+SAPBR=0,1..

00000123 <__c.2009>:
     123:	41 54 2b 53 41 50 42 52 3d 32 2c 31 0d 00           AT+SAPBR=2,1..

00000131 <__c.1991>:
     131:	41 54 2b 43 4c 49 50 3d 31 0d 00                    AT+CLIP=1..

0000013c <__c.1989>:
     13c:	41 54 2b 43 50 4d 53 3d 22 53 4d 22 2c 22 53 4d     AT+CPMS="SM","SM
     14c:	22 2c 22 53 4d 22 0d 00                             ","SM"..

00000154 <__c.1987>:
     154:	41 54 2b 43 4d 47 46 3d 31 0d 00                    AT+CMGF=1..

0000015f <__c.1985>:
     15f:	41 54 0d 00                                         AT..

00000163 <__c.1980>:
     163:	41 54 0d 00                                         AT..

00000167 <__c.1974>:
     167:	41 54 2b 43 52 45 47 3f 0d 00                       AT+CREG?..

00000171 <__c.1972>:
     171:	41 54 2b 43 52 45 47 3f 0d 00 00                    AT+CREG?...

0000017c <__ctors_end>:
     17c:	11 24       	eor	r1, r1
     17e:	1f be       	out	0x3f, r1	; 63
     180:	cf ef       	ldi	r28, 0xFF	; 255
     182:	d0 e1       	ldi	r29, 0x10	; 16
     184:	de bf       	out	0x3e, r29	; 62
     186:	cd bf       	out	0x3d, r28	; 61

00000188 <__do_copy_data>:
     188:	12 e0       	ldi	r17, 0x02	; 2
     18a:	a0 e0       	ldi	r26, 0x00	; 0
     18c:	b1 e0       	ldi	r27, 0x01	; 1
     18e:	e2 e0       	ldi	r30, 0x02	; 2
     190:	f0 e2       	ldi	r31, 0x20	; 32
     192:	00 e0       	ldi	r16, 0x00	; 0
     194:	0b bf       	out	0x3b, r16	; 59
     196:	02 c0       	rjmp	.+4      	; 0x19c <__do_copy_data+0x14>
     198:	07 90       	elpm	r0, Z+
     19a:	0d 92       	st	X+, r0
     19c:	aa 3b       	cpi	r26, 0xBA	; 186
     19e:	b1 07       	cpc	r27, r17
     1a0:	d9 f7       	brne	.-10     	; 0x198 <__do_copy_data+0x10>

000001a2 <__do_clear_bss>:
     1a2:	13 e0       	ldi	r17, 0x03	; 3
     1a4:	aa eb       	ldi	r26, 0xBA	; 186
     1a6:	b2 e0       	ldi	r27, 0x02	; 2
     1a8:	01 c0       	rjmp	.+2      	; 0x1ac <.do_clear_bss_start>

000001aa <.do_clear_bss_loop>:
     1aa:	1d 92       	st	X+, r1

000001ac <.do_clear_bss_start>:
     1ac:	a8 34       	cpi	r26, 0x48	; 72
     1ae:	b1 07       	cpc	r27, r17
     1b0:	e1 f7       	brne	.-8      	; 0x1aa <.do_clear_bss_loop>
     1b2:	0e 94 1d 02 	call	0x43a	; 0x43a <main>
     1b6:	0c 94 ff 0f 	jmp	0x1ffe	; 0x1ffe <_exit>

000001ba <__bad_interrupt>:
     1ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001be <lcd_write_4>:
  Exit:     no parameters
  Notes:    use either time delays or the busy flag
*/
void lcd_write_4(uint8_t theByte)
{
    lcd_D7_port &= ~(1<<lcd_D7_bit);                        // assume that data is '0'
     1be:	af 98       	cbi	0x15, 7	; 21
    if (theByte & 1<<7) lcd_D7_port |= (1<<lcd_D7_bit);     // make data = '1' if necessary
     1c0:	88 23       	and	r24, r24
     1c2:	0c f4       	brge	.+2      	; 0x1c6 <lcd_write_4+0x8>
     1c4:	af 9a       	sbi	0x15, 7	; 21

    lcd_D6_port &= ~(1<<lcd_D6_bit);                        // repeat for each data bit
     1c6:	ae 98       	cbi	0x15, 6	; 21
    if (theByte & 1<<6) lcd_D6_port |= (1<<lcd_D6_bit);
     1c8:	86 fd       	sbrc	r24, 6
     1ca:	ae 9a       	sbi	0x15, 6	; 21

    lcd_D5_port &= ~(1<<lcd_D5_bit);
     1cc:	ad 98       	cbi	0x15, 5	; 21
    if (theByte & 1<<5) lcd_D5_port |= (1<<lcd_D5_bit);
     1ce:	85 fd       	sbrc	r24, 5
     1d0:	ad 9a       	sbi	0x15, 5	; 21

    lcd_D4_port &= ~(1<<lcd_D4_bit);
     1d2:	ac 98       	cbi	0x15, 4	; 21
    if (theByte & 1<<4) lcd_D4_port |= (1<<lcd_D4_bit);
     1d4:	84 fd       	sbrc	r24, 4
     1d6:	ac 9a       	sbi	0x15, 4	; 21

// write the data
                                                    // 'Address set-up time' (40 nS)
    lcd_E_port |= (1<<lcd_E_bit);                   // Enable pin high
     1d8:	97 9a       	sbi	0x12, 7	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1da:	82 e0       	ldi	r24, 0x02	; 2
     1dc:	8a 95       	dec	r24
     1de:	f1 f7       	brne	.-4      	; 0x1dc <lcd_write_4+0x1e>
     1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <lcd_write_4+0x24>
    _delay_us(1);                                   // implement 'Data set-up time' (80 nS) and 'Enable pulse width' (230 nS)
    lcd_E_port &= ~(1<<lcd_E_bit);                  // Enable pin low
     1e2:	97 98       	cbi	0x12, 7	; 18
     1e4:	82 e0       	ldi	r24, 0x02	; 2
     1e6:	8a 95       	dec	r24
     1e8:	f1 f7       	brne	.-4      	; 0x1e6 <lcd_write_4+0x28>
     1ea:	00 c0       	rjmp	.+0      	; 0x1ec <lcd_write_4+0x2e>
    _delay_us(1);                                   // implement 'Data hold time' (10 nS) and 'Enable cycle time' (500 nS)
}
     1ec:	08 95       	ret

000001ee <lcd_write_instruction_4d>:
  Entry:    (theInstruction) is the information to be sent to the instruction register
  Exit:     no parameters
  Notes:    does not deal with RW (busy flag is not implemented)
*/
void lcd_write_instruction_4d(uint8_t theInstruction)
{
     1ee:	1f 93       	push	r17
     1f0:	18 2f       	mov	r17, r24
    lcd_RS_port &= ~(1<<lcd_RS_bit);                // select the Instruction Register (RS low)
     1f2:	95 98       	cbi	0x12, 5	; 18
    lcd_E_port &= ~(1<<lcd_E_bit);                  // make sure E is initially low
     1f4:	97 98       	cbi	0x12, 7	; 18
    lcd_write_4(theInstruction);                    // write the upper 4-bits of the data
     1f6:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_write_4>
    lcd_write_4(theInstruction << 4);               // write the lower 4-bits of the data
     1fa:	81 2f       	mov	r24, r17
     1fc:	82 95       	swap	r24
     1fe:	80 7f       	andi	r24, 0xF0	; 240
     200:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_write_4>
}
     204:	1f 91       	pop	r17
     206:	08 95       	ret

00000208 <lcd_write_character_4d>:
  Exit:     no parameters
  Notes:    does not deal with RW (busy flag is not implemented)
*/

void lcd_write_character_4d(uint8_t theData)
{
     208:	1f 93       	push	r17
     20a:	18 2f       	mov	r17, r24
    lcd_RS_port |= (1<<lcd_RS_bit);                 // select the Data Register (RS high)
     20c:	95 9a       	sbi	0x12, 5	; 18
    lcd_E_port &= ~(1<<lcd_E_bit);                  // make sure E is initially low
     20e:	97 98       	cbi	0x12, 7	; 18
    lcd_write_4(theData);                           // write the upper 4-bits of the data
     210:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_write_4>
    lcd_write_4(theData << 4);                      // write the lower 4-bits of the data
     214:	81 2f       	mov	r24, r17
     216:	82 95       	swap	r24
     218:	80 7f       	andi	r24, 0xF0	; 240
     21a:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_write_4>
}
     21e:	1f 91       	pop	r17
     220:	08 95       	ret

00000222 <lcd_write_string_4d>:
  Entry:    (theString) is the string to be displayed
  Exit:     no parameters
  Notes:    uses time delays rather than checking the busy flag
*/
void lcd_write_string_4d(uint8_t theString[])
{
     222:	0f 93       	push	r16
     224:	1f 93       	push	r17
     226:	df 93       	push	r29
     228:	cf 93       	push	r28
     22a:	00 d0       	rcall	.+0      	; 0x22c <lcd_write_string_4d+0xa>
     22c:	cd b7       	in	r28, 0x3d	; 61
     22e:	de b7       	in	r29, 0x3e	; 62
     230:	8c 01       	movw	r16, r24
    volatile int i = 0;                             // character counter*/
     232:	1a 82       	std	Y+2, r1	; 0x02
     234:	19 82       	std	Y+1, r1	; 0x01
    while (theString[i] != 0)
     236:	e9 81       	ldd	r30, Y+1	; 0x01
     238:	fa 81       	ldd	r31, Y+2	; 0x02
     23a:	e8 0f       	add	r30, r24
     23c:	f9 1f       	adc	r31, r25
     23e:	80 81       	ld	r24, Z
     240:	88 23       	and	r24, r24
     242:	b9 f0       	breq	.+46     	; 0x272 <lcd_write_string_4d+0x50>
    {
        lcd_write_character_4d(theString[i]);
     244:	e9 81       	ldd	r30, Y+1	; 0x01
     246:	fa 81       	ldd	r31, Y+2	; 0x02
     248:	e0 0f       	add	r30, r16
     24a:	f1 1f       	adc	r31, r17
     24c:	80 81       	ld	r24, Z
     24e:	0e 94 04 01 	call	0x208	; 0x208 <lcd_write_character_4d>
        i++;
     252:	89 81       	ldd	r24, Y+1	; 0x01
     254:	9a 81       	ldd	r25, Y+2	; 0x02
     256:	01 96       	adiw	r24, 0x01	; 1
     258:	9a 83       	std	Y+2, r25	; 0x02
     25a:	89 83       	std	Y+1, r24	; 0x01
     25c:	85 ed       	ldi	r24, 0xD5	; 213
     25e:	8a 95       	dec	r24
     260:	f1 f7       	brne	.-4      	; 0x25e <lcd_write_string_4d+0x3c>
     262:	00 00       	nop
  Notes:    uses time delays rather than checking the busy flag
*/
void lcd_write_string_4d(uint8_t theString[])
{
    volatile int i = 0;                             // character counter*/
    while (theString[i] != 0)
     264:	e9 81       	ldd	r30, Y+1	; 0x01
     266:	fa 81       	ldd	r31, Y+2	; 0x02
     268:	e0 0f       	add	r30, r16
     26a:	f1 1f       	adc	r31, r17
     26c:	80 81       	ld	r24, Z
     26e:	88 23       	and	r24, r24
     270:	49 f7       	brne	.-46     	; 0x244 <lcd_write_string_4d+0x22>
    {
        lcd_write_character_4d(theString[i]);
        i++;
        _delay_us(80);                              // 40 uS delay (min)
    }
}
     272:	0f 90       	pop	r0
     274:	0f 90       	pop	r0
     276:	cf 91       	pop	r28
     278:	df 91       	pop	r29
     27a:	1f 91       	pop	r17
     27c:	0f 91       	pop	r16
     27e:	08 95       	ret

00000280 <lcd_puthex>:
void CopyStringtoLCD(const uint8_t *FlashLoc);
void LCDsendChar(uint8_t ch);


void lcd_puthex(const char data)
{
     280:	1f 93       	push	r17
     282:	18 2f       	mov	r17, r24
     284:	85 ed       	ldi	r24, 0xD5	; 213
     286:	8a 95       	dec	r24
     288:	f1 f7       	brne	.-4      	; 0x286 <lcd_puthex+0x6>
     28a:	00 00       	nop
	//lcd_write_character_4d('0');
	//_delay_us(80);
	//print 'x'
	//lcd_write_character_4d('x');
	//_delay_us(80);
	(((data>>4)&0x0F)<=9) ? (temp='0'+((data>>4)&0x0F)) : (temp='A'+ ((data>>4)&0x0F)-0x0A);
     28c:	81 2f       	mov	r24, r17
     28e:	82 95       	swap	r24
     290:	8f 70       	andi	r24, 0x0F	; 15
     292:	28 2f       	mov	r18, r24
     294:	30 e0       	ldi	r19, 0x00	; 0
     296:	2a 30       	cpi	r18, 0x0A	; 10
     298:	31 05       	cpc	r19, r1
     29a:	14 f4       	brge	.+4      	; 0x2a0 <lcd_puthex+0x20>
     29c:	80 5d       	subi	r24, 0xD0	; 208
     29e:	01 c0       	rjmp	.+2      	; 0x2a2 <lcd_puthex+0x22>
     2a0:	89 5c       	subi	r24, 0xC9	; 201
     2a2:	95 ed       	ldi	r25, 0xD5	; 213
     2a4:	9a 95       	dec	r25
     2a6:	f1 f7       	brne	.-4      	; 0x2a4 <lcd_puthex+0x24>
     2a8:	00 00       	nop
	_delay_us(80);
	//print high nibble as hex
	lcd_write_character_4d(temp);
     2aa:	0e 94 04 01 	call	0x208	; 0x208 <lcd_write_character_4d>
     2ae:	85 ed       	ldi	r24, 0xD5	; 213
     2b0:	8a 95       	dec	r24
     2b2:	f1 f7       	brne	.-4      	; 0x2b0 <lcd_puthex+0x30>
     2b4:	00 00       	nop
	_delay_us(80);
	((data&0x0F)<=9) ? (temp='0'+ (data&0x0F)) : (temp='A'+ (data&0x0F)-0x0A);
     2b6:	21 2f       	mov	r18, r17
     2b8:	30 e0       	ldi	r19, 0x00	; 0
     2ba:	2f 70       	andi	r18, 0x0F	; 15
     2bc:	30 70       	andi	r19, 0x00	; 0
     2be:	2a 30       	cpi	r18, 0x0A	; 10
     2c0:	31 05       	cpc	r19, r1
     2c2:	24 f4       	brge	.+8      	; 0x2cc <lcd_puthex+0x4c>
     2c4:	1f 70       	andi	r17, 0x0F	; 15
     2c6:	81 2f       	mov	r24, r17
     2c8:	80 5d       	subi	r24, 0xD0	; 208
     2ca:	03 c0       	rjmp	.+6      	; 0x2d2 <lcd_puthex+0x52>
     2cc:	1f 70       	andi	r17, 0x0F	; 15
     2ce:	81 2f       	mov	r24, r17
     2d0:	89 5c       	subi	r24, 0xC9	; 201
	lcd_write_character_4d(temp);
     2d2:	0e 94 04 01 	call	0x208	; 0x208 <lcd_write_character_4d>
     2d6:	95 ed       	ldi	r25, 0xD5	; 213
     2d8:	9a 95       	dec	r25
     2da:	f1 f7       	brne	.-4      	; 0x2d8 <lcd_puthex+0x58>
     2dc:	00 00       	nop
	_delay_us(80);
	//print low nibble as hex
}
     2de:	1f 91       	pop	r17
     2e0:	08 95       	ret

000002e2 <lcd_init_4d>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2e2:	8f ef       	ldi	r24, 0xFF	; 255
     2e4:	90 e7       	ldi	r25, 0x70	; 112
     2e6:	a2 e0       	ldi	r26, 0x02	; 2
     2e8:	81 50       	subi	r24, 0x01	; 1
     2ea:	90 40       	sbci	r25, 0x00	; 0
     2ec:	a0 40       	sbci	r26, 0x00	; 0
     2ee:	e1 f7       	brne	.-8      	; 0x2e8 <lcd_init_4d+0x6>
     2f0:	00 c0       	rjmp	.+0      	; 0x2f2 <lcd_init_4d+0x10>
     2f2:	00 00       	nop
void lcd_init_4d(void)
{
// Power-up delay
    _delay_ms(100);                                 // initial 40 mSec delay

    lcd_RS_port &= ~(1<<lcd_RS_bit);                // select the Instruction Register (RS low)
     2f4:	95 98       	cbi	0x12, 5	; 18
    lcd_E_port &= ~(1<<lcd_E_bit);                  // make sure E is initially low
     2f6:	97 98       	cbi	0x12, 7	; 18

// Reset the LCD controller
    lcd_write_4(lcd_FunctionReset);                 // first part of reset sequence
     2f8:	80 e3       	ldi	r24, 0x30	; 48
     2fa:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_write_4>
     2fe:	af e1       	ldi	r26, 0x1F	; 31
     300:	be e4       	ldi	r27, 0x4E	; 78
     302:	11 97       	sbiw	r26, 0x01	; 1
     304:	f1 f7       	brne	.-4      	; 0x302 <lcd_init_4d+0x20>
     306:	00 c0       	rjmp	.+0      	; 0x308 <lcd_init_4d+0x26>
     308:	00 00       	nop
    _delay_ms(10);                                  // 4.1 mS delay (min)

    lcd_write_4(lcd_FunctionReset);                 // second part of reset sequence
     30a:	80 e3       	ldi	r24, 0x30	; 48
     30c:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_write_4>
     310:	8f ec       	ldi	r24, 0xCF	; 207
     312:	97 e0       	ldi	r25, 0x07	; 7
     314:	01 97       	sbiw	r24, 0x01	; 1
     316:	f1 f7       	brne	.-4      	; 0x314 <lcd_init_4d+0x32>
     318:	00 c0       	rjmp	.+0      	; 0x31a <lcd_init_4d+0x38>
     31a:	00 00       	nop
    _delay_ms(1);                                 // 100uS delay (min)

    lcd_write_4(lcd_FunctionReset);                 // third part of reset sequence
     31c:	80 e3       	ldi	r24, 0x30	; 48
     31e:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_write_4>
     322:	af ec       	ldi	r26, 0xCF	; 207
     324:	b7 e0       	ldi	r27, 0x07	; 7
     326:	11 97       	sbiw	r26, 0x01	; 1
     328:	f1 f7       	brne	.-4      	; 0x326 <lcd_init_4d+0x44>
     32a:	00 c0       	rjmp	.+0      	; 0x32c <lcd_init_4d+0x4a>
     32c:	00 00       	nop
// Preliminary Function Set instruction - used only to set the 4-bit mode.
// The number of lines or the font cannot be set at this time since the controller is still in the
//  8-bit mode, but the data transfer mode can be changed since this parameter is determined by one 
//  of the upper four bits of the instruction.
 
    lcd_write_4(lcd_FunctionSet4bit);               // set 4-bit mode
     32e:	88 e2       	ldi	r24, 0x28	; 40
     330:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_write_4>
     334:	8f ec       	ldi	r24, 0xCF	; 207
     336:	97 e0       	ldi	r25, 0x07	; 7
     338:	01 97       	sbiw	r24, 0x01	; 1
     33a:	f1 f7       	brne	.-4      	; 0x338 <lcd_init_4d+0x56>
     33c:	00 c0       	rjmp	.+0      	; 0x33e <lcd_init_4d+0x5c>
     33e:	00 00       	nop
    _delay_ms(1);                                  // 40uS delay (min)

// Function Set instruction
    lcd_write_instruction_4d(lcd_FunctionSet4bit);   // set mode, lines, and font
     340:	88 e2       	ldi	r24, 0x28	; 40
     342:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd_write_instruction_4d>
     346:	af ec       	ldi	r26, 0xCF	; 207
     348:	b7 e0       	ldi	r27, 0x07	; 7
     34a:	11 97       	sbiw	r26, 0x01	; 1
     34c:	f1 f7       	brne	.-4      	; 0x34a <lcd_init_4d+0x68>
     34e:	00 c0       	rjmp	.+0      	; 0x350 <lcd_init_4d+0x6e>
     350:	00 00       	nop
// The next three instructions are specified in the data sheet as part of the initialization routine, 
//  so it is a good idea (but probably not necessary) to do them just as specified and then redo them 
//  later if the application requires a different configuration.

// Display On/Off Control instruction
    lcd_write_instruction_4d(lcd_DisplayOff);        // turn display OFF
     352:	88 e0       	ldi	r24, 0x08	; 8
     354:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd_write_instruction_4d>
     358:	8f ec       	ldi	r24, 0xCF	; 207
     35a:	97 e0       	ldi	r25, 0x07	; 7
     35c:	01 97       	sbiw	r24, 0x01	; 1
     35e:	f1 f7       	brne	.-4      	; 0x35c <lcd_init_4d+0x7a>
     360:	00 c0       	rjmp	.+0      	; 0x362 <lcd_init_4d+0x80>
     362:	00 00       	nop
    _delay_ms(1);                                  // 40uS delay (min)

// Clear Display instruction
    lcd_write_instruction_4d(lcd_Clear);             // clear display RAM
     364:	81 e0       	ldi	r24, 0x01	; 1
     366:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd_write_instruction_4d>
     36a:	af e3       	ldi	r26, 0x3F	; 63
     36c:	bf e1       	ldi	r27, 0x1F	; 31
     36e:	11 97       	sbiw	r26, 0x01	; 1
     370:	f1 f7       	brne	.-4      	; 0x36e <lcd_init_4d+0x8c>
     372:	00 c0       	rjmp	.+0      	; 0x374 <lcd_init_4d+0x92>
     374:	00 00       	nop
    _delay_ms(4);                                   // 1.64 mS delay (min)

// ; Entry Mode Set instruction
    lcd_write_instruction_4d(lcd_EntryMode);         // set desired shift characteristics
     376:	86 e0       	ldi	r24, 0x06	; 6
     378:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd_write_instruction_4d>
     37c:	8f ec       	ldi	r24, 0xCF	; 207
     37e:	97 e0       	ldi	r25, 0x07	; 7
     380:	01 97       	sbiw	r24, 0x01	; 1
     382:	f1 f7       	brne	.-4      	; 0x380 <lcd_init_4d+0x9e>
     384:	00 c0       	rjmp	.+0      	; 0x386 <lcd_init_4d+0xa4>
     386:	00 00       	nop

// This is the end of the LCD controller initialization as specified in the data sheet, but the display
//  has been left in the OFF condition.  This is a good time to turn the display back ON.
 
// Display On/Off Control instruction
    lcd_write_instruction_4d(lcd_DisplayOn);         // turn the display ON
     388:	8c e0       	ldi	r24, 0x0C	; 12
     38a:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd_write_instruction_4d>
     38e:	af ec       	ldi	r26, 0xCF	; 207
     390:	b7 e0       	ldi	r27, 0x07	; 7
     392:	11 97       	sbiw	r26, 0x01	; 1
     394:	f1 f7       	brne	.-4      	; 0x392 <lcd_init_4d+0xb0>
     396:	00 c0       	rjmp	.+0      	; 0x398 <lcd_init_4d+0xb6>
     398:	00 00       	nop
    _delay_ms(1);                                  // 40uS delay (min)
}
     39a:	08 95       	ret

0000039c <LCDsendChar>:

void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{

	//4 bit part
	PORTC=(ch&0b11110000);
     39c:	98 2f       	mov	r25, r24
     39e:	90 7f       	andi	r25, 0xF0	; 240
     3a0:	95 bb       	out	0x15, r25	; 21
	PORTD|=1<<lcd_RS_bit ;
     3a2:	95 9a       	sbi	0x12, 5	; 18
	PORTG|=1<<lcd_E_bit;		
     3a4:	e5 e6       	ldi	r30, 0x65	; 101
     3a6:	f0 e0       	ldi	r31, 0x00	; 0
     3a8:	90 81       	ld	r25, Z
     3aa:	90 68       	ori	r25, 0x80	; 128
     3ac:	90 83       	st	Z, r25
     3ae:	af ec       	ldi	r26, 0xCF	; 207
     3b0:	b7 e0       	ldi	r27, 0x07	; 7
     3b2:	11 97       	sbiw	r26, 0x01	; 1
     3b4:	f1 f7       	brne	.-4      	; 0x3b2 <LCDsendChar+0x16>
     3b6:	00 c0       	rjmp	.+0      	; 0x3b8 <LCDsendChar+0x1c>
     3b8:	00 00       	nop
	_delay_ms(1);
	PORTG&=~(1<<lcd_E_bit);	
     3ba:	90 81       	ld	r25, Z
     3bc:	9f 77       	andi	r25, 0x7F	; 127
     3be:	90 83       	st	Z, r25
	PORTD&=~(1<<lcd_RS_bit);
     3c0:	95 98       	cbi	0x12, 5	; 18
     3c2:	af ec       	ldi	r26, 0xCF	; 207
     3c4:	b7 e0       	ldi	r27, 0x07	; 7
     3c6:	11 97       	sbiw	r26, 0x01	; 1
     3c8:	f1 f7       	brne	.-4      	; 0x3c6 <LCDsendChar+0x2a>
     3ca:	00 c0       	rjmp	.+0      	; 0x3cc <LCDsendChar+0x30>
     3cc:	00 00       	nop
	_delay_ms(1);
	PORTC=((ch&0b00001111)<<4);
     3ce:	90 e0       	ldi	r25, 0x00	; 0
     3d0:	82 95       	swap	r24
     3d2:	92 95       	swap	r25
     3d4:	90 7f       	andi	r25, 0xF0	; 240
     3d6:	98 27       	eor	r25, r24
     3d8:	80 7f       	andi	r24, 0xF0	; 240
     3da:	98 27       	eor	r25, r24
     3dc:	85 bb       	out	0x15, r24	; 21
	PORTD|=1<<lcd_RS_bit;
     3de:	95 9a       	sbi	0x12, 5	; 18
	PORTG|=1<<lcd_E_bit;		
     3e0:	80 81       	ld	r24, Z
     3e2:	80 68       	ori	r24, 0x80	; 128
     3e4:	80 83       	st	Z, r24
     3e6:	8f ec       	ldi	r24, 0xCF	; 207
     3e8:	97 e0       	ldi	r25, 0x07	; 7
     3ea:	01 97       	sbiw	r24, 0x01	; 1
     3ec:	f1 f7       	brne	.-4      	; 0x3ea <LCDsendChar+0x4e>
     3ee:	00 c0       	rjmp	.+0      	; 0x3f0 <LCDsendChar+0x54>
     3f0:	00 00       	nop
	_delay_ms(1);
	PORTG&=~(1<<lcd_E_bit);	
     3f2:	80 81       	ld	r24, Z
     3f4:	8f 77       	andi	r24, 0x7F	; 127
     3f6:	80 83       	st	Z, r24
	PORTD&=~(1<<lcd_RS_bit);
     3f8:	95 98       	cbi	0x12, 5	; 18
     3fa:	af ec       	ldi	r26, 0xCF	; 207
     3fc:	b7 e0       	ldi	r27, 0x07	; 7
     3fe:	11 97       	sbiw	r26, 0x01	; 1
     400:	f1 f7       	brne	.-4      	; 0x3fe <LCDsendChar+0x62>
     402:	00 c0       	rjmp	.+0      	; 0x404 <LCDsendChar+0x68>
     404:	00 00       	nop
	_delay_ms(1);
}
     406:	08 95       	ret

00000408 <CopyStringtoLCD>:
    _delay_us(1);                                   // implement 'Data set-up time' (80 nS) and 'Enable pulse width' (230 nS)
    lcd_E_port &= ~(1<<lcd_E_bit);                  // Enable pin low
    _delay_us(1);                                   // implement 'Data hold time' (10 nS) and 'Enable cycle time' (500 nS)
}
void CopyStringtoLCD(const uint8_t *FlashLoc)
{
     408:	1f 93       	push	r17
     40a:	cf 93       	push	r28
     40c:	df 93       	push	r29
     40e:	ec 01       	movw	r28, r24
	uint8_t i;
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
     410:	fe 01       	movw	r30, r28
     412:	24 91       	lpm	r18, Z+
     414:	22 23       	and	r18, r18
     416:	69 f0       	breq	.+26     	; 0x432 <CopyStringtoLCD+0x2a>
     418:	10 e0       	ldi	r17, 0x00	; 0
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
     41a:	fc 01       	movw	r30, r24
     41c:	84 91       	lpm	r24, Z+
     41e:	0e 94 ce 01 	call	0x39c	; 0x39c <LCDsendChar>
    _delay_us(1);                                   // implement 'Data hold time' (10 nS) and 'Enable cycle time' (500 nS)
}
void CopyStringtoLCD(const uint8_t *FlashLoc)
{
	uint8_t i;
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
     422:	1f 5f       	subi	r17, 0xFF	; 255
     424:	ce 01       	movw	r24, r28
     426:	81 0f       	add	r24, r17
     428:	91 1d       	adc	r25, r1
     42a:	fc 01       	movw	r30, r24
     42c:	24 91       	lpm	r18, Z+
     42e:	22 23       	and	r18, r18
     430:	a1 f7       	brne	.-24     	; 0x41a <CopyStringtoLCD+0x12>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
     432:	df 91       	pop	r29
     434:	cf 91       	pop	r28
     436:	1f 91       	pop	r17
     438:	08 95       	ret

0000043a <main>:
/* Define UART buad rate here */
#define UART_BAUD_RATE      9600      
#define PARSE_CONST         9

int main(void)
{
     43a:	2f 92       	push	r2
     43c:	3f 92       	push	r3
     43e:	4f 92       	push	r4
     440:	5f 92       	push	r5
     442:	6f 92       	push	r6
     444:	7f 92       	push	r7
     446:	8f 92       	push	r8
     448:	9f 92       	push	r9
     44a:	af 92       	push	r10
     44c:	bf 92       	push	r11
     44e:	cf 92       	push	r12
     450:	df 92       	push	r13
     452:	ef 92       	push	r14
     454:	ff 92       	push	r15
     456:	0f 93       	push	r16
     458:	1f 93       	push	r17
     45a:	df 93       	push	r29
     45c:	cf 93       	push	r28
     45e:	cd b7       	in	r28, 0x3d	; 61
     460:	de b7       	in	r29, 0x3e	; 62
     462:	c7 54       	subi	r28, 0x47	; 71
     464:	d0 40       	sbci	r29, 0x00	; 0
     466:	0f b6       	in	r0, 0x3f	; 63
     468:	f8 94       	cli
     46a:	de bf       	out	0x3e, r29	; 62
     46c:	0f be       	out	0x3f, r0	; 63
     46e:	cd bf       	out	0x3d, r28	; 61
	DDRC = 0xFF;    // lcd pins
     470:	8f ef       	ldi	r24, 0xFF	; 255
     472:	84 bb       	out	0x14, r24	; 20
	// configure the microprocessor pins for the control lines
    lcd_E_ddr |= (1<<lcd_E_bit);                    // E line - output
     474:	8f 9a       	sbi	0x11, 7	; 17
    lcd_RS_ddr |= (1<<lcd_RS_bit);                  // RS line - output
     476:	8d 9a       	sbi	0x11, 5	; 17
 
    lcd_RS_port &= ~(1<<lcd_RS_bit);
     478:	95 98       	cbi	0x12, 5	; 18
    uint8_t answer;
    uint8_t temp_min[3];
    uint8_t temp_max[3];
	  uint8_t http_respon_data[64];
    volatile uint8_t room1_temp;
    lcd_init_4d();
     47a:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lcd_init_4d>
	  lcd_write_instruction_4d(lcd_Clear);
     47e:	81 e0       	ldi	r24, 0x01	; 1
     480:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd_write_instruction_4d>
     484:	8f e1       	ldi	r24, 0x1F	; 31
     486:	9e e4       	ldi	r25, 0x4E	; 78
     488:	01 97       	sbiw	r24, 0x01	; 1
     48a:	f1 f7       	brne	.-4      	; 0x488 <main+0x4e>
     48c:	00 c0       	rjmp	.+0      	; 0x48e <main+0x54>
     48e:	00 00       	nop
    _delay_ms(10);
    lcd_write_string_4d("main");
     490:	80 e0       	ldi	r24, 0x00	; 0
     492:	91 e0       	ldi	r25, 0x01	; 1
     494:	0e 94 11 01 	call	0x222	; 0x222 <lcd_write_string_4d>
     *  with the macro 
     *  UART_BAUD_SELECT() (normal speed mode )
     *  or 
     *  UART_BAUD_SELECT_DOUBLE_SPEED() ( double speed mode)
     */
    sim900_init_uart(9600);
     498:	80 e8       	ldi	r24, 0x80	; 128
     49a:	95 e2       	ldi	r25, 0x25	; 37
     49c:	0e 94 0b 03 	call	0x616	; 0x616 <sim900_init_uart>
//lcd_write_string_4d(" ");
		    //lcd_write_string_4d(temp_max);
    /*
     * now enable interrupt, since UART library is interrupt controlled
     */
    sei();
     4a0:	78 94       	sei
    lcd_write_instruction_4d(lcd_Clear);
     4a2:	81 e0       	ldi	r24, 0x01	; 1
     4a4:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd_write_instruction_4d>
     4a8:	af e1       	ldi	r26, 0x1F	; 31
     4aa:	be e4       	ldi	r27, 0x4E	; 78
     4ac:	11 97       	sbiw	r26, 0x01	; 1
     4ae:	f1 f7       	brne	.-4      	; 0x4ac <main+0x72>
     4b0:	00 c0       	rjmp	.+0      	; 0x4b2 <main+0x78>
     4b2:	00 00       	nop
    _delay_ms(10);
    if(sim900_gprs_is_opened())
     4b4:	0e 94 ab 05 	call	0xb56	; 0xb56 <sim900_gprs_is_opened>
     4b8:	88 23       	and	r24, r24
     4ba:	59 f0       	breq	.+22     	; 0x4d2 <main+0x98>
    {
        answer = sim900_gprs_close_connection();
     4bc:	0e 94 c4 05 	call	0xb88	; 0xb88 <sim900_gprs_close_connection>
     4c0:	8f ef       	ldi	r24, 0xFF	; 255
     4c2:	93 ed       	ldi	r25, 0xD3	; 211
     4c4:	a0 e3       	ldi	r26, 0x30	; 48
     4c6:	81 50       	subi	r24, 0x01	; 1
     4c8:	90 40       	sbci	r25, 0x00	; 0
     4ca:	a0 40       	sbci	r26, 0x00	; 0
     4cc:	e1 f7       	brne	.-8      	; 0x4c6 <main+0x8c>
     4ce:	00 c0       	rjmp	.+0      	; 0x4d0 <main+0x96>
     4d0:	00 00       	nop
        _delay_ms(2000);
    }
    
    lcd_write_string_4d("Opening GPRS...");
     4d2:	85 e0       	ldi	r24, 0x05	; 5
     4d4:	91 e0       	ldi	r25, 0x01	; 1
     4d6:	0e 94 11 01 	call	0x222	; 0x222 <lcd_write_string_4d>
        sim900_gprs_open_connection(
     4da:	85 e1       	ldi	r24, 0x15	; 21
     4dc:	91 e0       	ldi	r25, 0x01	; 1
     4de:	6e e1       	ldi	r22, 0x1E	; 30
     4e0:	71 e0       	ldi	r23, 0x01	; 1
     4e2:	47 e2       	ldi	r20, 0x27	; 39
     4e4:	51 e0       	ldi	r21, 0x01	; 1
     4e6:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <sim900_gprs_open_connection>
            (const uint8_t*)"internet", (const uint8_t*)"MobiCom ", (const uint8_t*)" ");
	lcd_write_instruction_4d(lcd_Clear);
     4ea:	81 e0       	ldi	r24, 0x01	; 1
     4ec:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd_write_instruction_4d>
     4f0:	af e1       	ldi	r26, 0x1F	; 31
     4f2:	be e4       	ldi	r27, 0x4E	; 78
     4f4:	11 97       	sbiw	r26, 0x01	; 1
     4f6:	f1 f7       	brne	.-4      	; 0x4f4 <main+0xba>
     4f8:	00 c0       	rjmp	.+0      	; 0x4fa <main+0xc0>
     4fa:	00 00       	nop
    _delay_ms(10);
	lcd_write_string_4d("Initializing HTTP...");
     4fc:	89 e2       	ldi	r24, 0x29	; 41
     4fe:	91 e0       	ldi	r25, 0x01	; 1
     500:	0e 94 11 01 	call	0x222	; 0x222 <lcd_write_string_4d>


    while(1)
	{
		sim900_http_send_data(
     504:	0f 2e       	mov	r0, r31
     506:	fe e3       	ldi	r31, 0x3E	; 62
     508:	af 2e       	mov	r10, r31
     50a:	f1 e0       	ldi	r31, 0x01	; 1
     50c:	bf 2e       	mov	r11, r31
     50e:	f0 2d       	mov	r31, r0
     510:	0f 2e       	mov	r0, r31
     512:	fc e6       	ldi	r31, 0x6C	; 108
     514:	8f 2e       	mov	r8, r31
     516:	f1 e0       	ldi	r31, 0x01	; 1
     518:	9f 2e       	mov	r9, r31
     51a:	f0 2d       	mov	r31, r0
     51c:	0f 2e       	mov	r0, r31
     51e:	f7 e0       	ldi	r31, 0x07	; 7
     520:	ef 2e       	mov	r14, r31
     522:	ff 24       	eor	r15, r15
     524:	f0 2d       	mov	r31, r0
     526:	ec 0e       	add	r14, r28
     528:	fd 1e       	adc	r15, r29
            temp_max[1] = '\0'; 
        }
        
        lcd_write_instruction_4d(lcd_Clear);
        _delay_ms(10);
        lcd_write_string_4d("main     min: ");
     52a:	0f 2e       	mov	r0, r31
     52c:	f9 e7       	ldi	r31, 0x79	; 121
     52e:	6f 2e       	mov	r6, r31
     530:	f1 e0       	ldi	r31, 0x01	; 1
     532:	7f 2e       	mov	r7, r31
     534:	f0 2d       	mov	r31, r0
        lcd_write_string_4d(temp_min);
     536:	6e 01       	movw	r12, r28
     538:	08 94       	sec
     53a:	c1 1c       	adc	r12, r1
     53c:	d1 1c       	adc	r13, r1
        lcd_write_instruction_4d(lcd_SetCursor|lcd_LineTwo);
		    _delay_ms(10);
        lcd_write_string_4d("temp:   ");
     53e:	0f 2e       	mov	r0, r31
     540:	f8 e8       	ldi	r31, 0x88	; 136
     542:	4f 2e       	mov	r4, r31
     544:	f1 e0       	ldi	r31, 0x01	; 1
     546:	5f 2e       	mov	r5, r31
     548:	f0 2d       	mov	r31, r0
        lcd_write_string_4d(room1_temp);
     54a:	0f 2e       	mov	r0, r31
     54c:	f7 e4       	ldi	r31, 0x47	; 71
     54e:	2f 2e       	mov	r2, r31
     550:	33 24       	eor	r3, r3
     552:	f0 2d       	mov	r31, r0
     554:	2c 0e       	add	r2, r28
     556:	3d 1e       	adc	r3, r29
	lcd_write_string_4d("Initializing HTTP...");


    while(1)
	{
		sim900_http_send_data(
     558:	81 e0       	ldi	r24, 0x01	; 1
     55a:	b5 01       	movw	r22, r10
     55c:	a4 01       	movw	r20, r8
     55e:	20 e4       	ldi	r18, 0x40	; 64
     560:	87 01       	movw	r16, r14
     562:	0e 94 58 07 	call	0xeb0	; 0xeb0 <sim900_http_send_data>
            (const uint8_t*)"http://intense-fjord-78468.herokuapp.com/temp",
			(const uint8_t*)"{\"temp\": 16}",
            64,
            http_respon_data);
        
        temp_min[0] = http_respon_data[PARSE_CONST-1];
     566:	8f 85       	ldd	r24, Y+15	; 0x0f
     568:	89 83       	std	Y+1, r24	; 0x01
        if(http_respon_data[PARSE_CONST]=='\"')
     56a:	88 89       	ldd	r24, Y+16	; 0x10
     56c:	82 32       	cpi	r24, 0x22	; 34
     56e:	59 f4       	brne	.+22     	; 0x586 <main+0x14c>
        {
          temp_min[1] = '\0';
     570:	1a 82       	std	Y+2, r1	; 0x02
          temp_max[0] = http_respon_data[PARSE_CONST+10];
     572:	8a 8d       	ldd	r24, Y+26	; 0x1a
     574:	8c 83       	std	Y+4, r24	; 0x04
          if(http_respon_data[PARSE_CONST+10]!='\"')
     576:	82 32       	cpi	r24, 0x22	; 34
     578:	21 f0       	breq	.+8      	; 0x582 <main+0x148>
          {
            temp_max[1] = http_respon_data[PARSE_CONST+11];
     57a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     57c:	8d 83       	std	Y+5, r24	; 0x05
            temp_max[2] = '\0'; 
     57e:	1e 82       	std	Y+6, r1	; 0x06
     580:	0d c0       	rjmp	.+26     	; 0x59c <main+0x162>
          }
          else
            temp_max[1] = '\0';   
     582:	1d 82       	std	Y+5, r1	; 0x05
     584:	0b c0       	rjmp	.+22     	; 0x59c <main+0x162>
        }
        else
        {          
          temp_min[1] = http_respon_data[PARSE_CONST];
     586:	8a 83       	std	Y+2, r24	; 0x02
          temp_min[2] = '\0';
     588:	1b 82       	std	Y+3, r1	; 0x03
          temp_max[0] = http_respon_data[PARSE_CONST+11];
     58a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     58c:	8c 83       	std	Y+4, r24	; 0x04
          if(http_respon_data[PARSE_CONST+11]!='\"')
     58e:	82 32       	cpi	r24, 0x22	; 34
     590:	21 f0       	breq	.+8      	; 0x59a <main+0x160>
          {
            temp_max[1] = http_respon_data[PARSE_CONST+12];
     592:	8c 8d       	ldd	r24, Y+28	; 0x1c
     594:	8d 83       	std	Y+5, r24	; 0x05
            temp_max[2] = '\0'; 
     596:	1e 82       	std	Y+6, r1	; 0x06
     598:	01 c0       	rjmp	.+2      	; 0x59c <main+0x162>
          } 
          else
            temp_max[1] = '\0'; 
     59a:	1d 82       	std	Y+5, r1	; 0x05
        }
        
        lcd_write_instruction_4d(lcd_Clear);
     59c:	81 e0       	ldi	r24, 0x01	; 1
     59e:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd_write_instruction_4d>
     5a2:	ef e1       	ldi	r30, 0x1F	; 31
     5a4:	fe e4       	ldi	r31, 0x4E	; 78
     5a6:	31 97       	sbiw	r30, 0x01	; 1
     5a8:	f1 f7       	brne	.-4      	; 0x5a6 <main+0x16c>
     5aa:	00 c0       	rjmp	.+0      	; 0x5ac <main+0x172>
     5ac:	00 00       	nop
        _delay_ms(10);
        lcd_write_string_4d("main     min: ");
     5ae:	c3 01       	movw	r24, r6
     5b0:	0e 94 11 01 	call	0x222	; 0x222 <lcd_write_string_4d>
        lcd_write_string_4d(temp_min);
     5b4:	c6 01       	movw	r24, r12
     5b6:	0e 94 11 01 	call	0x222	; 0x222 <lcd_write_string_4d>
        lcd_write_instruction_4d(lcd_SetCursor|lcd_LineTwo);
     5ba:	80 ec       	ldi	r24, 0xC0	; 192
     5bc:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd_write_instruction_4d>
     5c0:	8f e1       	ldi	r24, 0x1F	; 31
     5c2:	9e e4       	ldi	r25, 0x4E	; 78
     5c4:	01 97       	sbiw	r24, 0x01	; 1
     5c6:	f1 f7       	brne	.-4      	; 0x5c4 <main+0x18a>
     5c8:	00 c0       	rjmp	.+0      	; 0x5ca <main+0x190>
     5ca:	00 00       	nop
		    _delay_ms(10);
        lcd_write_string_4d("temp:   ");
     5cc:	c2 01       	movw	r24, r4
     5ce:	0e 94 11 01 	call	0x222	; 0x222 <lcd_write_string_4d>
        lcd_write_string_4d(room1_temp);
     5d2:	d1 01       	movw	r26, r2
     5d4:	8c 91       	ld	r24, X
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	0e 94 11 01 	call	0x222	; 0x222 <lcd_write_string_4d>
        lcd_write_string_4d(" ");
     5dc:	87 e2       	ldi	r24, 0x27	; 39
     5de:	91 e0       	ldi	r25, 0x01	; 1
     5e0:	0e 94 11 01 	call	0x222	; 0x222 <lcd_write_string_4d>
        lcd_write_string_4d("max: ");
     5e4:	81 e9       	ldi	r24, 0x91	; 145
     5e6:	91 e0       	ldi	r25, 0x01	; 1
     5e8:	0e 94 11 01 	call	0x222	; 0x222 <lcd_write_string_4d>
        lcd_write_string_4d(temp_max);
     5ec:	ce 01       	movw	r24, r28
     5ee:	04 96       	adiw	r24, 0x04	; 4
     5f0:	0e 94 11 01 	call	0x222	; 0x222 <lcd_write_string_4d>
     5f4:	8f ef       	ldi	r24, 0xFF	; 255
     5f6:	99 e6       	ldi	r25, 0x69	; 105
     5f8:	a8 e1       	ldi	r26, 0x18	; 24
     5fa:	81 50       	subi	r24, 0x01	; 1
     5fc:	90 40       	sbci	r25, 0x00	; 0
     5fe:	a0 40       	sbci	r26, 0x00	; 0
     600:	e1 f7       	brne	.-8      	; 0x5fa <main+0x1c0>
     602:	00 c0       	rjmp	.+0      	; 0x604 <main+0x1ca>
     604:	00 00       	nop
     606:	a8 cf       	rjmp	.-176    	; 0x558 <main+0x11e>

00000608 <uart1_flush_buffer>:

#include "sim900.h"

void uart1_flush_buffer()
{
	while (uart1_getc() != UART_NO_DATA);
     608:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <uart1_getc>
     60c:	21 e0       	ldi	r18, 0x01	; 1
     60e:	80 30       	cpi	r24, 0x00	; 0
     610:	92 07       	cpc	r25, r18
     612:	d1 f7       	brne	.-12     	; 0x608 <uart1_flush_buffer>
}
     614:	08 95       	ret

00000616 <sim900_init_uart>:
void sim900_init_uart(const uint16_t baudrate)
{
     616:	cf 93       	push	r28
     618:	df 93       	push	r29
	//init uart
	uart1_init(UART_BAUD_SELECT(baudrate, F_CPU));
     61a:	9c 01       	movw	r18, r24
     61c:	40 e0       	ldi	r20, 0x00	; 0
     61e:	50 e0       	ldi	r21, 0x00	; 0
     620:	ca 01       	movw	r24, r20
     622:	b9 01       	movw	r22, r18
     624:	60 5c       	subi	r22, 0xC0	; 192
     626:	7d 4b       	sbci	r23, 0xBD	; 189
     628:	80 4f       	sbci	r24, 0xF0	; 240
     62a:	9f 4f       	sbci	r25, 0xFF	; 255
     62c:	66 0f       	add	r22, r22
     62e:	77 1f       	adc	r23, r23
     630:	88 1f       	adc	r24, r24
     632:	99 1f       	adc	r25, r25
     634:	66 0f       	add	r22, r22
     636:	77 1f       	adc	r23, r23
     638:	88 1f       	adc	r24, r24
     63a:	99 1f       	adc	r25, r25
     63c:	66 0f       	add	r22, r22
     63e:	77 1f       	adc	r23, r23
     640:	88 1f       	adc	r24, r24
     642:	99 1f       	adc	r25, r25
     644:	22 0f       	add	r18, r18
     646:	33 1f       	adc	r19, r19
     648:	44 1f       	adc	r20, r20
     64a:	55 1f       	adc	r21, r21
     64c:	22 0f       	add	r18, r18
     64e:	33 1f       	adc	r19, r19
     650:	44 1f       	adc	r20, r20
     652:	55 1f       	adc	r21, r21
     654:	22 0f       	add	r18, r18
     656:	33 1f       	adc	r19, r19
     658:	44 1f       	adc	r20, r20
     65a:	55 1f       	adc	r21, r21
     65c:	22 0f       	add	r18, r18
     65e:	33 1f       	adc	r19, r19
     660:	44 1f       	adc	r20, r20
     662:	55 1f       	adc	r21, r21
     664:	0e 94 3a 0b 	call	0x1674	; 0x1674 <__udivmodsi4>
     668:	c9 01       	movw	r24, r18
     66a:	01 97       	sbiw	r24, 0x01	; 1
     66c:	0e 94 cb 0a 	call	0x1596	; 0x1596 <uart1_init>
     670:	8f ef       	ldi	r24, 0xFF	; 255
     672:	90 e7       	ldi	r25, 0x70	; 112
     674:	a2 e0       	ldi	r26, 0x02	; 2
     676:	81 50       	subi	r24, 0x01	; 1
     678:	90 40       	sbci	r25, 0x00	; 0
     67a:	a0 40       	sbci	r26, 0x00	; 0
     67c:	e1 f7       	brne	.-8      	; 0x676 <sim900_init_uart+0x60>
     67e:	00 c0       	rjmp	.+0      	; 0x680 <sim900_init_uart+0x6a>
     680:	00 00       	nop
	_delay_ms(100);
	uart1_puts("A");
     682:	c7 e9       	ldi	r28, 0x97	; 151
     684:	d1 e0       	ldi	r29, 0x01	; 1
     686:	ce 01       	movw	r24, r28
     688:	0e 94 19 0b 	call	0x1632	; 0x1632 <uart1_puts>
     68c:	8f ef       	ldi	r24, 0xFF	; 255
     68e:	90 e7       	ldi	r25, 0x70	; 112
     690:	a2 e0       	ldi	r26, 0x02	; 2
     692:	81 50       	subi	r24, 0x01	; 1
     694:	90 40       	sbci	r25, 0x00	; 0
     696:	a0 40       	sbci	r26, 0x00	; 0
     698:	e1 f7       	brne	.-8      	; 0x692 <sim900_init_uart+0x7c>
     69a:	00 c0       	rjmp	.+0      	; 0x69c <sim900_init_uart+0x86>
     69c:	00 00       	nop
	_delay_ms(100);
	uart1_puts("A");
     69e:	ce 01       	movw	r24, r28
     6a0:	0e 94 19 0b 	call	0x1632	; 0x1632 <uart1_puts>
     6a4:	8f ef       	ldi	r24, 0xFF	; 255
     6a6:	90 e7       	ldi	r25, 0x70	; 112
     6a8:	a2 e0       	ldi	r26, 0x02	; 2
     6aa:	81 50       	subi	r24, 0x01	; 1
     6ac:	90 40       	sbci	r25, 0x00	; 0
     6ae:	a0 40       	sbci	r26, 0x00	; 0
     6b0:	e1 f7       	brne	.-8      	; 0x6aa <sim900_init_uart+0x94>
     6b2:	00 c0       	rjmp	.+0      	; 0x6b4 <sim900_init_uart+0x9e>
     6b4:	00 00       	nop
	_delay_ms(100);
	uart1_puts("ATE0");
     6b6:	89 e9       	ldi	r24, 0x99	; 153
     6b8:	91 e0       	ldi	r25, 0x01	; 1
     6ba:	0e 94 19 0b 	call	0x1632	; 0x1632 <uart1_puts>
     6be:	8f ef       	ldi	r24, 0xFF	; 255
     6c0:	99 e6       	ldi	r25, 0x69	; 105
     6c2:	a8 e1       	ldi	r26, 0x18	; 24
     6c4:	81 50       	subi	r24, 0x01	; 1
     6c6:	90 40       	sbci	r25, 0x00	; 0
     6c8:	a0 40       	sbci	r26, 0x00	; 0
     6ca:	e1 f7       	brne	.-8      	; 0x6c4 <sim900_init_uart+0xae>
     6cc:	00 c0       	rjmp	.+0      	; 0x6ce <sim900_init_uart+0xb8>
     6ce:	00 00       	nop
	_delay_ms(1000);
	uart1_flush_buffer();
     6d0:	0e 94 04 03 	call	0x608	; 0x608 <uart1_flush_buffer>

}
     6d4:	df 91       	pop	r29
     6d6:	cf 91       	pop	r28
     6d8:	08 95       	ret

000006da <sim900_send_cmd_wait_reply>:

uint8_t sim900_send_cmd_wait_reply(const uint8_t send_from_progmem, const uint8_t *aCmd, const uint8_t
*aResponExit, const uint32_t aTimeoutMax, const uint8_t aLenOut, uint8_t
*aResponOut)
{
     6da:	2f 92       	push	r2
     6dc:	3f 92       	push	r3
     6de:	4f 92       	push	r4
     6e0:	5f 92       	push	r5
     6e2:	6f 92       	push	r6
     6e4:	7f 92       	push	r7
     6e6:	8f 92       	push	r8
     6e8:	9f 92       	push	r9
     6ea:	af 92       	push	r10
     6ec:	bf 92       	push	r11
     6ee:	cf 92       	push	r12
     6f0:	df 92       	push	r13
     6f2:	ef 92       	push	r14
     6f4:	ff 92       	push	r15
     6f6:	0f 93       	push	r16
     6f8:	1f 93       	push	r17
     6fa:	df 93       	push	r29
     6fc:	cf 93       	push	r28
     6fe:	00 d0       	rcall	.+0      	; 0x700 <sim900_send_cmd_wait_reply+0x26>
     700:	00 d0       	rcall	.+0      	; 0x702 <sim900_send_cmd_wait_reply+0x28>
     702:	0f 92       	push	r0
     704:	cd b7       	in	r28, 0x3d	; 61
     706:	de b7       	in	r29, 0x3e	; 62
     708:	28 2e       	mov	r2, r24
     70a:	3b 01       	movw	r6, r22
     70c:	2a 01       	movw	r4, r20
     70e:	48 01       	movw	r8, r16
     710:	59 01       	movw	r10, r18
     712:	e9 82       	std	Y+1, r14	; 0x01
     714:	db 82       	std	Y+3, r13	; 0x03
     716:	ca 82       	std	Y+2, r12	; 0x02

	uint8_t id_data, respons = 0;
	uint32_t uart_tout_cnt = 0;
	uint16_t uart_data;
	
	uint8_t *aDataBuffer = (uint8_t*) calloc(MAX_BUFFER_TMP,sizeof(uint8_t));
     718:	80 e4       	ldi	r24, 0x40	; 64
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	61 e0       	ldi	r22, 0x01	; 1
     71e:	70 e0       	ldi	r23, 0x00	; 0
     720:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <calloc>
     724:	18 2f       	mov	r17, r24
     726:	e9 2e       	mov	r14, r25
     728:	98 2f       	mov	r25, r24
     72a:	49 2f       	mov	r20, r25
     72c:	5e 2d       	mov	r21, r14
     72e:	5d 83       	std	Y+5, r21	; 0x05
     730:	4c 83       	std	Y+4, r20	; 0x04
	
	//buffer created???
	if (aDataBuffer == NULL)
     732:	41 15       	cp	r20, r1
     734:	51 05       	cpc	r21, r1
     736:	09 f4       	brne	.+2      	; 0x73a <sim900_send_cmd_wait_reply+0x60>
     738:	78 c0       	rjmp	.+240    	; 0x82a <sim900_send_cmd_wait_reply+0x150>
	{
		return 0;
	}

	//reset to all 0
	memset(aDataBuffer, '\0', MAX_BUFFER_TMP);
     73a:	e9 2f       	mov	r30, r25
     73c:	fe 2d       	mov	r31, r14
     73e:	80 e4       	ldi	r24, 0x40	; 64
     740:	df 01       	movw	r26, r30
     742:	1d 92       	st	X+, r1
     744:	8a 95       	dec	r24
     746:	e9 f7       	brne	.-6      	; 0x742 <sim900_send_cmd_wait_reply+0x68>

	//read left buffer data
	if (aCmd != NULL)
     748:	61 14       	cp	r6, r1
     74a:	71 04       	cpc	r7, r1
     74c:	e9 f1       	breq	.+122    	; 0x7c8 <sim900_send_cmd_wait_reply+0xee>
	{
		uart1_flush_buffer();
     74e:	0e 94 04 03 	call	0x608	; 0x608 <uart1_flush_buffer>
	}

	//send command
	if (aCmd != NULL)
	{
		if (send_from_progmem)
     752:	22 20       	and	r2, r2
     754:	21 f0       	breq	.+8      	; 0x75e <sim900_send_cmd_wait_reply+0x84>
		{
			uart1_puts_p((const char*)aCmd);
     756:	c3 01       	movw	r24, r6
     758:	0e 94 28 0b 	call	0x1650	; 0x1650 <uart1_puts_p>
     75c:	35 c0       	rjmp	.+106    	; 0x7c8 <sim900_send_cmd_wait_reply+0xee>
		}
		else
		{
			uart1_puts((const char*)aCmd);
     75e:	c3 01       	movw	r24, r6
     760:	0e 94 19 0b 	call	0x1632	; 0x1632 <uart1_puts>
     764:	31 c0       	rjmp	.+98     	; 0x7c8 <sim900_send_cmd_wait_reply+0xee>
		uart_tout_cnt = 0;
		while (((uart_data = uart1_getc()) == UART_NO_DATA) && (uart_tout_cnt <
		aTimeoutMax))
		//wait data arrive or tout
		{
			uart_tout_cnt++;
     766:	08 94       	sec
     768:	e1 1c       	adc	r14, r1
     76a:	f1 1c       	adc	r15, r1
     76c:	01 1d       	adc	r16, r1
     76e:	11 1d       	adc	r17, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     770:	b2 e0       	ldi	r27, 0x02	; 2
     772:	ba 95       	dec	r27
     774:	f1 f7       	brne	.-4      	; 0x772 <sim900_send_cmd_wait_reply+0x98>
     776:	00 c0       	rjmp	.+0      	; 0x778 <sim900_send_cmd_wait_reply+0x9e>
	uart_tout_cnt = 0;
	while ((id_data < (MAX_BUFFER_TMP - 1)) && (uart_tout_cnt <= aTimeoutMax))
	{
		//get uart data or timeout
		uart_tout_cnt = 0;
		while (((uart_data = uart1_getc()) == UART_NO_DATA) && (uart_tout_cnt <
     778:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <uart1_getc>
     77c:	e1 e0       	ldi	r30, 0x01	; 1
     77e:	80 30       	cpi	r24, 0x00	; 0
     780:	9e 07       	cpc	r25, r30
     782:	39 f4       	brne	.+14     	; 0x792 <sim900_send_cmd_wait_reply+0xb8>
     784:	e8 14       	cp	r14, r8
     786:	f9 04       	cpc	r15, r9
     788:	0a 05       	cpc	r16, r10
     78a:	1b 05       	cpc	r17, r11
     78c:	60 f3       	brcs	.-40     	; 0x766 <sim900_send_cmd_wait_reply+0x8c>
		}

		//check for timeout
		if (uart_tout_cnt >= aTimeoutMax)
		{
			respons = 0;
     78e:	10 e0       	ldi	r17, 0x00	; 0
     790:	33 c0       	rjmp	.+102    	; 0x7f8 <sim900_send_cmd_wait_reply+0x11e>
			uart_tout_cnt++;
			_delay_us(1);
		}

		//check for timeout
		if (uart_tout_cnt >= aTimeoutMax)
     792:	e8 14       	cp	r14, r8
     794:	f9 04       	cpc	r15, r9
     796:	0a 05       	cpc	r16, r10
     798:	1b 05       	cpc	r17, r11
     79a:	38 f5       	brcc	.+78     	; 0x7ea <sim900_send_cmd_wait_reply+0x110>
			respons = 0;
			break;
		}
		else
		{
			aDataBuffer[id_data] = uart_data;
     79c:	d3 01       	movw	r26, r6
     79e:	8d 93       	st	X+, r24
     7a0:	3d 01       	movw	r6, r26
			id_data++;
     7a2:	d3 94       	inc	r13

			// check if the desired answer  is in the response of the module
			if (aResponExit != NULL)
     7a4:	41 14       	cp	r4, r1
     7a6:	51 04       	cpc	r5, r1
     7a8:	39 f0       	breq	.+14     	; 0x7b8 <sim900_send_cmd_wait_reply+0xde>
			{
				if (strstr((const char*)aDataBuffer, (const char*)aResponExit) != NULL)
     7aa:	8c 81       	ldd	r24, Y+4	; 0x04
     7ac:	9d 81       	ldd	r25, Y+5	; 0x05
     7ae:	b2 01       	movw	r22, r4
     7b0:	0e 94 ef 0c 	call	0x19de	; 0x19de <strstr>
     7b4:	00 97       	sbiw	r24, 0x00	; 0
     7b6:	d9 f4       	brne	.+54     	; 0x7ee <sim900_send_cmd_wait_reply+0x114>
					break;
				}
			}

			//check error also
			if (strstr((const char*)aDataBuffer, (const char*)RESPON_ERROR) != NULL)
     7b8:	8c 81       	ldd	r24, Y+4	; 0x04
     7ba:	9d 81       	ldd	r25, Y+5	; 0x05
     7bc:	b1 01       	movw	r22, r2
     7be:	0e 94 ef 0c 	call	0x19de	; 0x19de <strstr>
     7c2:	00 97       	sbiw	r24, 0x00	; 0
     7c4:	59 f0       	breq	.+22     	; 0x7dc <sim900_send_cmd_wait_reply+0x102>
     7c6:	15 c0       	rjmp	.+42     	; 0x7f2 <sim900_send_cmd_wait_reply+0x118>
     7c8:	61 2e       	mov	r6, r17
     7ca:	7e 2c       	mov	r7, r14
}

uint8_t sim900_send_cmd_wait_reply(const uint8_t send_from_progmem, const uint8_t *aCmd, const uint8_t
*aResponExit, const uint32_t aTimeoutMax, const uint8_t aLenOut, uint8_t
*aResponOut)
{
     7cc:	dd 24       	eor	r13, r13
					break;
				}
			}

			//check error also
			if (strstr((const char*)aDataBuffer, (const char*)RESPON_ERROR) != NULL)
     7ce:	0f 2e       	mov	r0, r31
     7d0:	fe e9       	ldi	r31, 0x9E	; 158
     7d2:	2f 2e       	mov	r2, r31
     7d4:	f1 e0       	ldi	r31, 0x01	; 1
     7d6:	3f 2e       	mov	r3, r31
     7d8:	f0 2d       	mov	r31, r0
     7da:	03 c0       	rjmp	.+6      	; 0x7e2 <sim900_send_cmd_wait_reply+0x108>
	}

	//wait for reply
	id_data = 0;
	uart_tout_cnt = 0;
	while ((id_data < (MAX_BUFFER_TMP - 1)) && (uart_tout_cnt <= aTimeoutMax))
     7dc:	bd 2d       	mov	r27, r13
     7de:	bf 33       	cpi	r27, 0x3F	; 63
     7e0:	51 f0       	breq	.+20     	; 0x7f6 <sim900_send_cmd_wait_reply+0x11c>
}

uint8_t sim900_send_cmd_wait_reply(const uint8_t send_from_progmem, const uint8_t *aCmd, const uint8_t
*aResponExit, const uint32_t aTimeoutMax, const uint8_t aLenOut, uint8_t
*aResponOut)
{
     7e2:	ee 24       	eor	r14, r14
     7e4:	ff 24       	eor	r15, r15
     7e6:	87 01       	movw	r16, r14
     7e8:	c7 cf       	rjmp	.-114    	; 0x778 <sim900_send_cmd_wait_reply+0x9e>
		}

		//check for timeout
		if (uart_tout_cnt >= aTimeoutMax)
		{
			respons = 0;
     7ea:	10 e0       	ldi	r17, 0x00	; 0
     7ec:	05 c0       	rjmp	.+10     	; 0x7f8 <sim900_send_cmd_wait_reply+0x11e>
			// check if the desired answer  is in the response of the module
			if (aResponExit != NULL)
			{
				if (strstr((const char*)aDataBuffer, (const char*)aResponExit) != NULL)
				{
					respons = 1;
     7ee:	11 e0       	ldi	r17, 0x01	; 1
     7f0:	03 c0       	rjmp	.+6      	; 0x7f8 <sim900_send_cmd_wait_reply+0x11e>
			}

			//check error also
			if (strstr((const char*)aDataBuffer, (const char*)RESPON_ERROR) != NULL)
			{
				respons = 0;
     7f2:	10 e0       	ldi	r17, 0x00	; 0
     7f4:	01 c0       	rjmp	.+2      	; 0x7f8 <sim900_send_cmd_wait_reply+0x11e>
*aResponExit, const uint32_t aTimeoutMax, const uint8_t aLenOut, uint8_t
*aResponOut)
{
	#define MAX_BUFFER_TMP	64

	uint8_t id_data, respons = 0;
     7f6:	10 e0       	ldi	r17, 0x00	; 0
			}
		}
	}

	//copy it to the out
	if ((aLenOut != 0) && (aResponOut != NULL) && (aLenOut > id_data) && (respons)
     7f8:	e9 81       	ldd	r30, Y+1	; 0x01
     7fa:	ee 23       	and	r30, r30
     7fc:	89 f0       	breq	.+34     	; 0x820 <sim900_send_cmd_wait_reply+0x146>
     7fe:	ea 80       	ldd	r14, Y+2	; 0x02
     800:	fb 80       	ldd	r15, Y+3	; 0x03
     802:	e1 14       	cp	r14, r1
     804:	f1 04       	cpc	r15, r1
     806:	61 f0       	breq	.+24     	; 0x820 <sim900_send_cmd_wait_reply+0x146>
     808:	de 16       	cp	r13, r30
     80a:	50 f4       	brcc	.+20     	; 0x820 <sim900_send_cmd_wait_reply+0x146>
     80c:	11 23       	and	r17, r17
     80e:	41 f0       	breq	.+16     	; 0x820 <sim900_send_cmd_wait_reply+0x146>
	)
	{
		memcpy(aResponOut, aDataBuffer, id_data *sizeof(uint8_t));
     810:	8a 81       	ldd	r24, Y+2	; 0x02
     812:	9b 81       	ldd	r25, Y+3	; 0x03
     814:	6c 81       	ldd	r22, Y+4	; 0x04
     816:	7d 81       	ldd	r23, Y+5	; 0x05
     818:	4d 2d       	mov	r20, r13
     81a:	50 e0       	ldi	r21, 0x00	; 0
     81c:	0e 94 df 0c 	call	0x19be	; 0x19be <memcpy>
	}
	
	//free the buffer
	free(aDataBuffer);
     820:	8c 81       	ldd	r24, Y+4	; 0x04
     822:	9d 81       	ldd	r25, Y+5	; 0x05
     824:	0e 94 1b 0c 	call	0x1836	; 0x1836 <free>

	//return it
	return respons;
     828:	01 c0       	rjmp	.+2      	; 0x82c <sim900_send_cmd_wait_reply+0x152>
	uint8_t *aDataBuffer = (uint8_t*) calloc(MAX_BUFFER_TMP,sizeof(uint8_t));
	
	//buffer created???
	if (aDataBuffer == NULL)
	{
		return 0;
     82a:	10 e0       	ldi	r17, 0x00	; 0
	//free the buffer
	free(aDataBuffer);

	//return it
	return respons;
}
     82c:	81 2f       	mov	r24, r17
     82e:	0f 90       	pop	r0
     830:	0f 90       	pop	r0
     832:	0f 90       	pop	r0
     834:	0f 90       	pop	r0
     836:	0f 90       	pop	r0
     838:	cf 91       	pop	r28
     83a:	df 91       	pop	r29
     83c:	1f 91       	pop	r17
     83e:	0f 91       	pop	r16
     840:	ff 90       	pop	r15
     842:	ef 90       	pop	r14
     844:	df 90       	pop	r13
     846:	cf 90       	pop	r12
     848:	bf 90       	pop	r11
     84a:	af 90       	pop	r10
     84c:	9f 90       	pop	r9
     84e:	8f 90       	pop	r8
     850:	7f 90       	pop	r7
     852:	6f 90       	pop	r6
     854:	5f 90       	pop	r5
     856:	4f 90       	pop	r4
     858:	3f 90       	pop	r3
     85a:	2f 90       	pop	r2
     85c:	08 95       	ret

0000085e <sim900_is_network_registered>:

uint8_t sim900_is_network_registered()
{
     85e:	cf 92       	push	r12
     860:	df 92       	push	r13
     862:	ef 92       	push	r14
     864:	0f 93       	push	r16
     866:	1f 93       	push	r17
	return (sim900_send_cmd_wait_reply(1,(const uint8_t*)PSTR("AT+CREG?\r"), (const
     868:	81 e0       	ldi	r24, 0x01	; 1
     86a:	61 e7       	ldi	r22, 0x71	; 113
     86c:	71 e0       	ldi	r23, 0x01	; 1
     86e:	44 ea       	ldi	r20, 0xA4	; 164
     870:	51 e0       	ldi	r21, 0x01	; 1
     872:	00 e4       	ldi	r16, 0x40	; 64
     874:	1b e4       	ldi	r17, 0x4B	; 75
     876:	2c e4       	ldi	r18, 0x4C	; 76
     878:	30 e0       	ldi	r19, 0x00	; 0
     87a:	ee 24       	eor	r14, r14
     87c:	cc 24       	eor	r12, r12
     87e:	dd 24       	eor	r13, r13
     880:	0e 94 6d 03 	call	0x6da	; 0x6da <sim900_send_cmd_wait_reply>
     884:	88 23       	and	r24, r24
     886:	91 f4       	brne	.+36     	; 0x8ac <sim900_is_network_registered+0x4e>
	uint8_t*)"+CREG: 0,1", 5000000, 0, NULL) || sim900_send_cmd_wait_reply(1,
     888:	81 e0       	ldi	r24, 0x01	; 1
     88a:	67 e6       	ldi	r22, 0x67	; 103
     88c:	71 e0       	ldi	r23, 0x01	; 1
     88e:	4f ea       	ldi	r20, 0xAF	; 175
     890:	51 e0       	ldi	r21, 0x01	; 1
     892:	00 e4       	ldi	r16, 0x40	; 64
     894:	1b e4       	ldi	r17, 0x4B	; 75
     896:	2c e4       	ldi	r18, 0x4C	; 76
     898:	30 e0       	ldi	r19, 0x00	; 0
     89a:	0e 94 6d 03 	call	0x6da	; 0x6da <sim900_send_cmd_wait_reply>
	return respons;
}

uint8_t sim900_is_network_registered()
{
	return (sim900_send_cmd_wait_reply(1,(const uint8_t*)PSTR("AT+CREG?\r"), (const
     89e:	21 e0       	ldi	r18, 0x01	; 1
     8a0:	30 e0       	ldi	r19, 0x00	; 0
     8a2:	88 23       	and	r24, r24
     8a4:	29 f4       	brne	.+10     	; 0x8b0 <sim900_is_network_registered+0x52>
     8a6:	20 e0       	ldi	r18, 0x00	; 0
     8a8:	30 e0       	ldi	r19, 0x00	; 0
     8aa:	02 c0       	rjmp	.+4      	; 0x8b0 <sim900_is_network_registered+0x52>
     8ac:	21 e0       	ldi	r18, 0x01	; 1
     8ae:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t*)"+CREG: 0,1", 5000000, 0, NULL) || sim900_send_cmd_wait_reply(1,
	(const uint8_t*)PSTR("AT+CREG?\r"), (const uint8_t*)"+CREG: 0,5", 5000000, 0,
	NULL));
}
     8b0:	82 2f       	mov	r24, r18
     8b2:	1f 91       	pop	r17
     8b4:	0f 91       	pop	r16
     8b6:	ef 90       	pop	r14
     8b8:	df 90       	pop	r13
     8ba:	cf 90       	pop	r12
     8bc:	08 95       	ret

000008be <sim900_setup>:

uint8_t sim900_setup(const uint8_t isWaitingDevice)
{
     8be:	af 92       	push	r10
     8c0:	bf 92       	push	r11
     8c2:	cf 92       	push	r12
     8c4:	df 92       	push	r13
     8c6:	ef 92       	push	r14
     8c8:	0f 93       	push	r16
     8ca:	1f 93       	push	r17
     8cc:	cf 93       	push	r28
     8ce:	df 93       	push	r29
	uint8_t respons = 0;

	//wait modem wake up
	if (isWaitingDevice)
     8d0:	88 23       	and	r24, r24
     8d2:	b9 f0       	breq	.+46     	; 0x902 <sim900_setup+0x44>
	{
		while (!(respons = sim900_send_cmd_wait_reply(1,(const uint8_t*)PSTR("AT\r"),
     8d4:	c3 e6       	ldi	r28, 0x63	; 99
     8d6:	d1 e0       	ldi	r29, 0x01	; 1
     8d8:	0f 2e       	mov	r0, r31
     8da:	fa eb       	ldi	r31, 0xBA	; 186
     8dc:	af 2e       	mov	r10, r31
     8de:	f1 e0       	ldi	r31, 0x01	; 1
     8e0:	bf 2e       	mov	r11, r31
     8e2:	f0 2d       	mov	r31, r0
     8e4:	81 e0       	ldi	r24, 0x01	; 1
     8e6:	be 01       	movw	r22, r28
     8e8:	a5 01       	movw	r20, r10
     8ea:	00 e2       	ldi	r16, 0x20	; 32
     8ec:	11 ea       	ldi	r17, 0xA1	; 161
     8ee:	27 e0       	ldi	r18, 0x07	; 7
     8f0:	30 e0       	ldi	r19, 0x00	; 0
     8f2:	ee 24       	eor	r14, r14
     8f4:	cc 24       	eor	r12, r12
     8f6:	dd 24       	eor	r13, r13
     8f8:	0e 94 6d 03 	call	0x6da	; 0x6da <sim900_send_cmd_wait_reply>
     8fc:	88 23       	and	r24, r24
     8fe:	91 f3       	breq	.-28     	; 0x8e4 <sim900_setup+0x26>
     900:	10 c0       	rjmp	.+32     	; 0x922 <sim900_setup+0x64>
		(const uint8_t*)RESPON_OK, 500000, 0, NULL)))
		;
	}
	else
	{
		respons = sim900_send_cmd_wait_reply(1,(const uint8_t*)PSTR("AT\r"), (const
     902:	81 e0       	ldi	r24, 0x01	; 1
     904:	6f e5       	ldi	r22, 0x5F	; 95
     906:	71 e0       	ldi	r23, 0x01	; 1
     908:	4a eb       	ldi	r20, 0xBA	; 186
     90a:	51 e0       	ldi	r21, 0x01	; 1
     90c:	00 e2       	ldi	r16, 0x20	; 32
     90e:	11 ea       	ldi	r17, 0xA1	; 161
     910:	27 e0       	ldi	r18, 0x07	; 7
     912:	30 e0       	ldi	r19, 0x00	; 0
     914:	ee 24       	eor	r14, r14
     916:	cc 24       	eor	r12, r12
     918:	dd 24       	eor	r13, r13
     91a:	0e 94 6d 03 	call	0x6da	; 0x6da <sim900_send_cmd_wait_reply>
		uint8_t*)RESPON_OK, 500000, 0, NULL);
	}

	//modem is up?
	if (respons)
     91e:	88 23       	and	r24, r24
     920:	41 f1       	breq	.+80     	; 0x972 <sim900_setup+0xb4>
		//no cmd echo
		//if ((respons = sim900_send_cmd_wait_reply(1,(const uint8_t*)PSTR("ATE0\r"), (const
		//uint8_t*)RESPON_OK, 500000, 0, NULL)))
		//{
			//text mode
			if ((respons = sim900_send_cmd_wait_reply(1,(const uint8_t*)PSTR("AT+CMGF=1\r"),
     922:	81 e0       	ldi	r24, 0x01	; 1
     924:	64 e5       	ldi	r22, 0x54	; 84
     926:	71 e0       	ldi	r23, 0x01	; 1
     928:	4a eb       	ldi	r20, 0xBA	; 186
     92a:	51 e0       	ldi	r21, 0x01	; 1
     92c:	00 e2       	ldi	r16, 0x20	; 32
     92e:	11 ea       	ldi	r17, 0xA1	; 161
     930:	27 e0       	ldi	r18, 0x07	; 7
     932:	30 e0       	ldi	r19, 0x00	; 0
     934:	ee 24       	eor	r14, r14
     936:	cc 24       	eor	r12, r12
     938:	dd 24       	eor	r13, r13
     93a:	0e 94 6d 03 	call	0x6da	; 0x6da <sim900_send_cmd_wait_reply>
     93e:	88 23       	and	r24, r24
     940:	c1 f0       	breq	.+48     	; 0x972 <sim900_setup+0xb4>
			(const uint8_t*)RESPON_OK, 500000, 0, NULL)))
			{
				//storage all to Sim card
				if ((respons = sim900_send_cmd_wait_reply(1,(const uint8_t*)
     942:	81 e0       	ldi	r24, 0x01	; 1
     944:	6c e3       	ldi	r22, 0x3C	; 60
     946:	71 e0       	ldi	r23, 0x01	; 1
     948:	4a eb       	ldi	r20, 0xBA	; 186
     94a:	51 e0       	ldi	r21, 0x01	; 1
     94c:	00 e2       	ldi	r16, 0x20	; 32
     94e:	11 ea       	ldi	r17, 0xA1	; 161
     950:	27 e0       	ldi	r18, 0x07	; 7
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	0e 94 6d 03 	call	0x6da	; 0x6da <sim900_send_cmd_wait_reply>
     958:	88 23       	and	r24, r24
     95a:	59 f0       	breq	.+22     	; 0x972 <sim900_setup+0xb4>
				PSTR("AT+CPMS=\"SM\",\"SM\",\"SM\"\r"), (const uint8_t*)RESPON_OK, 500000,
				0, NULL)))
				{
					//clip=1
					if ((respons = sim900_send_cmd_wait_reply(1,(const uint8_t*)
     95c:	81 e0       	ldi	r24, 0x01	; 1
     95e:	61 e3       	ldi	r22, 0x31	; 49
     960:	71 e0       	ldi	r23, 0x01	; 1
     962:	4a eb       	ldi	r20, 0xBA	; 186
     964:	51 e0       	ldi	r21, 0x01	; 1
     966:	00 e2       	ldi	r16, 0x20	; 32
     968:	11 ea       	ldi	r17, 0xA1	; 161
     96a:	27 e0       	ldi	r18, 0x07	; 7
     96c:	30 e0       	ldi	r19, 0x00	; 0
     96e:	0e 94 6d 03 	call	0x6da	; 0x6da <sim900_send_cmd_wait_reply>
	}
}

//return it
return respons;
}
     972:	df 91       	pop	r29
     974:	cf 91       	pop	r28
     976:	1f 91       	pop	r17
     978:	0f 91       	pop	r16
     97a:	ef 90       	pop	r14
     97c:	df 90       	pop	r13
     97e:	cf 90       	pop	r12
     980:	bf 90       	pop	r11
     982:	af 90       	pop	r10
     984:	08 95       	ret

00000986 <sim900_send_sms>:

//send sms
uint8_t sim900_send_sms(const uint8_t *aSenderNumber, const uint8_t *aMessage)
{
     986:	af 92       	push	r10
     988:	bf 92       	push	r11
     98a:	cf 92       	push	r12
     98c:	df 92       	push	r13
     98e:	ef 92       	push	r14
     990:	ff 92       	push	r15
     992:	0f 93       	push	r16
     994:	1f 93       	push	r17
     996:	cf 93       	push	r28
     998:	df 93       	push	r29
     99a:	7c 01       	movw	r14, r24
     99c:	b6 2e       	mov	r11, r22
     99e:	a7 2e       	mov	r10, r23
	const uint8_t MAX_BUFFER = 32;
	uint8_t respon = 0/*, cmdx[MAX_BUFFER]*/;
	uint8_t *cmdx = (uint8_t*) calloc(MAX_BUFFER,sizeof(uint8_t));
     9a0:	80 e2       	ldi	r24, 0x20	; 32
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	61 e0       	ldi	r22, 0x01	; 1
     9a6:	70 e0       	ldi	r23, 0x00	; 0
     9a8:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <calloc>
     9ac:	08 2f       	mov	r16, r24
     9ae:	19 2f       	mov	r17, r25
     9b0:	c8 2e       	mov	r12, r24
     9b2:	e6 01       	movw	r28, r12
     9b4:	6e 01       	movw	r12, r28
     9b6:	d9 2e       	mov	r13, r25
     9b8:	e6 01       	movw	r28, r12
	
	//buffer created???
	if (cmdx == NULL)
     9ba:	20 97       	sbiw	r28, 0x00	; 0
     9bc:	09 f4       	brne	.+2      	; 0x9c0 <sim900_send_sms+0x3a>
     9be:	5c c0       	rjmp	.+184    	; 0xa78 <sim900_send_sms+0xf2>
	{
		return 0;
	}

	//build the string
	memset(cmdx, '\0', MAX_BUFFER);
     9c0:	e0 2f       	mov	r30, r16
     9c2:	f9 2f       	mov	r31, r25
     9c4:	80 e2       	ldi	r24, 0x20	; 32
     9c6:	df 01       	movw	r26, r30
     9c8:	1d 92       	st	X+, r1
     9ca:	8a 95       	dec	r24
     9cc:	e9 f7       	brne	.-6      	; 0x9c8 <sim900_send_sms+0x42>
	snprintf((char*)cmdx, MAX_BUFFER, "AT+CMGS=\"%s\"\r", aSenderNumber);
     9ce:	8d b7       	in	r24, 0x3d	; 61
     9d0:	9e b7       	in	r25, 0x3e	; 62
     9d2:	08 97       	sbiw	r24, 0x08	; 8
     9d4:	0f b6       	in	r0, 0x3f	; 63
     9d6:	f8 94       	cli
     9d8:	9e bf       	out	0x3e, r25	; 62
     9da:	0f be       	out	0x3f, r0	; 63
     9dc:	8d bf       	out	0x3d, r24	; 61
     9de:	ed b7       	in	r30, 0x3d	; 61
     9e0:	fe b7       	in	r31, 0x3e	; 62
     9e2:	31 96       	adiw	r30, 0x01	; 1
     9e4:	ad b7       	in	r26, 0x3d	; 61
     9e6:	be b7       	in	r27, 0x3e	; 62
     9e8:	11 96       	adiw	r26, 0x01	; 1
     9ea:	0c 93       	st	X, r16
     9ec:	11 97       	sbiw	r26, 0x01	; 1
     9ee:	12 96       	adiw	r26, 0x02	; 2
     9f0:	1c 93       	st	X, r17
     9f2:	80 e2       	ldi	r24, 0x20	; 32
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	93 83       	std	Z+3, r25	; 0x03
     9f8:	82 83       	std	Z+2, r24	; 0x02
     9fa:	8d eb       	ldi	r24, 0xBD	; 189
     9fc:	91 e0       	ldi	r25, 0x01	; 1
     9fe:	95 83       	std	Z+5, r25	; 0x05
     a00:	84 83       	std	Z+4, r24	; 0x04
     a02:	f7 82       	std	Z+7, r15	; 0x07
     a04:	e6 82       	std	Z+6, r14	; 0x06
     a06:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <snprintf>

	if ((respon = sim900_send_cmd_wait_reply(0,(const uint8_t*)cmdx, (const
     a0a:	8d b7       	in	r24, 0x3d	; 61
     a0c:	9e b7       	in	r25, 0x3e	; 62
     a0e:	08 96       	adiw	r24, 0x08	; 8
     a10:	0f b6       	in	r0, 0x3f	; 63
     a12:	f8 94       	cli
     a14:	9e bf       	out	0x3e, r25	; 62
     a16:	0f be       	out	0x3f, r0	; 63
     a18:	8d bf       	out	0x3d, r24	; 61
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	60 2f       	mov	r22, r16
     a1e:	71 2f       	mov	r23, r17
     a20:	4b ec       	ldi	r20, 0xCB	; 203
     a22:	51 e0       	ldi	r21, 0x01	; 1
     a24:	00 e8       	ldi	r16, 0x80	; 128
     a26:	14 e8       	ldi	r17, 0x84	; 132
     a28:	2e e1       	ldi	r18, 0x1E	; 30
     a2a:	30 e0       	ldi	r19, 0x00	; 0
     a2c:	ee 24       	eor	r14, r14
     a2e:	cc 24       	eor	r12, r12
     a30:	dd 24       	eor	r13, r13
     a32:	0e 94 6d 03 	call	0x6da	; 0x6da <sim900_send_cmd_wait_reply>
     a36:	18 2f       	mov	r17, r24
     a38:	88 23       	and	r24, r24
     a3a:	d1 f0       	breq	.+52     	; 0xa70 <sim900_send_sms+0xea>
	uint8_t*)">", 2000000, 0, NULL)))
	{
		//only copy MAX_BUFFER-2 char max from msg
		memcpy(&cmdx[0], aMessage, MAX_BUFFER - 2);
     a3c:	de 01       	movw	r26, r28
     a3e:	8b 2d       	mov	r24, r11
     a40:	9a 2d       	mov	r25, r10
     a42:	fc 01       	movw	r30, r24
     a44:	8e e1       	ldi	r24, 0x1E	; 30
     a46:	01 90       	ld	r0, Z+
     a48:	0d 92       	st	X+, r0
     a4a:	81 50       	subi	r24, 0x01	; 1
     a4c:	e1 f7       	brne	.-8      	; 0xa46 <sim900_send_sms+0xc0>
		cmdx[MAX_BUFFER - 2] = 0x1a;
     a4e:	8a e1       	ldi	r24, 0x1A	; 26
     a50:	8e 8f       	std	Y+30, r24	; 0x1e
		cmdx[MAX_BUFFER - 1] = 0x00;
     a52:	1f 8e       	std	Y+31, r1	; 0x1f

		if ((respon = sim900_send_cmd_wait_reply(0,(const uint8_t*)cmdx, (const
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	be 01       	movw	r22, r28
     a58:	4a eb       	ldi	r20, 0xBA	; 186
     a5a:	51 e0       	ldi	r21, 0x01	; 1
     a5c:	00 e8       	ldi	r16, 0x80	; 128
     a5e:	16 e9       	ldi	r17, 0x96	; 150
     a60:	28 e9       	ldi	r18, 0x98	; 152
     a62:	30 e0       	ldi	r19, 0x00	; 0
     a64:	ee 24       	eor	r14, r14
     a66:	cc 24       	eor	r12, r12
     a68:	dd 24       	eor	r13, r13
     a6a:	0e 94 6d 03 	call	0x6da	; 0x6da <sim900_send_cmd_wait_reply>
     a6e:	18 2f       	mov	r17, r24
	uint8_t*)RESPON_OK, 10000000, 0, NULL))){}
}

//free buffer
free(cmdx);
     a70:	ce 01       	movw	r24, r28
     a72:	0e 94 1b 0c 	call	0x1836	; 0x1836 <free>

return respon;
     a76:	01 c0       	rjmp	.+2      	; 0xa7a <sim900_send_sms+0xf4>
	uint8_t *cmdx = (uint8_t*) calloc(MAX_BUFFER,sizeof(uint8_t));
	
	//buffer created???
	if (cmdx == NULL)
	{
		return 0;
     a78:	10 e0       	ldi	r17, 0x00	; 0

//free buffer
free(cmdx);

return respon;
}
     a7a:	81 2f       	mov	r24, r17
     a7c:	df 91       	pop	r29
     a7e:	cf 91       	pop	r28
     a80:	1f 91       	pop	r17
     a82:	0f 91       	pop	r16
     a84:	ff 90       	pop	r15
     a86:	ef 90       	pop	r14
     a88:	df 90       	pop	r13
     a8a:	cf 90       	pop	r12
     a8c:	bf 90       	pop	r11
     a8e:	af 90       	pop	r10
     a90:	08 95       	ret

00000a92 <sim900_call_phone>:

//calling a phone
uint8_t sim900_call_phone(const uint8_t *aSenderNumber)
{
     a92:	cf 92       	push	r12
     a94:	df 92       	push	r13
     a96:	ef 92       	push	r14
     a98:	ff 92       	push	r15
     a9a:	0f 93       	push	r16
     a9c:	1f 93       	push	r17
     a9e:	cf 93       	push	r28
     aa0:	df 93       	push	r29
     aa2:	8c 01       	movw	r16, r24
	const uint8_t MAX_BUFFER = 30;
	uint8_t respon = 0/*, cmdx[MAX_BUFFER]*/;
	uint8_t *cmdx = (uint8_t*) calloc(MAX_BUFFER,sizeof(uint8_t));
     aa4:	8e e1       	ldi	r24, 0x1E	; 30
     aa6:	90 e0       	ldi	r25, 0x00	; 0
     aa8:	61 e0       	ldi	r22, 0x01	; 1
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <calloc>
     ab0:	e8 2e       	mov	r14, r24
     ab2:	e7 01       	movw	r28, r14
     ab4:	7e 01       	movw	r14, r28
     ab6:	f9 2e       	mov	r15, r25
     ab8:	e7 01       	movw	r28, r14
	
	//buffer created?
	if (cmdx == NULL)
     aba:	20 97       	sbiw	r28, 0x00	; 0
     abc:	09 f4       	brne	.+2      	; 0xac0 <sim900_call_phone+0x2e>
     abe:	40 c0       	rjmp	.+128    	; 0xb40 <sim900_call_phone+0xae>
	{
		return 0;
	}

	//init string
	memset(cmdx, '\0', MAX_BUFFER);
     ac0:	ee 2d       	mov	r30, r14
     ac2:	f9 2f       	mov	r31, r25
     ac4:	8e e1       	ldi	r24, 0x1E	; 30
     ac6:	df 01       	movw	r26, r30
     ac8:	1d 92       	st	X+, r1
     aca:	8a 95       	dec	r24
     acc:	e9 f7       	brne	.-6      	; 0xac8 <sim900_call_phone+0x36>
	snprintf((char*)cmdx, MAX_BUFFER, "ATD%s;\r", aSenderNumber);
     ace:	2d b7       	in	r18, 0x3d	; 61
     ad0:	3e b7       	in	r19, 0x3e	; 62
     ad2:	28 50       	subi	r18, 0x08	; 8
     ad4:	30 40       	sbci	r19, 0x00	; 0
     ad6:	0f b6       	in	r0, 0x3f	; 63
     ad8:	f8 94       	cli
     ada:	3e bf       	out	0x3e, r19	; 62
     adc:	0f be       	out	0x3f, r0	; 63
     ade:	2d bf       	out	0x3d, r18	; 61
     ae0:	ed b7       	in	r30, 0x3d	; 61
     ae2:	fe b7       	in	r31, 0x3e	; 62
     ae4:	31 96       	adiw	r30, 0x01	; 1
     ae6:	ad b7       	in	r26, 0x3d	; 61
     ae8:	be b7       	in	r27, 0x3e	; 62
     aea:	12 96       	adiw	r26, 0x02	; 2
     aec:	fc 92       	st	X, r15
     aee:	ee 92       	st	-X, r14
     af0:	11 97       	sbiw	r26, 0x01	; 1
     af2:	8e e1       	ldi	r24, 0x1E	; 30
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	93 83       	std	Z+3, r25	; 0x03
     af8:	82 83       	std	Z+2, r24	; 0x02
     afa:	8d ec       	ldi	r24, 0xCD	; 205
     afc:	91 e0       	ldi	r25, 0x01	; 1
     afe:	95 83       	std	Z+5, r25	; 0x05
     b00:	84 83       	std	Z+4, r24	; 0x04
     b02:	17 83       	std	Z+7, r17	; 0x07
     b04:	06 83       	std	Z+6, r16	; 0x06
     b06:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <snprintf>
	respon = sim900_send_cmd_wait_reply(0,(const uint8_t*)cmdx, (const uint8_t*)
     b0a:	2d b7       	in	r18, 0x3d	; 61
     b0c:	3e b7       	in	r19, 0x3e	; 62
     b0e:	28 5f       	subi	r18, 0xF8	; 248
     b10:	3f 4f       	sbci	r19, 0xFF	; 255
     b12:	0f b6       	in	r0, 0x3f	; 63
     b14:	f8 94       	cli
     b16:	3e bf       	out	0x3e, r19	; 62
     b18:	0f be       	out	0x3f, r0	; 63
     b1a:	2d bf       	out	0x3d, r18	; 61
     b1c:	80 e0       	ldi	r24, 0x00	; 0
     b1e:	b7 01       	movw	r22, r14
     b20:	4a eb       	ldi	r20, 0xBA	; 186
     b22:	51 e0       	ldi	r21, 0x01	; 1
     b24:	00 e8       	ldi	r16, 0x80	; 128
     b26:	16 e9       	ldi	r17, 0x96	; 150
     b28:	28 e9       	ldi	r18, 0x98	; 152
     b2a:	30 e0       	ldi	r19, 0x00	; 0
     b2c:	ee 24       	eor	r14, r14
     b2e:	cc 24       	eor	r12, r12
     b30:	dd 24       	eor	r13, r13
     b32:	0e 94 6d 03 	call	0x6da	; 0x6da <sim900_send_cmd_wait_reply>
     b36:	08 2f       	mov	r16, r24
	RESPON_OK, 10000000, 0, NULL);
	
	//free buffer
	free(cmdx);
     b38:	ce 01       	movw	r24, r28
     b3a:	0e 94 1b 0c 	call	0x1836	; 0x1836 <free>
	
	return respon;
     b3e:	01 c0       	rjmp	.+2      	; 0xb42 <sim900_call_phone+0xb0>
	uint8_t *cmdx = (uint8_t*) calloc(MAX_BUFFER,sizeof(uint8_t));
	
	//buffer created?
	if (cmdx == NULL)
	{
		return 0;
     b40:	00 e0       	ldi	r16, 0x00	; 0
	
	//free buffer
	free(cmdx);
	
	return respon;
}
     b42:	80 2f       	mov	r24, r16
     b44:	df 91       	pop	r29
     b46:	cf 91       	pop	r28
     b48:	1f 91       	pop	r17
     b4a:	0f 91       	pop	r16
     b4c:	ff 90       	pop	r15
     b4e:	ef 90       	pop	r14
     b50:	df 90       	pop	r13
     b52:	cf 90       	pop	r12
     b54:	08 95       	ret

00000b56 <sim900_gprs_is_opened>:

//cek gprs status
uint8_t sim900_gprs_is_opened()
{
     b56:	cf 92       	push	r12
     b58:	df 92       	push	r13
     b5a:	ef 92       	push	r14
     b5c:	0f 93       	push	r16
     b5e:	1f 93       	push	r17
  uint8_t respon = sim900_send_cmd_wait_reply(1,(const uint8_t*)PSTR("AT+SAPBR=2,1\r"),
     b60:	81 e0       	ldi	r24, 0x01	; 1
     b62:	63 e2       	ldi	r22, 0x23	; 35
     b64:	71 e0       	ldi	r23, 0x01	; 1
     b66:	45 ed       	ldi	r20, 0xD5	; 213
     b68:	51 e0       	ldi	r21, 0x01	; 1
     b6a:	00 e2       	ldi	r16, 0x20	; 32
     b6c:	11 ea       	ldi	r17, 0xA1	; 161
     b6e:	27 e0       	ldi	r18, 0x07	; 7
     b70:	30 e0       	ldi	r19, 0x00	; 0
     b72:	ee 24       	eor	r14, r14
     b74:	cc 24       	eor	r12, r12
     b76:	dd 24       	eor	r13, r13
     b78:	0e 94 6d 03 	call	0x6da	; 0x6da <sim900_send_cmd_wait_reply>
    (const uint8_t*)"1,1", 500000, 0, NULL);
  return respon;
}
     b7c:	1f 91       	pop	r17
     b7e:	0f 91       	pop	r16
     b80:	ef 90       	pop	r14
     b82:	df 90       	pop	r13
     b84:	cf 90       	pop	r12
     b86:	08 95       	ret

00000b88 <sim900_gprs_close_connection>:

//close gprs conn
uint8_t sim900_gprs_close_connection()
{
     b88:	cf 92       	push	r12
     b8a:	df 92       	push	r13
     b8c:	ef 92       	push	r14
     b8e:	0f 93       	push	r16
     b90:	1f 93       	push	r17
  //uint8_t respon = (sim900_gprs_is_opened() ? sim900_send_cmd_wait_reply((const
    //uint8_t*)"AT+SAPBR=0,1\r", (const uint8_t*)RESPON_OK, 5000000, 0, NULL): 1);
 uint8_t respon = (sim900_gprs_is_opened() ? sim900_send_cmd_wait_reply(1,(const
     b92:	0e 94 ab 05 	call	0xb56	; 0xb56 <sim900_gprs_is_opened>
     b96:	88 23       	and	r24, r24
     b98:	79 f0       	breq	.+30     	; 0xbb8 <sim900_gprs_close_connection+0x30>
     b9a:	81 e0       	ldi	r24, 0x01	; 1
     b9c:	65 e1       	ldi	r22, 0x15	; 21
     b9e:	71 e0       	ldi	r23, 0x01	; 1
     ba0:	4a eb       	ldi	r20, 0xBA	; 186
     ba2:	51 e0       	ldi	r21, 0x01	; 1
     ba4:	00 e4       	ldi	r16, 0x40	; 64
     ba6:	1b e4       	ldi	r17, 0x4B	; 75
     ba8:	2c e4       	ldi	r18, 0x4C	; 76
     baa:	30 e0       	ldi	r19, 0x00	; 0
     bac:	ee 24       	eor	r14, r14
     bae:	cc 24       	eor	r12, r12
     bb0:	dd 24       	eor	r13, r13
     bb2:	0e 94 6d 03 	call	0x6da	; 0x6da <sim900_send_cmd_wait_reply>
     bb6:	01 c0       	rjmp	.+2      	; 0xbba <sim900_gprs_close_connection+0x32>
     bb8:	81 e0       	ldi	r24, 0x01	; 1
 uint8_t*)PSTR("AT+SAPBR=0,1\r"), (const uint8_t*)RESPON_OK, 5000000, 0, NULL): 1);
  return respon;
}
     bba:	1f 91       	pop	r17
     bbc:	0f 91       	pop	r16
     bbe:	ef 90       	pop	r14
     bc0:	df 90       	pop	r13
     bc2:	cf 90       	pop	r12
     bc4:	08 95       	ret

00000bc6 <sim900_gprs_start_connection>:

//open gprs conn
uint8_t sim900_gprs_start_connection()
{
     bc6:	cf 92       	push	r12
     bc8:	df 92       	push	r13
     bca:	ef 92       	push	r14
     bcc:	0f 93       	push	r16
     bce:	1f 93       	push	r17
  uint8_t respon = sim900_send_cmd_wait_reply(1,(const uint8_t*)PSTR("AT+SAPBR=1,1\r"),
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	67 e0       	ldi	r22, 0x07	; 7
     bd4:	71 e0       	ldi	r23, 0x01	; 1
     bd6:	4a eb       	ldi	r20, 0xBA	; 186
     bd8:	51 e0       	ldi	r21, 0x01	; 1
     bda:	00 e0       	ldi	r16, 0x00	; 0
     bdc:	11 ee       	ldi	r17, 0xE1	; 225
     bde:	25 ef       	ldi	r18, 0xF5	; 245
     be0:	35 e0       	ldi	r19, 0x05	; 5
     be2:	ee 24       	eor	r14, r14
     be4:	cc 24       	eor	r12, r12
     be6:	dd 24       	eor	r13, r13
     be8:	0e 94 6d 03 	call	0x6da	; 0x6da <sim900_send_cmd_wait_reply>
    (const uint8_t*)RESPON_OK, 100000000, 0, NULL);
  return respon;
}
     bec:	1f 91       	pop	r17
     bee:	0f 91       	pop	r16
     bf0:	ef 90       	pop	r14
     bf2:	df 90       	pop	r13
     bf4:	cf 90       	pop	r12
     bf6:	08 95       	ret

00000bf8 <sim900_gprs_open_connection>:

//open gprs session
uint8_t sim900_gprs_open_connection(const uint8_t *apn, const uint8_t *username,
  const uint8_t *password)
{
     bf8:	6f 92       	push	r6
     bfa:	7f 92       	push	r7
     bfc:	8f 92       	push	r8
     bfe:	9f 92       	push	r9
     c00:	af 92       	push	r10
     c02:	bf 92       	push	r11
     c04:	cf 92       	push	r12
     c06:	df 92       	push	r13
     c08:	ef 92       	push	r14
     c0a:	ff 92       	push	r15
     c0c:	0f 93       	push	r16
     c0e:	1f 93       	push	r17
     c10:	cf 93       	push	r28
     c12:	df 93       	push	r29
     c14:	5c 01       	movw	r10, r24
     c16:	4b 01       	movw	r8, r22
     c18:	3a 01       	movw	r6, r20
  #define CMD_SAPBR_NEW	"AT+SAPBR=3,1,"

  const uint8_t MAX_BUFFER_NUM = 35;
  //uint8_t cmdx[MAX_BUFFER_NUM];
  uint8_t *cmdx = (uint8_t*) calloc(MAX_BUFFER_NUM,sizeof(uint8_t));
     c1a:	83 e2       	ldi	r24, 0x23	; 35
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	61 e0       	ldi	r22, 0x01	; 1
     c20:	70 e0       	ldi	r23, 0x00	; 0
     c22:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <calloc>
     c26:	38 2f       	mov	r19, r24
     c28:	e8 2e       	mov	r14, r24
     c2a:	e7 01       	movw	r28, r14
     c2c:	7e 01       	movw	r14, r28
     c2e:	f9 2e       	mov	r15, r25
     c30:	e7 01       	movw	r28, r14
  
  //buffer created??
  if (cmdx == NULL)
     c32:	20 97       	sbiw	r28, 0x00	; 0
     c34:	09 f4       	brne	.+2      	; 0xc38 <sim900_gprs_open_connection+0x40>
     c36:	13 c1       	rjmp	.+550    	; 0xe5e <sim900_gprs_open_connection+0x266>
  {
	  return 0;
  }

  //setup string
  memset(cmdx, '\0', MAX_BUFFER_NUM);
     c38:	e3 2f       	mov	r30, r19
     c3a:	f9 2f       	mov	r31, r25
     c3c:	83 e2       	ldi	r24, 0x23	; 35
     c3e:	df 01       	movw	r26, r30
     c40:	1d 92       	st	X+, r1
     c42:	8a 95       	dec	r24
     c44:	e9 f7       	brne	.-6      	; 0xc40 <sim900_gprs_open_connection+0x48>

  //registered to network?
  if (!sim900_is_network_registered())
     c46:	0e 94 2f 04 	call	0x85e	; 0x85e <sim900_is_network_registered>
     c4a:	88 23       	and	r24, r24
     c4c:	29 f4       	brne	.+10     	; 0xc58 <sim900_gprs_open_connection+0x60>
  {
	  free(cmdx);
     c4e:	c7 01       	movw	r24, r14
     c50:	0e 94 1b 0c 	call	0x1836	; 0x1836 <free>
    return 0;
     c54:	80 e0       	ldi	r24, 0x00	; 0
     c56:	04 c1       	rjmp	.+520    	; 0xe60 <sim900_gprs_open_connection+0x268>
  }

  //gprs already opened?
  if (sim900_gprs_is_opened())
     c58:	0e 94 ab 05 	call	0xb56	; 0xb56 <sim900_gprs_is_opened>
     c5c:	88 23       	and	r24, r24
     c5e:	29 f0       	breq	.+10     	; 0xc6a <sim900_gprs_open_connection+0x72>
  {
	  free(cmdx);
     c60:	c7 01       	movw	r24, r14
     c62:	0e 94 1b 0c 	call	0x1836	; 0x1836 <free>
    return 1;
     c66:	81 e0       	ldi	r24, 0x01	; 1
     c68:	fb c0       	rjmp	.+502    	; 0xe60 <sim900_gprs_open_connection+0x268>
  }

  //init gprs connection
  snprintf((char*)cmdx, MAX_BUFFER_NUM, "%s\"CONTYPE\",\"GPRS\"\r",
     c6a:	8d b7       	in	r24, 0x3d	; 61
     c6c:	9e b7       	in	r25, 0x3e	; 62
     c6e:	08 97       	sbiw	r24, 0x08	; 8
     c70:	0f b6       	in	r0, 0x3f	; 63
     c72:	f8 94       	cli
     c74:	9e bf       	out	0x3e, r25	; 62
     c76:	0f be       	out	0x3f, r0	; 63
     c78:	8d bf       	out	0x3d, r24	; 61
     c7a:	ed b7       	in	r30, 0x3d	; 61
     c7c:	fe b7       	in	r31, 0x3e	; 62
     c7e:	31 96       	adiw	r30, 0x01	; 1
     c80:	ad b7       	in	r26, 0x3d	; 61
     c82:	be b7       	in	r27, 0x3e	; 62
     c84:	12 96       	adiw	r26, 0x02	; 2
     c86:	fc 92       	st	X, r15
     c88:	ee 92       	st	-X, r14
     c8a:	11 97       	sbiw	r26, 0x01	; 1
     c8c:	83 e2       	ldi	r24, 0x23	; 35
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	93 83       	std	Z+3, r25	; 0x03
     c92:	82 83       	std	Z+2, r24	; 0x02
     c94:	89 ed       	ldi	r24, 0xD9	; 217
     c96:	91 e0       	ldi	r25, 0x01	; 1
     c98:	95 83       	std	Z+5, r25	; 0x05
     c9a:	84 83       	std	Z+4, r24	; 0x04
     c9c:	8d ee       	ldi	r24, 0xED	; 237
     c9e:	91 e0       	ldi	r25, 0x01	; 1
     ca0:	97 83       	std	Z+7, r25	; 0x07
     ca2:	86 83       	std	Z+6, r24	; 0x06
     ca4:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <snprintf>
    CMD_SAPBR_NEW);
  if (!sim900_send_cmd_wait_reply(0,(const uint8_t*)cmdx, (const uint8_t*)
     ca8:	8d b7       	in	r24, 0x3d	; 61
     caa:	9e b7       	in	r25, 0x3e	; 62
     cac:	08 96       	adiw	r24, 0x08	; 8
     cae:	0f b6       	in	r0, 0x3f	; 63
     cb0:	f8 94       	cli
     cb2:	9e bf       	out	0x3e, r25	; 62
     cb4:	0f be       	out	0x3f, r0	; 63
     cb6:	8d bf       	out	0x3d, r24	; 61
     cb8:	80 e0       	ldi	r24, 0x00	; 0
     cba:	b7 01       	movw	r22, r14
     cbc:	4a eb       	ldi	r20, 0xBA	; 186
     cbe:	51 e0       	ldi	r21, 0x01	; 1
     cc0:	00 e4       	ldi	r16, 0x40	; 64
     cc2:	12 e4       	ldi	r17, 0x42	; 66
     cc4:	2f e0       	ldi	r18, 0x0F	; 15
     cc6:	30 e0       	ldi	r19, 0x00	; 0
     cc8:	ee 24       	eor	r14, r14
     cca:	cc 24       	eor	r12, r12
     ccc:	dd 24       	eor	r13, r13
     cce:	0e 94 6d 03 	call	0x6da	; 0x6da <sim900_send_cmd_wait_reply>
     cd2:	88 23       	and	r24, r24
     cd4:	29 f4       	brne	.+10     	; 0xce0 <sim900_gprs_open_connection+0xe8>
    RESPON_OK, 1000000, 0, NULL))
  {
	  free(cmdx);
     cd6:	ce 01       	movw	r24, r28
     cd8:	0e 94 1b 0c 	call	0x1836	; 0x1836 <free>
    return 0;
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	c0 c0       	rjmp	.+384    	; 0xe60 <sim900_gprs_open_connection+0x268>
  }

  //set apn
  snprintf((char*)cmdx, MAX_BUFFER_NUM, "%s\"APN\",\"%s\"\r", CMD_SAPBR_NEW,
     ce0:	ad b7       	in	r26, 0x3d	; 61
     ce2:	be b7       	in	r27, 0x3e	; 62
     ce4:	1a 97       	sbiw	r26, 0x0a	; 10
     ce6:	0f b6       	in	r0, 0x3f	; 63
     ce8:	f8 94       	cli
     cea:	be bf       	out	0x3e, r27	; 62
     cec:	0f be       	out	0x3f, r0	; 63
     cee:	ad bf       	out	0x3d, r26	; 61
     cf0:	ed b7       	in	r30, 0x3d	; 61
     cf2:	fe b7       	in	r31, 0x3e	; 62
     cf4:	31 96       	adiw	r30, 0x01	; 1
     cf6:	12 96       	adiw	r26, 0x02	; 2
     cf8:	dc 93       	st	X, r29
     cfa:	ce 93       	st	-X, r28
     cfc:	11 97       	sbiw	r26, 0x01	; 1
     cfe:	83 e2       	ldi	r24, 0x23	; 35
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	93 83       	std	Z+3, r25	; 0x03
     d04:	82 83       	std	Z+2, r24	; 0x02
     d06:	8b ef       	ldi	r24, 0xFB	; 251
     d08:	91 e0       	ldi	r25, 0x01	; 1
     d0a:	95 83       	std	Z+5, r25	; 0x05
     d0c:	84 83       	std	Z+4, r24	; 0x04
     d0e:	8d ee       	ldi	r24, 0xED	; 237
     d10:	91 e0       	ldi	r25, 0x01	; 1
     d12:	97 83       	std	Z+7, r25	; 0x07
     d14:	86 83       	std	Z+6, r24	; 0x06
     d16:	b1 86       	std	Z+9, r11	; 0x09
     d18:	a0 86       	std	Z+8, r10	; 0x08
     d1a:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <snprintf>
    apn);
  if (!sim900_send_cmd_wait_reply(0,(const uint8_t*)cmdx, (const uint8_t*)
     d1e:	8d b7       	in	r24, 0x3d	; 61
     d20:	9e b7       	in	r25, 0x3e	; 62
     d22:	0a 96       	adiw	r24, 0x0a	; 10
     d24:	0f b6       	in	r0, 0x3f	; 63
     d26:	f8 94       	cli
     d28:	9e bf       	out	0x3e, r25	; 62
     d2a:	0f be       	out	0x3f, r0	; 63
     d2c:	8d bf       	out	0x3d, r24	; 61
     d2e:	80 e0       	ldi	r24, 0x00	; 0
     d30:	be 01       	movw	r22, r28
     d32:	4a eb       	ldi	r20, 0xBA	; 186
     d34:	51 e0       	ldi	r21, 0x01	; 1
     d36:	00 e4       	ldi	r16, 0x40	; 64
     d38:	12 e4       	ldi	r17, 0x42	; 66
     d3a:	2f e0       	ldi	r18, 0x0F	; 15
     d3c:	30 e0       	ldi	r19, 0x00	; 0
     d3e:	ee 24       	eor	r14, r14
     d40:	cc 24       	eor	r12, r12
     d42:	dd 24       	eor	r13, r13
     d44:	0e 94 6d 03 	call	0x6da	; 0x6da <sim900_send_cmd_wait_reply>
     d48:	88 23       	and	r24, r24
     d4a:	29 f4       	brne	.+10     	; 0xd56 <sim900_gprs_open_connection+0x15e>
    RESPON_OK, 1000000, 0, NULL))
  {
	  free(cmdx);
     d4c:	ce 01       	movw	r24, r28
     d4e:	0e 94 1b 0c 	call	0x1836	; 0x1836 <free>
    return 0;
     d52:	80 e0       	ldi	r24, 0x00	; 0
     d54:	85 c0       	rjmp	.+266    	; 0xe60 <sim900_gprs_open_connection+0x268>
  }

  //set username
  snprintf((char*)cmdx, MAX_BUFFER_NUM, "%s\"USER\",\"%s\"\r", CMD_SAPBR_NEW,
     d56:	ad b7       	in	r26, 0x3d	; 61
     d58:	be b7       	in	r27, 0x3e	; 62
     d5a:	1a 97       	sbiw	r26, 0x0a	; 10
     d5c:	0f b6       	in	r0, 0x3f	; 63
     d5e:	f8 94       	cli
     d60:	be bf       	out	0x3e, r27	; 62
     d62:	0f be       	out	0x3f, r0	; 63
     d64:	ad bf       	out	0x3d, r26	; 61
     d66:	ed b7       	in	r30, 0x3d	; 61
     d68:	fe b7       	in	r31, 0x3e	; 62
     d6a:	31 96       	adiw	r30, 0x01	; 1
     d6c:	12 96       	adiw	r26, 0x02	; 2
     d6e:	dc 93       	st	X, r29
     d70:	ce 93       	st	-X, r28
     d72:	11 97       	sbiw	r26, 0x01	; 1
     d74:	83 e2       	ldi	r24, 0x23	; 35
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	93 83       	std	Z+3, r25	; 0x03
     d7a:	82 83       	std	Z+2, r24	; 0x02
     d7c:	89 e0       	ldi	r24, 0x09	; 9
     d7e:	92 e0       	ldi	r25, 0x02	; 2
     d80:	95 83       	std	Z+5, r25	; 0x05
     d82:	84 83       	std	Z+4, r24	; 0x04
     d84:	8d ee       	ldi	r24, 0xED	; 237
     d86:	91 e0       	ldi	r25, 0x01	; 1
     d88:	97 83       	std	Z+7, r25	; 0x07
     d8a:	86 83       	std	Z+6, r24	; 0x06
     d8c:	91 86       	std	Z+9, r9	; 0x09
     d8e:	80 86       	std	Z+8, r8	; 0x08
     d90:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <snprintf>
    username);
  if (!sim900_send_cmd_wait_reply(0,(const uint8_t*)cmdx, (const uint8_t*)
     d94:	8d b7       	in	r24, 0x3d	; 61
     d96:	9e b7       	in	r25, 0x3e	; 62
     d98:	0a 96       	adiw	r24, 0x0a	; 10
     d9a:	0f b6       	in	r0, 0x3f	; 63
     d9c:	f8 94       	cli
     d9e:	9e bf       	out	0x3e, r25	; 62
     da0:	0f be       	out	0x3f, r0	; 63
     da2:	8d bf       	out	0x3d, r24	; 61
     da4:	80 e0       	ldi	r24, 0x00	; 0
     da6:	be 01       	movw	r22, r28
     da8:	4a eb       	ldi	r20, 0xBA	; 186
     daa:	51 e0       	ldi	r21, 0x01	; 1
     dac:	00 e4       	ldi	r16, 0x40	; 64
     dae:	12 e4       	ldi	r17, 0x42	; 66
     db0:	2f e0       	ldi	r18, 0x0F	; 15
     db2:	30 e0       	ldi	r19, 0x00	; 0
     db4:	ee 24       	eor	r14, r14
     db6:	cc 24       	eor	r12, r12
     db8:	dd 24       	eor	r13, r13
     dba:	0e 94 6d 03 	call	0x6da	; 0x6da <sim900_send_cmd_wait_reply>
     dbe:	88 23       	and	r24, r24
     dc0:	29 f4       	brne	.+10     	; 0xdcc <sim900_gprs_open_connection+0x1d4>
    RESPON_OK, 1000000, 0, NULL))
  {
	  free(cmdx);
     dc2:	ce 01       	movw	r24, r28
     dc4:	0e 94 1b 0c 	call	0x1836	; 0x1836 <free>
    return 0;
     dc8:	80 e0       	ldi	r24, 0x00	; 0
     dca:	4a c0       	rjmp	.+148    	; 0xe60 <sim900_gprs_open_connection+0x268>
  }

  //set passwd
  snprintf((char*)cmdx, MAX_BUFFER_NUM, "%s\"PWD\",\"%s\"\r", CMD_SAPBR_NEW,
     dcc:	ad b7       	in	r26, 0x3d	; 61
     dce:	be b7       	in	r27, 0x3e	; 62
     dd0:	1a 97       	sbiw	r26, 0x0a	; 10
     dd2:	0f b6       	in	r0, 0x3f	; 63
     dd4:	f8 94       	cli
     dd6:	be bf       	out	0x3e, r27	; 62
     dd8:	0f be       	out	0x3f, r0	; 63
     dda:	ad bf       	out	0x3d, r26	; 61
     ddc:	ed b7       	in	r30, 0x3d	; 61
     dde:	fe b7       	in	r31, 0x3e	; 62
     de0:	31 96       	adiw	r30, 0x01	; 1
     de2:	12 96       	adiw	r26, 0x02	; 2
     de4:	dc 93       	st	X, r29
     de6:	ce 93       	st	-X, r28
     de8:	11 97       	sbiw	r26, 0x01	; 1
     dea:	83 e2       	ldi	r24, 0x23	; 35
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	93 83       	std	Z+3, r25	; 0x03
     df0:	82 83       	std	Z+2, r24	; 0x02
     df2:	88 e1       	ldi	r24, 0x18	; 24
     df4:	92 e0       	ldi	r25, 0x02	; 2
     df6:	95 83       	std	Z+5, r25	; 0x05
     df8:	84 83       	std	Z+4, r24	; 0x04
     dfa:	8d ee       	ldi	r24, 0xED	; 237
     dfc:	91 e0       	ldi	r25, 0x01	; 1
     dfe:	97 83       	std	Z+7, r25	; 0x07
     e00:	86 83       	std	Z+6, r24	; 0x06
     e02:	71 86       	std	Z+9, r7	; 0x09
     e04:	60 86       	std	Z+8, r6	; 0x08
     e06:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <snprintf>
    password);
  if (!sim900_send_cmd_wait_reply(0,(const uint8_t*)cmdx, (const uint8_t*)
     e0a:	8d b7       	in	r24, 0x3d	; 61
     e0c:	9e b7       	in	r25, 0x3e	; 62
     e0e:	0a 96       	adiw	r24, 0x0a	; 10
     e10:	0f b6       	in	r0, 0x3f	; 63
     e12:	f8 94       	cli
     e14:	9e bf       	out	0x3e, r25	; 62
     e16:	0f be       	out	0x3f, r0	; 63
     e18:	8d bf       	out	0x3d, r24	; 61
     e1a:	80 e0       	ldi	r24, 0x00	; 0
     e1c:	be 01       	movw	r22, r28
     e1e:	4a eb       	ldi	r20, 0xBA	; 186
     e20:	51 e0       	ldi	r21, 0x01	; 1
     e22:	00 e4       	ldi	r16, 0x40	; 64
     e24:	12 e4       	ldi	r17, 0x42	; 66
     e26:	2f e0       	ldi	r18, 0x0F	; 15
     e28:	30 e0       	ldi	r19, 0x00	; 0
     e2a:	ee 24       	eor	r14, r14
     e2c:	cc 24       	eor	r12, r12
     e2e:	dd 24       	eor	r13, r13
     e30:	0e 94 6d 03 	call	0x6da	; 0x6da <sim900_send_cmd_wait_reply>
     e34:	88 23       	and	r24, r24
     e36:	29 f4       	brne	.+10     	; 0xe42 <sim900_gprs_open_connection+0x24a>
    RESPON_OK, 1000000, 0, NULL))
  {
	  free(cmdx);
     e38:	ce 01       	movw	r24, r28
     e3a:	0e 94 1b 0c 	call	0x1836	; 0x1836 <free>
    return 0;
     e3e:	80 e0       	ldi	r24, 0x00	; 0
     e40:	0f c0       	rjmp	.+30     	; 0xe60 <sim900_gprs_open_connection+0x268>
  }

  //open gprs connection
  if (!sim900_gprs_start_connection())
     e42:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <sim900_gprs_start_connection>
     e46:	88 23       	and	r24, r24
     e48:	29 f4       	brne	.+10     	; 0xe54 <sim900_gprs_open_connection+0x25c>
  {
	  free(cmdx);
     e4a:	ce 01       	movw	r24, r28
     e4c:	0e 94 1b 0c 	call	0x1836	; 0x1836 <free>
    return 0;
     e50:	80 e0       	ldi	r24, 0x00	; 0
     e52:	06 c0       	rjmp	.+12     	; 0xe60 <sim900_gprs_open_connection+0x268>
  }

	//free buffer
	free(cmdx);
     e54:	ce 01       	movw	r24, r28
     e56:	0e 94 1b 0c 	call	0x1836	; 0x1836 <free>
	
  //return the respon
  return 1;
     e5a:	81 e0       	ldi	r24, 0x01	; 1
     e5c:	01 c0       	rjmp	.+2      	; 0xe60 <sim900_gprs_open_connection+0x268>
  uint8_t *cmdx = (uint8_t*) calloc(MAX_BUFFER_NUM,sizeof(uint8_t));
  
  //buffer created??
  if (cmdx == NULL)
  {
	  return 0;
     e5e:	80 e0       	ldi	r24, 0x00	; 0
	//free buffer
	free(cmdx);
	
  //return the respon
  return 1;
}
     e60:	df 91       	pop	r29
     e62:	cf 91       	pop	r28
     e64:	1f 91       	pop	r17
     e66:	0f 91       	pop	r16
     e68:	ff 90       	pop	r15
     e6a:	ef 90       	pop	r14
     e6c:	df 90       	pop	r13
     e6e:	cf 90       	pop	r12
     e70:	bf 90       	pop	r11
     e72:	af 90       	pop	r10
     e74:	9f 90       	pop	r9
     e76:	8f 90       	pop	r8
     e78:	7f 90       	pop	r7
     e7a:	6f 90       	pop	r6
     e7c:	08 95       	ret

00000e7e <sim900_http_terminate>:

//terminate http session
uint8_t sim900_http_terminate()
{
     e7e:	cf 92       	push	r12
     e80:	df 92       	push	r13
     e82:	ef 92       	push	r14
     e84:	0f 93       	push	r16
     e86:	1f 93       	push	r17
  return sim900_send_cmd_wait_reply(1,(const uint8_t*)PSTR("AT+HTTPTERM\r"), (const
     e88:	81 e0       	ldi	r24, 0x01	; 1
     e8a:	6a ef       	ldi	r22, 0xFA	; 250
     e8c:	70 e0       	ldi	r23, 0x00	; 0
     e8e:	4a eb       	ldi	r20, 0xBA	; 186
     e90:	51 e0       	ldi	r21, 0x01	; 1
     e92:	00 e4       	ldi	r16, 0x40	; 64
     e94:	1b e4       	ldi	r17, 0x4B	; 75
     e96:	2c e4       	ldi	r18, 0x4C	; 76
     e98:	30 e0       	ldi	r19, 0x00	; 0
     e9a:	ee 24       	eor	r14, r14
     e9c:	cc 24       	eor	r12, r12
     e9e:	dd 24       	eor	r13, r13
     ea0:	0e 94 6d 03 	call	0x6da	; 0x6da <sim900_send_cmd_wait_reply>
    uint8_t*)RESPON_OK, 5000000, 0, NULL);
}
     ea4:	1f 91       	pop	r17
     ea6:	0f 91       	pop	r16
     ea8:	ef 90       	pop	r14
     eaa:	df 90       	pop	r13
     eac:	cf 90       	pop	r12
     eae:	08 95       	ret

00000eb0 <sim900_http_send_data>:

uint8_t sim900_http_send_data(const uint8_t method, const uint8_t *aurl, const uint8_t *adata, const  uint8_t max_out_len, uint8_t *arespon_out)
{
     eb0:	3f 92       	push	r3
     eb2:	4f 92       	push	r4
     eb4:	5f 92       	push	r5
     eb6:	6f 92       	push	r6
     eb8:	7f 92       	push	r7
     eba:	8f 92       	push	r8
     ebc:	9f 92       	push	r9
     ebe:	af 92       	push	r10
     ec0:	bf 92       	push	r11
     ec2:	cf 92       	push	r12
     ec4:	df 92       	push	r13
     ec6:	ef 92       	push	r14
     ec8:	ff 92       	push	r15
     eca:	0f 93       	push	r16
     ecc:	1f 93       	push	r17
     ece:	df 93       	push	r29
     ed0:	cf 93       	push	r28
     ed2:	00 d0       	rcall	.+0      	; 0xed4 <sim900_http_send_data+0x24>
     ed4:	00 d0       	rcall	.+0      	; 0xed6 <sim900_http_send_data+0x26>
     ed6:	00 d0       	rcall	.+0      	; 0xed8 <sim900_http_send_data+0x28>
     ed8:	cd b7       	in	r28, 0x3d	; 61
     eda:	de b7       	in	r29, 0x3e	; 62
     edc:	78 2e       	mov	r7, r24
     ede:	2b 01       	movw	r4, r22
     ee0:	64 2e       	mov	r6, r20
     ee2:	35 2e       	mov	r3, r21
     ee4:	f2 2e       	mov	r15, r18
     ee6:	48 01       	movw	r8, r16
	#define HTTP_PARA_URL "AT+HTTPPARA=\"URL\","
	const uint8_t MAX_BUFFER = 100;
	uint8_t respon = 0;
	uint16_t num_data = 0;
	uint8_t *cmdx = (uint8_t*) calloc(MAX_BUFFER,sizeof(uint8_t));
     ee8:	84 e6       	ldi	r24, 0x64	; 100
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	61 e0       	ldi	r22, 0x01	; 1
     eee:	70 e0       	ldi	r23, 0x00	; 0
     ef0:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <calloc>
     ef4:	a8 2e       	mov	r10, r24
     ef6:	b9 2e       	mov	r11, r25
	
	//buffer created?
	if (cmdx == NULL)
     ef8:	a1 14       	cp	r10, r1
     efa:	b1 04       	cpc	r11, r1
     efc:	09 f4       	brne	.+2      	; 0xf00 <sim900_http_send_data+0x50>
     efe:	06 c2       	rjmp	.+1036   	; 0x130c <__stack+0x20d>
	{
		return 0;
	}

	//set init result
	if (arespon_out != NULL)
     f00:	01 15       	cp	r16, r1
     f02:	11 05       	cpc	r17, r1
     f04:	41 f0       	breq	.+16     	; 0xf16 <sim900_http_send_data+0x66>
	{
		memset(arespon_out, '\0', max_out_len *sizeof(uint8_t));
     f06:	80 2f       	mov	r24, r16
     f08:	99 2d       	mov	r25, r9
     f0a:	60 e0       	ldi	r22, 0x00	; 0
     f0c:	70 e0       	ldi	r23, 0x00	; 0
     f0e:	4f 2d       	mov	r20, r15
     f10:	50 e0       	ldi	r21, 0x00	; 0
     f12:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <memset>
	}

	//check is connected
	if (!sim900_gprs_is_opened())
     f16:	0e 94 ab 05 	call	0xb56	; 0xb56 <sim900_gprs_is_opened>
     f1a:	88 23       	and	r24, r24
     f1c:	29 f4       	brne	.+10     	; 0xf28 <sim900_http_send_data+0x78>
	{
		free(cmdx);
     f1e:	c5 01       	movw	r24, r10
     f20:	0e 94 1b 0c 	call	0x1836	; 0x1836 <free>
		return 0;
     f24:	10 e0       	ldi	r17, 0x00	; 0
     f26:	f3 c1       	rjmp	.+998    	; 0x130e <__stack+0x20f>
	}
	
	//make sure previous http is terminated
	sim900_http_terminate();
     f28:	0e 94 3f 07 	call	0xe7e	; 0xe7e <sim900_http_terminate>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f2c:	8f ef       	ldi	r24, 0xFF	; 255
     f2e:	90 e7       	ldi	r25, 0x70	; 112
     f30:	a2 e0       	ldi	r26, 0x02	; 2
     f32:	81 50       	subi	r24, 0x01	; 1
     f34:	90 40       	sbci	r25, 0x00	; 0
     f36:	a0 40       	sbci	r26, 0x00	; 0
     f38:	e1 f7       	brne	.-8      	; 0xf32 <sim900_http_send_data+0x82>
     f3a:	00 c0       	rjmp	.+0      	; 0xf3c <sim900_http_send_data+0x8c>
     f3c:	00 00       	nop
	
	//http init
	_delay_ms(100);
	if (!sim900_send_cmd_wait_reply(1,(const uint8_t*)PSTR("AT+HTTPINIT\r"), (const
     f3e:	81 e0       	ldi	r24, 0x01	; 1
     f40:	6d ee       	ldi	r22, 0xED	; 237
     f42:	70 e0       	ldi	r23, 0x00	; 0
     f44:	4a eb       	ldi	r20, 0xBA	; 186
     f46:	51 e0       	ldi	r21, 0x01	; 1
     f48:	00 e4       	ldi	r16, 0x40	; 64
     f4a:	1b e4       	ldi	r17, 0x4B	; 75
     f4c:	2c e4       	ldi	r18, 0x4C	; 76
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	ee 24       	eor	r14, r14
     f52:	cc 24       	eor	r12, r12
     f54:	dd 24       	eor	r13, r13
     f56:	0e 94 6d 03 	call	0x6da	; 0x6da <sim900_send_cmd_wait_reply>
     f5a:	88 23       	and	r24, r24
     f5c:	29 f4       	brne	.+10     	; 0xf68 <sim900_http_send_data+0xb8>
	uint8_t*)RESPON_OK, 5000000, 0, NULL))
	{
		free(cmdx);
     f5e:	c5 01       	movw	r24, r10
     f60:	0e 94 1b 0c 	call	0x1836	; 0x1836 <free>
		return 0;
     f64:	10 e0       	ldi	r17, 0x00	; 0
     f66:	d3 c1       	rjmp	.+934    	; 0x130e <__stack+0x20f>
	}

	//http parameter cid
	if (!sim900_send_cmd_wait_reply(1,(const uint8_t*)PSTR("AT+HTTPPARA=\"CID\",1\r"),
     f68:	81 e0       	ldi	r24, 0x01	; 1
     f6a:	68 ed       	ldi	r22, 0xD8	; 216
     f6c:	70 e0       	ldi	r23, 0x00	; 0
     f6e:	4a eb       	ldi	r20, 0xBA	; 186
     f70:	51 e0       	ldi	r21, 0x01	; 1
     f72:	00 e4       	ldi	r16, 0x40	; 64
     f74:	1b e4       	ldi	r17, 0x4B	; 75
     f76:	2c e4       	ldi	r18, 0x4C	; 76
     f78:	30 e0       	ldi	r19, 0x00	; 0
     f7a:	ee 24       	eor	r14, r14
     f7c:	cc 24       	eor	r12, r12
     f7e:	dd 24       	eor	r13, r13
     f80:	0e 94 6d 03 	call	0x6da	; 0x6da <sim900_send_cmd_wait_reply>
     f84:	88 23       	and	r24, r24
     f86:	39 f4       	brne	.+14     	; 0xf96 <sim900_http_send_data+0xe6>
	(const uint8_t*)RESPON_OK, 5000000, 0, NULL))
	{
		sim900_http_terminate();
     f88:	0e 94 3f 07 	call	0xe7e	; 0xe7e <sim900_http_terminate>
		free(cmdx);
     f8c:	c5 01       	movw	r24, r10
     f8e:	0e 94 1b 0c 	call	0x1836	; 0x1836 <free>
		return 0;
     f92:	10 e0       	ldi	r17, 0x00	; 0
     f94:	bc c1       	rjmp	.+888    	; 0x130e <__stack+0x20f>
	}

	//http parameter url
	memset(cmdx, '\0', MAX_BUFFER);
     f96:	ea 2d       	mov	r30, r10
     f98:	fb 2d       	mov	r31, r11
     f9a:	84 e6       	ldi	r24, 0x64	; 100
     f9c:	df 01       	movw	r26, r30
     f9e:	1d 92       	st	X+, r1
     fa0:	8a 95       	dec	r24
     fa2:	e9 f7       	brne	.-6      	; 0xf9e <sim900_http_send_data+0xee>
	//snprintf((char*)cmdx, MAX_BUFFER, (method ? "%s\"%s\"\r":"%s\"%s?%s\"\r"), HTTP_PARA_URL, aurl,(method ? ((char*)""):adata));
	if (method) //post
     fa4:	77 20       	and	r7, r7
     fa6:	41 f1       	breq	.+80     	; 0xff8 <sim900_http_send_data+0x148>
	{
		snprintf((char*)cmdx, MAX_BUFFER, "%s\"%s\"\r", HTTP_PARA_URL, aurl);
     fa8:	ed b7       	in	r30, 0x3d	; 61
     faa:	fe b7       	in	r31, 0x3e	; 62
     fac:	3a 97       	sbiw	r30, 0x0a	; 10
     fae:	0f b6       	in	r0, 0x3f	; 63
     fb0:	f8 94       	cli
     fb2:	fe bf       	out	0x3e, r31	; 62
     fb4:	0f be       	out	0x3f, r0	; 63
     fb6:	ed bf       	out	0x3d, r30	; 61
     fb8:	31 96       	adiw	r30, 0x01	; 1
     fba:	ad b7       	in	r26, 0x3d	; 61
     fbc:	be b7       	in	r27, 0x3e	; 62
     fbe:	12 96       	adiw	r26, 0x02	; 2
     fc0:	bc 92       	st	X, r11
     fc2:	ae 92       	st	-X, r10
     fc4:	11 97       	sbiw	r26, 0x01	; 1
     fc6:	84 e6       	ldi	r24, 0x64	; 100
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	93 83       	std	Z+3, r25	; 0x03
     fcc:	82 83       	std	Z+2, r24	; 0x02
     fce:	8a e4       	ldi	r24, 0x4A	; 74
     fd0:	92 e0       	ldi	r25, 0x02	; 2
     fd2:	95 83       	std	Z+5, r25	; 0x05
     fd4:	84 83       	std	Z+4, r24	; 0x04
     fd6:	82 e5       	ldi	r24, 0x52	; 82
     fd8:	92 e0       	ldi	r25, 0x02	; 2
     fda:	97 83       	std	Z+7, r25	; 0x07
     fdc:	86 83       	std	Z+6, r24	; 0x06
     fde:	51 86       	std	Z+9, r5	; 0x09
     fe0:	40 86       	std	Z+8, r4	; 0x08
     fe2:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <snprintf>
     fe6:	ed b7       	in	r30, 0x3d	; 61
     fe8:	fe b7       	in	r31, 0x3e	; 62
     fea:	3a 96       	adiw	r30, 0x0a	; 10
     fec:	0f b6       	in	r0, 0x3f	; 63
     fee:	f8 94       	cli
     ff0:	fe bf       	out	0x3e, r31	; 62
     ff2:	0f be       	out	0x3f, r0	; 63
     ff4:	ed bf       	out	0x3d, r30	; 61
     ff6:	2b c0       	rjmp	.+86     	; 0x104e <sim900_http_send_data+0x19e>
	} 
	else //get
	{
		snprintf((char*)cmdx, MAX_BUFFER, "%s\"%s?%s\"\r", HTTP_PARA_URL, aurl, adata);
     ff8:	8d b7       	in	r24, 0x3d	; 61
     ffa:	9e b7       	in	r25, 0x3e	; 62
     ffc:	0c 97       	sbiw	r24, 0x0c	; 12
     ffe:	0f b6       	in	r0, 0x3f	; 63
    1000:	f8 94       	cli
    1002:	9e bf       	out	0x3e, r25	; 62
    1004:	0f be       	out	0x3f, r0	; 63
    1006:	8d bf       	out	0x3d, r24	; 61
    1008:	ed b7       	in	r30, 0x3d	; 61
    100a:	fe b7       	in	r31, 0x3e	; 62
    100c:	31 96       	adiw	r30, 0x01	; 1
    100e:	ad b7       	in	r26, 0x3d	; 61
    1010:	be b7       	in	r27, 0x3e	; 62
    1012:	12 96       	adiw	r26, 0x02	; 2
    1014:	bc 92       	st	X, r11
    1016:	ae 92       	st	-X, r10
    1018:	11 97       	sbiw	r26, 0x01	; 1
    101a:	84 e6       	ldi	r24, 0x64	; 100
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	93 83       	std	Z+3, r25	; 0x03
    1020:	82 83       	std	Z+2, r24	; 0x02
    1022:	85 e6       	ldi	r24, 0x65	; 101
    1024:	92 e0       	ldi	r25, 0x02	; 2
    1026:	95 83       	std	Z+5, r25	; 0x05
    1028:	84 83       	std	Z+4, r24	; 0x04
    102a:	82 e5       	ldi	r24, 0x52	; 82
    102c:	92 e0       	ldi	r25, 0x02	; 2
    102e:	97 83       	std	Z+7, r25	; 0x07
    1030:	86 83       	std	Z+6, r24	; 0x06
    1032:	51 86       	std	Z+9, r5	; 0x09
    1034:	40 86       	std	Z+8, r4	; 0x08
    1036:	62 86       	std	Z+10, r6	; 0x0a
    1038:	33 86       	std	Z+11, r3	; 0x0b
    103a:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <snprintf>
    103e:	ed b7       	in	r30, 0x3d	; 61
    1040:	fe b7       	in	r31, 0x3e	; 62
    1042:	3c 96       	adiw	r30, 0x0c	; 12
    1044:	0f b6       	in	r0, 0x3f	; 63
    1046:	f8 94       	cli
    1048:	fe bf       	out	0x3e, r31	; 62
    104a:	0f be       	out	0x3f, r0	; 63
    104c:	ed bf       	out	0x3d, r30	; 61
	}
	if (!sim900_send_cmd_wait_reply(0,(const uint8_t*)cmdx, (const uint8_t*)
    104e:	80 e0       	ldi	r24, 0x00	; 0
    1050:	b5 01       	movw	r22, r10
    1052:	4a eb       	ldi	r20, 0xBA	; 186
    1054:	51 e0       	ldi	r21, 0x01	; 1
    1056:	00 e4       	ldi	r16, 0x40	; 64
    1058:	1b e4       	ldi	r17, 0x4B	; 75
    105a:	2c e4       	ldi	r18, 0x4C	; 76
    105c:	30 e0       	ldi	r19, 0x00	; 0
    105e:	ee 24       	eor	r14, r14
    1060:	cc 24       	eor	r12, r12
    1062:	dd 24       	eor	r13, r13
    1064:	0e 94 6d 03 	call	0x6da	; 0x6da <sim900_send_cmd_wait_reply>
    1068:	88 23       	and	r24, r24
    106a:	39 f4       	brne	.+14     	; 0x107a <sim900_http_send_data+0x1ca>
	RESPON_OK, 5000000, 0, NULL))
	{
		sim900_http_terminate();
    106c:	0e 94 3f 07 	call	0xe7e	; 0xe7e <sim900_http_terminate>
		free(cmdx);
    1070:	c5 01       	movw	r24, r10
    1072:	0e 94 1b 0c 	call	0x1836	; 0x1836 <free>
		return 0;
    1076:	10 e0       	ldi	r17, 0x00	; 0
    1078:	4a c1       	rjmp	.+660    	; 0x130e <__stack+0x20f>
	}

	//set content type for post only
	if(method)
    107a:	77 20       	and	r7, r7
    107c:	09 f4       	brne	.+2      	; 0x1080 <sim900_http_send_data+0x1d0>
    107e:	78 c0       	rjmp	.+240    	; 0x1170 <__stack+0x71>
	{
		if (!sim900_send_cmd_wait_reply(1,(const uint8_t*)
    1080:	81 e0       	ldi	r24, 0x01	; 1
    1082:	6e ea       	ldi	r22, 0xAE	; 174
    1084:	70 e0       	ldi	r23, 0x00	; 0
    1086:	4a eb       	ldi	r20, 0xBA	; 186
    1088:	51 e0       	ldi	r21, 0x01	; 1
    108a:	00 e4       	ldi	r16, 0x40	; 64
    108c:	1b e4       	ldi	r17, 0x4B	; 75
    108e:	2c e4       	ldi	r18, 0x4C	; 76
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	ee 24       	eor	r14, r14
    1094:	cc 24       	eor	r12, r12
    1096:	dd 24       	eor	r13, r13
    1098:	0e 94 6d 03 	call	0x6da	; 0x6da <sim900_send_cmd_wait_reply>
    109c:	88 23       	and	r24, r24
    109e:	39 f4       	brne	.+14     	; 0x10ae <sim900_http_send_data+0x1fe>
		PSTR("AT+HTTPPARA=\"CONTENT\",\"application/json\"\r"), (const
		uint8_t*)RESPON_OK, 5000000, 0, NULL))
		{
			sim900_http_terminate();
    10a0:	0e 94 3f 07 	call	0xe7e	; 0xe7e <sim900_http_terminate>
			free(cmdx);
    10a4:	c5 01       	movw	r24, r10
    10a6:	0e 94 1b 0c 	call	0x1836	; 0x1836 <free>
			return 0;
    10aa:	10 e0       	ldi	r17, 0x00	; 0
    10ac:	30 c1       	rjmp	.+608    	; 0x130e <__stack+0x20f>
		}
		
		//http post data
		memset(cmdx, '\0', MAX_BUFFER);
    10ae:	ea 2d       	mov	r30, r10
    10b0:	fb 2d       	mov	r31, r11
    10b2:	84 e6       	ldi	r24, 0x64	; 100
    10b4:	df 01       	movw	r26, r30
    10b6:	1d 92       	st	X+, r1
    10b8:	8a 95       	dec	r24
    10ba:	e9 f7       	brne	.-6      	; 0x10b6 <sim900_http_send_data+0x206>
		snprintf((char*)cmdx, MAX_BUFFER, "AT+HTTPDATA=%d,20000\r", strlen((const
    10bc:	e6 2d       	mov	r30, r6
    10be:	f3 2d       	mov	r31, r3
    10c0:	df 01       	movw	r26, r30
    10c2:	0d 90       	ld	r0, X+
    10c4:	00 20       	and	r0, r0
    10c6:	e9 f7       	brne	.-6      	; 0x10c2 <sim900_http_send_data+0x212>
    10c8:	11 97       	sbiw	r26, 0x01	; 1
    10ca:	9d 01       	movw	r18, r26
    10cc:	2e 1b       	sub	r18, r30
    10ce:	3f 0b       	sbc	r19, r31
    10d0:	ed b7       	in	r30, 0x3d	; 61
    10d2:	fe b7       	in	r31, 0x3e	; 62
    10d4:	38 97       	sbiw	r30, 0x08	; 8
    10d6:	0f b6       	in	r0, 0x3f	; 63
    10d8:	f8 94       	cli
    10da:	fe bf       	out	0x3e, r31	; 62
    10dc:	0f be       	out	0x3f, r0	; 63
    10de:	ed bf       	out	0x3d, r30	; 61
    10e0:	31 96       	adiw	r30, 0x01	; 1
    10e2:	ad b7       	in	r26, 0x3d	; 61
    10e4:	be b7       	in	r27, 0x3e	; 62
    10e6:	12 96       	adiw	r26, 0x02	; 2
    10e8:	bc 92       	st	X, r11
    10ea:	ae 92       	st	-X, r10
    10ec:	11 97       	sbiw	r26, 0x01	; 1
    10ee:	84 e6       	ldi	r24, 0x64	; 100
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	93 83       	std	Z+3, r25	; 0x03
    10f4:	82 83       	std	Z+2, r24	; 0x02
    10f6:	80 e7       	ldi	r24, 0x70	; 112
    10f8:	92 e0       	ldi	r25, 0x02	; 2
    10fa:	95 83       	std	Z+5, r25	; 0x05
    10fc:	84 83       	std	Z+4, r24	; 0x04
    10fe:	37 83       	std	Z+7, r19	; 0x07
    1100:	26 83       	std	Z+6, r18	; 0x06
    1102:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <snprintf>
		char*)adata));
		if (!sim900_send_cmd_wait_reply(0,(const uint8_t*)cmdx, (const uint8_t*)
    1106:	ed b7       	in	r30, 0x3d	; 61
    1108:	fe b7       	in	r31, 0x3e	; 62
    110a:	38 96       	adiw	r30, 0x08	; 8
    110c:	0f b6       	in	r0, 0x3f	; 63
    110e:	f8 94       	cli
    1110:	fe bf       	out	0x3e, r31	; 62
    1112:	0f be       	out	0x3f, r0	; 63
    1114:	ed bf       	out	0x3d, r30	; 61
    1116:	80 e0       	ldi	r24, 0x00	; 0
    1118:	b5 01       	movw	r22, r10
    111a:	46 e8       	ldi	r20, 0x86	; 134
    111c:	52 e0       	ldi	r21, 0x02	; 2
    111e:	00 e0       	ldi	r16, 0x00	; 0
    1120:	1d e2       	ldi	r17, 0x2D	; 45
    1122:	21 e3       	ldi	r18, 0x31	; 49
    1124:	31 e0       	ldi	r19, 0x01	; 1
    1126:	ee 24       	eor	r14, r14
    1128:	cc 24       	eor	r12, r12
    112a:	dd 24       	eor	r13, r13
    112c:	0e 94 6d 03 	call	0x6da	; 0x6da <sim900_send_cmd_wait_reply>
    1130:	88 23       	and	r24, r24
    1132:	39 f4       	brne	.+14     	; 0x1142 <__stack+0x43>
		"DOWNLOAD", 20000000, 0, NULL))
		{
			sim900_http_terminate();
    1134:	0e 94 3f 07 	call	0xe7e	; 0xe7e <sim900_http_terminate>
			free(cmdx);
    1138:	c5 01       	movw	r24, r10
    113a:	0e 94 1b 0c 	call	0x1836	; 0x1836 <free>
			return 0;
    113e:	10 e0       	ldi	r17, 0x00	; 0
    1140:	e6 c0       	rjmp	.+460    	; 0x130e <__stack+0x20f>
		}

		//send the data
		if (!sim900_send_cmd_wait_reply(0,(const uint8_t*)adata, (const uint8_t*)"OK",
    1142:	80 e0       	ldi	r24, 0x00	; 0
    1144:	66 2d       	mov	r22, r6
    1146:	73 2d       	mov	r23, r3
    1148:	4a eb       	ldi	r20, 0xBA	; 186
    114a:	51 e0       	ldi	r21, 0x01	; 1
    114c:	00 e4       	ldi	r16, 0x40	; 64
    114e:	1b e4       	ldi	r17, 0x4B	; 75
    1150:	2c e4       	ldi	r18, 0x4C	; 76
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	ee 24       	eor	r14, r14
    1156:	cc 24       	eor	r12, r12
    1158:	dd 24       	eor	r13, r13
    115a:	0e 94 6d 03 	call	0x6da	; 0x6da <sim900_send_cmd_wait_reply>
    115e:	88 23       	and	r24, r24
    1160:	61 f4       	brne	.+24     	; 0x117a <__stack+0x7b>
		5000000, 0, NULL))
		{
			sim900_http_terminate();
    1162:	0e 94 3f 07 	call	0xe7e	; 0xe7e <sim900_http_terminate>
			free(cmdx);
    1166:	c5 01       	movw	r24, r10
    1168:	0e 94 1b 0c 	call	0x1836	; 0x1836 <free>
			return 0;
    116c:	10 e0       	ldi	r17, 0x00	; 0
    116e:	cf c0       	rjmp	.+414    	; 0x130e <__stack+0x20f>
		}
	}

	//send it
	respon = sim900_send_cmd_wait_reply(1,(const uint8_t*)(method ? PSTR("AT+HTTPACTION=1\r"):PSTR("AT+HTTPACTION=0\r")),
    1170:	6c e8       	ldi	r22, 0x8C	; 140
    1172:	70 e0       	ldi	r23, 0x00	; 0
    1174:	48 e3       	ldi	r20, 0x38	; 56
    1176:	52 e0       	ldi	r21, 0x02	; 2
    1178:	04 c0       	rjmp	.+8      	; 0x1182 <__stack+0x83>
    117a:	6d e9       	ldi	r22, 0x9D	; 157
    117c:	70 e0       	ldi	r23, 0x00	; 0
    117e:	46 e2       	ldi	r20, 0x26	; 38
    1180:	52 e0       	ldi	r21, 0x02	; 2
    1182:	81 e0       	ldi	r24, 0x01	; 1
    1184:	00 e0       	ldi	r16, 0x00	; 0
    1186:	1d e2       	ldi	r17, 0x2D	; 45
    1188:	21 e3       	ldi	r18, 0x31	; 49
    118a:	31 e0       	ldi	r19, 0x01	; 1
    118c:	ee 24       	eor	r14, r14
    118e:	cc 24       	eor	r12, r12
    1190:	dd 24       	eor	r13, r13
    1192:	0e 94 6d 03 	call	0x6da	; 0x6da <sim900_send_cmd_wait_reply>
    1196:	18 2f       	mov	r17, r24
	(const uint8_t*)(method ? "+HTTPACTION:1,200":"+HTTPACTION:0,200"), 20000000, 0, NULL);

	//if respon=1 then get the rest of data as length of respons
	if (respon)
    1198:	88 23       	and	r24, r24
    119a:	09 f4       	brne	.+2      	; 0x119e <__stack+0x9f>
    119c:	b1 c0       	rjmp	.+354    	; 0x1300 <__stack+0x201>
	{
		memset(cmdx, '\0', MAX_BUFFER);
    119e:	ea 2d       	mov	r30, r10
    11a0:	fb 2d       	mov	r31, r11
    11a2:	84 e6       	ldi	r24, 0x64	; 100
    11a4:	df 01       	movw	r26, r30
    11a6:	1d 92       	st	X+, r1
    11a8:	8a 95       	dec	r24
    11aa:	e9 f7       	brne	.-6      	; 0x11a6 <__stack+0xa7>
		//uint8_t *cmm = (uint8_t*) calloc(MAX_BUFFER,sizeof(uint8_t));
		respon = sim900_send_cmd_wait_reply(0,NULL, (const uint8_t*)"\r", 1000000,
    11ac:	80 e0       	ldi	r24, 0x00	; 0
    11ae:	60 e0       	ldi	r22, 0x00	; 0
    11b0:	70 e0       	ldi	r23, 0x00	; 0
    11b2:	4f e8       	ldi	r20, 0x8F	; 143
    11b4:	52 e0       	ldi	r21, 0x02	; 2
    11b6:	00 e4       	ldi	r16, 0x40	; 64
    11b8:	12 e4       	ldi	r17, 0x42	; 66
    11ba:	2f e0       	ldi	r18, 0x0F	; 15
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	0f 2e       	mov	r0, r31
    11c0:	f4 e6       	ldi	r31, 0x64	; 100
    11c2:	ef 2e       	mov	r14, r31
    11c4:	f0 2d       	mov	r31, r0
    11c6:	65 01       	movw	r12, r10
    11c8:	0e 94 6d 03 	call	0x6da	; 0x6da <sim900_send_cmd_wait_reply>
    11cc:	18 2f       	mov	r17, r24
		MAX_BUFFER, cmdx);
		//free(cmm);

		if (respon)
    11ce:	88 23       	and	r24, r24
    11d0:	09 f4       	brne	.+2      	; 0x11d4 <__stack+0xd5>
    11d2:	96 c0       	rjmp	.+300    	; 0x1300 <__stack+0x201>
		{
			//find \r on the data respons
			//cmdx form = ,[respon length]\r
			uint8_t *pr = (uint8_t*)memchr(cmdx, '\r', MAX_BUFFER);
    11d4:	c5 01       	movw	r24, r10
    11d6:	6d e0       	ldi	r22, 0x0D	; 13
    11d8:	70 e0       	ldi	r23, 0x00	; 0
    11da:	44 e6       	ldi	r20, 0x64	; 100
    11dc:	50 e0       	ldi	r21, 0x00	; 0
    11de:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <memchr>
    11e2:	28 2f       	mov	r18, r24
    11e4:	39 2f       	mov	r19, r25

			num_data = 0;
			if (pr != NULL)
    11e6:	21 15       	cp	r18, r1
    11e8:	31 05       	cpc	r19, r1
    11ea:	09 f4       	brne	.+2      	; 0x11ee <__stack+0xef>
    11ec:	89 c0       	rjmp	.+274    	; 0x1300 <__stack+0x201>
			{
				uint8_t clen[6];
				memset(clen, '\0', 6); //set all to 0
    11ee:	3e 01       	movw	r6, r28
    11f0:	08 94       	sec
    11f2:	61 1c       	adc	r6, r1
    11f4:	71 1c       	adc	r7, r1
    11f6:	86 e0       	ldi	r24, 0x06	; 6
    11f8:	f3 01       	movw	r30, r6
    11fa:	11 92       	st	Z+, r1
    11fc:	8a 95       	dec	r24
    11fe:	e9 f7       	brne	.-6      	; 0x11fa <__stack+0xfb>
				memcpy(clen, &cmdx[1], pr - &cmdx[1]); //copy the data respon length
    1200:	a5 01       	movw	r20, r10
    1202:	4f 5f       	subi	r20, 0xFF	; 255
    1204:	5f 4f       	sbci	r21, 0xFF	; 255
    1206:	24 1b       	sub	r18, r20
    1208:	35 0b       	sbc	r19, r21
    120a:	c3 01       	movw	r24, r6
    120c:	64 2f       	mov	r22, r20
    120e:	75 2f       	mov	r23, r21
    1210:	42 2f       	mov	r20, r18
    1212:	53 2f       	mov	r21, r19
    1214:	0e 94 df 0c 	call	0x19be	; 0x19be <memcpy>
				num_data = atoi((const char*)clen); //convert to int
    1218:	c3 01       	movw	r24, r6
    121a:	0e 94 b4 0c 	call	0x1968	; 0x1968 <atoi>
			}

			//just limit it
			if (num_data > max_out_len)
    121e:	2f 2d       	mov	r18, r15
    1220:	30 e0       	ldi	r19, 0x00	; 0
			if (pr != NULL)
			{
				uint8_t clen[6];
				memset(clen, '\0', 6); //set all to 0
				memcpy(clen, &cmdx[1], pr - &cmdx[1]); //copy the data respon length
				num_data = atoi((const char*)clen); //convert to int
    1222:	68 2e       	mov	r6, r24
    1224:	79 2e       	mov	r7, r25
    1226:	26 15       	cp	r18, r6
    1228:	37 05       	cpc	r19, r7
    122a:	08 f4       	brcc	.+2      	; 0x122e <__stack+0x12f>
    122c:	39 01       	movw	r6, r18
			{
				num_data = max_out_len;
			}

			//read the data respon
			if (num_data > 0)
    122e:	61 14       	cp	r6, r1
    1230:	71 04       	cpc	r7, r1
    1232:	09 f4       	brne	.+2      	; 0x1236 <__stack+0x137>
    1234:	65 c0       	rjmp	.+202    	; 0x1300 <__stack+0x201>
			{
				//allocate memory
				//make sure a respon out is capable of receiveing it
				//beware that you must make sure that the usart rx buffer is capable of receiving it
				memset(cmdx, '\0', MAX_BUFFER);
    1236:	ea 2d       	mov	r30, r10
    1238:	fb 2d       	mov	r31, r11
    123a:	84 e6       	ldi	r24, 0x64	; 100
    123c:	df 01       	movw	r26, r30
    123e:	1d 92       	st	X+, r1
    1240:	8a 95       	dec	r24
    1242:	e9 f7       	brne	.-6      	; 0x123e <__stack+0x13f>
				snprintf((char*)cmdx, MAX_BUFFER, "AT+HTTPREAD=0,%d\r", num_data);
    1244:	ed b7       	in	r30, 0x3d	; 61
    1246:	fe b7       	in	r31, 0x3e	; 62
    1248:	38 97       	sbiw	r30, 0x08	; 8
    124a:	0f b6       	in	r0, 0x3f	; 63
    124c:	f8 94       	cli
    124e:	fe bf       	out	0x3e, r31	; 62
    1250:	0f be       	out	0x3f, r0	; 63
    1252:	ed bf       	out	0x3d, r30	; 61
    1254:	31 96       	adiw	r30, 0x01	; 1
    1256:	ad b7       	in	r26, 0x3d	; 61
    1258:	be b7       	in	r27, 0x3e	; 62
    125a:	12 96       	adiw	r26, 0x02	; 2
    125c:	bc 92       	st	X, r11
    125e:	ae 92       	st	-X, r10
    1260:	11 97       	sbiw	r26, 0x01	; 1
    1262:	84 e6       	ldi	r24, 0x64	; 100
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	93 83       	std	Z+3, r25	; 0x03
    1268:	82 83       	std	Z+2, r24	; 0x02
    126a:	81 e9       	ldi	r24, 0x91	; 145
    126c:	92 e0       	ldi	r25, 0x02	; 2
    126e:	95 83       	std	Z+5, r25	; 0x05
    1270:	84 83       	std	Z+4, r24	; 0x04
    1272:	77 82       	std	Z+7, r7	; 0x07
    1274:	66 82       	std	Z+6, r6	; 0x06
    1276:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <snprintf>
				respon = sim900_send_cmd_wait_reply(0,(const uint8_t*)cmdx, (const
    127a:	ed b7       	in	r30, 0x3d	; 61
    127c:	fe b7       	in	r31, 0x3e	; 62
    127e:	38 96       	adiw	r30, 0x08	; 8
    1280:	0f b6       	in	r0, 0x3f	; 63
    1282:	f8 94       	cli
    1284:	fe bf       	out	0x3e, r31	; 62
    1286:	0f be       	out	0x3f, r0	; 63
    1288:	ed bf       	out	0x3d, r30	; 61
    128a:	80 e0       	ldi	r24, 0x00	; 0
    128c:	b5 01       	movw	r22, r10
    128e:	43 ea       	ldi	r20, 0xA3	; 163
    1290:	52 e0       	ldi	r21, 0x02	; 2
    1292:	00 e4       	ldi	r16, 0x40	; 64
    1294:	1b e4       	ldi	r17, 0x4B	; 75
    1296:	2c e4       	ldi	r18, 0x4C	; 76
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	ee 24       	eor	r14, r14
    129c:	cc 24       	eor	r12, r12
    129e:	dd 24       	eor	r13, r13
    12a0:	0e 94 6d 03 	call	0x6da	; 0x6da <sim900_send_cmd_wait_reply>
    12a4:	18 2f       	mov	r17, r24
				uint8_t*)"+HTTPREAD:", 5000000, 0, NULL);
				if (respon)
    12a6:	88 23       	and	r24, r24
    12a8:	59 f1       	breq	.+86     	; 0x1300 <__stack+0x201>
				{
					//get the rest of data
					memset(cmdx, '\0', MAX_BUFFER);
    12aa:	ea 2d       	mov	r30, r10
    12ac:	fb 2d       	mov	r31, r11
    12ae:	84 e6       	ldi	r24, 0x64	; 100
    12b0:	df 01       	movw	r26, r30
    12b2:	1d 92       	st	X+, r1
    12b4:	8a 95       	dec	r24
    12b6:	e9 f7       	brne	.-6      	; 0x12b2 <__stack+0x1b3>
					respon = sim900_send_cmd_wait_reply(0,NULL, (const uint8_t*)"\r\nOK",
    12b8:	80 e0       	ldi	r24, 0x00	; 0
    12ba:	60 e0       	ldi	r22, 0x00	; 0
    12bc:	70 e0       	ldi	r23, 0x00	; 0
    12be:	4e ea       	ldi	r20, 0xAE	; 174
    12c0:	52 e0       	ldi	r21, 0x02	; 2
    12c2:	00 e4       	ldi	r16, 0x40	; 64
    12c4:	12 e4       	ldi	r17, 0x42	; 66
    12c6:	2f e0       	ldi	r18, 0x0F	; 15
    12c8:	30 e0       	ldi	r19, 0x00	; 0
    12ca:	0f 2e       	mov	r0, r31
    12cc:	f4 e6       	ldi	r31, 0x64	; 100
    12ce:	ef 2e       	mov	r14, r31
    12d0:	f0 2d       	mov	r31, r0
    12d2:	65 01       	movw	r12, r10
    12d4:	0e 94 6d 03 	call	0x6da	; 0x6da <sim900_send_cmd_wait_reply>
    12d8:	18 2f       	mov	r17, r24
					1000000, MAX_BUFFER, cmdx);

					//filter out the respon and get clean data
					if (respon)
    12da:	88 23       	and	r24, r24
    12dc:	89 f0       	breq	.+34     	; 0x1300 <__stack+0x201>
					{
						//find first \n position
						pr = (uint8_t*)memchr(cmdx, '\n', num_data *sizeof(uint8_t));
    12de:	c5 01       	movw	r24, r10
    12e0:	6a e0       	ldi	r22, 0x0A	; 10
    12e2:	70 e0       	ldi	r23, 0x00	; 0
    12e4:	a3 01       	movw	r20, r6
    12e6:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <memchr>

						//copy to result
						memcpy(arespon_out, pr + 1, num_data *sizeof(uint8_t));
    12ea:	9c 01       	movw	r18, r24
    12ec:	2f 5f       	subi	r18, 0xFF	; 255
    12ee:	3f 4f       	sbci	r19, 0xFF	; 255
    12f0:	88 2d       	mov	r24, r8
    12f2:	99 2d       	mov	r25, r9
    12f4:	62 2f       	mov	r22, r18
    12f6:	73 2f       	mov	r23, r19
    12f8:	46 2d       	mov	r20, r6
    12fa:	57 2d       	mov	r21, r7
    12fc:	0e 94 df 0c 	call	0x19be	; 0x19be <memcpy>
			}
		}
	}

	//terminate
	sim900_http_terminate();
    1300:	0e 94 3f 07 	call	0xe7e	; 0xe7e <sim900_http_terminate>
	
	//free buffer
	free(cmdx);
    1304:	c5 01       	movw	r24, r10
    1306:	0e 94 1b 0c 	call	0x1836	; 0x1836 <free>

	return respon;
    130a:	01 c0       	rjmp	.+2      	; 0x130e <__stack+0x20f>
	uint8_t *cmdx = (uint8_t*) calloc(MAX_BUFFER,sizeof(uint8_t));
	
	//buffer created?
	if (cmdx == NULL)
	{
		return 0;
    130c:	10 e0       	ldi	r17, 0x00	; 0
	
	//free buffer
	free(cmdx);

	return respon;
    130e:	81 2f       	mov	r24, r17
    1310:	26 96       	adiw	r28, 0x06	; 6
    1312:	0f b6       	in	r0, 0x3f	; 63
    1314:	f8 94       	cli
    1316:	de bf       	out	0x3e, r29	; 62
    1318:	0f be       	out	0x3f, r0	; 63
    131a:	cd bf       	out	0x3d, r28	; 61
    131c:	cf 91       	pop	r28
    131e:	df 91       	pop	r29
    1320:	1f 91       	pop	r17
    1322:	0f 91       	pop	r16
    1324:	ff 90       	pop	r15
    1326:	ef 90       	pop	r14
    1328:	df 90       	pop	r13
    132a:	cf 90       	pop	r12
    132c:	bf 90       	pop	r11
    132e:	af 90       	pop	r10
    1330:	9f 90       	pop	r9
    1332:	8f 90       	pop	r8
    1334:	7f 90       	pop	r7
    1336:	6f 90       	pop	r6
    1338:	5f 90       	pop	r5
    133a:	4f 90       	pop	r4
    133c:	3f 90       	pop	r3
    133e:	08 95       	ret

00001340 <__vector_18>:
ISR (UART0_RECEIVE_INTERRUPT)	
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
    1340:	1f 92       	push	r1
    1342:	0f 92       	push	r0
    1344:	0f b6       	in	r0, 0x3f	; 63
    1346:	0f 92       	push	r0
    1348:	0b b6       	in	r0, 0x3b	; 59
    134a:	0f 92       	push	r0
    134c:	11 24       	eor	r1, r1
    134e:	2f 93       	push	r18
    1350:	3f 93       	push	r19
    1352:	8f 93       	push	r24
    1354:	9f 93       	push	r25
    1356:	ef 93       	push	r30
    1358:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */
    usr  = UART0_STATUS;
    135a:	2b b1       	in	r18, 0x0b	; 11
    data = UART0_DATA;
    135c:	3c b1       	in	r19, 0x0c	; 12
#elif defined(FE) && defined(DOR)
    lastRxError = usr & (_BV(FE)|_BV(DOR) );
#endif

    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    135e:	80 91 21 03 	lds	r24, 0x0321
    1362:	8f 5f       	subi	r24, 0xFF	; 255
    1364:	8f 71       	andi	r24, 0x1F	; 31
    
    if ( tmphead == UART_RxTail ) {
    1366:	90 91 22 03 	lds	r25, 0x0322
    136a:	89 17       	cp	r24, r25
    136c:	49 f0       	breq	.+18     	; 0x1380 <__vector_18+0x40>
    usr  = UART0_STATUS;
    data = UART0_DATA;
    
    /* get FEn (Frame Error) DORn (Data OverRun) UPEn (USART Parity Error) bits */
#if defined(FE) && defined(DOR) && defined(UPE)
    lastRxError = usr & (_BV(FE)|_BV(DOR)|_BV(UPE) );
    136e:	2c 71       	andi	r18, 0x1C	; 28
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART_RxHead = tmphead;
    1370:	80 93 21 03 	sts	0x0321, r24
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    1374:	e3 e2       	ldi	r30, 0x23	; 35
    1376:	f3 e0       	ldi	r31, 0x03	; 3
    1378:	e8 0f       	add	r30, r24
    137a:	f1 1d       	adc	r31, r1
    137c:	30 83       	st	Z, r19
    137e:	01 c0       	rjmp	.+2      	; 0x1382 <__vector_18+0x42>
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    1380:	22 e0       	ldi	r18, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError |= lastRxError;   
    1382:	90 91 43 03 	lds	r25, 0x0343
    1386:	82 2f       	mov	r24, r18
    1388:	89 2b       	or	r24, r25
    138a:	80 93 43 03 	sts	0x0343, r24
}
    138e:	ff 91       	pop	r31
    1390:	ef 91       	pop	r30
    1392:	9f 91       	pop	r25
    1394:	8f 91       	pop	r24
    1396:	3f 91       	pop	r19
    1398:	2f 91       	pop	r18
    139a:	0f 90       	pop	r0
    139c:	0b be       	out	0x3b, r0	; 59
    139e:	0f 90       	pop	r0
    13a0:	0f be       	out	0x3f, r0	; 63
    13a2:	0f 90       	pop	r0
    13a4:	1f 90       	pop	r1
    13a6:	18 95       	reti

000013a8 <__vector_19>:
ISR (UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
    13a8:	1f 92       	push	r1
    13aa:	0f 92       	push	r0
    13ac:	0f b6       	in	r0, 0x3f	; 63
    13ae:	0f 92       	push	r0
    13b0:	0b b6       	in	r0, 0x3b	; 59
    13b2:	0f 92       	push	r0
    13b4:	11 24       	eor	r1, r1
    13b6:	8f 93       	push	r24
    13b8:	9f 93       	push	r25
    13ba:	ef 93       	push	r30
    13bc:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
    13be:	90 91 ff 02 	lds	r25, 0x02FF
    13c2:	80 91 00 03 	lds	r24, 0x0300
    13c6:	98 17       	cp	r25, r24
    13c8:	69 f0       	breq	.+26     	; 0x13e4 <__vector_19+0x3c>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
    13ca:	80 91 00 03 	lds	r24, 0x0300
    13ce:	8f 5f       	subi	r24, 0xFF	; 255
    13d0:	8f 71       	andi	r24, 0x1F	; 31
        UART_TxTail = tmptail;
    13d2:	80 93 00 03 	sts	0x0300, r24
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
    13d6:	e1 e0       	ldi	r30, 0x01	; 1
    13d8:	f3 e0       	ldi	r31, 0x03	; 3
    13da:	e8 0f       	add	r30, r24
    13dc:	f1 1d       	adc	r31, r1
    13de:	80 81       	ld	r24, Z
    13e0:	8c b9       	out	0x0c, r24	; 12
    13e2:	01 c0       	rjmp	.+2      	; 0x13e6 <__vector_19+0x3e>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
    13e4:	55 98       	cbi	0x0a, 5	; 10
    }
}
    13e6:	ff 91       	pop	r31
    13e8:	ef 91       	pop	r30
    13ea:	9f 91       	pop	r25
    13ec:	8f 91       	pop	r24
    13ee:	0f 90       	pop	r0
    13f0:	0b be       	out	0x3b, r0	; 59
    13f2:	0f 90       	pop	r0
    13f4:	0f be       	out	0x3f, r0	; 63
    13f6:	0f 90       	pop	r0
    13f8:	1f 90       	pop	r1
    13fa:	18 95       	reti

000013fc <uart_init>:
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
    UART_TxHead = 0;
    13fc:	10 92 ff 02 	sts	0x02FF, r1
    UART_TxTail = 0;
    1400:	10 92 00 03 	sts	0x0300, r1
    UART_RxHead = 0;
    1404:	10 92 21 03 	sts	0x0321, r1
    UART_RxTail = 0;
    1408:	10 92 22 03 	sts	0x0322, r1
#endif
#endif
#endif

    /* Set baud rate */
    if ( baudrate & 0x8000 )
    140c:	99 23       	and	r25, r25
    140e:	14 f4       	brge	.+4      	; 0x1414 <uart_init+0x18>
    {
        #if UART0_BIT_U2X
        UART0_STATUS = (1<<UART0_BIT_U2X);  //Enable 2x speed 
    1410:	22 e0       	ldi	r18, 0x02	; 2
    1412:	2b b9       	out	0x0b, r18	; 11
        #endif
    } 
    #if defined(UART0_UBRRH)
    UART0_UBRRH = (unsigned char)((baudrate>>8)&0x80) ;
    1414:	29 2f       	mov	r18, r25
    1416:	20 78       	andi	r18, 0x80	; 128
    1418:	20 93 90 00 	sts	0x0090, r18
    #endif    
    UART0_UBRRL = (unsigned char) (baudrate&0x00FF);
    141c:	89 b9       	out	0x09, r24	; 9
      
    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(UART0_BIT_RXCIE)|(1<<UART0_BIT_RXEN)|(1<<UART0_BIT_TXEN);
    141e:	88 e9       	ldi	r24, 0x98	; 152
    1420:	8a b9       	out	0x0a, r24	; 10
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef UART0_CONTROLC
    #ifdef UART0_BIT_URSEL
    UART0_CONTROLC = (1<<UART0_BIT_URSEL)|(1<<UART0_BIT_UCSZ1)|(1<<UART0_BIT_UCSZ0);
    #else
    UART0_CONTROLC = (1<<UART0_BIT_UCSZ1)|(1<<UART0_BIT_UCSZ0);
    1422:	86 e0       	ldi	r24, 0x06	; 6
    1424:	80 93 95 00 	sts	0x0095, r24
    #endif 
    #endif

}/* uart_init */
    1428:	08 95       	ret

0000142a <uart_getc>:
    unsigned char tmptail;
    unsigned char data;
    unsigned char lastRxError;


    if ( UART_RxHead == UART_RxTail ) {
    142a:	90 91 21 03 	lds	r25, 0x0321
    142e:	80 91 22 03 	lds	r24, 0x0322
    1432:	98 17       	cp	r25, r24
    1434:	a1 f0       	breq	.+40     	; 0x145e <uart_getc+0x34>
        return UART_NO_DATA;   /* no data available */
    }
    
    /* calculate buffer index */
    tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
    1436:	80 91 22 03 	lds	r24, 0x0322
    143a:	8f 5f       	subi	r24, 0xFF	; 255
    143c:	8f 71       	andi	r24, 0x1F	; 31
    
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
    143e:	e3 e2       	ldi	r30, 0x23	; 35
    1440:	f3 e0       	ldi	r31, 0x03	; 3
    1442:	e8 0f       	add	r30, r24
    1444:	f1 1d       	adc	r31, r1
    1446:	90 81       	ld	r25, Z
    lastRxError = UART_LastRxError;
    1448:	40 91 43 03 	lds	r20, 0x0343
    
    /* store buffer index */
    UART_RxTail = tmptail; 
    144c:	80 93 22 03 	sts	0x0322, r24
    
    UART_LastRxError = 0;
    1450:	10 92 43 03 	sts	0x0343, r1
    return (lastRxError << 8) + data;
    1454:	34 2f       	mov	r19, r20
    1456:	20 e0       	ldi	r18, 0x00	; 0
    1458:	29 0f       	add	r18, r25
    145a:	31 1d       	adc	r19, r1
    145c:	02 c0       	rjmp	.+4      	; 0x1462 <uart_getc+0x38>
    unsigned char data;
    unsigned char lastRxError;


    if ( UART_RxHead == UART_RxTail ) {
        return UART_NO_DATA;   /* no data available */
    145e:	20 e0       	ldi	r18, 0x00	; 0
    1460:	31 e0       	ldi	r19, 0x01	; 1
    UART_RxTail = tmptail; 
    
    UART_LastRxError = 0;
    return (lastRxError << 8) + data;

}/* uart_getc */
    1462:	82 2f       	mov	r24, r18
    1464:	93 2f       	mov	r25, r19
    1466:	08 95       	ret

00001468 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
    1468:	20 91 ff 02 	lds	r18, 0x02FF
    146c:	2f 5f       	subi	r18, 0xFF	; 255
    146e:	2f 71       	andi	r18, 0x1F	; 31
    
    while ( tmphead == UART_TxTail ){
    1470:	90 91 00 03 	lds	r25, 0x0300
    1474:	29 17       	cp	r18, r25
    1476:	e1 f3       	breq	.-8      	; 0x1470 <uart_putc+0x8>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
    1478:	e1 e0       	ldi	r30, 0x01	; 1
    147a:	f3 e0       	ldi	r31, 0x03	; 3
    147c:	e2 0f       	add	r30, r18
    147e:	f1 1d       	adc	r31, r1
    1480:	80 83       	st	Z, r24
    UART_TxHead = tmphead;
    1482:	20 93 ff 02 	sts	0x02FF, r18

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
    1486:	55 9a       	sbi	0x0a, 5	; 10

}/* uart_putc */
    1488:	08 95       	ret

0000148a <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    148a:	cf 93       	push	r28
    148c:	df 93       	push	r29
    148e:	ec 01       	movw	r28, r24
    while (*s) 
    1490:	88 81       	ld	r24, Y
    1492:	88 23       	and	r24, r24
    1494:	31 f0       	breq	.+12     	; 0x14a2 <uart_puts+0x18>
Function: uart_puts()
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
    1496:	21 96       	adiw	r28, 0x01	; 1
{
    while (*s) 
      uart_putc(*s++);
    1498:	0e 94 34 0a 	call	0x1468	; 0x1468 <uart_putc>
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    while (*s) 
    149c:	89 91       	ld	r24, Y+
    149e:	88 23       	and	r24, r24
    14a0:	d9 f7       	brne	.-10     	; 0x1498 <uart_puts+0xe>
      uart_putc(*s++);

}/* uart_puts */
    14a2:	df 91       	pop	r29
    14a4:	cf 91       	pop	r28
    14a6:	08 95       	ret

000014a8 <uart_puts_p>:
Purpose:  transmit string from program memory to UART
Input:    program memory string to be transmitted
Returns:  none
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
    14a8:	cf 93       	push	r28
    14aa:	df 93       	push	r29
    14ac:	ec 01       	movw	r28, r24
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
    14ae:	fc 01       	movw	r30, r24
    14b0:	84 91       	lpm	r24, Z+
    14b2:	88 23       	and	r24, r24
    14b4:	41 f0       	breq	.+16     	; 0x14c6 <uart_puts_p+0x1e>
    14b6:	21 96       	adiw	r28, 0x01	; 1
      uart_putc(c);
    14b8:	0e 94 34 0a 	call	0x1468	; 0x1468 <uart_putc>
    14bc:	fe 01       	movw	r30, r28
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
    14be:	21 96       	adiw	r28, 0x01	; 1
    14c0:	84 91       	lpm	r24, Z+
    14c2:	88 23       	and	r24, r24
    14c4:	c9 f7       	brne	.-14     	; 0x14b8 <uart_puts_p+0x10>
      uart_putc(c);

}/* uart_puts_p */
    14c6:	df 91       	pop	r29
    14c8:	cf 91       	pop	r28
    14ca:	08 95       	ret

000014cc <__vector_30>:
ISR(UART1_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART1 Receive Complete interrupt
Purpose:  called when the UART1 has received a character
**************************************************************************/
{
    14cc:	1f 92       	push	r1
    14ce:	0f 92       	push	r0
    14d0:	0f b6       	in	r0, 0x3f	; 63
    14d2:	0f 92       	push	r0
    14d4:	0b b6       	in	r0, 0x3b	; 59
    14d6:	0f 92       	push	r0
    14d8:	11 24       	eor	r1, r1
    14da:	2f 93       	push	r18
    14dc:	3f 93       	push	r19
    14de:	8f 93       	push	r24
    14e0:	9f 93       	push	r25
    14e2:	ef 93       	push	r30
    14e4:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */ 
    usr  = UART1_STATUS;
    14e6:	20 91 9b 00 	lds	r18, 0x009B
    data = UART1_DATA;
    14ea:	30 91 9c 00 	lds	r19, 0x009C
    
    /* get FEn (Frame Error) DORn (Data OverRun) UPEn (USART Parity Error) bits */
    lastRxError = usr & (_BV(FE1)|_BV(DOR1)|_BV(UPE1) );
            
    /* calculate buffer index */ 
    tmphead = ( UART1_RxHead + 1) & UART_RX_BUFFER_MASK;
    14ee:	80 91 dc 02 	lds	r24, 0x02DC
    14f2:	8f 5f       	subi	r24, 0xFF	; 255
    14f4:	8f 71       	andi	r24, 0x1F	; 31
    
    if ( tmphead == UART1_RxTail ) {
    14f6:	90 91 dd 02 	lds	r25, 0x02DD
    14fa:	89 17       	cp	r24, r25
    14fc:	49 f0       	breq	.+18     	; 0x1510 <__vector_30+0x44>
    /* read UART status register and UART data register */ 
    usr  = UART1_STATUS;
    data = UART1_DATA;
    
    /* get FEn (Frame Error) DORn (Data OverRun) UPEn (USART Parity Error) bits */
    lastRxError = usr & (_BV(FE1)|_BV(DOR1)|_BV(UPE1) );
    14fe:	2c 71       	andi	r18, 0x1C	; 28
    if ( tmphead == UART1_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART1_RxHead = tmphead;
    1500:	80 93 dc 02 	sts	0x02DC, r24
        /* store received data in buffer */
        UART1_RxBuf[tmphead] = data;
    1504:	ee ed       	ldi	r30, 0xDE	; 222
    1506:	f2 e0       	ldi	r31, 0x02	; 2
    1508:	e8 0f       	add	r30, r24
    150a:	f1 1d       	adc	r31, r1
    150c:	30 83       	st	Z, r19
    150e:	01 c0       	rjmp	.+2      	; 0x1512 <__vector_30+0x46>
    /* calculate buffer index */ 
    tmphead = ( UART1_RxHead + 1) & UART_RX_BUFFER_MASK;
    
    if ( tmphead == UART1_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    1510:	22 e0       	ldi	r18, 0x02	; 2
        /* store new index */
        UART1_RxHead = tmphead;
        /* store received data in buffer */
        UART1_RxBuf[tmphead] = data;
    }
    UART1_LastRxError |= lastRxError;   
    1512:	90 91 fe 02 	lds	r25, 0x02FE
    1516:	82 2f       	mov	r24, r18
    1518:	89 2b       	or	r24, r25
    151a:	80 93 fe 02 	sts	0x02FE, r24
}
    151e:	ff 91       	pop	r31
    1520:	ef 91       	pop	r30
    1522:	9f 91       	pop	r25
    1524:	8f 91       	pop	r24
    1526:	3f 91       	pop	r19
    1528:	2f 91       	pop	r18
    152a:	0f 90       	pop	r0
    152c:	0b be       	out	0x3b, r0	; 59
    152e:	0f 90       	pop	r0
    1530:	0f be       	out	0x3f, r0	; 63
    1532:	0f 90       	pop	r0
    1534:	1f 90       	pop	r1
    1536:	18 95       	reti

00001538 <__vector_31>:
ISR(UART1_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART1 Data Register Empty interrupt
Purpose:  called when the UART1 is ready to transmit the next byte
**************************************************************************/
{
    1538:	1f 92       	push	r1
    153a:	0f 92       	push	r0
    153c:	0f b6       	in	r0, 0x3f	; 63
    153e:	0f 92       	push	r0
    1540:	0b b6       	in	r0, 0x3b	; 59
    1542:	0f 92       	push	r0
    1544:	11 24       	eor	r1, r1
    1546:	8f 93       	push	r24
    1548:	9f 93       	push	r25
    154a:	ef 93       	push	r30
    154c:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART1_TxHead != UART1_TxTail) {
    154e:	90 91 ba 02 	lds	r25, 0x02BA
    1552:	80 91 bb 02 	lds	r24, 0x02BB
    1556:	98 17       	cp	r25, r24
    1558:	71 f0       	breq	.+28     	; 0x1576 <__vector_31+0x3e>
        /* calculate and store new buffer index */
        tmptail = (UART1_TxTail + 1) & UART_TX_BUFFER_MASK;
    155a:	80 91 bb 02 	lds	r24, 0x02BB
    155e:	8f 5f       	subi	r24, 0xFF	; 255
    1560:	8f 71       	andi	r24, 0x1F	; 31
        UART1_TxTail = tmptail;
    1562:	80 93 bb 02 	sts	0x02BB, r24
        /* get one byte from buffer and write it to UART */
        UART1_DATA = UART1_TxBuf[tmptail];  /* start transmission */
    1566:	ec eb       	ldi	r30, 0xBC	; 188
    1568:	f2 e0       	ldi	r31, 0x02	; 2
    156a:	e8 0f       	add	r30, r24
    156c:	f1 1d       	adc	r31, r1
    156e:	80 81       	ld	r24, Z
    1570:	80 93 9c 00 	sts	0x009C, r24
    1574:	05 c0       	rjmp	.+10     	; 0x1580 <__vector_31+0x48>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART1_CONTROL &= ~_BV(UART1_UDRIE);
    1576:	ea e9       	ldi	r30, 0x9A	; 154
    1578:	f0 e0       	ldi	r31, 0x00	; 0
    157a:	80 81       	ld	r24, Z
    157c:	8f 7d       	andi	r24, 0xDF	; 223
    157e:	80 83       	st	Z, r24
    }
}
    1580:	ff 91       	pop	r31
    1582:	ef 91       	pop	r30
    1584:	9f 91       	pop	r25
    1586:	8f 91       	pop	r24
    1588:	0f 90       	pop	r0
    158a:	0b be       	out	0x3b, r0	; 59
    158c:	0f 90       	pop	r0
    158e:	0f be       	out	0x3f, r0	; 63
    1590:	0f 90       	pop	r0
    1592:	1f 90       	pop	r1
    1594:	18 95       	reti

00001596 <uart1_init>:
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart1_init(unsigned int baudrate)
{
    UART1_TxHead = 0;
    1596:	10 92 ba 02 	sts	0x02BA, r1
    UART1_TxTail = 0;
    159a:	10 92 bb 02 	sts	0x02BB, r1
    UART1_RxHead = 0;
    159e:	10 92 dc 02 	sts	0x02DC, r1
    UART1_RxTail = 0;
    15a2:	10 92 dd 02 	sts	0x02DD, r1
#endif
#endif
#endif

    /* Set baud rate */
    if ( baudrate & 0x8000 ) 
    15a6:	99 23       	and	r25, r25
    15a8:	1c f4       	brge	.+6      	; 0x15b0 <uart1_init+0x1a>
    {
        #if UART1_BIT_U2X
    	UART1_STATUS = (1<<UART1_BIT_U2X);  //Enable 2x speed 
    15aa:	22 e0       	ldi	r18, 0x02	; 2
    15ac:	20 93 9b 00 	sts	0x009B, r18
        #endif
    }
    UART1_UBRRH = (unsigned char)((baudrate>>8)&0x80) ;
    15b0:	29 2f       	mov	r18, r25
    15b2:	20 78       	andi	r18, 0x80	; 128
    15b4:	20 93 98 00 	sts	0x0098, r18
    UART1_UBRRL = (unsigned char) baudrate;
    15b8:	80 93 99 00 	sts	0x0099, r24
        
    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART1_CONTROL = _BV(UART1_BIT_RXCIE)|(1<<UART1_BIT_RXEN)|(1<<UART1_BIT_TXEN);    
    15bc:	88 e9       	ldi	r24, 0x98	; 152
    15be:	80 93 9a 00 	sts	0x009A, r24
    
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */   
    #ifdef UART1_BIT_URSEL
    UART1_CONTROLC = (1<<UART1_BIT_URSEL)|(1<<UART1_BIT_UCSZ1)|(1<<UART1_BIT_UCSZ0);
    #else
    UART1_CONTROLC = (1<<UART1_BIT_UCSZ1)|(1<<UART1_BIT_UCSZ0);
    15c2:	86 e0       	ldi	r24, 0x06	; 6
    15c4:	80 93 9d 00 	sts	0x009D, r24
    #endif 
    
}/* uart_init */
    15c8:	08 95       	ret

000015ca <uart1_getc>:
    unsigned char tmptail;
    unsigned int  data;
    unsigned char lastRxError;


    if ( UART1_RxHead == UART1_RxTail ) {
    15ca:	90 91 dc 02 	lds	r25, 0x02DC
    15ce:	80 91 dd 02 	lds	r24, 0x02DD
    15d2:	98 17       	cp	r25, r24
    15d4:	a1 f0       	breq	.+40     	; 0x15fe <uart1_getc+0x34>
        return UART_NO_DATA;   /* no data available */
    }
    
    /* calculate buffer index */
    tmptail = (UART1_RxTail + 1) & UART_RX_BUFFER_MASK;
    15d6:	80 91 dd 02 	lds	r24, 0x02DD
    15da:	8f 5f       	subi	r24, 0xFF	; 255
    15dc:	8f 71       	andi	r24, 0x1F	; 31
    
    /* get data from receive buffer */
    data = UART1_RxBuf[tmptail];
    15de:	ee ed       	ldi	r30, 0xDE	; 222
    15e0:	f2 e0       	ldi	r31, 0x02	; 2
    15e2:	e8 0f       	add	r30, r24
    15e4:	f1 1d       	adc	r31, r1
    15e6:	90 81       	ld	r25, Z
    lastRxError = UART1_LastRxError;
    15e8:	40 91 fe 02 	lds	r20, 0x02FE
    
    /* store buffer index */
    UART1_RxTail = tmptail; 
    15ec:	80 93 dd 02 	sts	0x02DD, r24
    
    UART1_LastRxError = 0;
    15f0:	10 92 fe 02 	sts	0x02FE, r1
    return (lastRxError << 8) + data;
    15f4:	34 2f       	mov	r19, r20
    15f6:	20 e0       	ldi	r18, 0x00	; 0
    15f8:	29 0f       	add	r18, r25
    15fa:	31 1d       	adc	r19, r1
    15fc:	02 c0       	rjmp	.+4      	; 0x1602 <uart1_getc+0x38>
    unsigned int  data;
    unsigned char lastRxError;


    if ( UART1_RxHead == UART1_RxTail ) {
        return UART_NO_DATA;   /* no data available */
    15fe:	20 e0       	ldi	r18, 0x00	; 0
    1600:	31 e0       	ldi	r19, 0x01	; 1
    UART1_RxTail = tmptail; 
    
    UART1_LastRxError = 0;
    return (lastRxError << 8) + data;

}/* uart1_getc */
    1602:	82 2f       	mov	r24, r18
    1604:	93 2f       	mov	r25, r19
    1606:	08 95       	ret

00001608 <uart1_putc>:
void uart1_putc(unsigned char data)
{
    unsigned char tmphead;

    
    tmphead  = (UART1_TxHead + 1) & UART_TX_BUFFER_MASK;
    1608:	20 91 ba 02 	lds	r18, 0x02BA
    160c:	2f 5f       	subi	r18, 0xFF	; 255
    160e:	2f 71       	andi	r18, 0x1F	; 31
    
    while ( tmphead == UART1_TxTail ){
    1610:	90 91 bb 02 	lds	r25, 0x02BB
    1614:	29 17       	cp	r18, r25
    1616:	e1 f3       	breq	.-8      	; 0x1610 <uart1_putc+0x8>
        ;/* wait for free space in buffer */
    }
    
    UART1_TxBuf[tmphead] = data;
    1618:	ec eb       	ldi	r30, 0xBC	; 188
    161a:	f2 e0       	ldi	r31, 0x02	; 2
    161c:	e2 0f       	add	r30, r18
    161e:	f1 1d       	adc	r31, r1
    1620:	80 83       	st	Z, r24
    UART1_TxHead = tmphead;
    1622:	20 93 ba 02 	sts	0x02BA, r18

    /* enable UDRE interrupt */
    UART1_CONTROL    |= _BV(UART1_UDRIE);
    1626:	ea e9       	ldi	r30, 0x9A	; 154
    1628:	f0 e0       	ldi	r31, 0x00	; 0
    162a:	80 81       	ld	r24, Z
    162c:	80 62       	ori	r24, 0x20	; 32
    162e:	80 83       	st	Z, r24

}/* uart1_putc */
    1630:	08 95       	ret

00001632 <uart1_puts>:
Purpose:  transmit string to UART1
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart1_puts(const char *s )
{
    1632:	cf 93       	push	r28
    1634:	df 93       	push	r29
    1636:	ec 01       	movw	r28, r24
    while (*s) 
    1638:	88 81       	ld	r24, Y
    163a:	88 23       	and	r24, r24
    163c:	31 f0       	breq	.+12     	; 0x164a <uart1_puts+0x18>
Function: uart1_puts()
Purpose:  transmit string to UART1
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart1_puts(const char *s )
    163e:	21 96       	adiw	r28, 0x01	; 1
{
    while (*s) 
      uart1_putc(*s++);
    1640:	0e 94 04 0b 	call	0x1608	; 0x1608 <uart1_putc>
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart1_puts(const char *s )
{
    while (*s) 
    1644:	89 91       	ld	r24, Y+
    1646:	88 23       	and	r24, r24
    1648:	d9 f7       	brne	.-10     	; 0x1640 <uart1_puts+0xe>
      uart1_putc(*s++);

}/* uart1_puts */
    164a:	df 91       	pop	r29
    164c:	cf 91       	pop	r28
    164e:	08 95       	ret

00001650 <uart1_puts_p>:
Purpose:  transmit string from program memory to UART1
Input:    program memory string to be transmitted
Returns:  none
**************************************************************************/
void uart1_puts_p(const char *progmem_s )
{
    1650:	cf 93       	push	r28
    1652:	df 93       	push	r29
    1654:	ec 01       	movw	r28, r24
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
    1656:	fc 01       	movw	r30, r24
    1658:	84 91       	lpm	r24, Z+
    165a:	88 23       	and	r24, r24
    165c:	41 f0       	breq	.+16     	; 0x166e <uart1_puts_p+0x1e>
    165e:	21 96       	adiw	r28, 0x01	; 1
      uart1_putc(c);
    1660:	0e 94 04 0b 	call	0x1608	; 0x1608 <uart1_putc>
    1664:	fe 01       	movw	r30, r28
**************************************************************************/
void uart1_puts_p(const char *progmem_s )
{
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
    1666:	21 96       	adiw	r28, 0x01	; 1
    1668:	84 91       	lpm	r24, Z+
    166a:	88 23       	and	r24, r24
    166c:	c9 f7       	brne	.-14     	; 0x1660 <uart1_puts_p+0x10>
      uart1_putc(c);

}/* uart1_puts_p */
    166e:	df 91       	pop	r29
    1670:	cf 91       	pop	r28
    1672:	08 95       	ret

00001674 <__udivmodsi4>:
    1674:	a1 e2       	ldi	r26, 0x21	; 33
    1676:	1a 2e       	mov	r1, r26
    1678:	aa 1b       	sub	r26, r26
    167a:	bb 1b       	sub	r27, r27
    167c:	fd 01       	movw	r30, r26
    167e:	0d c0       	rjmp	.+26     	; 0x169a <__udivmodsi4_ep>

00001680 <__udivmodsi4_loop>:
    1680:	aa 1f       	adc	r26, r26
    1682:	bb 1f       	adc	r27, r27
    1684:	ee 1f       	adc	r30, r30
    1686:	ff 1f       	adc	r31, r31
    1688:	a2 17       	cp	r26, r18
    168a:	b3 07       	cpc	r27, r19
    168c:	e4 07       	cpc	r30, r20
    168e:	f5 07       	cpc	r31, r21
    1690:	20 f0       	brcs	.+8      	; 0x169a <__udivmodsi4_ep>
    1692:	a2 1b       	sub	r26, r18
    1694:	b3 0b       	sbc	r27, r19
    1696:	e4 0b       	sbc	r30, r20
    1698:	f5 0b       	sbc	r31, r21

0000169a <__udivmodsi4_ep>:
    169a:	66 1f       	adc	r22, r22
    169c:	77 1f       	adc	r23, r23
    169e:	88 1f       	adc	r24, r24
    16a0:	99 1f       	adc	r25, r25
    16a2:	1a 94       	dec	r1
    16a4:	69 f7       	brne	.-38     	; 0x1680 <__udivmodsi4_loop>
    16a6:	60 95       	com	r22
    16a8:	70 95       	com	r23
    16aa:	80 95       	com	r24
    16ac:	90 95       	com	r25
    16ae:	9b 01       	movw	r18, r22
    16b0:	ac 01       	movw	r20, r24
    16b2:	bd 01       	movw	r22, r26
    16b4:	cf 01       	movw	r24, r30
    16b6:	08 95       	ret

000016b8 <calloc>:
    16b8:	ef 92       	push	r14
    16ba:	ff 92       	push	r15
    16bc:	0f 93       	push	r16
    16be:	1f 93       	push	r17
    16c0:	cf 93       	push	r28
    16c2:	df 93       	push	r29
    16c4:	68 9f       	mul	r22, r24
    16c6:	80 01       	movw	r16, r0
    16c8:	69 9f       	mul	r22, r25
    16ca:	10 0d       	add	r17, r0
    16cc:	78 9f       	mul	r23, r24
    16ce:	10 0d       	add	r17, r0
    16d0:	11 24       	eor	r1, r1
    16d2:	c8 01       	movw	r24, r16
    16d4:	0e 94 81 0b 	call	0x1702	; 0x1702 <malloc>
    16d8:	e8 2e       	mov	r14, r24
    16da:	e7 01       	movw	r28, r14
    16dc:	7e 01       	movw	r14, r28
    16de:	f9 2e       	mov	r15, r25
    16e0:	e7 01       	movw	r28, r14
    16e2:	20 97       	sbiw	r28, 0x00	; 0
    16e4:	31 f0       	breq	.+12     	; 0x16f2 <calloc+0x3a>
    16e6:	8e 2d       	mov	r24, r14
    16e8:	60 e0       	ldi	r22, 0x00	; 0
    16ea:	70 e0       	ldi	r23, 0x00	; 0
    16ec:	a8 01       	movw	r20, r16
    16ee:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <memset>
    16f2:	ce 01       	movw	r24, r28
    16f4:	df 91       	pop	r29
    16f6:	cf 91       	pop	r28
    16f8:	1f 91       	pop	r17
    16fa:	0f 91       	pop	r16
    16fc:	ff 90       	pop	r15
    16fe:	ef 90       	pop	r14
    1700:	08 95       	ret

00001702 <malloc>:
    1702:	cf 93       	push	r28
    1704:	df 93       	push	r29
    1706:	82 30       	cpi	r24, 0x02	; 2
    1708:	91 05       	cpc	r25, r1
    170a:	10 f4       	brcc	.+4      	; 0x1710 <malloc+0xe>
    170c:	82 e0       	ldi	r24, 0x02	; 2
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	e0 91 46 03 	lds	r30, 0x0346
    1714:	f0 91 47 03 	lds	r31, 0x0347
    1718:	40 e0       	ldi	r20, 0x00	; 0
    171a:	50 e0       	ldi	r21, 0x00	; 0
    171c:	20 e0       	ldi	r18, 0x00	; 0
    171e:	30 e0       	ldi	r19, 0x00	; 0
    1720:	26 c0       	rjmp	.+76     	; 0x176e <malloc+0x6c>
    1722:	60 81       	ld	r22, Z
    1724:	71 81       	ldd	r23, Z+1	; 0x01
    1726:	68 17       	cp	r22, r24
    1728:	79 07       	cpc	r23, r25
    172a:	e0 f0       	brcs	.+56     	; 0x1764 <malloc+0x62>
    172c:	68 17       	cp	r22, r24
    172e:	79 07       	cpc	r23, r25
    1730:	81 f4       	brne	.+32     	; 0x1752 <malloc+0x50>
    1732:	82 81       	ldd	r24, Z+2	; 0x02
    1734:	93 81       	ldd	r25, Z+3	; 0x03
    1736:	21 15       	cp	r18, r1
    1738:	31 05       	cpc	r19, r1
    173a:	31 f0       	breq	.+12     	; 0x1748 <malloc+0x46>
    173c:	d9 01       	movw	r26, r18
    173e:	13 96       	adiw	r26, 0x03	; 3
    1740:	9c 93       	st	X, r25
    1742:	8e 93       	st	-X, r24
    1744:	12 97       	sbiw	r26, 0x02	; 2
    1746:	2b c0       	rjmp	.+86     	; 0x179e <malloc+0x9c>
    1748:	90 93 47 03 	sts	0x0347, r25
    174c:	80 93 46 03 	sts	0x0346, r24
    1750:	26 c0       	rjmp	.+76     	; 0x179e <malloc+0x9c>
    1752:	41 15       	cp	r20, r1
    1754:	51 05       	cpc	r21, r1
    1756:	19 f0       	breq	.+6      	; 0x175e <malloc+0x5c>
    1758:	64 17       	cp	r22, r20
    175a:	75 07       	cpc	r23, r21
    175c:	18 f4       	brcc	.+6      	; 0x1764 <malloc+0x62>
    175e:	ab 01       	movw	r20, r22
    1760:	e9 01       	movw	r28, r18
    1762:	df 01       	movw	r26, r30
    1764:	9f 01       	movw	r18, r30
    1766:	72 81       	ldd	r23, Z+2	; 0x02
    1768:	63 81       	ldd	r22, Z+3	; 0x03
    176a:	e7 2f       	mov	r30, r23
    176c:	f6 2f       	mov	r31, r22
    176e:	30 97       	sbiw	r30, 0x00	; 0
    1770:	c1 f6       	brne	.-80     	; 0x1722 <malloc+0x20>
    1772:	41 15       	cp	r20, r1
    1774:	51 05       	cpc	r21, r1
    1776:	01 f1       	breq	.+64     	; 0x17b8 <malloc+0xb6>
    1778:	48 1b       	sub	r20, r24
    177a:	59 0b       	sbc	r21, r25
    177c:	44 30       	cpi	r20, 0x04	; 4
    177e:	51 05       	cpc	r21, r1
    1780:	80 f4       	brcc	.+32     	; 0x17a2 <malloc+0xa0>
    1782:	12 96       	adiw	r26, 0x02	; 2
    1784:	8d 91       	ld	r24, X+
    1786:	9c 91       	ld	r25, X
    1788:	13 97       	sbiw	r26, 0x03	; 3
    178a:	20 97       	sbiw	r28, 0x00	; 0
    178c:	19 f0       	breq	.+6      	; 0x1794 <malloc+0x92>
    178e:	9b 83       	std	Y+3, r25	; 0x03
    1790:	8a 83       	std	Y+2, r24	; 0x02
    1792:	04 c0       	rjmp	.+8      	; 0x179c <malloc+0x9a>
    1794:	90 93 47 03 	sts	0x0347, r25
    1798:	80 93 46 03 	sts	0x0346, r24
    179c:	fd 01       	movw	r30, r26
    179e:	32 96       	adiw	r30, 0x02	; 2
    17a0:	46 c0       	rjmp	.+140    	; 0x182e <malloc+0x12c>
    17a2:	fd 01       	movw	r30, r26
    17a4:	e4 0f       	add	r30, r20
    17a6:	f5 1f       	adc	r31, r21
    17a8:	81 93       	st	Z+, r24
    17aa:	91 93       	st	Z+, r25
    17ac:	42 50       	subi	r20, 0x02	; 2
    17ae:	50 40       	sbci	r21, 0x00	; 0
    17b0:	11 96       	adiw	r26, 0x01	; 1
    17b2:	5c 93       	st	X, r21
    17b4:	4e 93       	st	-X, r20
    17b6:	3b c0       	rjmp	.+118    	; 0x182e <malloc+0x12c>
    17b8:	20 91 44 03 	lds	r18, 0x0344
    17bc:	30 91 45 03 	lds	r19, 0x0345
    17c0:	21 15       	cp	r18, r1
    17c2:	31 05       	cpc	r19, r1
    17c4:	41 f4       	brne	.+16     	; 0x17d6 <malloc+0xd4>
    17c6:	20 91 b5 02 	lds	r18, 0x02B5
    17ca:	30 91 b6 02 	lds	r19, 0x02B6
    17ce:	30 93 45 03 	sts	0x0345, r19
    17d2:	20 93 44 03 	sts	0x0344, r18
    17d6:	20 91 b7 02 	lds	r18, 0x02B7
    17da:	30 91 b8 02 	lds	r19, 0x02B8
    17de:	21 15       	cp	r18, r1
    17e0:	31 05       	cpc	r19, r1
    17e2:	41 f4       	brne	.+16     	; 0x17f4 <malloc+0xf2>
    17e4:	2d b7       	in	r18, 0x3d	; 61
    17e6:	3e b7       	in	r19, 0x3e	; 62
    17e8:	40 91 b3 02 	lds	r20, 0x02B3
    17ec:	50 91 b4 02 	lds	r21, 0x02B4
    17f0:	24 1b       	sub	r18, r20
    17f2:	35 0b       	sbc	r19, r21
    17f4:	e0 91 44 03 	lds	r30, 0x0344
    17f8:	f0 91 45 03 	lds	r31, 0x0345
    17fc:	e2 17       	cp	r30, r18
    17fe:	f3 07       	cpc	r31, r19
    1800:	a0 f4       	brcc	.+40     	; 0x182a <malloc+0x128>
    1802:	2e 1b       	sub	r18, r30
    1804:	3f 0b       	sbc	r19, r31
    1806:	28 17       	cp	r18, r24
    1808:	39 07       	cpc	r19, r25
    180a:	78 f0       	brcs	.+30     	; 0x182a <malloc+0x128>
    180c:	ac 01       	movw	r20, r24
    180e:	4e 5f       	subi	r20, 0xFE	; 254
    1810:	5f 4f       	sbci	r21, 0xFF	; 255
    1812:	24 17       	cp	r18, r20
    1814:	35 07       	cpc	r19, r21
    1816:	48 f0       	brcs	.+18     	; 0x182a <malloc+0x128>
    1818:	4e 0f       	add	r20, r30
    181a:	5f 1f       	adc	r21, r31
    181c:	50 93 45 03 	sts	0x0345, r21
    1820:	40 93 44 03 	sts	0x0344, r20
    1824:	81 93       	st	Z+, r24
    1826:	91 93       	st	Z+, r25
    1828:	02 c0       	rjmp	.+4      	; 0x182e <malloc+0x12c>
    182a:	e0 e0       	ldi	r30, 0x00	; 0
    182c:	f0 e0       	ldi	r31, 0x00	; 0
    182e:	cf 01       	movw	r24, r30
    1830:	df 91       	pop	r29
    1832:	cf 91       	pop	r28
    1834:	08 95       	ret

00001836 <free>:
    1836:	cf 93       	push	r28
    1838:	df 93       	push	r29
    183a:	00 97       	sbiw	r24, 0x00	; 0
    183c:	09 f4       	brne	.+2      	; 0x1840 <free+0xa>
    183e:	91 c0       	rjmp	.+290    	; 0x1962 <free+0x12c>
    1840:	fc 01       	movw	r30, r24
    1842:	32 97       	sbiw	r30, 0x02	; 2
    1844:	13 82       	std	Z+3, r1	; 0x03
    1846:	12 82       	std	Z+2, r1	; 0x02
    1848:	60 91 46 03 	lds	r22, 0x0346
    184c:	70 91 47 03 	lds	r23, 0x0347
    1850:	61 15       	cp	r22, r1
    1852:	71 05       	cpc	r23, r1
    1854:	81 f4       	brne	.+32     	; 0x1876 <free+0x40>
    1856:	20 81       	ld	r18, Z
    1858:	31 81       	ldd	r19, Z+1	; 0x01
    185a:	28 0f       	add	r18, r24
    185c:	39 1f       	adc	r19, r25
    185e:	80 91 44 03 	lds	r24, 0x0344
    1862:	90 91 45 03 	lds	r25, 0x0345
    1866:	82 17       	cp	r24, r18
    1868:	93 07       	cpc	r25, r19
    186a:	99 f5       	brne	.+102    	; 0x18d2 <free+0x9c>
    186c:	f0 93 45 03 	sts	0x0345, r31
    1870:	e0 93 44 03 	sts	0x0344, r30
    1874:	76 c0       	rjmp	.+236    	; 0x1962 <free+0x12c>
    1876:	db 01       	movw	r26, r22
    1878:	80 e0       	ldi	r24, 0x00	; 0
    187a:	90 e0       	ldi	r25, 0x00	; 0
    187c:	02 c0       	rjmp	.+4      	; 0x1882 <free+0x4c>
    187e:	cd 01       	movw	r24, r26
    1880:	d9 01       	movw	r26, r18
    1882:	ae 17       	cp	r26, r30
    1884:	bf 07       	cpc	r27, r31
    1886:	48 f4       	brcc	.+18     	; 0x189a <free+0x64>
    1888:	12 96       	adiw	r26, 0x02	; 2
    188a:	2d 91       	ld	r18, X+
    188c:	3c 91       	ld	r19, X
    188e:	13 97       	sbiw	r26, 0x03	; 3
    1890:	21 15       	cp	r18, r1
    1892:	31 05       	cpc	r19, r1
    1894:	a1 f7       	brne	.-24     	; 0x187e <free+0x48>
    1896:	cd 01       	movw	r24, r26
    1898:	21 c0       	rjmp	.+66     	; 0x18dc <free+0xa6>
    189a:	b3 83       	std	Z+3, r27	; 0x03
    189c:	a2 83       	std	Z+2, r26	; 0x02
    189e:	ef 01       	movw	r28, r30
    18a0:	49 91       	ld	r20, Y+
    18a2:	59 91       	ld	r21, Y+
    18a4:	9e 01       	movw	r18, r28
    18a6:	24 0f       	add	r18, r20
    18a8:	35 1f       	adc	r19, r21
    18aa:	a2 17       	cp	r26, r18
    18ac:	b3 07       	cpc	r27, r19
    18ae:	79 f4       	brne	.+30     	; 0x18ce <free+0x98>
    18b0:	2d 91       	ld	r18, X+
    18b2:	3c 91       	ld	r19, X
    18b4:	11 97       	sbiw	r26, 0x01	; 1
    18b6:	24 0f       	add	r18, r20
    18b8:	35 1f       	adc	r19, r21
    18ba:	2e 5f       	subi	r18, 0xFE	; 254
    18bc:	3f 4f       	sbci	r19, 0xFF	; 255
    18be:	31 83       	std	Z+1, r19	; 0x01
    18c0:	20 83       	st	Z, r18
    18c2:	12 96       	adiw	r26, 0x02	; 2
    18c4:	2d 91       	ld	r18, X+
    18c6:	3c 91       	ld	r19, X
    18c8:	13 97       	sbiw	r26, 0x03	; 3
    18ca:	33 83       	std	Z+3, r19	; 0x03
    18cc:	22 83       	std	Z+2, r18	; 0x02
    18ce:	00 97       	sbiw	r24, 0x00	; 0
    18d0:	29 f4       	brne	.+10     	; 0x18dc <free+0xa6>
    18d2:	f0 93 47 03 	sts	0x0347, r31
    18d6:	e0 93 46 03 	sts	0x0346, r30
    18da:	43 c0       	rjmp	.+134    	; 0x1962 <free+0x12c>
    18dc:	dc 01       	movw	r26, r24
    18de:	13 96       	adiw	r26, 0x03	; 3
    18e0:	fc 93       	st	X, r31
    18e2:	ee 93       	st	-X, r30
    18e4:	12 97       	sbiw	r26, 0x02	; 2
    18e6:	4d 91       	ld	r20, X+
    18e8:	5d 91       	ld	r21, X+
    18ea:	a4 0f       	add	r26, r20
    18ec:	b5 1f       	adc	r27, r21
    18ee:	ea 17       	cp	r30, r26
    18f0:	fb 07       	cpc	r31, r27
    18f2:	69 f4       	brne	.+26     	; 0x190e <free+0xd8>
    18f4:	20 81       	ld	r18, Z
    18f6:	31 81       	ldd	r19, Z+1	; 0x01
    18f8:	24 0f       	add	r18, r20
    18fa:	35 1f       	adc	r19, r21
    18fc:	2e 5f       	subi	r18, 0xFE	; 254
    18fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1900:	ec 01       	movw	r28, r24
    1902:	39 83       	std	Y+1, r19	; 0x01
    1904:	28 83       	st	Y, r18
    1906:	22 81       	ldd	r18, Z+2	; 0x02
    1908:	33 81       	ldd	r19, Z+3	; 0x03
    190a:	3b 83       	std	Y+3, r19	; 0x03
    190c:	2a 83       	std	Y+2, r18	; 0x02
    190e:	e0 e0       	ldi	r30, 0x00	; 0
    1910:	f0 e0       	ldi	r31, 0x00	; 0
    1912:	02 c0       	rjmp	.+4      	; 0x1918 <free+0xe2>
    1914:	fb 01       	movw	r30, r22
    1916:	bc 01       	movw	r22, r24
    1918:	db 01       	movw	r26, r22
    191a:	12 96       	adiw	r26, 0x02	; 2
    191c:	8d 91       	ld	r24, X+
    191e:	9c 91       	ld	r25, X
    1920:	13 97       	sbiw	r26, 0x03	; 3
    1922:	00 97       	sbiw	r24, 0x00	; 0
    1924:	b9 f7       	brne	.-18     	; 0x1914 <free+0xde>
    1926:	9b 01       	movw	r18, r22
    1928:	2e 5f       	subi	r18, 0xFE	; 254
    192a:	3f 4f       	sbci	r19, 0xFF	; 255
    192c:	8d 91       	ld	r24, X+
    192e:	9c 91       	ld	r25, X
    1930:	11 97       	sbiw	r26, 0x01	; 1
    1932:	82 0f       	add	r24, r18
    1934:	93 1f       	adc	r25, r19
    1936:	40 91 44 03 	lds	r20, 0x0344
    193a:	50 91 45 03 	lds	r21, 0x0345
    193e:	48 17       	cp	r20, r24
    1940:	59 07       	cpc	r21, r25
    1942:	79 f4       	brne	.+30     	; 0x1962 <free+0x12c>
    1944:	30 97       	sbiw	r30, 0x00	; 0
    1946:	29 f4       	brne	.+10     	; 0x1952 <free+0x11c>
    1948:	10 92 47 03 	sts	0x0347, r1
    194c:	10 92 46 03 	sts	0x0346, r1
    1950:	02 c0       	rjmp	.+4      	; 0x1956 <free+0x120>
    1952:	13 82       	std	Z+3, r1	; 0x03
    1954:	12 82       	std	Z+2, r1	; 0x02
    1956:	22 50       	subi	r18, 0x02	; 2
    1958:	30 40       	sbci	r19, 0x00	; 0
    195a:	30 93 45 03 	sts	0x0345, r19
    195e:	20 93 44 03 	sts	0x0344, r18
    1962:	df 91       	pop	r29
    1964:	cf 91       	pop	r28
    1966:	08 95       	ret

00001968 <atoi>:
    1968:	fc 01       	movw	r30, r24
    196a:	88 27       	eor	r24, r24
    196c:	99 27       	eor	r25, r25
    196e:	e8 94       	clt
    1970:	21 91       	ld	r18, Z+
    1972:	20 32       	cpi	r18, 0x20	; 32
    1974:	e9 f3       	breq	.-6      	; 0x1970 <atoi+0x8>
    1976:	29 30       	cpi	r18, 0x09	; 9
    1978:	10 f0       	brcs	.+4      	; 0x197e <atoi+0x16>
    197a:	2e 30       	cpi	r18, 0x0E	; 14
    197c:	c8 f3       	brcs	.-14     	; 0x1970 <atoi+0x8>
    197e:	2b 32       	cpi	r18, 0x2B	; 43
    1980:	41 f0       	breq	.+16     	; 0x1992 <atoi+0x2a>
    1982:	2d 32       	cpi	r18, 0x2D	; 45
    1984:	39 f4       	brne	.+14     	; 0x1994 <atoi+0x2c>
    1986:	68 94       	set
    1988:	04 c0       	rjmp	.+8      	; 0x1992 <atoi+0x2a>
    198a:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <__mulhi_const_10>
    198e:	82 0f       	add	r24, r18
    1990:	91 1d       	adc	r25, r1
    1992:	21 91       	ld	r18, Z+
    1994:	20 53       	subi	r18, 0x30	; 48
    1996:	2a 30       	cpi	r18, 0x0A	; 10
    1998:	c0 f3       	brcs	.-16     	; 0x198a <atoi+0x22>
    199a:	1e f4       	brtc	.+6      	; 0x19a2 <atoi+0x3a>
    199c:	90 95       	com	r25
    199e:	81 95       	neg	r24
    19a0:	9f 4f       	sbci	r25, 0xFF	; 255
    19a2:	08 95       	ret

000019a4 <memchr>:
    19a4:	fc 01       	movw	r30, r24
    19a6:	41 50       	subi	r20, 0x01	; 1
    19a8:	50 40       	sbci	r21, 0x00	; 0
    19aa:	30 f0       	brcs	.+12     	; 0x19b8 <memchr+0x14>
    19ac:	01 90       	ld	r0, Z+
    19ae:	06 16       	cp	r0, r22
    19b0:	d1 f7       	brne	.-12     	; 0x19a6 <memchr+0x2>
    19b2:	31 97       	sbiw	r30, 0x01	; 1
    19b4:	cf 01       	movw	r24, r30
    19b6:	08 95       	ret
    19b8:	88 27       	eor	r24, r24
    19ba:	99 27       	eor	r25, r25
    19bc:	08 95       	ret

000019be <memcpy>:
    19be:	fb 01       	movw	r30, r22
    19c0:	dc 01       	movw	r26, r24
    19c2:	02 c0       	rjmp	.+4      	; 0x19c8 <memcpy+0xa>
    19c4:	01 90       	ld	r0, Z+
    19c6:	0d 92       	st	X+, r0
    19c8:	41 50       	subi	r20, 0x01	; 1
    19ca:	50 40       	sbci	r21, 0x00	; 0
    19cc:	d8 f7       	brcc	.-10     	; 0x19c4 <memcpy+0x6>
    19ce:	08 95       	ret

000019d0 <memset>:
    19d0:	dc 01       	movw	r26, r24
    19d2:	01 c0       	rjmp	.+2      	; 0x19d6 <memset+0x6>
    19d4:	6d 93       	st	X+, r22
    19d6:	41 50       	subi	r20, 0x01	; 1
    19d8:	50 40       	sbci	r21, 0x00	; 0
    19da:	e0 f7       	brcc	.-8      	; 0x19d4 <memset+0x4>
    19dc:	08 95       	ret

000019de <strstr>:
    19de:	fb 01       	movw	r30, r22
    19e0:	51 91       	ld	r21, Z+
    19e2:	55 23       	and	r21, r21
    19e4:	a9 f0       	breq	.+42     	; 0x1a10 <strstr+0x32>
    19e6:	bf 01       	movw	r22, r30
    19e8:	dc 01       	movw	r26, r24
    19ea:	4d 91       	ld	r20, X+
    19ec:	45 17       	cp	r20, r21
    19ee:	41 11       	cpse	r20, r1
    19f0:	e1 f7       	brne	.-8      	; 0x19ea <strstr+0xc>
    19f2:	59 f4       	brne	.+22     	; 0x1a0a <strstr+0x2c>
    19f4:	cd 01       	movw	r24, r26
    19f6:	01 90       	ld	r0, Z+
    19f8:	00 20       	and	r0, r0
    19fa:	49 f0       	breq	.+18     	; 0x1a0e <strstr+0x30>
    19fc:	4d 91       	ld	r20, X+
    19fe:	40 15       	cp	r20, r0
    1a00:	41 11       	cpse	r20, r1
    1a02:	c9 f3       	breq	.-14     	; 0x19f6 <strstr+0x18>
    1a04:	fb 01       	movw	r30, r22
    1a06:	41 11       	cpse	r20, r1
    1a08:	ef cf       	rjmp	.-34     	; 0x19e8 <strstr+0xa>
    1a0a:	81 e0       	ldi	r24, 0x01	; 1
    1a0c:	90 e0       	ldi	r25, 0x00	; 0
    1a0e:	01 97       	sbiw	r24, 0x01	; 1
    1a10:	08 95       	ret

00001a12 <__mulhi_const_10>:
    1a12:	7a e0       	ldi	r23, 0x0A	; 10
    1a14:	97 9f       	mul	r25, r23
    1a16:	90 2d       	mov	r25, r0
    1a18:	87 9f       	mul	r24, r23
    1a1a:	80 2d       	mov	r24, r0
    1a1c:	91 0d       	add	r25, r1
    1a1e:	11 24       	eor	r1, r1
    1a20:	08 95       	ret

00001a22 <snprintf>:
    1a22:	0f 93       	push	r16
    1a24:	1f 93       	push	r17
    1a26:	df 93       	push	r29
    1a28:	cf 93       	push	r28
    1a2a:	cd b7       	in	r28, 0x3d	; 61
    1a2c:	de b7       	in	r29, 0x3e	; 62
    1a2e:	2e 97       	sbiw	r28, 0x0e	; 14
    1a30:	0f b6       	in	r0, 0x3f	; 63
    1a32:	f8 94       	cli
    1a34:	de bf       	out	0x3e, r29	; 62
    1a36:	0f be       	out	0x3f, r0	; 63
    1a38:	cd bf       	out	0x3d, r28	; 61
    1a3a:	0d 89       	ldd	r16, Y+21	; 0x15
    1a3c:	1e 89       	ldd	r17, Y+22	; 0x16
    1a3e:	8f 89       	ldd	r24, Y+23	; 0x17
    1a40:	98 8d       	ldd	r25, Y+24	; 0x18
    1a42:	26 e0       	ldi	r18, 0x06	; 6
    1a44:	2c 83       	std	Y+4, r18	; 0x04
    1a46:	1a 83       	std	Y+2, r17	; 0x02
    1a48:	09 83       	std	Y+1, r16	; 0x01
    1a4a:	97 ff       	sbrs	r25, 7
    1a4c:	02 c0       	rjmp	.+4      	; 0x1a52 <snprintf+0x30>
    1a4e:	80 e0       	ldi	r24, 0x00	; 0
    1a50:	90 e8       	ldi	r25, 0x80	; 128
    1a52:	01 97       	sbiw	r24, 0x01	; 1
    1a54:	9e 83       	std	Y+6, r25	; 0x06
    1a56:	8d 83       	std	Y+5, r24	; 0x05
    1a58:	9e 01       	movw	r18, r28
    1a5a:	25 5e       	subi	r18, 0xE5	; 229
    1a5c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a5e:	ce 01       	movw	r24, r28
    1a60:	01 96       	adiw	r24, 0x01	; 1
    1a62:	69 8d       	ldd	r22, Y+25	; 0x19
    1a64:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a66:	a9 01       	movw	r20, r18
    1a68:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <vfprintf>
    1a6c:	4d 81       	ldd	r20, Y+5	; 0x05
    1a6e:	5e 81       	ldd	r21, Y+6	; 0x06
    1a70:	57 fd       	sbrc	r21, 7
    1a72:	0a c0       	rjmp	.+20     	; 0x1a88 <snprintf+0x66>
    1a74:	2f 81       	ldd	r18, Y+7	; 0x07
    1a76:	38 85       	ldd	r19, Y+8	; 0x08
    1a78:	42 17       	cp	r20, r18
    1a7a:	53 07       	cpc	r21, r19
    1a7c:	0c f4       	brge	.+2      	; 0x1a80 <snprintf+0x5e>
    1a7e:	9a 01       	movw	r18, r20
    1a80:	02 0f       	add	r16, r18
    1a82:	13 1f       	adc	r17, r19
    1a84:	f8 01       	movw	r30, r16
    1a86:	10 82       	st	Z, r1
    1a88:	2e 96       	adiw	r28, 0x0e	; 14
    1a8a:	0f b6       	in	r0, 0x3f	; 63
    1a8c:	f8 94       	cli
    1a8e:	de bf       	out	0x3e, r29	; 62
    1a90:	0f be       	out	0x3f, r0	; 63
    1a92:	cd bf       	out	0x3d, r28	; 61
    1a94:	cf 91       	pop	r28
    1a96:	df 91       	pop	r29
    1a98:	1f 91       	pop	r17
    1a9a:	0f 91       	pop	r16
    1a9c:	08 95       	ret

00001a9e <vfprintf>:
    1a9e:	2f 92       	push	r2
    1aa0:	3f 92       	push	r3
    1aa2:	4f 92       	push	r4
    1aa4:	5f 92       	push	r5
    1aa6:	6f 92       	push	r6
    1aa8:	7f 92       	push	r7
    1aaa:	8f 92       	push	r8
    1aac:	9f 92       	push	r9
    1aae:	af 92       	push	r10
    1ab0:	bf 92       	push	r11
    1ab2:	cf 92       	push	r12
    1ab4:	df 92       	push	r13
    1ab6:	ef 92       	push	r14
    1ab8:	ff 92       	push	r15
    1aba:	0f 93       	push	r16
    1abc:	1f 93       	push	r17
    1abe:	df 93       	push	r29
    1ac0:	cf 93       	push	r28
    1ac2:	cd b7       	in	r28, 0x3d	; 61
    1ac4:	de b7       	in	r29, 0x3e	; 62
    1ac6:	2c 97       	sbiw	r28, 0x0c	; 12
    1ac8:	0f b6       	in	r0, 0x3f	; 63
    1aca:	f8 94       	cli
    1acc:	de bf       	out	0x3e, r29	; 62
    1ace:	0f be       	out	0x3f, r0	; 63
    1ad0:	cd bf       	out	0x3d, r28	; 61
    1ad2:	6c 01       	movw	r12, r24
    1ad4:	1b 01       	movw	r2, r22
    1ad6:	8a 01       	movw	r16, r20
    1ad8:	fc 01       	movw	r30, r24
    1ada:	17 82       	std	Z+7, r1	; 0x07
    1adc:	16 82       	std	Z+6, r1	; 0x06
    1ade:	83 81       	ldd	r24, Z+3	; 0x03
    1ae0:	81 ff       	sbrs	r24, 1
    1ae2:	d1 c1       	rjmp	.+930    	; 0x1e86 <vfprintf+0x3e8>
    1ae4:	2e 01       	movw	r4, r28
    1ae6:	08 94       	sec
    1ae8:	41 1c       	adc	r4, r1
    1aea:	51 1c       	adc	r5, r1
    1aec:	f6 01       	movw	r30, r12
    1aee:	93 81       	ldd	r25, Z+3	; 0x03
    1af0:	f1 01       	movw	r30, r2
    1af2:	93 fd       	sbrc	r25, 3
    1af4:	85 91       	lpm	r24, Z+
    1af6:	93 ff       	sbrs	r25, 3
    1af8:	81 91       	ld	r24, Z+
    1afa:	1f 01       	movw	r2, r30
    1afc:	88 23       	and	r24, r24
    1afe:	09 f4       	brne	.+2      	; 0x1b02 <vfprintf+0x64>
    1b00:	be c1       	rjmp	.+892    	; 0x1e7e <vfprintf+0x3e0>
    1b02:	85 32       	cpi	r24, 0x25	; 37
    1b04:	39 f4       	brne	.+14     	; 0x1b14 <vfprintf+0x76>
    1b06:	93 fd       	sbrc	r25, 3
    1b08:	85 91       	lpm	r24, Z+
    1b0a:	93 ff       	sbrs	r25, 3
    1b0c:	81 91       	ld	r24, Z+
    1b0e:	1f 01       	movw	r2, r30
    1b10:	85 32       	cpi	r24, 0x25	; 37
    1b12:	29 f4       	brne	.+10     	; 0x1b1e <vfprintf+0x80>
    1b14:	90 e0       	ldi	r25, 0x00	; 0
    1b16:	b6 01       	movw	r22, r12
    1b18:	0e 94 75 0f 	call	0x1eea	; 0x1eea <fputc>
    1b1c:	e7 cf       	rjmp	.-50     	; 0x1aec <vfprintf+0x4e>
    1b1e:	ee 24       	eor	r14, r14
    1b20:	ff 24       	eor	r15, r15
    1b22:	20 e0       	ldi	r18, 0x00	; 0
    1b24:	20 32       	cpi	r18, 0x20	; 32
    1b26:	b0 f4       	brcc	.+44     	; 0x1b54 <vfprintf+0xb6>
    1b28:	8b 32       	cpi	r24, 0x2B	; 43
    1b2a:	69 f0       	breq	.+26     	; 0x1b46 <vfprintf+0xa8>
    1b2c:	8c 32       	cpi	r24, 0x2C	; 44
    1b2e:	28 f4       	brcc	.+10     	; 0x1b3a <vfprintf+0x9c>
    1b30:	80 32       	cpi	r24, 0x20	; 32
    1b32:	51 f0       	breq	.+20     	; 0x1b48 <vfprintf+0xaa>
    1b34:	83 32       	cpi	r24, 0x23	; 35
    1b36:	71 f4       	brne	.+28     	; 0x1b54 <vfprintf+0xb6>
    1b38:	0b c0       	rjmp	.+22     	; 0x1b50 <vfprintf+0xb2>
    1b3a:	8d 32       	cpi	r24, 0x2D	; 45
    1b3c:	39 f0       	breq	.+14     	; 0x1b4c <vfprintf+0xae>
    1b3e:	80 33       	cpi	r24, 0x30	; 48
    1b40:	49 f4       	brne	.+18     	; 0x1b54 <vfprintf+0xb6>
    1b42:	21 60       	ori	r18, 0x01	; 1
    1b44:	2c c0       	rjmp	.+88     	; 0x1b9e <vfprintf+0x100>
    1b46:	22 60       	ori	r18, 0x02	; 2
    1b48:	24 60       	ori	r18, 0x04	; 4
    1b4a:	29 c0       	rjmp	.+82     	; 0x1b9e <vfprintf+0x100>
    1b4c:	28 60       	ori	r18, 0x08	; 8
    1b4e:	27 c0       	rjmp	.+78     	; 0x1b9e <vfprintf+0x100>
    1b50:	20 61       	ori	r18, 0x10	; 16
    1b52:	25 c0       	rjmp	.+74     	; 0x1b9e <vfprintf+0x100>
    1b54:	27 fd       	sbrc	r18, 7
    1b56:	2c c0       	rjmp	.+88     	; 0x1bb0 <vfprintf+0x112>
    1b58:	38 2f       	mov	r19, r24
    1b5a:	30 53       	subi	r19, 0x30	; 48
    1b5c:	3a 30       	cpi	r19, 0x0A	; 10
    1b5e:	98 f4       	brcc	.+38     	; 0x1b86 <vfprintf+0xe8>
    1b60:	26 ff       	sbrs	r18, 6
    1b62:	08 c0       	rjmp	.+16     	; 0x1b74 <vfprintf+0xd6>
    1b64:	8e 2d       	mov	r24, r14
    1b66:	88 0f       	add	r24, r24
    1b68:	e8 2e       	mov	r14, r24
    1b6a:	ee 0c       	add	r14, r14
    1b6c:	ee 0c       	add	r14, r14
    1b6e:	e8 0e       	add	r14, r24
    1b70:	e3 0e       	add	r14, r19
    1b72:	15 c0       	rjmp	.+42     	; 0x1b9e <vfprintf+0x100>
    1b74:	8f 2d       	mov	r24, r15
    1b76:	88 0f       	add	r24, r24
    1b78:	f8 2e       	mov	r15, r24
    1b7a:	ff 0c       	add	r15, r15
    1b7c:	ff 0c       	add	r15, r15
    1b7e:	f8 0e       	add	r15, r24
    1b80:	f3 0e       	add	r15, r19
    1b82:	20 62       	ori	r18, 0x20	; 32
    1b84:	0c c0       	rjmp	.+24     	; 0x1b9e <vfprintf+0x100>
    1b86:	8e 32       	cpi	r24, 0x2E	; 46
    1b88:	21 f4       	brne	.+8      	; 0x1b92 <vfprintf+0xf4>
    1b8a:	26 fd       	sbrc	r18, 6
    1b8c:	78 c1       	rjmp	.+752    	; 0x1e7e <vfprintf+0x3e0>
    1b8e:	20 64       	ori	r18, 0x40	; 64
    1b90:	06 c0       	rjmp	.+12     	; 0x1b9e <vfprintf+0x100>
    1b92:	8c 36       	cpi	r24, 0x6C	; 108
    1b94:	11 f4       	brne	.+4      	; 0x1b9a <vfprintf+0xfc>
    1b96:	20 68       	ori	r18, 0x80	; 128
    1b98:	02 c0       	rjmp	.+4      	; 0x1b9e <vfprintf+0x100>
    1b9a:	88 36       	cpi	r24, 0x68	; 104
    1b9c:	49 f4       	brne	.+18     	; 0x1bb0 <vfprintf+0x112>
    1b9e:	f1 01       	movw	r30, r2
    1ba0:	93 fd       	sbrc	r25, 3
    1ba2:	85 91       	lpm	r24, Z+
    1ba4:	93 ff       	sbrs	r25, 3
    1ba6:	81 91       	ld	r24, Z+
    1ba8:	1f 01       	movw	r2, r30
    1baa:	88 23       	and	r24, r24
    1bac:	09 f0       	breq	.+2      	; 0x1bb0 <vfprintf+0x112>
    1bae:	ba cf       	rjmp	.-140    	; 0x1b24 <vfprintf+0x86>
    1bb0:	98 2f       	mov	r25, r24
    1bb2:	95 54       	subi	r25, 0x45	; 69
    1bb4:	93 30       	cpi	r25, 0x03	; 3
    1bb6:	18 f0       	brcs	.+6      	; 0x1bbe <vfprintf+0x120>
    1bb8:	90 52       	subi	r25, 0x20	; 32
    1bba:	93 30       	cpi	r25, 0x03	; 3
    1bbc:	28 f4       	brcc	.+10     	; 0x1bc8 <vfprintf+0x12a>
    1bbe:	0c 5f       	subi	r16, 0xFC	; 252
    1bc0:	1f 4f       	sbci	r17, 0xFF	; 255
    1bc2:	ff e3       	ldi	r31, 0x3F	; 63
    1bc4:	f9 83       	std	Y+1, r31	; 0x01
    1bc6:	0d c0       	rjmp	.+26     	; 0x1be2 <vfprintf+0x144>
    1bc8:	83 36       	cpi	r24, 0x63	; 99
    1bca:	31 f0       	breq	.+12     	; 0x1bd8 <vfprintf+0x13a>
    1bcc:	83 37       	cpi	r24, 0x73	; 115
    1bce:	71 f0       	breq	.+28     	; 0x1bec <vfprintf+0x14e>
    1bd0:	83 35       	cpi	r24, 0x53	; 83
    1bd2:	09 f0       	breq	.+2      	; 0x1bd6 <vfprintf+0x138>
    1bd4:	60 c0       	rjmp	.+192    	; 0x1c96 <vfprintf+0x1f8>
    1bd6:	22 c0       	rjmp	.+68     	; 0x1c1c <vfprintf+0x17e>
    1bd8:	f8 01       	movw	r30, r16
    1bda:	80 81       	ld	r24, Z
    1bdc:	89 83       	std	Y+1, r24	; 0x01
    1bde:	0e 5f       	subi	r16, 0xFE	; 254
    1be0:	1f 4f       	sbci	r17, 0xFF	; 255
    1be2:	42 01       	movw	r8, r4
    1be4:	71 e0       	ldi	r23, 0x01	; 1
    1be6:	a7 2e       	mov	r10, r23
    1be8:	b1 2c       	mov	r11, r1
    1bea:	16 c0       	rjmp	.+44     	; 0x1c18 <vfprintf+0x17a>
    1bec:	62 e0       	ldi	r22, 0x02	; 2
    1bee:	66 2e       	mov	r6, r22
    1bf0:	71 2c       	mov	r7, r1
    1bf2:	60 0e       	add	r6, r16
    1bf4:	71 1e       	adc	r7, r17
    1bf6:	f8 01       	movw	r30, r16
    1bf8:	80 80       	ld	r8, Z
    1bfa:	91 80       	ldd	r9, Z+1	; 0x01
    1bfc:	26 ff       	sbrs	r18, 6
    1bfe:	03 c0       	rjmp	.+6      	; 0x1c06 <vfprintf+0x168>
    1c00:	6e 2d       	mov	r22, r14
    1c02:	70 e0       	ldi	r23, 0x00	; 0
    1c04:	02 c0       	rjmp	.+4      	; 0x1c0a <vfprintf+0x16c>
    1c06:	6f ef       	ldi	r22, 0xFF	; 255
    1c08:	7f ef       	ldi	r23, 0xFF	; 255
    1c0a:	c4 01       	movw	r24, r8
    1c0c:	2c 87       	std	Y+12, r18	; 0x0c
    1c0e:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <strnlen>
    1c12:	5c 01       	movw	r10, r24
    1c14:	83 01       	movw	r16, r6
    1c16:	2c 85       	ldd	r18, Y+12	; 0x0c
    1c18:	2f 77       	andi	r18, 0x7F	; 127
    1c1a:	17 c0       	rjmp	.+46     	; 0x1c4a <vfprintf+0x1ac>
    1c1c:	52 e0       	ldi	r21, 0x02	; 2
    1c1e:	65 2e       	mov	r6, r21
    1c20:	71 2c       	mov	r7, r1
    1c22:	60 0e       	add	r6, r16
    1c24:	71 1e       	adc	r7, r17
    1c26:	f8 01       	movw	r30, r16
    1c28:	80 80       	ld	r8, Z
    1c2a:	91 80       	ldd	r9, Z+1	; 0x01
    1c2c:	26 ff       	sbrs	r18, 6
    1c2e:	03 c0       	rjmp	.+6      	; 0x1c36 <vfprintf+0x198>
    1c30:	6e 2d       	mov	r22, r14
    1c32:	70 e0       	ldi	r23, 0x00	; 0
    1c34:	02 c0       	rjmp	.+4      	; 0x1c3a <vfprintf+0x19c>
    1c36:	6f ef       	ldi	r22, 0xFF	; 255
    1c38:	7f ef       	ldi	r23, 0xFF	; 255
    1c3a:	c4 01       	movw	r24, r8
    1c3c:	2c 87       	std	Y+12, r18	; 0x0c
    1c3e:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <strnlen_P>
    1c42:	5c 01       	movw	r10, r24
    1c44:	2c 85       	ldd	r18, Y+12	; 0x0c
    1c46:	20 68       	ori	r18, 0x80	; 128
    1c48:	83 01       	movw	r16, r6
    1c4a:	23 fd       	sbrc	r18, 3
    1c4c:	20 c0       	rjmp	.+64     	; 0x1c8e <vfprintf+0x1f0>
    1c4e:	08 c0       	rjmp	.+16     	; 0x1c60 <vfprintf+0x1c2>
    1c50:	80 e2       	ldi	r24, 0x20	; 32
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	b6 01       	movw	r22, r12
    1c56:	2c 87       	std	Y+12, r18	; 0x0c
    1c58:	0e 94 75 0f 	call	0x1eea	; 0x1eea <fputc>
    1c5c:	fa 94       	dec	r15
    1c5e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1c60:	8f 2d       	mov	r24, r15
    1c62:	90 e0       	ldi	r25, 0x00	; 0
    1c64:	a8 16       	cp	r10, r24
    1c66:	b9 06       	cpc	r11, r25
    1c68:	98 f3       	brcs	.-26     	; 0x1c50 <vfprintf+0x1b2>
    1c6a:	11 c0       	rjmp	.+34     	; 0x1c8e <vfprintf+0x1f0>
    1c6c:	f4 01       	movw	r30, r8
    1c6e:	27 fd       	sbrc	r18, 7
    1c70:	85 91       	lpm	r24, Z+
    1c72:	27 ff       	sbrs	r18, 7
    1c74:	81 91       	ld	r24, Z+
    1c76:	4f 01       	movw	r8, r30
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	b6 01       	movw	r22, r12
    1c7c:	2c 87       	std	Y+12, r18	; 0x0c
    1c7e:	0e 94 75 0f 	call	0x1eea	; 0x1eea <fputc>
    1c82:	2c 85       	ldd	r18, Y+12	; 0x0c
    1c84:	f1 10       	cpse	r15, r1
    1c86:	fa 94       	dec	r15
    1c88:	08 94       	sec
    1c8a:	a1 08       	sbc	r10, r1
    1c8c:	b1 08       	sbc	r11, r1
    1c8e:	a1 14       	cp	r10, r1
    1c90:	b1 04       	cpc	r11, r1
    1c92:	61 f7       	brne	.-40     	; 0x1c6c <vfprintf+0x1ce>
    1c94:	f1 c0       	rjmp	.+482    	; 0x1e78 <vfprintf+0x3da>
    1c96:	84 36       	cpi	r24, 0x64	; 100
    1c98:	11 f0       	breq	.+4      	; 0x1c9e <vfprintf+0x200>
    1c9a:	89 36       	cpi	r24, 0x69	; 105
    1c9c:	49 f5       	brne	.+82     	; 0x1cf0 <vfprintf+0x252>
    1c9e:	27 ff       	sbrs	r18, 7
    1ca0:	08 c0       	rjmp	.+16     	; 0x1cb2 <vfprintf+0x214>
    1ca2:	f8 01       	movw	r30, r16
    1ca4:	60 81       	ld	r22, Z
    1ca6:	71 81       	ldd	r23, Z+1	; 0x01
    1ca8:	82 81       	ldd	r24, Z+2	; 0x02
    1caa:	93 81       	ldd	r25, Z+3	; 0x03
    1cac:	0c 5f       	subi	r16, 0xFC	; 252
    1cae:	1f 4f       	sbci	r17, 0xFF	; 255
    1cb0:	09 c0       	rjmp	.+18     	; 0x1cc4 <vfprintf+0x226>
    1cb2:	f8 01       	movw	r30, r16
    1cb4:	60 81       	ld	r22, Z
    1cb6:	71 81       	ldd	r23, Z+1	; 0x01
    1cb8:	88 27       	eor	r24, r24
    1cba:	77 fd       	sbrc	r23, 7
    1cbc:	80 95       	com	r24
    1cbe:	98 2f       	mov	r25, r24
    1cc0:	0e 5f       	subi	r16, 0xFE	; 254
    1cc2:	1f 4f       	sbci	r17, 0xFF	; 255
    1cc4:	4f e6       	ldi	r20, 0x6F	; 111
    1cc6:	b4 2e       	mov	r11, r20
    1cc8:	b2 22       	and	r11, r18
    1cca:	97 ff       	sbrs	r25, 7
    1ccc:	09 c0       	rjmp	.+18     	; 0x1ce0 <vfprintf+0x242>
    1cce:	90 95       	com	r25
    1cd0:	80 95       	com	r24
    1cd2:	70 95       	com	r23
    1cd4:	61 95       	neg	r22
    1cd6:	7f 4f       	sbci	r23, 0xFF	; 255
    1cd8:	8f 4f       	sbci	r24, 0xFF	; 255
    1cda:	9f 4f       	sbci	r25, 0xFF	; 255
    1cdc:	f0 e8       	ldi	r31, 0x80	; 128
    1cde:	bf 2a       	or	r11, r31
    1ce0:	a2 01       	movw	r20, r4
    1ce2:	2a e0       	ldi	r18, 0x0A	; 10
    1ce4:	30 e0       	ldi	r19, 0x00	; 0
    1ce6:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <__ultoa_invert>
    1cea:	78 2e       	mov	r7, r24
    1cec:	74 18       	sub	r7, r4
    1cee:	45 c0       	rjmp	.+138    	; 0x1d7a <vfprintf+0x2dc>
    1cf0:	85 37       	cpi	r24, 0x75	; 117
    1cf2:	31 f4       	brne	.+12     	; 0x1d00 <vfprintf+0x262>
    1cf4:	3f ee       	ldi	r19, 0xEF	; 239
    1cf6:	b3 2e       	mov	r11, r19
    1cf8:	b2 22       	and	r11, r18
    1cfa:	2a e0       	ldi	r18, 0x0A	; 10
    1cfc:	30 e0       	ldi	r19, 0x00	; 0
    1cfe:	25 c0       	rjmp	.+74     	; 0x1d4a <vfprintf+0x2ac>
    1d00:	99 ef       	ldi	r25, 0xF9	; 249
    1d02:	b9 2e       	mov	r11, r25
    1d04:	b2 22       	and	r11, r18
    1d06:	8f 36       	cpi	r24, 0x6F	; 111
    1d08:	c1 f0       	breq	.+48     	; 0x1d3a <vfprintf+0x29c>
    1d0a:	80 37       	cpi	r24, 0x70	; 112
    1d0c:	20 f4       	brcc	.+8      	; 0x1d16 <vfprintf+0x278>
    1d0e:	88 35       	cpi	r24, 0x58	; 88
    1d10:	09 f0       	breq	.+2      	; 0x1d14 <vfprintf+0x276>
    1d12:	b5 c0       	rjmp	.+362    	; 0x1e7e <vfprintf+0x3e0>
    1d14:	0d c0       	rjmp	.+26     	; 0x1d30 <vfprintf+0x292>
    1d16:	80 37       	cpi	r24, 0x70	; 112
    1d18:	21 f0       	breq	.+8      	; 0x1d22 <vfprintf+0x284>
    1d1a:	88 37       	cpi	r24, 0x78	; 120
    1d1c:	09 f0       	breq	.+2      	; 0x1d20 <vfprintf+0x282>
    1d1e:	af c0       	rjmp	.+350    	; 0x1e7e <vfprintf+0x3e0>
    1d20:	02 c0       	rjmp	.+4      	; 0x1d26 <vfprintf+0x288>
    1d22:	20 e1       	ldi	r18, 0x10	; 16
    1d24:	b2 2a       	or	r11, r18
    1d26:	b4 fe       	sbrs	r11, 4
    1d28:	0b c0       	rjmp	.+22     	; 0x1d40 <vfprintf+0x2a2>
    1d2a:	84 e0       	ldi	r24, 0x04	; 4
    1d2c:	b8 2a       	or	r11, r24
    1d2e:	08 c0       	rjmp	.+16     	; 0x1d40 <vfprintf+0x2a2>
    1d30:	b4 fe       	sbrs	r11, 4
    1d32:	09 c0       	rjmp	.+18     	; 0x1d46 <vfprintf+0x2a8>
    1d34:	e6 e0       	ldi	r30, 0x06	; 6
    1d36:	be 2a       	or	r11, r30
    1d38:	06 c0       	rjmp	.+12     	; 0x1d46 <vfprintf+0x2a8>
    1d3a:	28 e0       	ldi	r18, 0x08	; 8
    1d3c:	30 e0       	ldi	r19, 0x00	; 0
    1d3e:	05 c0       	rjmp	.+10     	; 0x1d4a <vfprintf+0x2ac>
    1d40:	20 e1       	ldi	r18, 0x10	; 16
    1d42:	30 e0       	ldi	r19, 0x00	; 0
    1d44:	02 c0       	rjmp	.+4      	; 0x1d4a <vfprintf+0x2ac>
    1d46:	20 e1       	ldi	r18, 0x10	; 16
    1d48:	32 e0       	ldi	r19, 0x02	; 2
    1d4a:	b7 fe       	sbrs	r11, 7
    1d4c:	08 c0       	rjmp	.+16     	; 0x1d5e <vfprintf+0x2c0>
    1d4e:	f8 01       	movw	r30, r16
    1d50:	60 81       	ld	r22, Z
    1d52:	71 81       	ldd	r23, Z+1	; 0x01
    1d54:	82 81       	ldd	r24, Z+2	; 0x02
    1d56:	93 81       	ldd	r25, Z+3	; 0x03
    1d58:	0c 5f       	subi	r16, 0xFC	; 252
    1d5a:	1f 4f       	sbci	r17, 0xFF	; 255
    1d5c:	07 c0       	rjmp	.+14     	; 0x1d6c <vfprintf+0x2ce>
    1d5e:	f8 01       	movw	r30, r16
    1d60:	60 81       	ld	r22, Z
    1d62:	71 81       	ldd	r23, Z+1	; 0x01
    1d64:	80 e0       	ldi	r24, 0x00	; 0
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	0e 5f       	subi	r16, 0xFE	; 254
    1d6a:	1f 4f       	sbci	r17, 0xFF	; 255
    1d6c:	a2 01       	movw	r20, r4
    1d6e:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <__ultoa_invert>
    1d72:	78 2e       	mov	r7, r24
    1d74:	74 18       	sub	r7, r4
    1d76:	ff e7       	ldi	r31, 0x7F	; 127
    1d78:	bf 22       	and	r11, r31
    1d7a:	b6 fe       	sbrs	r11, 6
    1d7c:	0b c0       	rjmp	.+22     	; 0x1d94 <vfprintf+0x2f6>
    1d7e:	2e ef       	ldi	r18, 0xFE	; 254
    1d80:	b2 22       	and	r11, r18
    1d82:	7e 14       	cp	r7, r14
    1d84:	38 f4       	brcc	.+14     	; 0x1d94 <vfprintf+0x2f6>
    1d86:	b4 fe       	sbrs	r11, 4
    1d88:	07 c0       	rjmp	.+14     	; 0x1d98 <vfprintf+0x2fa>
    1d8a:	b2 fc       	sbrc	r11, 2
    1d8c:	05 c0       	rjmp	.+10     	; 0x1d98 <vfprintf+0x2fa>
    1d8e:	8f ee       	ldi	r24, 0xEF	; 239
    1d90:	b8 22       	and	r11, r24
    1d92:	02 c0       	rjmp	.+4      	; 0x1d98 <vfprintf+0x2fa>
    1d94:	a7 2c       	mov	r10, r7
    1d96:	01 c0       	rjmp	.+2      	; 0x1d9a <vfprintf+0x2fc>
    1d98:	ae 2c       	mov	r10, r14
    1d9a:	8b 2d       	mov	r24, r11
    1d9c:	90 e0       	ldi	r25, 0x00	; 0
    1d9e:	b4 fe       	sbrs	r11, 4
    1da0:	0d c0       	rjmp	.+26     	; 0x1dbc <vfprintf+0x31e>
    1da2:	fe 01       	movw	r30, r28
    1da4:	e7 0d       	add	r30, r7
    1da6:	f1 1d       	adc	r31, r1
    1da8:	20 81       	ld	r18, Z
    1daa:	20 33       	cpi	r18, 0x30	; 48
    1dac:	19 f4       	brne	.+6      	; 0x1db4 <vfprintf+0x316>
    1dae:	e9 ee       	ldi	r30, 0xE9	; 233
    1db0:	be 22       	and	r11, r30
    1db2:	09 c0       	rjmp	.+18     	; 0x1dc6 <vfprintf+0x328>
    1db4:	a3 94       	inc	r10
    1db6:	b2 fe       	sbrs	r11, 2
    1db8:	06 c0       	rjmp	.+12     	; 0x1dc6 <vfprintf+0x328>
    1dba:	04 c0       	rjmp	.+8      	; 0x1dc4 <vfprintf+0x326>
    1dbc:	86 78       	andi	r24, 0x86	; 134
    1dbe:	90 70       	andi	r25, 0x00	; 0
    1dc0:	00 97       	sbiw	r24, 0x00	; 0
    1dc2:	09 f0       	breq	.+2      	; 0x1dc6 <vfprintf+0x328>
    1dc4:	a3 94       	inc	r10
    1dc6:	8b 2c       	mov	r8, r11
    1dc8:	99 24       	eor	r9, r9
    1dca:	b3 fc       	sbrc	r11, 3
    1dcc:	14 c0       	rjmp	.+40     	; 0x1df6 <vfprintf+0x358>
    1dce:	b0 fe       	sbrs	r11, 0
    1dd0:	0f c0       	rjmp	.+30     	; 0x1df0 <vfprintf+0x352>
    1dd2:	af 14       	cp	r10, r15
    1dd4:	28 f4       	brcc	.+10     	; 0x1de0 <vfprintf+0x342>
    1dd6:	e7 2c       	mov	r14, r7
    1dd8:	ef 0c       	add	r14, r15
    1dda:	ea 18       	sub	r14, r10
    1ddc:	af 2c       	mov	r10, r15
    1dde:	08 c0       	rjmp	.+16     	; 0x1df0 <vfprintf+0x352>
    1de0:	e7 2c       	mov	r14, r7
    1de2:	06 c0       	rjmp	.+12     	; 0x1df0 <vfprintf+0x352>
    1de4:	80 e2       	ldi	r24, 0x20	; 32
    1de6:	90 e0       	ldi	r25, 0x00	; 0
    1de8:	b6 01       	movw	r22, r12
    1dea:	0e 94 75 0f 	call	0x1eea	; 0x1eea <fputc>
    1dee:	a3 94       	inc	r10
    1df0:	af 14       	cp	r10, r15
    1df2:	c0 f3       	brcs	.-16     	; 0x1de4 <vfprintf+0x346>
    1df4:	04 c0       	rjmp	.+8      	; 0x1dfe <vfprintf+0x360>
    1df6:	af 14       	cp	r10, r15
    1df8:	10 f4       	brcc	.+4      	; 0x1dfe <vfprintf+0x360>
    1dfa:	fa 18       	sub	r15, r10
    1dfc:	01 c0       	rjmp	.+2      	; 0x1e00 <vfprintf+0x362>
    1dfe:	ff 24       	eor	r15, r15
    1e00:	84 fe       	sbrs	r8, 4
    1e02:	0f c0       	rjmp	.+30     	; 0x1e22 <vfprintf+0x384>
    1e04:	80 e3       	ldi	r24, 0x30	; 48
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    1e08:	b6 01       	movw	r22, r12
    1e0a:	0e 94 75 0f 	call	0x1eea	; 0x1eea <fputc>
    1e0e:	82 fe       	sbrs	r8, 2
    1e10:	1f c0       	rjmp	.+62     	; 0x1e50 <vfprintf+0x3b2>
    1e12:	81 fe       	sbrs	r8, 1
    1e14:	03 c0       	rjmp	.+6      	; 0x1e1c <vfprintf+0x37e>
    1e16:	88 e5       	ldi	r24, 0x58	; 88
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	10 c0       	rjmp	.+32     	; 0x1e3c <vfprintf+0x39e>
    1e1c:	88 e7       	ldi	r24, 0x78	; 120
    1e1e:	90 e0       	ldi	r25, 0x00	; 0
    1e20:	0d c0       	rjmp	.+26     	; 0x1e3c <vfprintf+0x39e>
    1e22:	c4 01       	movw	r24, r8
    1e24:	86 78       	andi	r24, 0x86	; 134
    1e26:	90 70       	andi	r25, 0x00	; 0
    1e28:	00 97       	sbiw	r24, 0x00	; 0
    1e2a:	91 f0       	breq	.+36     	; 0x1e50 <vfprintf+0x3b2>
    1e2c:	81 fc       	sbrc	r8, 1
    1e2e:	02 c0       	rjmp	.+4      	; 0x1e34 <vfprintf+0x396>
    1e30:	80 e2       	ldi	r24, 0x20	; 32
    1e32:	01 c0       	rjmp	.+2      	; 0x1e36 <vfprintf+0x398>
    1e34:	8b e2       	ldi	r24, 0x2B	; 43
    1e36:	b7 fc       	sbrc	r11, 7
    1e38:	8d e2       	ldi	r24, 0x2D	; 45
    1e3a:	90 e0       	ldi	r25, 0x00	; 0
    1e3c:	b6 01       	movw	r22, r12
    1e3e:	0e 94 75 0f 	call	0x1eea	; 0x1eea <fputc>
    1e42:	06 c0       	rjmp	.+12     	; 0x1e50 <vfprintf+0x3b2>
    1e44:	80 e3       	ldi	r24, 0x30	; 48
    1e46:	90 e0       	ldi	r25, 0x00	; 0
    1e48:	b6 01       	movw	r22, r12
    1e4a:	0e 94 75 0f 	call	0x1eea	; 0x1eea <fputc>
    1e4e:	ea 94       	dec	r14
    1e50:	7e 14       	cp	r7, r14
    1e52:	c0 f3       	brcs	.-16     	; 0x1e44 <vfprintf+0x3a6>
    1e54:	7a 94       	dec	r7
    1e56:	f2 01       	movw	r30, r4
    1e58:	e7 0d       	add	r30, r7
    1e5a:	f1 1d       	adc	r31, r1
    1e5c:	80 81       	ld	r24, Z
    1e5e:	90 e0       	ldi	r25, 0x00	; 0
    1e60:	b6 01       	movw	r22, r12
    1e62:	0e 94 75 0f 	call	0x1eea	; 0x1eea <fputc>
    1e66:	77 20       	and	r7, r7
    1e68:	a9 f7       	brne	.-22     	; 0x1e54 <vfprintf+0x3b6>
    1e6a:	06 c0       	rjmp	.+12     	; 0x1e78 <vfprintf+0x3da>
    1e6c:	80 e2       	ldi	r24, 0x20	; 32
    1e6e:	90 e0       	ldi	r25, 0x00	; 0
    1e70:	b6 01       	movw	r22, r12
    1e72:	0e 94 75 0f 	call	0x1eea	; 0x1eea <fputc>
    1e76:	fa 94       	dec	r15
    1e78:	ff 20       	and	r15, r15
    1e7a:	c1 f7       	brne	.-16     	; 0x1e6c <vfprintf+0x3ce>
    1e7c:	37 ce       	rjmp	.-914    	; 0x1aec <vfprintf+0x4e>
    1e7e:	f6 01       	movw	r30, r12
    1e80:	26 81       	ldd	r18, Z+6	; 0x06
    1e82:	37 81       	ldd	r19, Z+7	; 0x07
    1e84:	02 c0       	rjmp	.+4      	; 0x1e8a <vfprintf+0x3ec>
    1e86:	2f ef       	ldi	r18, 0xFF	; 255
    1e88:	3f ef       	ldi	r19, 0xFF	; 255
    1e8a:	c9 01       	movw	r24, r18
    1e8c:	2c 96       	adiw	r28, 0x0c	; 12
    1e8e:	0f b6       	in	r0, 0x3f	; 63
    1e90:	f8 94       	cli
    1e92:	de bf       	out	0x3e, r29	; 62
    1e94:	0f be       	out	0x3f, r0	; 63
    1e96:	cd bf       	out	0x3d, r28	; 61
    1e98:	cf 91       	pop	r28
    1e9a:	df 91       	pop	r29
    1e9c:	1f 91       	pop	r17
    1e9e:	0f 91       	pop	r16
    1ea0:	ff 90       	pop	r15
    1ea2:	ef 90       	pop	r14
    1ea4:	df 90       	pop	r13
    1ea6:	cf 90       	pop	r12
    1ea8:	bf 90       	pop	r11
    1eaa:	af 90       	pop	r10
    1eac:	9f 90       	pop	r9
    1eae:	8f 90       	pop	r8
    1eb0:	7f 90       	pop	r7
    1eb2:	6f 90       	pop	r6
    1eb4:	5f 90       	pop	r5
    1eb6:	4f 90       	pop	r4
    1eb8:	3f 90       	pop	r3
    1eba:	2f 90       	pop	r2
    1ebc:	08 95       	ret

00001ebe <strnlen_P>:
    1ebe:	fc 01       	movw	r30, r24
    1ec0:	05 90       	lpm	r0, Z+
    1ec2:	61 50       	subi	r22, 0x01	; 1
    1ec4:	70 40       	sbci	r23, 0x00	; 0
    1ec6:	01 10       	cpse	r0, r1
    1ec8:	d8 f7       	brcc	.-10     	; 0x1ec0 <strnlen_P+0x2>
    1eca:	80 95       	com	r24
    1ecc:	90 95       	com	r25
    1ece:	8e 0f       	add	r24, r30
    1ed0:	9f 1f       	adc	r25, r31
    1ed2:	08 95       	ret

00001ed4 <strnlen>:
    1ed4:	fc 01       	movw	r30, r24
    1ed6:	61 50       	subi	r22, 0x01	; 1
    1ed8:	70 40       	sbci	r23, 0x00	; 0
    1eda:	01 90       	ld	r0, Z+
    1edc:	01 10       	cpse	r0, r1
    1ede:	d8 f7       	brcc	.-10     	; 0x1ed6 <strnlen+0x2>
    1ee0:	80 95       	com	r24
    1ee2:	90 95       	com	r25
    1ee4:	8e 0f       	add	r24, r30
    1ee6:	9f 1f       	adc	r25, r31
    1ee8:	08 95       	ret

00001eea <fputc>:
    1eea:	0f 93       	push	r16
    1eec:	1f 93       	push	r17
    1eee:	cf 93       	push	r28
    1ef0:	df 93       	push	r29
    1ef2:	8c 01       	movw	r16, r24
    1ef4:	eb 01       	movw	r28, r22
    1ef6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef8:	81 ff       	sbrs	r24, 1
    1efa:	1b c0       	rjmp	.+54     	; 0x1f32 <fputc+0x48>
    1efc:	82 ff       	sbrs	r24, 2
    1efe:	0d c0       	rjmp	.+26     	; 0x1f1a <fputc+0x30>
    1f00:	2e 81       	ldd	r18, Y+6	; 0x06
    1f02:	3f 81       	ldd	r19, Y+7	; 0x07
    1f04:	8c 81       	ldd	r24, Y+4	; 0x04
    1f06:	9d 81       	ldd	r25, Y+5	; 0x05
    1f08:	28 17       	cp	r18, r24
    1f0a:	39 07       	cpc	r19, r25
    1f0c:	64 f4       	brge	.+24     	; 0x1f26 <fputc+0x3c>
    1f0e:	e8 81       	ld	r30, Y
    1f10:	f9 81       	ldd	r31, Y+1	; 0x01
    1f12:	01 93       	st	Z+, r16
    1f14:	f9 83       	std	Y+1, r31	; 0x01
    1f16:	e8 83       	st	Y, r30
    1f18:	06 c0       	rjmp	.+12     	; 0x1f26 <fputc+0x3c>
    1f1a:	e8 85       	ldd	r30, Y+8	; 0x08
    1f1c:	f9 85       	ldd	r31, Y+9	; 0x09
    1f1e:	80 2f       	mov	r24, r16
    1f20:	09 95       	icall
    1f22:	00 97       	sbiw	r24, 0x00	; 0
    1f24:	31 f4       	brne	.+12     	; 0x1f32 <fputc+0x48>
    1f26:	8e 81       	ldd	r24, Y+6	; 0x06
    1f28:	9f 81       	ldd	r25, Y+7	; 0x07
    1f2a:	01 96       	adiw	r24, 0x01	; 1
    1f2c:	9f 83       	std	Y+7, r25	; 0x07
    1f2e:	8e 83       	std	Y+6, r24	; 0x06
    1f30:	02 c0       	rjmp	.+4      	; 0x1f36 <fputc+0x4c>
    1f32:	0f ef       	ldi	r16, 0xFF	; 255
    1f34:	1f ef       	ldi	r17, 0xFF	; 255
    1f36:	c8 01       	movw	r24, r16
    1f38:	df 91       	pop	r29
    1f3a:	cf 91       	pop	r28
    1f3c:	1f 91       	pop	r17
    1f3e:	0f 91       	pop	r16
    1f40:	08 95       	ret

00001f42 <__ultoa_invert>:
    1f42:	fa 01       	movw	r30, r20
    1f44:	aa 27       	eor	r26, r26
    1f46:	28 30       	cpi	r18, 0x08	; 8
    1f48:	51 f1       	breq	.+84     	; 0x1f9e <__ultoa_invert+0x5c>
    1f4a:	20 31       	cpi	r18, 0x10	; 16
    1f4c:	81 f1       	breq	.+96     	; 0x1fae <__ultoa_invert+0x6c>
    1f4e:	e8 94       	clt
    1f50:	6f 93       	push	r22
    1f52:	6e 7f       	andi	r22, 0xFE	; 254
    1f54:	6e 5f       	subi	r22, 0xFE	; 254
    1f56:	7f 4f       	sbci	r23, 0xFF	; 255
    1f58:	8f 4f       	sbci	r24, 0xFF	; 255
    1f5a:	9f 4f       	sbci	r25, 0xFF	; 255
    1f5c:	af 4f       	sbci	r26, 0xFF	; 255
    1f5e:	b1 e0       	ldi	r27, 0x01	; 1
    1f60:	3e d0       	rcall	.+124    	; 0x1fde <__ultoa_invert+0x9c>
    1f62:	b4 e0       	ldi	r27, 0x04	; 4
    1f64:	3c d0       	rcall	.+120    	; 0x1fde <__ultoa_invert+0x9c>
    1f66:	67 0f       	add	r22, r23
    1f68:	78 1f       	adc	r23, r24
    1f6a:	89 1f       	adc	r24, r25
    1f6c:	9a 1f       	adc	r25, r26
    1f6e:	a1 1d       	adc	r26, r1
    1f70:	68 0f       	add	r22, r24
    1f72:	79 1f       	adc	r23, r25
    1f74:	8a 1f       	adc	r24, r26
    1f76:	91 1d       	adc	r25, r1
    1f78:	a1 1d       	adc	r26, r1
    1f7a:	6a 0f       	add	r22, r26
    1f7c:	71 1d       	adc	r23, r1
    1f7e:	81 1d       	adc	r24, r1
    1f80:	91 1d       	adc	r25, r1
    1f82:	a1 1d       	adc	r26, r1
    1f84:	20 d0       	rcall	.+64     	; 0x1fc6 <__ultoa_invert+0x84>
    1f86:	09 f4       	brne	.+2      	; 0x1f8a <__ultoa_invert+0x48>
    1f88:	68 94       	set
    1f8a:	3f 91       	pop	r19
    1f8c:	2a e0       	ldi	r18, 0x0A	; 10
    1f8e:	26 9f       	mul	r18, r22
    1f90:	11 24       	eor	r1, r1
    1f92:	30 19       	sub	r19, r0
    1f94:	30 5d       	subi	r19, 0xD0	; 208
    1f96:	31 93       	st	Z+, r19
    1f98:	de f6       	brtc	.-74     	; 0x1f50 <__ultoa_invert+0xe>
    1f9a:	cf 01       	movw	r24, r30
    1f9c:	08 95       	ret
    1f9e:	46 2f       	mov	r20, r22
    1fa0:	47 70       	andi	r20, 0x07	; 7
    1fa2:	40 5d       	subi	r20, 0xD0	; 208
    1fa4:	41 93       	st	Z+, r20
    1fa6:	b3 e0       	ldi	r27, 0x03	; 3
    1fa8:	0f d0       	rcall	.+30     	; 0x1fc8 <__ultoa_invert+0x86>
    1faa:	c9 f7       	brne	.-14     	; 0x1f9e <__ultoa_invert+0x5c>
    1fac:	f6 cf       	rjmp	.-20     	; 0x1f9a <__ultoa_invert+0x58>
    1fae:	46 2f       	mov	r20, r22
    1fb0:	4f 70       	andi	r20, 0x0F	; 15
    1fb2:	40 5d       	subi	r20, 0xD0	; 208
    1fb4:	4a 33       	cpi	r20, 0x3A	; 58
    1fb6:	18 f0       	brcs	.+6      	; 0x1fbe <__ultoa_invert+0x7c>
    1fb8:	49 5d       	subi	r20, 0xD9	; 217
    1fba:	31 fd       	sbrc	r19, 1
    1fbc:	40 52       	subi	r20, 0x20	; 32
    1fbe:	41 93       	st	Z+, r20
    1fc0:	02 d0       	rcall	.+4      	; 0x1fc6 <__ultoa_invert+0x84>
    1fc2:	a9 f7       	brne	.-22     	; 0x1fae <__ultoa_invert+0x6c>
    1fc4:	ea cf       	rjmp	.-44     	; 0x1f9a <__ultoa_invert+0x58>
    1fc6:	b4 e0       	ldi	r27, 0x04	; 4
    1fc8:	a6 95       	lsr	r26
    1fca:	97 95       	ror	r25
    1fcc:	87 95       	ror	r24
    1fce:	77 95       	ror	r23
    1fd0:	67 95       	ror	r22
    1fd2:	ba 95       	dec	r27
    1fd4:	c9 f7       	brne	.-14     	; 0x1fc8 <__ultoa_invert+0x86>
    1fd6:	00 97       	sbiw	r24, 0x00	; 0
    1fd8:	61 05       	cpc	r22, r1
    1fda:	71 05       	cpc	r23, r1
    1fdc:	08 95       	ret
    1fde:	9b 01       	movw	r18, r22
    1fe0:	ac 01       	movw	r20, r24
    1fe2:	0a 2e       	mov	r0, r26
    1fe4:	06 94       	lsr	r0
    1fe6:	57 95       	ror	r21
    1fe8:	47 95       	ror	r20
    1fea:	37 95       	ror	r19
    1fec:	27 95       	ror	r18
    1fee:	ba 95       	dec	r27
    1ff0:	c9 f7       	brne	.-14     	; 0x1fe4 <__ultoa_invert+0xa2>
    1ff2:	62 0f       	add	r22, r18
    1ff4:	73 1f       	adc	r23, r19
    1ff6:	84 1f       	adc	r24, r20
    1ff8:	95 1f       	adc	r25, r21
    1ffa:	a0 1d       	adc	r26, r0
    1ffc:	08 95       	ret

00001ffe <_exit>:
    1ffe:	f8 94       	cli

00002000 <__stop_program>:
    2000:	ff cf       	rjmp	.-2      	; 0x2000 <__stop_program>
