
AVRGCC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000150  00800100  00001ece  00001f62  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ece  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008e  00800250  00800250  000020b2  2**0
                  ALLOC
  3 .stab         00001164  00000000  00000000  000020b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000046b  00000000  00000000  00003218  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000108  00000000  00000000  00003683  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000404  00000000  00000000  0000378b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002364  00000000  00000000  00003b8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000a8e  00000000  00000000  00005ef3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000021af  00000000  00000000  00006981  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000320  00000000  00000000  00008b30  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000091f  00000000  00000000  00008e50  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000019f7  00000000  00000000  0000976f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 000001fe  00000000  00000000  0000b166  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000000e0  00000000  00000000  0000b364  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__ctors_end>
       4:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
       8:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
       c:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      10:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      14:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      18:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      1c:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      20:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      24:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      28:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      2c:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      30:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      34:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      38:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      3c:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      40:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      44:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      48:	0c 94 06 09 	jmp	0x120c	; 0x120c <__vector_18>
      4c:	0c 94 3a 09 	jmp	0x1274	; 0x1274 <__vector_19>
      50:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      54:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      58:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      5c:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      60:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      64:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      68:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      6c:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      70:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      74:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      78:	0c 94 cc 09 	jmp	0x1398	; 0x1398 <__vector_30>
      7c:	0c 94 02 0a 	jmp	0x1404	; 0x1404 <__vector_31>
      80:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      84:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      88:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>

0000008c <__c.2051>:
      8c:	41 54 2b 48 54 54 50 41 43 54 49 4f 4e 3d 30 0d     AT+HTTPACTION=0.
	...

0000009d <__c.2049>:
      9d:	41 54 2b 48 54 54 50 41 43 54 49 4f 4e 3d 31 0d     AT+HTTPACTION=1.
	...

000000ae <__c.2047>:
      ae:	41 54 2b 48 54 54 50 50 41 52 41 3d 22 43 4f 4e     AT+HTTPPARA="CON
      be:	54 45 4e 54 22 2c 22 61 70 70 6c 69 63 61 74 69     TENT","applicati
      ce:	6f 6e 2f 78 2d 77 77 77 2d 66 6f 72 6d 2d 75 72     on/x-www-form-ur
      de:	6c 65 6e 63 6f 64 65 64 22 0d 00                    lencoded"..

000000e9 <__c.2045>:
      e9:	41 54 2b 48 54 54 50 50 41 52 41 3d 22 43 49 44     AT+HTTPPARA="CID
      f9:	22 2c 31 0d 00                                      ",1..

000000fe <__c.2043>:
      fe:	41 54 2b 48 54 54 50 49 4e 49 54 0d 00              AT+HTTPINIT..

0000010b <__c.2030>:
     10b:	41 54 2b 48 54 54 50 54 45 52 4d 0d 00              AT+HTTPTERM..

00000118 <__c.2019>:
     118:	41 54 2b 53 41 50 42 52 3d 31 2c 31 0d 00           AT+SAPBR=1,1..

00000126 <__c.2014>:
     126:	41 54 2b 53 41 50 42 52 3d 30 2c 31 0d 00           AT+SAPBR=0,1..

00000134 <__c.2009>:
     134:	41 54 2b 53 41 50 42 52 3d 32 2c 31 0d 00           AT+SAPBR=2,1..

00000142 <__c.1991>:
     142:	41 54 2b 43 4c 49 50 3d 31 0d 00                    AT+CLIP=1..

0000014d <__c.1989>:
     14d:	41 54 2b 43 50 4d 53 3d 22 53 4d 22 2c 22 53 4d     AT+CPMS="SM","SM
     15d:	22 2c 22 53 4d 22 0d 00                             ","SM"..

00000165 <__c.1987>:
     165:	41 54 2b 43 4d 47 46 3d 31 0d 00                    AT+CMGF=1..

00000170 <__c.1985>:
     170:	41 54 0d 00                                         AT..

00000174 <__c.1980>:
     174:	41 54 0d 00                                         AT..

00000178 <__c.1974>:
     178:	41 54 2b 43 52 45 47 3f 0d 00                       AT+CREG?..

00000182 <__c.1972>:
     182:	41 54 2b 43 52 45 47 3f 0d 00                       AT+CREG?..

0000018c <__ctors_end>:
     18c:	11 24       	eor	r1, r1
     18e:	1f be       	out	0x3f, r1	; 63
     190:	cf ef       	ldi	r28, 0xFF	; 255
     192:	d0 e1       	ldi	r29, 0x10	; 16
     194:	de bf       	out	0x3e, r29	; 62
     196:	cd bf       	out	0x3d, r28	; 61

00000198 <__do_copy_data>:
     198:	12 e0       	ldi	r17, 0x02	; 2
     19a:	a0 e0       	ldi	r26, 0x00	; 0
     19c:	b1 e0       	ldi	r27, 0x01	; 1
     19e:	ee ec       	ldi	r30, 0xCE	; 206
     1a0:	fe e1       	ldi	r31, 0x1E	; 30
     1a2:	00 e0       	ldi	r16, 0x00	; 0
     1a4:	0b bf       	out	0x3b, r16	; 59
     1a6:	02 c0       	rjmp	.+4      	; 0x1ac <__do_copy_data+0x14>
     1a8:	07 90       	elpm	r0, Z+
     1aa:	0d 92       	st	X+, r0
     1ac:	a0 35       	cpi	r26, 0x50	; 80
     1ae:	b1 07       	cpc	r27, r17
     1b0:	d9 f7       	brne	.-10     	; 0x1a8 <__do_copy_data+0x10>

000001b2 <__do_clear_bss>:
     1b2:	12 e0       	ldi	r17, 0x02	; 2
     1b4:	a0 e5       	ldi	r26, 0x50	; 80
     1b6:	b2 e0       	ldi	r27, 0x02	; 2
     1b8:	01 c0       	rjmp	.+2      	; 0x1bc <.do_clear_bss_start>

000001ba <.do_clear_bss_loop>:
     1ba:	1d 92       	st	X+, r1

000001bc <.do_clear_bss_start>:
     1bc:	ae 3d       	cpi	r26, 0xDE	; 222
     1be:	b1 07       	cpc	r27, r17
     1c0:	e1 f7       	brne	.-8      	; 0x1ba <.do_clear_bss_loop>
     1c2:	0e 94 25 02 	call	0x44a	; 0x44a <main>
     1c6:	0c 94 65 0f 	jmp	0x1eca	; 0x1eca <_exit>

000001ca <__bad_interrupt>:
     1ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ce <lcd_write_4>:
  Exit:     no parameters
  Notes:    use either time delays or the busy flag
*/
void lcd_write_4(uint8_t theByte)
{
    lcd_D7_port &= ~(1<<lcd_D7_bit);                        // assume that data is '0'
     1ce:	af 98       	cbi	0x15, 7	; 21
    if (theByte & 1<<7) lcd_D7_port |= (1<<lcd_D7_bit);     // make data = '1' if necessary
     1d0:	88 23       	and	r24, r24
     1d2:	0c f4       	brge	.+2      	; 0x1d6 <lcd_write_4+0x8>
     1d4:	af 9a       	sbi	0x15, 7	; 21

    lcd_D6_port &= ~(1<<lcd_D6_bit);                        // repeat for each data bit
     1d6:	ae 98       	cbi	0x15, 6	; 21
    if (theByte & 1<<6) lcd_D6_port |= (1<<lcd_D6_bit);
     1d8:	86 fd       	sbrc	r24, 6
     1da:	ae 9a       	sbi	0x15, 6	; 21

    lcd_D5_port &= ~(1<<lcd_D5_bit);
     1dc:	ad 98       	cbi	0x15, 5	; 21
    if (theByte & 1<<5) lcd_D5_port |= (1<<lcd_D5_bit);
     1de:	85 fd       	sbrc	r24, 5
     1e0:	ad 9a       	sbi	0x15, 5	; 21

    lcd_D4_port &= ~(1<<lcd_D4_bit);
     1e2:	ac 98       	cbi	0x15, 4	; 21
    if (theByte & 1<<4) lcd_D4_port |= (1<<lcd_D4_bit);
     1e4:	84 fd       	sbrc	r24, 4
     1e6:	ac 9a       	sbi	0x15, 4	; 21

// write the data
                                                    // 'Address set-up time' (40 nS)
    lcd_E_port |= (1<<lcd_E_bit);                   // Enable pin high
     1e8:	97 9a       	sbi	0x12, 7	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1ea:	82 e0       	ldi	r24, 0x02	; 2
     1ec:	8a 95       	dec	r24
     1ee:	f1 f7       	brne	.-4      	; 0x1ec <lcd_write_4+0x1e>
     1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <lcd_write_4+0x24>
    _delay_us(1);                                   // implement 'Data set-up time' (80 nS) and 'Enable pulse width' (230 nS)
    lcd_E_port &= ~(1<<lcd_E_bit);                  // Enable pin low
     1f2:	97 98       	cbi	0x12, 7	; 18
     1f4:	82 e0       	ldi	r24, 0x02	; 2
     1f6:	8a 95       	dec	r24
     1f8:	f1 f7       	brne	.-4      	; 0x1f6 <lcd_write_4+0x28>
     1fa:	00 c0       	rjmp	.+0      	; 0x1fc <lcd_write_4+0x2e>
    _delay_us(1);                                   // implement 'Data hold time' (10 nS) and 'Enable cycle time' (500 nS)
}
     1fc:	08 95       	ret

000001fe <lcd_write_instruction_4d>:
  Entry:    (theInstruction) is the information to be sent to the instruction register
  Exit:     no parameters
  Notes:    does not deal with RW (busy flag is not implemented)
*/
void lcd_write_instruction_4d(uint8_t theInstruction)
{
     1fe:	1f 93       	push	r17
     200:	18 2f       	mov	r17, r24
    lcd_RS_port &= ~(1<<lcd_RS_bit);                // select the Instruction Register (RS low)
     202:	95 98       	cbi	0x12, 5	; 18
    lcd_E_port &= ~(1<<lcd_E_bit);                  // make sure E is initially low
     204:	97 98       	cbi	0x12, 7	; 18
    lcd_write_4(theInstruction);                    // write the upper 4-bits of the data
     206:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_write_4>
    lcd_write_4(theInstruction << 4);               // write the lower 4-bits of the data
     20a:	81 2f       	mov	r24, r17
     20c:	82 95       	swap	r24
     20e:	80 7f       	andi	r24, 0xF0	; 240
     210:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_write_4>
}
     214:	1f 91       	pop	r17
     216:	08 95       	ret

00000218 <lcd_write_character_4d>:
  Exit:     no parameters
  Notes:    does not deal with RW (busy flag is not implemented)
*/

void lcd_write_character_4d(uint8_t theData)
{
     218:	1f 93       	push	r17
     21a:	18 2f       	mov	r17, r24
    lcd_RS_port |= (1<<lcd_RS_bit);                 // select the Data Register (RS high)
     21c:	95 9a       	sbi	0x12, 5	; 18
    lcd_E_port &= ~(1<<lcd_E_bit);                  // make sure E is initially low
     21e:	97 98       	cbi	0x12, 7	; 18
    lcd_write_4(theData);                           // write the upper 4-bits of the data
     220:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_write_4>
    lcd_write_4(theData << 4);                      // write the lower 4-bits of the data
     224:	81 2f       	mov	r24, r17
     226:	82 95       	swap	r24
     228:	80 7f       	andi	r24, 0xF0	; 240
     22a:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_write_4>
}
     22e:	1f 91       	pop	r17
     230:	08 95       	ret

00000232 <lcd_write_string_4d>:
  Entry:    (theString) is the string to be displayed
  Exit:     no parameters
  Notes:    uses time delays rather than checking the busy flag
*/
void lcd_write_string_4d(uint8_t theString[])
{
     232:	0f 93       	push	r16
     234:	1f 93       	push	r17
     236:	df 93       	push	r29
     238:	cf 93       	push	r28
     23a:	00 d0       	rcall	.+0      	; 0x23c <lcd_write_string_4d+0xa>
     23c:	cd b7       	in	r28, 0x3d	; 61
     23e:	de b7       	in	r29, 0x3e	; 62
     240:	8c 01       	movw	r16, r24
    volatile int i = 0;                             // character counter*/
     242:	1a 82       	std	Y+2, r1	; 0x02
     244:	19 82       	std	Y+1, r1	; 0x01
    while (theString[i] != 0)
     246:	e9 81       	ldd	r30, Y+1	; 0x01
     248:	fa 81       	ldd	r31, Y+2	; 0x02
     24a:	e8 0f       	add	r30, r24
     24c:	f9 1f       	adc	r31, r25
     24e:	80 81       	ld	r24, Z
     250:	88 23       	and	r24, r24
     252:	b9 f0       	breq	.+46     	; 0x282 <lcd_write_string_4d+0x50>
    {
        lcd_write_character_4d(theString[i]);
     254:	e9 81       	ldd	r30, Y+1	; 0x01
     256:	fa 81       	ldd	r31, Y+2	; 0x02
     258:	e0 0f       	add	r30, r16
     25a:	f1 1f       	adc	r31, r17
     25c:	80 81       	ld	r24, Z
     25e:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_write_character_4d>
        i++;
     262:	89 81       	ldd	r24, Y+1	; 0x01
     264:	9a 81       	ldd	r25, Y+2	; 0x02
     266:	01 96       	adiw	r24, 0x01	; 1
     268:	9a 83       	std	Y+2, r25	; 0x02
     26a:	89 83       	std	Y+1, r24	; 0x01
     26c:	85 ed       	ldi	r24, 0xD5	; 213
     26e:	8a 95       	dec	r24
     270:	f1 f7       	brne	.-4      	; 0x26e <lcd_write_string_4d+0x3c>
     272:	00 00       	nop
  Notes:    uses time delays rather than checking the busy flag
*/
void lcd_write_string_4d(uint8_t theString[])
{
    volatile int i = 0;                             // character counter*/
    while (theString[i] != 0)
     274:	e9 81       	ldd	r30, Y+1	; 0x01
     276:	fa 81       	ldd	r31, Y+2	; 0x02
     278:	e0 0f       	add	r30, r16
     27a:	f1 1f       	adc	r31, r17
     27c:	80 81       	ld	r24, Z
     27e:	88 23       	and	r24, r24
     280:	49 f7       	brne	.-46     	; 0x254 <lcd_write_string_4d+0x22>
    {
        lcd_write_character_4d(theString[i]);
        i++;
        _delay_us(80);                              // 40 uS delay (min)
    }
}
     282:	0f 90       	pop	r0
     284:	0f 90       	pop	r0
     286:	cf 91       	pop	r28
     288:	df 91       	pop	r29
     28a:	1f 91       	pop	r17
     28c:	0f 91       	pop	r16
     28e:	08 95       	ret

00000290 <lcd_puthex>:
void CopyStringtoLCD(const uint8_t *FlashLoc);
void LCDsendChar(uint8_t ch);


void lcd_puthex(const char data)
{
     290:	1f 93       	push	r17
     292:	18 2f       	mov	r17, r24
     294:	85 ed       	ldi	r24, 0xD5	; 213
     296:	8a 95       	dec	r24
     298:	f1 f7       	brne	.-4      	; 0x296 <lcd_puthex+0x6>
     29a:	00 00       	nop
	//lcd_write_character_4d('0');
	//_delay_us(80);
	//print 'x'
	//lcd_write_character_4d('x');
	//_delay_us(80);
	(((data>>4)&0x0F)<=9) ? (temp='0'+((data>>4)&0x0F)) : (temp='A'+ ((data>>4)&0x0F)-0x0A);
     29c:	81 2f       	mov	r24, r17
     29e:	82 95       	swap	r24
     2a0:	8f 70       	andi	r24, 0x0F	; 15
     2a2:	28 2f       	mov	r18, r24
     2a4:	30 e0       	ldi	r19, 0x00	; 0
     2a6:	2a 30       	cpi	r18, 0x0A	; 10
     2a8:	31 05       	cpc	r19, r1
     2aa:	14 f4       	brge	.+4      	; 0x2b0 <lcd_puthex+0x20>
     2ac:	80 5d       	subi	r24, 0xD0	; 208
     2ae:	01 c0       	rjmp	.+2      	; 0x2b2 <lcd_puthex+0x22>
     2b0:	89 5c       	subi	r24, 0xC9	; 201
     2b2:	95 ed       	ldi	r25, 0xD5	; 213
     2b4:	9a 95       	dec	r25
     2b6:	f1 f7       	brne	.-4      	; 0x2b4 <lcd_puthex+0x24>
     2b8:	00 00       	nop
	_delay_us(80);
	//print high nibble as hex
	lcd_write_character_4d(temp);
     2ba:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_write_character_4d>
     2be:	85 ed       	ldi	r24, 0xD5	; 213
     2c0:	8a 95       	dec	r24
     2c2:	f1 f7       	brne	.-4      	; 0x2c0 <lcd_puthex+0x30>
     2c4:	00 00       	nop
	_delay_us(80);
	((data&0x0F)<=9) ? (temp='0'+ (data&0x0F)) : (temp='A'+ (data&0x0F)-0x0A);
     2c6:	21 2f       	mov	r18, r17
     2c8:	30 e0       	ldi	r19, 0x00	; 0
     2ca:	2f 70       	andi	r18, 0x0F	; 15
     2cc:	30 70       	andi	r19, 0x00	; 0
     2ce:	2a 30       	cpi	r18, 0x0A	; 10
     2d0:	31 05       	cpc	r19, r1
     2d2:	24 f4       	brge	.+8      	; 0x2dc <lcd_puthex+0x4c>
     2d4:	1f 70       	andi	r17, 0x0F	; 15
     2d6:	81 2f       	mov	r24, r17
     2d8:	80 5d       	subi	r24, 0xD0	; 208
     2da:	03 c0       	rjmp	.+6      	; 0x2e2 <lcd_puthex+0x52>
     2dc:	1f 70       	andi	r17, 0x0F	; 15
     2de:	81 2f       	mov	r24, r17
     2e0:	89 5c       	subi	r24, 0xC9	; 201
	lcd_write_character_4d(temp);
     2e2:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_write_character_4d>
     2e6:	95 ed       	ldi	r25, 0xD5	; 213
     2e8:	9a 95       	dec	r25
     2ea:	f1 f7       	brne	.-4      	; 0x2e8 <lcd_puthex+0x58>
     2ec:	00 00       	nop
	_delay_us(80);
	//print low nibble as hex
}
     2ee:	1f 91       	pop	r17
     2f0:	08 95       	ret

000002f2 <lcd_init_4d>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2f2:	8f ef       	ldi	r24, 0xFF	; 255
     2f4:	90 e7       	ldi	r25, 0x70	; 112
     2f6:	a2 e0       	ldi	r26, 0x02	; 2
     2f8:	81 50       	subi	r24, 0x01	; 1
     2fa:	90 40       	sbci	r25, 0x00	; 0
     2fc:	a0 40       	sbci	r26, 0x00	; 0
     2fe:	e1 f7       	brne	.-8      	; 0x2f8 <lcd_init_4d+0x6>
     300:	00 c0       	rjmp	.+0      	; 0x302 <lcd_init_4d+0x10>
     302:	00 00       	nop
void lcd_init_4d(void)
{
// Power-up delay
    _delay_ms(100);                                 // initial 40 mSec delay

    lcd_RS_port &= ~(1<<lcd_RS_bit);                // select the Instruction Register (RS low)
     304:	95 98       	cbi	0x12, 5	; 18
    lcd_E_port &= ~(1<<lcd_E_bit);                  // make sure E is initially low
     306:	97 98       	cbi	0x12, 7	; 18

// Reset the LCD controller
    lcd_write_4(lcd_FunctionReset);                 // first part of reset sequence
     308:	80 e3       	ldi	r24, 0x30	; 48
     30a:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_write_4>
     30e:	af e1       	ldi	r26, 0x1F	; 31
     310:	be e4       	ldi	r27, 0x4E	; 78
     312:	11 97       	sbiw	r26, 0x01	; 1
     314:	f1 f7       	brne	.-4      	; 0x312 <lcd_init_4d+0x20>
     316:	00 c0       	rjmp	.+0      	; 0x318 <lcd_init_4d+0x26>
     318:	00 00       	nop
    _delay_ms(10);                                  // 4.1 mS delay (min)

    lcd_write_4(lcd_FunctionReset);                 // second part of reset sequence
     31a:	80 e3       	ldi	r24, 0x30	; 48
     31c:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_write_4>
     320:	8f ec       	ldi	r24, 0xCF	; 207
     322:	97 e0       	ldi	r25, 0x07	; 7
     324:	01 97       	sbiw	r24, 0x01	; 1
     326:	f1 f7       	brne	.-4      	; 0x324 <lcd_init_4d+0x32>
     328:	00 c0       	rjmp	.+0      	; 0x32a <lcd_init_4d+0x38>
     32a:	00 00       	nop
    _delay_ms(1);                                 // 100uS delay (min)

    lcd_write_4(lcd_FunctionReset);                 // third part of reset sequence
     32c:	80 e3       	ldi	r24, 0x30	; 48
     32e:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_write_4>
     332:	af ec       	ldi	r26, 0xCF	; 207
     334:	b7 e0       	ldi	r27, 0x07	; 7
     336:	11 97       	sbiw	r26, 0x01	; 1
     338:	f1 f7       	brne	.-4      	; 0x336 <lcd_init_4d+0x44>
     33a:	00 c0       	rjmp	.+0      	; 0x33c <lcd_init_4d+0x4a>
     33c:	00 00       	nop
// Preliminary Function Set instruction - used only to set the 4-bit mode.
// The number of lines or the font cannot be set at this time since the controller is still in the
//  8-bit mode, but the data transfer mode can be changed since this parameter is determined by one 
//  of the upper four bits of the instruction.
 
    lcd_write_4(lcd_FunctionSet4bit);               // set 4-bit mode
     33e:	88 e2       	ldi	r24, 0x28	; 40
     340:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_write_4>
     344:	8f ec       	ldi	r24, 0xCF	; 207
     346:	97 e0       	ldi	r25, 0x07	; 7
     348:	01 97       	sbiw	r24, 0x01	; 1
     34a:	f1 f7       	brne	.-4      	; 0x348 <lcd_init_4d+0x56>
     34c:	00 c0       	rjmp	.+0      	; 0x34e <lcd_init_4d+0x5c>
     34e:	00 00       	nop
    _delay_ms(1);                                  // 40uS delay (min)

// Function Set instruction
    lcd_write_instruction_4d(lcd_FunctionSet4bit);   // set mode, lines, and font
     350:	88 e2       	ldi	r24, 0x28	; 40
     352:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_write_instruction_4d>
     356:	af ec       	ldi	r26, 0xCF	; 207
     358:	b7 e0       	ldi	r27, 0x07	; 7
     35a:	11 97       	sbiw	r26, 0x01	; 1
     35c:	f1 f7       	brne	.-4      	; 0x35a <lcd_init_4d+0x68>
     35e:	00 c0       	rjmp	.+0      	; 0x360 <lcd_init_4d+0x6e>
     360:	00 00       	nop
// The next three instructions are specified in the data sheet as part of the initialization routine, 
//  so it is a good idea (but probably not necessary) to do them just as specified and then redo them 
//  later if the application requires a different configuration.

// Display On/Off Control instruction
    lcd_write_instruction_4d(lcd_DisplayOff);        // turn display OFF
     362:	88 e0       	ldi	r24, 0x08	; 8
     364:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_write_instruction_4d>
     368:	8f ec       	ldi	r24, 0xCF	; 207
     36a:	97 e0       	ldi	r25, 0x07	; 7
     36c:	01 97       	sbiw	r24, 0x01	; 1
     36e:	f1 f7       	brne	.-4      	; 0x36c <lcd_init_4d+0x7a>
     370:	00 c0       	rjmp	.+0      	; 0x372 <lcd_init_4d+0x80>
     372:	00 00       	nop
    _delay_ms(1);                                  // 40uS delay (min)

// Clear Display instruction
    lcd_write_instruction_4d(lcd_Clear);             // clear display RAM
     374:	81 e0       	ldi	r24, 0x01	; 1
     376:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_write_instruction_4d>
     37a:	af e3       	ldi	r26, 0x3F	; 63
     37c:	bf e1       	ldi	r27, 0x1F	; 31
     37e:	11 97       	sbiw	r26, 0x01	; 1
     380:	f1 f7       	brne	.-4      	; 0x37e <lcd_init_4d+0x8c>
     382:	00 c0       	rjmp	.+0      	; 0x384 <lcd_init_4d+0x92>
     384:	00 00       	nop
    _delay_ms(4);                                   // 1.64 mS delay (min)

// ; Entry Mode Set instruction
    lcd_write_instruction_4d(lcd_EntryMode);         // set desired shift characteristics
     386:	86 e0       	ldi	r24, 0x06	; 6
     388:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_write_instruction_4d>
     38c:	8f ec       	ldi	r24, 0xCF	; 207
     38e:	97 e0       	ldi	r25, 0x07	; 7
     390:	01 97       	sbiw	r24, 0x01	; 1
     392:	f1 f7       	brne	.-4      	; 0x390 <lcd_init_4d+0x9e>
     394:	00 c0       	rjmp	.+0      	; 0x396 <lcd_init_4d+0xa4>
     396:	00 00       	nop

// This is the end of the LCD controller initialization as specified in the data sheet, but the display
//  has been left in the OFF condition.  This is a good time to turn the display back ON.
 
// Display On/Off Control instruction
    lcd_write_instruction_4d(lcd_DisplayOn);         // turn the display ON
     398:	8c e0       	ldi	r24, 0x0C	; 12
     39a:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_write_instruction_4d>
     39e:	af ec       	ldi	r26, 0xCF	; 207
     3a0:	b7 e0       	ldi	r27, 0x07	; 7
     3a2:	11 97       	sbiw	r26, 0x01	; 1
     3a4:	f1 f7       	brne	.-4      	; 0x3a2 <lcd_init_4d+0xb0>
     3a6:	00 c0       	rjmp	.+0      	; 0x3a8 <lcd_init_4d+0xb6>
     3a8:	00 00       	nop
    _delay_ms(1);                                  // 40uS delay (min)
}
     3aa:	08 95       	ret

000003ac <LCDsendChar>:

void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{

	//4 bit part
	PORTC=(ch&0b11110000);
     3ac:	98 2f       	mov	r25, r24
     3ae:	90 7f       	andi	r25, 0xF0	; 240
     3b0:	95 bb       	out	0x15, r25	; 21
	PORTD|=1<<lcd_RS_bit ;
     3b2:	95 9a       	sbi	0x12, 5	; 18
	PORTG|=1<<lcd_E_bit;		
     3b4:	e5 e6       	ldi	r30, 0x65	; 101
     3b6:	f0 e0       	ldi	r31, 0x00	; 0
     3b8:	90 81       	ld	r25, Z
     3ba:	90 68       	ori	r25, 0x80	; 128
     3bc:	90 83       	st	Z, r25
     3be:	af ec       	ldi	r26, 0xCF	; 207
     3c0:	b7 e0       	ldi	r27, 0x07	; 7
     3c2:	11 97       	sbiw	r26, 0x01	; 1
     3c4:	f1 f7       	brne	.-4      	; 0x3c2 <LCDsendChar+0x16>
     3c6:	00 c0       	rjmp	.+0      	; 0x3c8 <LCDsendChar+0x1c>
     3c8:	00 00       	nop
	_delay_ms(1);
	PORTG&=~(1<<lcd_E_bit);	
     3ca:	90 81       	ld	r25, Z
     3cc:	9f 77       	andi	r25, 0x7F	; 127
     3ce:	90 83       	st	Z, r25
	PORTD&=~(1<<lcd_RS_bit);
     3d0:	95 98       	cbi	0x12, 5	; 18
     3d2:	af ec       	ldi	r26, 0xCF	; 207
     3d4:	b7 e0       	ldi	r27, 0x07	; 7
     3d6:	11 97       	sbiw	r26, 0x01	; 1
     3d8:	f1 f7       	brne	.-4      	; 0x3d6 <LCDsendChar+0x2a>
     3da:	00 c0       	rjmp	.+0      	; 0x3dc <LCDsendChar+0x30>
     3dc:	00 00       	nop
	_delay_ms(1);
	PORTC=((ch&0b00001111)<<4);
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	82 95       	swap	r24
     3e2:	92 95       	swap	r25
     3e4:	90 7f       	andi	r25, 0xF0	; 240
     3e6:	98 27       	eor	r25, r24
     3e8:	80 7f       	andi	r24, 0xF0	; 240
     3ea:	98 27       	eor	r25, r24
     3ec:	85 bb       	out	0x15, r24	; 21
	PORTD|=1<<lcd_RS_bit;
     3ee:	95 9a       	sbi	0x12, 5	; 18
	PORTG|=1<<lcd_E_bit;		
     3f0:	80 81       	ld	r24, Z
     3f2:	80 68       	ori	r24, 0x80	; 128
     3f4:	80 83       	st	Z, r24
     3f6:	8f ec       	ldi	r24, 0xCF	; 207
     3f8:	97 e0       	ldi	r25, 0x07	; 7
     3fa:	01 97       	sbiw	r24, 0x01	; 1
     3fc:	f1 f7       	brne	.-4      	; 0x3fa <LCDsendChar+0x4e>
     3fe:	00 c0       	rjmp	.+0      	; 0x400 <LCDsendChar+0x54>
     400:	00 00       	nop
	_delay_ms(1);
	PORTG&=~(1<<lcd_E_bit);	
     402:	80 81       	ld	r24, Z
     404:	8f 77       	andi	r24, 0x7F	; 127
     406:	80 83       	st	Z, r24
	PORTD&=~(1<<lcd_RS_bit);
     408:	95 98       	cbi	0x12, 5	; 18
     40a:	af ec       	ldi	r26, 0xCF	; 207
     40c:	b7 e0       	ldi	r27, 0x07	; 7
     40e:	11 97       	sbiw	r26, 0x01	; 1
     410:	f1 f7       	brne	.-4      	; 0x40e <LCDsendChar+0x62>
     412:	00 c0       	rjmp	.+0      	; 0x414 <LCDsendChar+0x68>
     414:	00 00       	nop
	_delay_ms(1);
}
     416:	08 95       	ret

00000418 <CopyStringtoLCD>:
    _delay_us(1);                                   // implement 'Data set-up time' (80 nS) and 'Enable pulse width' (230 nS)
    lcd_E_port &= ~(1<<lcd_E_bit);                  // Enable pin low
    _delay_us(1);                                   // implement 'Data hold time' (10 nS) and 'Enable cycle time' (500 nS)
}
void CopyStringtoLCD(const uint8_t *FlashLoc)
{
     418:	1f 93       	push	r17
     41a:	cf 93       	push	r28
     41c:	df 93       	push	r29
     41e:	ec 01       	movw	r28, r24
	uint8_t i;
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
     420:	fe 01       	movw	r30, r28
     422:	24 91       	lpm	r18, Z+
     424:	22 23       	and	r18, r18
     426:	69 f0       	breq	.+26     	; 0x442 <CopyStringtoLCD+0x2a>
     428:	10 e0       	ldi	r17, 0x00	; 0
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
     42a:	fc 01       	movw	r30, r24
     42c:	84 91       	lpm	r24, Z+
     42e:	0e 94 d6 01 	call	0x3ac	; 0x3ac <LCDsendChar>
    _delay_us(1);                                   // implement 'Data hold time' (10 nS) and 'Enable cycle time' (500 nS)
}
void CopyStringtoLCD(const uint8_t *FlashLoc)
{
	uint8_t i;
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
     432:	1f 5f       	subi	r17, 0xFF	; 255
     434:	ce 01       	movw	r24, r28
     436:	81 0f       	add	r24, r17
     438:	91 1d       	adc	r25, r1
     43a:	fc 01       	movw	r30, r24
     43c:	24 91       	lpm	r18, Z+
     43e:	22 23       	and	r18, r18
     440:	a1 f7       	brne	.-24     	; 0x42a <CopyStringtoLCD+0x12>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
     442:	df 91       	pop	r29
     444:	cf 91       	pop	r28
     446:	1f 91       	pop	r17
     448:	08 95       	ret

0000044a <main>:
#define UART_BAUD_RATE      9600      


int main(void)
{
	DDRC = 0xFF;    // lcd pins
     44a:	8f ef       	ldi	r24, 0xFF	; 255
     44c:	84 bb       	out	0x14, r24	; 20
	// configure the microprocessor pins for the control lines
    lcd_E_ddr |= (1<<lcd_E_bit);                    // E line - output
     44e:	8f 9a       	sbi	0x11, 7	; 17
    lcd_RS_ddr |= (1<<lcd_RS_bit);                  // RS line - output
     450:	8d 9a       	sbi	0x11, 5	; 17
 
    lcd_RS_port &= ~(1<<lcd_RS_bit);
     452:	95 98       	cbi	0x12, 5	; 18
	
    unsigned int c;
    char buffer[7];
    int  num=134;

    lcd_init_4d();
     454:	0e 94 79 01 	call	0x2f2	; 0x2f2 <lcd_init_4d>
	lcd_write_instruction_4d(lcd_Clear);
     458:	81 e0       	ldi	r24, 0x01	; 1
     45a:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_write_instruction_4d>
     45e:	8f e1       	ldi	r24, 0x1F	; 31
     460:	9e e4       	ldi	r25, 0x4E	; 78
     462:	01 97       	sbiw	r24, 0x01	; 1
     464:	f1 f7       	brne	.-4      	; 0x462 <main+0x18>
     466:	00 c0       	rjmp	.+0      	; 0x468 <main+0x1e>
     468:	00 00       	nop
    _delay_ms(10);
    lcd_write_string_4d("main");
     46a:	80 e0       	ldi	r24, 0x00	; 0
     46c:	91 e0       	ldi	r25, 0x01	; 1
     46e:	0e 94 19 01 	call	0x232	; 0x232 <lcd_write_string_4d>
     *  with the macro 
     *  UART_BAUD_SELECT() (normal speed mode )
     *  or 
     *  UART_BAUD_SELECT_DOUBLE_SPEED() ( double speed mode)
     */
    sim900_init_uart(9600);
     472:	80 e8       	ldi	r24, 0x80	; 128
     474:	95 e2       	ldi	r25, 0x25	; 37
     476:	0e 94 71 02 	call	0x4e2	; 0x4e2 <sim900_init_uart>

    
    /*
     * now enable interrupt, since UART library is interrupt controlled
     */
    sei();
     47a:	78 94       	sei
    lcd_write_instruction_4d(lcd_Clear);
     47c:	81 e0       	ldi	r24, 0x01	; 1
     47e:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_write_instruction_4d>
     482:	af e1       	ldi	r26, 0x1F	; 31
     484:	be e4       	ldi	r27, 0x4E	; 78
     486:	11 97       	sbiw	r26, 0x01	; 1
     488:	f1 f7       	brne	.-4      	; 0x486 <main+0x3c>
     48a:	00 c0       	rjmp	.+0      	; 0x48c <main+0x42>
     48c:	00 00       	nop
    _delay_ms(10);
	sim900_setup(SETUP_WAIT_INFINITE);
     48e:	81 e0       	ldi	r24, 0x01	; 1
     490:	0e 94 c5 03 	call	0x78a	; 0x78a <sim900_setup>
     494:	8f ef       	ldi	r24, 0xFF	; 255
     496:	99 e6       	ldi	r25, 0x69	; 105
     498:	a8 e1       	ldi	r26, 0x18	; 24
     49a:	81 50       	subi	r24, 0x01	; 1
     49c:	90 40       	sbci	r25, 0x00	; 0
     49e:	a0 40       	sbci	r26, 0x00	; 0
     4a0:	e1 f7       	brne	.-8      	; 0x49a <main+0x50>
     4a2:	00 c0       	rjmp	.+0      	; 0x4a4 <main+0x5a>
     4a4:	00 00       	nop
    _delay_ms(1000);
	lcd_write_string_4d("Sending sms");
     4a6:	85 e0       	ldi	r24, 0x05	; 5
     4a8:	91 e0       	ldi	r25, 0x01	; 1
     4aa:	0e 94 19 01 	call	0x232	; 0x232 <lcd_write_string_4d>
    sim900_send_sms("+97699667842","hello borld\r\n\x1a");
     4ae:	81 e1       	ldi	r24, 0x11	; 17
     4b0:	91 e0       	ldi	r25, 0x01	; 1
     4b2:	6e e1       	ldi	r22, 0x1E	; 30
     4b4:	71 e0       	ldi	r23, 0x01	; 1
     4b6:	0e 94 29 04 	call	0x852	; 0x852 <sim900_send_sms>


    while(1)
	{
		lcd_write_character_4d('k');
     4ba:	8b e6       	ldi	r24, 0x6B	; 107
     4bc:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_write_character_4d>
     4c0:	8f ef       	ldi	r24, 0xFF	; 255
     4c2:	99 e6       	ldi	r25, 0x69	; 105
     4c4:	a8 e1       	ldi	r26, 0x18	; 24
     4c6:	81 50       	subi	r24, 0x01	; 1
     4c8:	90 40       	sbci	r25, 0x00	; 0
     4ca:	a0 40       	sbci	r26, 0x00	; 0
     4cc:	e1 f7       	brne	.-8      	; 0x4c6 <main+0x7c>
     4ce:	00 c0       	rjmp	.+0      	; 0x4d0 <main+0x86>
     4d0:	00 00       	nop
     4d2:	f3 cf       	rjmp	.-26     	; 0x4ba <main+0x70>

000004d4 <uart1_flush_buffer>:

#include "sim900.h"

void uart1_flush_buffer()
{
	while (uart1_getc() != UART_NO_DATA);
     4d4:	0e 94 4b 0a 	call	0x1496	; 0x1496 <uart1_getc>
     4d8:	21 e0       	ldi	r18, 0x01	; 1
     4da:	80 30       	cpi	r24, 0x00	; 0
     4dc:	92 07       	cpc	r25, r18
     4de:	d1 f7       	brne	.-12     	; 0x4d4 <uart1_flush_buffer>
}
     4e0:	08 95       	ret

000004e2 <sim900_init_uart>:
void sim900_init_uart(const uint16_t baudrate)
{
     4e2:	cf 93       	push	r28
     4e4:	df 93       	push	r29
	//init uart
	uart1_init(UART_BAUD_SELECT(baudrate, F_CPU));
     4e6:	9c 01       	movw	r18, r24
     4e8:	40 e0       	ldi	r20, 0x00	; 0
     4ea:	50 e0       	ldi	r21, 0x00	; 0
     4ec:	ca 01       	movw	r24, r20
     4ee:	b9 01       	movw	r22, r18
     4f0:	60 5c       	subi	r22, 0xC0	; 192
     4f2:	7d 4b       	sbci	r23, 0xBD	; 189
     4f4:	80 4f       	sbci	r24, 0xF0	; 240
     4f6:	9f 4f       	sbci	r25, 0xFF	; 255
     4f8:	66 0f       	add	r22, r22
     4fa:	77 1f       	adc	r23, r23
     4fc:	88 1f       	adc	r24, r24
     4fe:	99 1f       	adc	r25, r25
     500:	66 0f       	add	r22, r22
     502:	77 1f       	adc	r23, r23
     504:	88 1f       	adc	r24, r24
     506:	99 1f       	adc	r25, r25
     508:	66 0f       	add	r22, r22
     50a:	77 1f       	adc	r23, r23
     50c:	88 1f       	adc	r24, r24
     50e:	99 1f       	adc	r25, r25
     510:	22 0f       	add	r18, r18
     512:	33 1f       	adc	r19, r19
     514:	44 1f       	adc	r20, r20
     516:	55 1f       	adc	r21, r21
     518:	22 0f       	add	r18, r18
     51a:	33 1f       	adc	r19, r19
     51c:	44 1f       	adc	r20, r20
     51e:	55 1f       	adc	r21, r21
     520:	22 0f       	add	r18, r18
     522:	33 1f       	adc	r19, r19
     524:	44 1f       	adc	r20, r20
     526:	55 1f       	adc	r21, r21
     528:	22 0f       	add	r18, r18
     52a:	33 1f       	adc	r19, r19
     52c:	44 1f       	adc	r20, r20
     52e:	55 1f       	adc	r21, r21
     530:	0e 94 a0 0a 	call	0x1540	; 0x1540 <__udivmodsi4>
     534:	c9 01       	movw	r24, r18
     536:	01 97       	sbiw	r24, 0x01	; 1
     538:	0e 94 31 0a 	call	0x1462	; 0x1462 <uart1_init>
     53c:	8f ef       	ldi	r24, 0xFF	; 255
     53e:	90 e7       	ldi	r25, 0x70	; 112
     540:	a2 e0       	ldi	r26, 0x02	; 2
     542:	81 50       	subi	r24, 0x01	; 1
     544:	90 40       	sbci	r25, 0x00	; 0
     546:	a0 40       	sbci	r26, 0x00	; 0
     548:	e1 f7       	brne	.-8      	; 0x542 <sim900_init_uart+0x60>
     54a:	00 c0       	rjmp	.+0      	; 0x54c <sim900_init_uart+0x6a>
     54c:	00 00       	nop
	_delay_ms(100);
	uart1_puts("A");
     54e:	cd e2       	ldi	r28, 0x2D	; 45
     550:	d1 e0       	ldi	r29, 0x01	; 1
     552:	ce 01       	movw	r24, r28
     554:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <uart1_puts>
     558:	8f ef       	ldi	r24, 0xFF	; 255
     55a:	90 e7       	ldi	r25, 0x70	; 112
     55c:	a2 e0       	ldi	r26, 0x02	; 2
     55e:	81 50       	subi	r24, 0x01	; 1
     560:	90 40       	sbci	r25, 0x00	; 0
     562:	a0 40       	sbci	r26, 0x00	; 0
     564:	e1 f7       	brne	.-8      	; 0x55e <sim900_init_uart+0x7c>
     566:	00 c0       	rjmp	.+0      	; 0x568 <sim900_init_uart+0x86>
     568:	00 00       	nop
	_delay_ms(100);
	uart1_puts("A");
     56a:	ce 01       	movw	r24, r28
     56c:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <uart1_puts>
     570:	8f ef       	ldi	r24, 0xFF	; 255
     572:	90 e7       	ldi	r25, 0x70	; 112
     574:	a2 e0       	ldi	r26, 0x02	; 2
     576:	81 50       	subi	r24, 0x01	; 1
     578:	90 40       	sbci	r25, 0x00	; 0
     57a:	a0 40       	sbci	r26, 0x00	; 0
     57c:	e1 f7       	brne	.-8      	; 0x576 <sim900_init_uart+0x94>
     57e:	00 c0       	rjmp	.+0      	; 0x580 <sim900_init_uart+0x9e>
     580:	00 00       	nop
	_delay_ms(100);
	uart1_puts("ATE0");
     582:	8f e2       	ldi	r24, 0x2F	; 47
     584:	91 e0       	ldi	r25, 0x01	; 1
     586:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <uart1_puts>
     58a:	8f ef       	ldi	r24, 0xFF	; 255
     58c:	99 e6       	ldi	r25, 0x69	; 105
     58e:	a8 e1       	ldi	r26, 0x18	; 24
     590:	81 50       	subi	r24, 0x01	; 1
     592:	90 40       	sbci	r25, 0x00	; 0
     594:	a0 40       	sbci	r26, 0x00	; 0
     596:	e1 f7       	brne	.-8      	; 0x590 <sim900_init_uart+0xae>
     598:	00 c0       	rjmp	.+0      	; 0x59a <sim900_init_uart+0xb8>
     59a:	00 00       	nop
	_delay_ms(1000);
	uart1_flush_buffer();
     59c:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <uart1_flush_buffer>

}
     5a0:	df 91       	pop	r29
     5a2:	cf 91       	pop	r28
     5a4:	08 95       	ret

000005a6 <sim900_send_cmd_wait_reply>:

uint8_t sim900_send_cmd_wait_reply(const uint8_t send_from_progmem, const uint8_t *aCmd, const uint8_t
*aResponExit, const uint32_t aTimeoutMax, const uint8_t aLenOut, uint8_t
*aResponOut)
{
     5a6:	2f 92       	push	r2
     5a8:	3f 92       	push	r3
     5aa:	4f 92       	push	r4
     5ac:	5f 92       	push	r5
     5ae:	6f 92       	push	r6
     5b0:	7f 92       	push	r7
     5b2:	8f 92       	push	r8
     5b4:	9f 92       	push	r9
     5b6:	af 92       	push	r10
     5b8:	bf 92       	push	r11
     5ba:	cf 92       	push	r12
     5bc:	df 92       	push	r13
     5be:	ef 92       	push	r14
     5c0:	ff 92       	push	r15
     5c2:	0f 93       	push	r16
     5c4:	1f 93       	push	r17
     5c6:	df 93       	push	r29
     5c8:	cf 93       	push	r28
     5ca:	00 d0       	rcall	.+0      	; 0x5cc <sim900_send_cmd_wait_reply+0x26>
     5cc:	00 d0       	rcall	.+0      	; 0x5ce <sim900_send_cmd_wait_reply+0x28>
     5ce:	0f 92       	push	r0
     5d0:	cd b7       	in	r28, 0x3d	; 61
     5d2:	de b7       	in	r29, 0x3e	; 62
     5d4:	28 2e       	mov	r2, r24
     5d6:	3b 01       	movw	r6, r22
     5d8:	2a 01       	movw	r4, r20
     5da:	48 01       	movw	r8, r16
     5dc:	59 01       	movw	r10, r18
     5de:	e9 82       	std	Y+1, r14	; 0x01
     5e0:	db 82       	std	Y+3, r13	; 0x03
     5e2:	ca 82       	std	Y+2, r12	; 0x02

	uint8_t id_data, respons = 0;
	uint32_t uart_tout_cnt = 0;
	uint16_t uart_data;
	
	uint8_t *aDataBuffer = (uint8_t*) calloc(MAX_BUFFER_TMP,sizeof(uint8_t));
     5e4:	80 e4       	ldi	r24, 0x40	; 64
     5e6:	90 e0       	ldi	r25, 0x00	; 0
     5e8:	61 e0       	ldi	r22, 0x01	; 1
     5ea:	70 e0       	ldi	r23, 0x00	; 0
     5ec:	0e 94 c2 0a 	call	0x1584	; 0x1584 <calloc>
     5f0:	18 2f       	mov	r17, r24
     5f2:	e9 2e       	mov	r14, r25
     5f4:	98 2f       	mov	r25, r24
     5f6:	49 2f       	mov	r20, r25
     5f8:	5e 2d       	mov	r21, r14
     5fa:	5d 83       	std	Y+5, r21	; 0x05
     5fc:	4c 83       	std	Y+4, r20	; 0x04
	
	//buffer created???
	if (aDataBuffer == NULL)
     5fe:	41 15       	cp	r20, r1
     600:	51 05       	cpc	r21, r1
     602:	09 f4       	brne	.+2      	; 0x606 <sim900_send_cmd_wait_reply+0x60>
     604:	78 c0       	rjmp	.+240    	; 0x6f6 <sim900_send_cmd_wait_reply+0x150>
	{
		return 0;
	}

	//reset to all 0
	memset(aDataBuffer, '\0', MAX_BUFFER_TMP);
     606:	e9 2f       	mov	r30, r25
     608:	fe 2d       	mov	r31, r14
     60a:	80 e4       	ldi	r24, 0x40	; 64
     60c:	df 01       	movw	r26, r30
     60e:	1d 92       	st	X+, r1
     610:	8a 95       	dec	r24
     612:	e9 f7       	brne	.-6      	; 0x60e <sim900_send_cmd_wait_reply+0x68>

	//read left buffer data
	if (aCmd != NULL)
     614:	61 14       	cp	r6, r1
     616:	71 04       	cpc	r7, r1
     618:	e9 f1       	breq	.+122    	; 0x694 <sim900_send_cmd_wait_reply+0xee>
	{
		uart1_flush_buffer();
     61a:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <uart1_flush_buffer>
	}

	//send command
	if (aCmd != NULL)
	{
		if (send_from_progmem)
     61e:	22 20       	and	r2, r2
     620:	21 f0       	breq	.+8      	; 0x62a <sim900_send_cmd_wait_reply+0x84>
		{
			uart1_puts_p((const char*)aCmd);
     622:	c3 01       	movw	r24, r6
     624:	0e 94 8e 0a 	call	0x151c	; 0x151c <uart1_puts_p>
     628:	35 c0       	rjmp	.+106    	; 0x694 <sim900_send_cmd_wait_reply+0xee>
		}
		else
		{
			uart1_puts((const char*)aCmd);
     62a:	c3 01       	movw	r24, r6
     62c:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <uart1_puts>
     630:	31 c0       	rjmp	.+98     	; 0x694 <sim900_send_cmd_wait_reply+0xee>
		uart_tout_cnt = 0;
		while (((uart_data = uart1_getc()) == UART_NO_DATA) && (uart_tout_cnt <
		aTimeoutMax))
		//wait data arrive or tout
		{
			uart_tout_cnt++;
     632:	08 94       	sec
     634:	e1 1c       	adc	r14, r1
     636:	f1 1c       	adc	r15, r1
     638:	01 1d       	adc	r16, r1
     63a:	11 1d       	adc	r17, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     63c:	b2 e0       	ldi	r27, 0x02	; 2
     63e:	ba 95       	dec	r27
     640:	f1 f7       	brne	.-4      	; 0x63e <sim900_send_cmd_wait_reply+0x98>
     642:	00 c0       	rjmp	.+0      	; 0x644 <sim900_send_cmd_wait_reply+0x9e>
	uart_tout_cnt = 0;
	while ((id_data < (MAX_BUFFER_TMP - 1)) && (uart_tout_cnt <= aTimeoutMax))
	{
		//get uart data or timeout
		uart_tout_cnt = 0;
		while (((uart_data = uart1_getc()) == UART_NO_DATA) && (uart_tout_cnt <
     644:	0e 94 4b 0a 	call	0x1496	; 0x1496 <uart1_getc>
     648:	e1 e0       	ldi	r30, 0x01	; 1
     64a:	80 30       	cpi	r24, 0x00	; 0
     64c:	9e 07       	cpc	r25, r30
     64e:	39 f4       	brne	.+14     	; 0x65e <sim900_send_cmd_wait_reply+0xb8>
     650:	e8 14       	cp	r14, r8
     652:	f9 04       	cpc	r15, r9
     654:	0a 05       	cpc	r16, r10
     656:	1b 05       	cpc	r17, r11
     658:	60 f3       	brcs	.-40     	; 0x632 <sim900_send_cmd_wait_reply+0x8c>
		}

		//check for timeout
		if (uart_tout_cnt >= aTimeoutMax)
		{
			respons = 0;
     65a:	10 e0       	ldi	r17, 0x00	; 0
     65c:	33 c0       	rjmp	.+102    	; 0x6c4 <sim900_send_cmd_wait_reply+0x11e>
			uart_tout_cnt++;
			_delay_us(1);
		}

		//check for timeout
		if (uart_tout_cnt >= aTimeoutMax)
     65e:	e8 14       	cp	r14, r8
     660:	f9 04       	cpc	r15, r9
     662:	0a 05       	cpc	r16, r10
     664:	1b 05       	cpc	r17, r11
     666:	38 f5       	brcc	.+78     	; 0x6b6 <sim900_send_cmd_wait_reply+0x110>
			respons = 0;
			break;
		}
		else
		{
			aDataBuffer[id_data] = uart_data;
     668:	d3 01       	movw	r26, r6
     66a:	8d 93       	st	X+, r24
     66c:	3d 01       	movw	r6, r26
			id_data++;
     66e:	d3 94       	inc	r13

			// check if the desired answer  is in the response of the module
			if (aResponExit != NULL)
     670:	41 14       	cp	r4, r1
     672:	51 04       	cpc	r5, r1
     674:	39 f0       	breq	.+14     	; 0x684 <sim900_send_cmd_wait_reply+0xde>
			{
				if (strstr((const char*)aDataBuffer, (const char*)aResponExit) != NULL)
     676:	8c 81       	ldd	r24, Y+4	; 0x04
     678:	9d 81       	ldd	r25, Y+5	; 0x05
     67a:	b2 01       	movw	r22, r4
     67c:	0e 94 55 0c 	call	0x18aa	; 0x18aa <strstr>
     680:	00 97       	sbiw	r24, 0x00	; 0
     682:	d9 f4       	brne	.+54     	; 0x6ba <sim900_send_cmd_wait_reply+0x114>
					break;
				}
			}

			//check error also
			if (strstr((const char*)aDataBuffer, (const char*)RESPON_ERROR) != NULL)
     684:	8c 81       	ldd	r24, Y+4	; 0x04
     686:	9d 81       	ldd	r25, Y+5	; 0x05
     688:	b1 01       	movw	r22, r2
     68a:	0e 94 55 0c 	call	0x18aa	; 0x18aa <strstr>
     68e:	00 97       	sbiw	r24, 0x00	; 0
     690:	59 f0       	breq	.+22     	; 0x6a8 <sim900_send_cmd_wait_reply+0x102>
     692:	15 c0       	rjmp	.+42     	; 0x6be <sim900_send_cmd_wait_reply+0x118>
     694:	61 2e       	mov	r6, r17
     696:	7e 2c       	mov	r7, r14
}

uint8_t sim900_send_cmd_wait_reply(const uint8_t send_from_progmem, const uint8_t *aCmd, const uint8_t
*aResponExit, const uint32_t aTimeoutMax, const uint8_t aLenOut, uint8_t
*aResponOut)
{
     698:	dd 24       	eor	r13, r13
					break;
				}
			}

			//check error also
			if (strstr((const char*)aDataBuffer, (const char*)RESPON_ERROR) != NULL)
     69a:	0f 2e       	mov	r0, r31
     69c:	f4 e3       	ldi	r31, 0x34	; 52
     69e:	2f 2e       	mov	r2, r31
     6a0:	f1 e0       	ldi	r31, 0x01	; 1
     6a2:	3f 2e       	mov	r3, r31
     6a4:	f0 2d       	mov	r31, r0
     6a6:	03 c0       	rjmp	.+6      	; 0x6ae <sim900_send_cmd_wait_reply+0x108>
	}

	//wait for reply
	id_data = 0;
	uart_tout_cnt = 0;
	while ((id_data < (MAX_BUFFER_TMP - 1)) && (uart_tout_cnt <= aTimeoutMax))
     6a8:	bd 2d       	mov	r27, r13
     6aa:	bf 33       	cpi	r27, 0x3F	; 63
     6ac:	51 f0       	breq	.+20     	; 0x6c2 <sim900_send_cmd_wait_reply+0x11c>
}

uint8_t sim900_send_cmd_wait_reply(const uint8_t send_from_progmem, const uint8_t *aCmd, const uint8_t
*aResponExit, const uint32_t aTimeoutMax, const uint8_t aLenOut, uint8_t
*aResponOut)
{
     6ae:	ee 24       	eor	r14, r14
     6b0:	ff 24       	eor	r15, r15
     6b2:	87 01       	movw	r16, r14
     6b4:	c7 cf       	rjmp	.-114    	; 0x644 <sim900_send_cmd_wait_reply+0x9e>
		}

		//check for timeout
		if (uart_tout_cnt >= aTimeoutMax)
		{
			respons = 0;
     6b6:	10 e0       	ldi	r17, 0x00	; 0
     6b8:	05 c0       	rjmp	.+10     	; 0x6c4 <sim900_send_cmd_wait_reply+0x11e>
			// check if the desired answer  is in the response of the module
			if (aResponExit != NULL)
			{
				if (strstr((const char*)aDataBuffer, (const char*)aResponExit) != NULL)
				{
					respons = 1;
     6ba:	11 e0       	ldi	r17, 0x01	; 1
     6bc:	03 c0       	rjmp	.+6      	; 0x6c4 <sim900_send_cmd_wait_reply+0x11e>
			}

			//check error also
			if (strstr((const char*)aDataBuffer, (const char*)RESPON_ERROR) != NULL)
			{
				respons = 0;
     6be:	10 e0       	ldi	r17, 0x00	; 0
     6c0:	01 c0       	rjmp	.+2      	; 0x6c4 <sim900_send_cmd_wait_reply+0x11e>
*aResponExit, const uint32_t aTimeoutMax, const uint8_t aLenOut, uint8_t
*aResponOut)
{
	#define MAX_BUFFER_TMP	64

	uint8_t id_data, respons = 0;
     6c2:	10 e0       	ldi	r17, 0x00	; 0
			}
		}
	}

	//copy it to the out
	if ((aLenOut != 0) && (aResponOut != NULL) && (aLenOut > id_data) && (respons)
     6c4:	e9 81       	ldd	r30, Y+1	; 0x01
     6c6:	ee 23       	and	r30, r30
     6c8:	89 f0       	breq	.+34     	; 0x6ec <sim900_send_cmd_wait_reply+0x146>
     6ca:	ea 80       	ldd	r14, Y+2	; 0x02
     6cc:	fb 80       	ldd	r15, Y+3	; 0x03
     6ce:	e1 14       	cp	r14, r1
     6d0:	f1 04       	cpc	r15, r1
     6d2:	61 f0       	breq	.+24     	; 0x6ec <sim900_send_cmd_wait_reply+0x146>
     6d4:	de 16       	cp	r13, r30
     6d6:	50 f4       	brcc	.+20     	; 0x6ec <sim900_send_cmd_wait_reply+0x146>
     6d8:	11 23       	and	r17, r17
     6da:	41 f0       	breq	.+16     	; 0x6ec <sim900_send_cmd_wait_reply+0x146>
	)
	{
		memcpy(aResponOut, aDataBuffer, id_data *sizeof(uint8_t));
     6dc:	8a 81       	ldd	r24, Y+2	; 0x02
     6de:	9b 81       	ldd	r25, Y+3	; 0x03
     6e0:	6c 81       	ldd	r22, Y+4	; 0x04
     6e2:	7d 81       	ldd	r23, Y+5	; 0x05
     6e4:	4d 2d       	mov	r20, r13
     6e6:	50 e0       	ldi	r21, 0x00	; 0
     6e8:	0e 94 45 0c 	call	0x188a	; 0x188a <memcpy>
	}
	
	//free the buffer
	free(aDataBuffer);
     6ec:	8c 81       	ldd	r24, Y+4	; 0x04
     6ee:	9d 81       	ldd	r25, Y+5	; 0x05
     6f0:	0e 94 81 0b 	call	0x1702	; 0x1702 <free>

	//return it
	return respons;
     6f4:	01 c0       	rjmp	.+2      	; 0x6f8 <sim900_send_cmd_wait_reply+0x152>
	uint8_t *aDataBuffer = (uint8_t*) calloc(MAX_BUFFER_TMP,sizeof(uint8_t));
	
	//buffer created???
	if (aDataBuffer == NULL)
	{
		return 0;
     6f6:	10 e0       	ldi	r17, 0x00	; 0
	//free the buffer
	free(aDataBuffer);

	//return it
	return respons;
}
     6f8:	81 2f       	mov	r24, r17
     6fa:	0f 90       	pop	r0
     6fc:	0f 90       	pop	r0
     6fe:	0f 90       	pop	r0
     700:	0f 90       	pop	r0
     702:	0f 90       	pop	r0
     704:	cf 91       	pop	r28
     706:	df 91       	pop	r29
     708:	1f 91       	pop	r17
     70a:	0f 91       	pop	r16
     70c:	ff 90       	pop	r15
     70e:	ef 90       	pop	r14
     710:	df 90       	pop	r13
     712:	cf 90       	pop	r12
     714:	bf 90       	pop	r11
     716:	af 90       	pop	r10
     718:	9f 90       	pop	r9
     71a:	8f 90       	pop	r8
     71c:	7f 90       	pop	r7
     71e:	6f 90       	pop	r6
     720:	5f 90       	pop	r5
     722:	4f 90       	pop	r4
     724:	3f 90       	pop	r3
     726:	2f 90       	pop	r2
     728:	08 95       	ret

0000072a <sim900_is_network_registered>:

uint8_t sim900_is_network_registered()
{
     72a:	cf 92       	push	r12
     72c:	df 92       	push	r13
     72e:	ef 92       	push	r14
     730:	0f 93       	push	r16
     732:	1f 93       	push	r17
	return (sim900_send_cmd_wait_reply(1,(const uint8_t*)PSTR("AT+CREG?\r"), (const
     734:	81 e0       	ldi	r24, 0x01	; 1
     736:	62 e8       	ldi	r22, 0x82	; 130
     738:	71 e0       	ldi	r23, 0x01	; 1
     73a:	4a e3       	ldi	r20, 0x3A	; 58
     73c:	51 e0       	ldi	r21, 0x01	; 1
     73e:	00 e4       	ldi	r16, 0x40	; 64
     740:	1b e4       	ldi	r17, 0x4B	; 75
     742:	2c e4       	ldi	r18, 0x4C	; 76
     744:	30 e0       	ldi	r19, 0x00	; 0
     746:	ee 24       	eor	r14, r14
     748:	cc 24       	eor	r12, r12
     74a:	dd 24       	eor	r13, r13
     74c:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <sim900_send_cmd_wait_reply>
     750:	88 23       	and	r24, r24
     752:	91 f4       	brne	.+36     	; 0x778 <sim900_is_network_registered+0x4e>
	uint8_t*)"+CREG: 0,1", 5000000, 0, NULL) || sim900_send_cmd_wait_reply(1,
     754:	81 e0       	ldi	r24, 0x01	; 1
     756:	68 e7       	ldi	r22, 0x78	; 120
     758:	71 e0       	ldi	r23, 0x01	; 1
     75a:	45 e4       	ldi	r20, 0x45	; 69
     75c:	51 e0       	ldi	r21, 0x01	; 1
     75e:	00 e4       	ldi	r16, 0x40	; 64
     760:	1b e4       	ldi	r17, 0x4B	; 75
     762:	2c e4       	ldi	r18, 0x4C	; 76
     764:	30 e0       	ldi	r19, 0x00	; 0
     766:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <sim900_send_cmd_wait_reply>
	return respons;
}

uint8_t sim900_is_network_registered()
{
	return (sim900_send_cmd_wait_reply(1,(const uint8_t*)PSTR("AT+CREG?\r"), (const
     76a:	21 e0       	ldi	r18, 0x01	; 1
     76c:	30 e0       	ldi	r19, 0x00	; 0
     76e:	88 23       	and	r24, r24
     770:	29 f4       	brne	.+10     	; 0x77c <sim900_is_network_registered+0x52>
     772:	20 e0       	ldi	r18, 0x00	; 0
     774:	30 e0       	ldi	r19, 0x00	; 0
     776:	02 c0       	rjmp	.+4      	; 0x77c <sim900_is_network_registered+0x52>
     778:	21 e0       	ldi	r18, 0x01	; 1
     77a:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t*)"+CREG: 0,1", 5000000, 0, NULL) || sim900_send_cmd_wait_reply(1,
	(const uint8_t*)PSTR("AT+CREG?\r"), (const uint8_t*)"+CREG: 0,5", 5000000, 0,
	NULL));
}
     77c:	82 2f       	mov	r24, r18
     77e:	1f 91       	pop	r17
     780:	0f 91       	pop	r16
     782:	ef 90       	pop	r14
     784:	df 90       	pop	r13
     786:	cf 90       	pop	r12
     788:	08 95       	ret

0000078a <sim900_setup>:

uint8_t sim900_setup(const uint8_t isWaitingDevice)
{
     78a:	af 92       	push	r10
     78c:	bf 92       	push	r11
     78e:	cf 92       	push	r12
     790:	df 92       	push	r13
     792:	ef 92       	push	r14
     794:	0f 93       	push	r16
     796:	1f 93       	push	r17
     798:	cf 93       	push	r28
     79a:	df 93       	push	r29
	uint8_t respons = 0;

	//wait modem wake up
	if (isWaitingDevice)
     79c:	88 23       	and	r24, r24
     79e:	b9 f0       	breq	.+46     	; 0x7ce <sim900_setup+0x44>
	{
		while (!(respons = sim900_send_cmd_wait_reply(1,(const uint8_t*)PSTR("AT\r"),
     7a0:	c4 e7       	ldi	r28, 0x74	; 116
     7a2:	d1 e0       	ldi	r29, 0x01	; 1
     7a4:	0f 2e       	mov	r0, r31
     7a6:	f0 e5       	ldi	r31, 0x50	; 80
     7a8:	af 2e       	mov	r10, r31
     7aa:	f1 e0       	ldi	r31, 0x01	; 1
     7ac:	bf 2e       	mov	r11, r31
     7ae:	f0 2d       	mov	r31, r0
     7b0:	81 e0       	ldi	r24, 0x01	; 1
     7b2:	be 01       	movw	r22, r28
     7b4:	a5 01       	movw	r20, r10
     7b6:	00 e2       	ldi	r16, 0x20	; 32
     7b8:	11 ea       	ldi	r17, 0xA1	; 161
     7ba:	27 e0       	ldi	r18, 0x07	; 7
     7bc:	30 e0       	ldi	r19, 0x00	; 0
     7be:	ee 24       	eor	r14, r14
     7c0:	cc 24       	eor	r12, r12
     7c2:	dd 24       	eor	r13, r13
     7c4:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <sim900_send_cmd_wait_reply>
     7c8:	88 23       	and	r24, r24
     7ca:	91 f3       	breq	.-28     	; 0x7b0 <sim900_setup+0x26>
     7cc:	10 c0       	rjmp	.+32     	; 0x7ee <sim900_setup+0x64>
		(const uint8_t*)RESPON_OK, 500000, 0, NULL)))
		;
	}
	else
	{
		respons = sim900_send_cmd_wait_reply(1,(const uint8_t*)PSTR("AT\r"), (const
     7ce:	81 e0       	ldi	r24, 0x01	; 1
     7d0:	60 e7       	ldi	r22, 0x70	; 112
     7d2:	71 e0       	ldi	r23, 0x01	; 1
     7d4:	40 e5       	ldi	r20, 0x50	; 80
     7d6:	51 e0       	ldi	r21, 0x01	; 1
     7d8:	00 e2       	ldi	r16, 0x20	; 32
     7da:	11 ea       	ldi	r17, 0xA1	; 161
     7dc:	27 e0       	ldi	r18, 0x07	; 7
     7de:	30 e0       	ldi	r19, 0x00	; 0
     7e0:	ee 24       	eor	r14, r14
     7e2:	cc 24       	eor	r12, r12
     7e4:	dd 24       	eor	r13, r13
     7e6:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <sim900_send_cmd_wait_reply>
		uint8_t*)RESPON_OK, 500000, 0, NULL);
	}

	//modem is up?
	if (respons)
     7ea:	88 23       	and	r24, r24
     7ec:	41 f1       	breq	.+80     	; 0x83e <sim900_setup+0xb4>
		//no cmd echo
		//if ((respons = sim900_send_cmd_wait_reply(1,(const uint8_t*)PSTR("ATE0\r"), (const
		//uint8_t*)RESPON_OK, 500000, 0, NULL)))
		//{
			//text mode
			if ((respons = sim900_send_cmd_wait_reply(1,(const uint8_t*)PSTR("AT+CMGF=1\r"),
     7ee:	81 e0       	ldi	r24, 0x01	; 1
     7f0:	65 e6       	ldi	r22, 0x65	; 101
     7f2:	71 e0       	ldi	r23, 0x01	; 1
     7f4:	40 e5       	ldi	r20, 0x50	; 80
     7f6:	51 e0       	ldi	r21, 0x01	; 1
     7f8:	00 e2       	ldi	r16, 0x20	; 32
     7fa:	11 ea       	ldi	r17, 0xA1	; 161
     7fc:	27 e0       	ldi	r18, 0x07	; 7
     7fe:	30 e0       	ldi	r19, 0x00	; 0
     800:	ee 24       	eor	r14, r14
     802:	cc 24       	eor	r12, r12
     804:	dd 24       	eor	r13, r13
     806:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <sim900_send_cmd_wait_reply>
     80a:	88 23       	and	r24, r24
     80c:	c1 f0       	breq	.+48     	; 0x83e <sim900_setup+0xb4>
			(const uint8_t*)RESPON_OK, 500000, 0, NULL)))
			{
				//storage all to Sim card
				if ((respons = sim900_send_cmd_wait_reply(1,(const uint8_t*)
     80e:	81 e0       	ldi	r24, 0x01	; 1
     810:	6d e4       	ldi	r22, 0x4D	; 77
     812:	71 e0       	ldi	r23, 0x01	; 1
     814:	40 e5       	ldi	r20, 0x50	; 80
     816:	51 e0       	ldi	r21, 0x01	; 1
     818:	00 e2       	ldi	r16, 0x20	; 32
     81a:	11 ea       	ldi	r17, 0xA1	; 161
     81c:	27 e0       	ldi	r18, 0x07	; 7
     81e:	30 e0       	ldi	r19, 0x00	; 0
     820:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <sim900_send_cmd_wait_reply>
     824:	88 23       	and	r24, r24
     826:	59 f0       	breq	.+22     	; 0x83e <sim900_setup+0xb4>
				PSTR("AT+CPMS=\"SM\",\"SM\",\"SM\"\r"), (const uint8_t*)RESPON_OK, 500000,
				0, NULL)))
				{
					//clip=1
					if ((respons = sim900_send_cmd_wait_reply(1,(const uint8_t*)
     828:	81 e0       	ldi	r24, 0x01	; 1
     82a:	62 e4       	ldi	r22, 0x42	; 66
     82c:	71 e0       	ldi	r23, 0x01	; 1
     82e:	40 e5       	ldi	r20, 0x50	; 80
     830:	51 e0       	ldi	r21, 0x01	; 1
     832:	00 e2       	ldi	r16, 0x20	; 32
     834:	11 ea       	ldi	r17, 0xA1	; 161
     836:	27 e0       	ldi	r18, 0x07	; 7
     838:	30 e0       	ldi	r19, 0x00	; 0
     83a:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <sim900_send_cmd_wait_reply>
	}
}

//return it
return respons;
}
     83e:	df 91       	pop	r29
     840:	cf 91       	pop	r28
     842:	1f 91       	pop	r17
     844:	0f 91       	pop	r16
     846:	ef 90       	pop	r14
     848:	df 90       	pop	r13
     84a:	cf 90       	pop	r12
     84c:	bf 90       	pop	r11
     84e:	af 90       	pop	r10
     850:	08 95       	ret

00000852 <sim900_send_sms>:

//send sms
uint8_t sim900_send_sms(const uint8_t *aSenderNumber, const uint8_t *aMessage)
{
     852:	af 92       	push	r10
     854:	bf 92       	push	r11
     856:	cf 92       	push	r12
     858:	df 92       	push	r13
     85a:	ef 92       	push	r14
     85c:	ff 92       	push	r15
     85e:	0f 93       	push	r16
     860:	1f 93       	push	r17
     862:	cf 93       	push	r28
     864:	df 93       	push	r29
     866:	7c 01       	movw	r14, r24
     868:	b6 2e       	mov	r11, r22
     86a:	a7 2e       	mov	r10, r23
	const uint8_t MAX_BUFFER = 32;
	uint8_t respon = 0/*, cmdx[MAX_BUFFER]*/;
	uint8_t *cmdx = (uint8_t*) calloc(MAX_BUFFER,sizeof(uint8_t));
     86c:	80 e2       	ldi	r24, 0x20	; 32
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	61 e0       	ldi	r22, 0x01	; 1
     872:	70 e0       	ldi	r23, 0x00	; 0
     874:	0e 94 c2 0a 	call	0x1584	; 0x1584 <calloc>
     878:	08 2f       	mov	r16, r24
     87a:	19 2f       	mov	r17, r25
     87c:	c8 2e       	mov	r12, r24
     87e:	e6 01       	movw	r28, r12
     880:	6e 01       	movw	r12, r28
     882:	d9 2e       	mov	r13, r25
     884:	e6 01       	movw	r28, r12
	
	//buffer created???
	if (cmdx == NULL)
     886:	20 97       	sbiw	r28, 0x00	; 0
     888:	09 f4       	brne	.+2      	; 0x88c <sim900_send_sms+0x3a>
     88a:	5c c0       	rjmp	.+184    	; 0x944 <sim900_send_sms+0xf2>
	{
		return 0;
	}

	//build the string
	memset(cmdx, '\0', MAX_BUFFER);
     88c:	e0 2f       	mov	r30, r16
     88e:	f9 2f       	mov	r31, r25
     890:	80 e2       	ldi	r24, 0x20	; 32
     892:	df 01       	movw	r26, r30
     894:	1d 92       	st	X+, r1
     896:	8a 95       	dec	r24
     898:	e9 f7       	brne	.-6      	; 0x894 <sim900_send_sms+0x42>
	snprintf((char*)cmdx, MAX_BUFFER, "AT+CMGS=\"%s\"\r", aSenderNumber);
     89a:	8d b7       	in	r24, 0x3d	; 61
     89c:	9e b7       	in	r25, 0x3e	; 62
     89e:	08 97       	sbiw	r24, 0x08	; 8
     8a0:	0f b6       	in	r0, 0x3f	; 63
     8a2:	f8 94       	cli
     8a4:	9e bf       	out	0x3e, r25	; 62
     8a6:	0f be       	out	0x3f, r0	; 63
     8a8:	8d bf       	out	0x3d, r24	; 61
     8aa:	ed b7       	in	r30, 0x3d	; 61
     8ac:	fe b7       	in	r31, 0x3e	; 62
     8ae:	31 96       	adiw	r30, 0x01	; 1
     8b0:	ad b7       	in	r26, 0x3d	; 61
     8b2:	be b7       	in	r27, 0x3e	; 62
     8b4:	11 96       	adiw	r26, 0x01	; 1
     8b6:	0c 93       	st	X, r16
     8b8:	11 97       	sbiw	r26, 0x01	; 1
     8ba:	12 96       	adiw	r26, 0x02	; 2
     8bc:	1c 93       	st	X, r17
     8be:	80 e2       	ldi	r24, 0x20	; 32
     8c0:	90 e0       	ldi	r25, 0x00	; 0
     8c2:	93 83       	std	Z+3, r25	; 0x03
     8c4:	82 83       	std	Z+2, r24	; 0x02
     8c6:	83 e5       	ldi	r24, 0x53	; 83
     8c8:	91 e0       	ldi	r25, 0x01	; 1
     8ca:	95 83       	std	Z+5, r25	; 0x05
     8cc:	84 83       	std	Z+4, r24	; 0x04
     8ce:	f7 82       	std	Z+7, r15	; 0x07
     8d0:	e6 82       	std	Z+6, r14	; 0x06
     8d2:	0e 94 77 0c 	call	0x18ee	; 0x18ee <snprintf>

	if ((respon = sim900_send_cmd_wait_reply(0,(const uint8_t*)cmdx, (const
     8d6:	8d b7       	in	r24, 0x3d	; 61
     8d8:	9e b7       	in	r25, 0x3e	; 62
     8da:	08 96       	adiw	r24, 0x08	; 8
     8dc:	0f b6       	in	r0, 0x3f	; 63
     8de:	f8 94       	cli
     8e0:	9e bf       	out	0x3e, r25	; 62
     8e2:	0f be       	out	0x3f, r0	; 63
     8e4:	8d bf       	out	0x3d, r24	; 61
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	60 2f       	mov	r22, r16
     8ea:	71 2f       	mov	r23, r17
     8ec:	41 e6       	ldi	r20, 0x61	; 97
     8ee:	51 e0       	ldi	r21, 0x01	; 1
     8f0:	00 e8       	ldi	r16, 0x80	; 128
     8f2:	14 e8       	ldi	r17, 0x84	; 132
     8f4:	2e e1       	ldi	r18, 0x1E	; 30
     8f6:	30 e0       	ldi	r19, 0x00	; 0
     8f8:	ee 24       	eor	r14, r14
     8fa:	cc 24       	eor	r12, r12
     8fc:	dd 24       	eor	r13, r13
     8fe:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <sim900_send_cmd_wait_reply>
     902:	18 2f       	mov	r17, r24
     904:	88 23       	and	r24, r24
     906:	d1 f0       	breq	.+52     	; 0x93c <sim900_send_sms+0xea>
	uint8_t*)">", 2000000, 0, NULL)))
	{
		//only copy MAX_BUFFER-2 char max from msg
		memcpy(&cmdx[0], aMessage, MAX_BUFFER - 2);
     908:	de 01       	movw	r26, r28
     90a:	8b 2d       	mov	r24, r11
     90c:	9a 2d       	mov	r25, r10
     90e:	fc 01       	movw	r30, r24
     910:	8e e1       	ldi	r24, 0x1E	; 30
     912:	01 90       	ld	r0, Z+
     914:	0d 92       	st	X+, r0
     916:	81 50       	subi	r24, 0x01	; 1
     918:	e1 f7       	brne	.-8      	; 0x912 <sim900_send_sms+0xc0>
		cmdx[MAX_BUFFER - 2] = 0x1a;
     91a:	8a e1       	ldi	r24, 0x1A	; 26
     91c:	8e 8f       	std	Y+30, r24	; 0x1e
		cmdx[MAX_BUFFER - 1] = 0x00;
     91e:	1f 8e       	std	Y+31, r1	; 0x1f

		if ((respon = sim900_send_cmd_wait_reply(0,(const uint8_t*)cmdx, (const
     920:	80 e0       	ldi	r24, 0x00	; 0
     922:	be 01       	movw	r22, r28
     924:	40 e5       	ldi	r20, 0x50	; 80
     926:	51 e0       	ldi	r21, 0x01	; 1
     928:	00 e8       	ldi	r16, 0x80	; 128
     92a:	16 e9       	ldi	r17, 0x96	; 150
     92c:	28 e9       	ldi	r18, 0x98	; 152
     92e:	30 e0       	ldi	r19, 0x00	; 0
     930:	ee 24       	eor	r14, r14
     932:	cc 24       	eor	r12, r12
     934:	dd 24       	eor	r13, r13
     936:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <sim900_send_cmd_wait_reply>
     93a:	18 2f       	mov	r17, r24
	uint8_t*)RESPON_OK, 10000000, 0, NULL))){}
}

//free buffer
free(cmdx);
     93c:	ce 01       	movw	r24, r28
     93e:	0e 94 81 0b 	call	0x1702	; 0x1702 <free>

return respon;
     942:	01 c0       	rjmp	.+2      	; 0x946 <sim900_send_sms+0xf4>
	uint8_t *cmdx = (uint8_t*) calloc(MAX_BUFFER,sizeof(uint8_t));
	
	//buffer created???
	if (cmdx == NULL)
	{
		return 0;
     944:	10 e0       	ldi	r17, 0x00	; 0

//free buffer
free(cmdx);

return respon;
}
     946:	81 2f       	mov	r24, r17
     948:	df 91       	pop	r29
     94a:	cf 91       	pop	r28
     94c:	1f 91       	pop	r17
     94e:	0f 91       	pop	r16
     950:	ff 90       	pop	r15
     952:	ef 90       	pop	r14
     954:	df 90       	pop	r13
     956:	cf 90       	pop	r12
     958:	bf 90       	pop	r11
     95a:	af 90       	pop	r10
     95c:	08 95       	ret

0000095e <sim900_call_phone>:

//calling a phone
uint8_t sim900_call_phone(const uint8_t *aSenderNumber)
{
     95e:	cf 92       	push	r12
     960:	df 92       	push	r13
     962:	ef 92       	push	r14
     964:	ff 92       	push	r15
     966:	0f 93       	push	r16
     968:	1f 93       	push	r17
     96a:	cf 93       	push	r28
     96c:	df 93       	push	r29
     96e:	8c 01       	movw	r16, r24
	const uint8_t MAX_BUFFER = 30;
	uint8_t respon = 0/*, cmdx[MAX_BUFFER]*/;
	uint8_t *cmdx = (uint8_t*) calloc(MAX_BUFFER,sizeof(uint8_t));
     970:	8e e1       	ldi	r24, 0x1E	; 30
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	61 e0       	ldi	r22, 0x01	; 1
     976:	70 e0       	ldi	r23, 0x00	; 0
     978:	0e 94 c2 0a 	call	0x1584	; 0x1584 <calloc>
     97c:	e8 2e       	mov	r14, r24
     97e:	e7 01       	movw	r28, r14
     980:	7e 01       	movw	r14, r28
     982:	f9 2e       	mov	r15, r25
     984:	e7 01       	movw	r28, r14
	
	//buffer created?
	if (cmdx == NULL)
     986:	20 97       	sbiw	r28, 0x00	; 0
     988:	09 f4       	brne	.+2      	; 0x98c <sim900_call_phone+0x2e>
     98a:	40 c0       	rjmp	.+128    	; 0xa0c <sim900_call_phone+0xae>
	{
		return 0;
	}

	//init string
	memset(cmdx, '\0', MAX_BUFFER);
     98c:	ee 2d       	mov	r30, r14
     98e:	f9 2f       	mov	r31, r25
     990:	8e e1       	ldi	r24, 0x1E	; 30
     992:	df 01       	movw	r26, r30
     994:	1d 92       	st	X+, r1
     996:	8a 95       	dec	r24
     998:	e9 f7       	brne	.-6      	; 0x994 <sim900_call_phone+0x36>
	snprintf((char*)cmdx, MAX_BUFFER, "ATD%s;\r", aSenderNumber);
     99a:	2d b7       	in	r18, 0x3d	; 61
     99c:	3e b7       	in	r19, 0x3e	; 62
     99e:	28 50       	subi	r18, 0x08	; 8
     9a0:	30 40       	sbci	r19, 0x00	; 0
     9a2:	0f b6       	in	r0, 0x3f	; 63
     9a4:	f8 94       	cli
     9a6:	3e bf       	out	0x3e, r19	; 62
     9a8:	0f be       	out	0x3f, r0	; 63
     9aa:	2d bf       	out	0x3d, r18	; 61
     9ac:	ed b7       	in	r30, 0x3d	; 61
     9ae:	fe b7       	in	r31, 0x3e	; 62
     9b0:	31 96       	adiw	r30, 0x01	; 1
     9b2:	ad b7       	in	r26, 0x3d	; 61
     9b4:	be b7       	in	r27, 0x3e	; 62
     9b6:	12 96       	adiw	r26, 0x02	; 2
     9b8:	fc 92       	st	X, r15
     9ba:	ee 92       	st	-X, r14
     9bc:	11 97       	sbiw	r26, 0x01	; 1
     9be:	8e e1       	ldi	r24, 0x1E	; 30
     9c0:	90 e0       	ldi	r25, 0x00	; 0
     9c2:	93 83       	std	Z+3, r25	; 0x03
     9c4:	82 83       	std	Z+2, r24	; 0x02
     9c6:	83 e6       	ldi	r24, 0x63	; 99
     9c8:	91 e0       	ldi	r25, 0x01	; 1
     9ca:	95 83       	std	Z+5, r25	; 0x05
     9cc:	84 83       	std	Z+4, r24	; 0x04
     9ce:	17 83       	std	Z+7, r17	; 0x07
     9d0:	06 83       	std	Z+6, r16	; 0x06
     9d2:	0e 94 77 0c 	call	0x18ee	; 0x18ee <snprintf>
	respon = sim900_send_cmd_wait_reply(0,(const uint8_t*)cmdx, (const uint8_t*)
     9d6:	2d b7       	in	r18, 0x3d	; 61
     9d8:	3e b7       	in	r19, 0x3e	; 62
     9da:	28 5f       	subi	r18, 0xF8	; 248
     9dc:	3f 4f       	sbci	r19, 0xFF	; 255
     9de:	0f b6       	in	r0, 0x3f	; 63
     9e0:	f8 94       	cli
     9e2:	3e bf       	out	0x3e, r19	; 62
     9e4:	0f be       	out	0x3f, r0	; 63
     9e6:	2d bf       	out	0x3d, r18	; 61
     9e8:	80 e0       	ldi	r24, 0x00	; 0
     9ea:	b7 01       	movw	r22, r14
     9ec:	40 e5       	ldi	r20, 0x50	; 80
     9ee:	51 e0       	ldi	r21, 0x01	; 1
     9f0:	00 e8       	ldi	r16, 0x80	; 128
     9f2:	16 e9       	ldi	r17, 0x96	; 150
     9f4:	28 e9       	ldi	r18, 0x98	; 152
     9f6:	30 e0       	ldi	r19, 0x00	; 0
     9f8:	ee 24       	eor	r14, r14
     9fa:	cc 24       	eor	r12, r12
     9fc:	dd 24       	eor	r13, r13
     9fe:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <sim900_send_cmd_wait_reply>
     a02:	08 2f       	mov	r16, r24
	RESPON_OK, 10000000, 0, NULL);
	
	//free buffer
	free(cmdx);
     a04:	ce 01       	movw	r24, r28
     a06:	0e 94 81 0b 	call	0x1702	; 0x1702 <free>
	
	return respon;
     a0a:	01 c0       	rjmp	.+2      	; 0xa0e <sim900_call_phone+0xb0>
	uint8_t *cmdx = (uint8_t*) calloc(MAX_BUFFER,sizeof(uint8_t));
	
	//buffer created?
	if (cmdx == NULL)
	{
		return 0;
     a0c:	00 e0       	ldi	r16, 0x00	; 0
	
	//free buffer
	free(cmdx);
	
	return respon;
}
     a0e:	80 2f       	mov	r24, r16
     a10:	df 91       	pop	r29
     a12:	cf 91       	pop	r28
     a14:	1f 91       	pop	r17
     a16:	0f 91       	pop	r16
     a18:	ff 90       	pop	r15
     a1a:	ef 90       	pop	r14
     a1c:	df 90       	pop	r13
     a1e:	cf 90       	pop	r12
     a20:	08 95       	ret

00000a22 <sim900_gprs_is_opened>:

//cek gprs status
uint8_t sim900_gprs_is_opened()
{
     a22:	cf 92       	push	r12
     a24:	df 92       	push	r13
     a26:	ef 92       	push	r14
     a28:	0f 93       	push	r16
     a2a:	1f 93       	push	r17
  uint8_t respon = sim900_send_cmd_wait_reply(1,(const uint8_t*)PSTR("AT+SAPBR=2,1\r"),
     a2c:	81 e0       	ldi	r24, 0x01	; 1
     a2e:	64 e3       	ldi	r22, 0x34	; 52
     a30:	71 e0       	ldi	r23, 0x01	; 1
     a32:	4b e6       	ldi	r20, 0x6B	; 107
     a34:	51 e0       	ldi	r21, 0x01	; 1
     a36:	00 e2       	ldi	r16, 0x20	; 32
     a38:	11 ea       	ldi	r17, 0xA1	; 161
     a3a:	27 e0       	ldi	r18, 0x07	; 7
     a3c:	30 e0       	ldi	r19, 0x00	; 0
     a3e:	ee 24       	eor	r14, r14
     a40:	cc 24       	eor	r12, r12
     a42:	dd 24       	eor	r13, r13
     a44:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <sim900_send_cmd_wait_reply>
    (const uint8_t*)"1,1", 500000, 0, NULL);
  return respon;
}
     a48:	1f 91       	pop	r17
     a4a:	0f 91       	pop	r16
     a4c:	ef 90       	pop	r14
     a4e:	df 90       	pop	r13
     a50:	cf 90       	pop	r12
     a52:	08 95       	ret

00000a54 <sim900_gprs_close_connection>:

//close gprs conn
uint8_t sim900_gprs_close_connection()
{
     a54:	cf 92       	push	r12
     a56:	df 92       	push	r13
     a58:	ef 92       	push	r14
     a5a:	0f 93       	push	r16
     a5c:	1f 93       	push	r17
  //uint8_t respon = (sim900_gprs_is_opened() ? sim900_send_cmd_wait_reply((const
    //uint8_t*)"AT+SAPBR=0,1\r", (const uint8_t*)RESPON_OK, 5000000, 0, NULL): 1);
 uint8_t respon = (sim900_gprs_is_opened() ? sim900_send_cmd_wait_reply(1,(const
     a5e:	0e 94 11 05 	call	0xa22	; 0xa22 <sim900_gprs_is_opened>
     a62:	88 23       	and	r24, r24
     a64:	79 f0       	breq	.+30     	; 0xa84 <sim900_gprs_close_connection+0x30>
     a66:	81 e0       	ldi	r24, 0x01	; 1
     a68:	66 e2       	ldi	r22, 0x26	; 38
     a6a:	71 e0       	ldi	r23, 0x01	; 1
     a6c:	40 e5       	ldi	r20, 0x50	; 80
     a6e:	51 e0       	ldi	r21, 0x01	; 1
     a70:	00 e4       	ldi	r16, 0x40	; 64
     a72:	1b e4       	ldi	r17, 0x4B	; 75
     a74:	2c e4       	ldi	r18, 0x4C	; 76
     a76:	30 e0       	ldi	r19, 0x00	; 0
     a78:	ee 24       	eor	r14, r14
     a7a:	cc 24       	eor	r12, r12
     a7c:	dd 24       	eor	r13, r13
     a7e:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <sim900_send_cmd_wait_reply>
     a82:	01 c0       	rjmp	.+2      	; 0xa86 <sim900_gprs_close_connection+0x32>
     a84:	81 e0       	ldi	r24, 0x01	; 1
 uint8_t*)PSTR("AT+SAPBR=0,1\r"), (const uint8_t*)RESPON_OK, 5000000, 0, NULL): 1);
  return respon;
}
     a86:	1f 91       	pop	r17
     a88:	0f 91       	pop	r16
     a8a:	ef 90       	pop	r14
     a8c:	df 90       	pop	r13
     a8e:	cf 90       	pop	r12
     a90:	08 95       	ret

00000a92 <sim900_gprs_start_connection>:

//open gprs conn
uint8_t sim900_gprs_start_connection()
{
     a92:	cf 92       	push	r12
     a94:	df 92       	push	r13
     a96:	ef 92       	push	r14
     a98:	0f 93       	push	r16
     a9a:	1f 93       	push	r17
  uint8_t respon = sim900_send_cmd_wait_reply(1,(const uint8_t*)PSTR("AT+SAPBR=1,1\r"),
     a9c:	81 e0       	ldi	r24, 0x01	; 1
     a9e:	68 e1       	ldi	r22, 0x18	; 24
     aa0:	71 e0       	ldi	r23, 0x01	; 1
     aa2:	40 e5       	ldi	r20, 0x50	; 80
     aa4:	51 e0       	ldi	r21, 0x01	; 1
     aa6:	00 e0       	ldi	r16, 0x00	; 0
     aa8:	11 ee       	ldi	r17, 0xE1	; 225
     aaa:	25 ef       	ldi	r18, 0xF5	; 245
     aac:	35 e0       	ldi	r19, 0x05	; 5
     aae:	ee 24       	eor	r14, r14
     ab0:	cc 24       	eor	r12, r12
     ab2:	dd 24       	eor	r13, r13
     ab4:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <sim900_send_cmd_wait_reply>
    (const uint8_t*)RESPON_OK, 100000000, 0, NULL);
  return respon;
}
     ab8:	1f 91       	pop	r17
     aba:	0f 91       	pop	r16
     abc:	ef 90       	pop	r14
     abe:	df 90       	pop	r13
     ac0:	cf 90       	pop	r12
     ac2:	08 95       	ret

00000ac4 <sim900_gprs_open_connection>:

//open gprs session
uint8_t sim900_gprs_open_connection(const uint8_t *apn, const uint8_t *username,
  const uint8_t *password)
{
     ac4:	6f 92       	push	r6
     ac6:	7f 92       	push	r7
     ac8:	8f 92       	push	r8
     aca:	9f 92       	push	r9
     acc:	af 92       	push	r10
     ace:	bf 92       	push	r11
     ad0:	cf 92       	push	r12
     ad2:	df 92       	push	r13
     ad4:	ef 92       	push	r14
     ad6:	ff 92       	push	r15
     ad8:	0f 93       	push	r16
     ada:	1f 93       	push	r17
     adc:	cf 93       	push	r28
     ade:	df 93       	push	r29
     ae0:	5c 01       	movw	r10, r24
     ae2:	4b 01       	movw	r8, r22
     ae4:	3a 01       	movw	r6, r20
  #define CMD_SAPBR_NEW	"AT+SAPBR=3,1,"

  const uint8_t MAX_BUFFER_NUM = 35;
  //uint8_t cmdx[MAX_BUFFER_NUM];
  uint8_t *cmdx = (uint8_t*) calloc(MAX_BUFFER_NUM,sizeof(uint8_t));
     ae6:	83 e2       	ldi	r24, 0x23	; 35
     ae8:	90 e0       	ldi	r25, 0x00	; 0
     aea:	61 e0       	ldi	r22, 0x01	; 1
     aec:	70 e0       	ldi	r23, 0x00	; 0
     aee:	0e 94 c2 0a 	call	0x1584	; 0x1584 <calloc>
     af2:	38 2f       	mov	r19, r24
     af4:	e8 2e       	mov	r14, r24
     af6:	e7 01       	movw	r28, r14
     af8:	7e 01       	movw	r14, r28
     afa:	f9 2e       	mov	r15, r25
     afc:	e7 01       	movw	r28, r14
  
  //buffer created??
  if (cmdx == NULL)
     afe:	20 97       	sbiw	r28, 0x00	; 0
     b00:	09 f4       	brne	.+2      	; 0xb04 <sim900_gprs_open_connection+0x40>
     b02:	13 c1       	rjmp	.+550    	; 0xd2a <sim900_gprs_open_connection+0x266>
  {
	  return 0;
  }

  //setup string
  memset(cmdx, '\0', MAX_BUFFER_NUM);
     b04:	e3 2f       	mov	r30, r19
     b06:	f9 2f       	mov	r31, r25
     b08:	83 e2       	ldi	r24, 0x23	; 35
     b0a:	df 01       	movw	r26, r30
     b0c:	1d 92       	st	X+, r1
     b0e:	8a 95       	dec	r24
     b10:	e9 f7       	brne	.-6      	; 0xb0c <sim900_gprs_open_connection+0x48>

  //registered to network?
  if (!sim900_is_network_registered())
     b12:	0e 94 95 03 	call	0x72a	; 0x72a <sim900_is_network_registered>
     b16:	88 23       	and	r24, r24
     b18:	29 f4       	brne	.+10     	; 0xb24 <sim900_gprs_open_connection+0x60>
  {
	  free(cmdx);
     b1a:	c7 01       	movw	r24, r14
     b1c:	0e 94 81 0b 	call	0x1702	; 0x1702 <free>
    return 0;
     b20:	80 e0       	ldi	r24, 0x00	; 0
     b22:	04 c1       	rjmp	.+520    	; 0xd2c <sim900_gprs_open_connection+0x268>
  }

  //gprs already opened?
  if (sim900_gprs_is_opened())
     b24:	0e 94 11 05 	call	0xa22	; 0xa22 <sim900_gprs_is_opened>
     b28:	88 23       	and	r24, r24
     b2a:	29 f0       	breq	.+10     	; 0xb36 <sim900_gprs_open_connection+0x72>
  {
	  free(cmdx);
     b2c:	c7 01       	movw	r24, r14
     b2e:	0e 94 81 0b 	call	0x1702	; 0x1702 <free>
    return 1;
     b32:	81 e0       	ldi	r24, 0x01	; 1
     b34:	fb c0       	rjmp	.+502    	; 0xd2c <sim900_gprs_open_connection+0x268>
  }

  //init gprs connection
  snprintf((char*)cmdx, MAX_BUFFER_NUM, "%s\"CONTYPE\",\"GPRS\"\r",
     b36:	8d b7       	in	r24, 0x3d	; 61
     b38:	9e b7       	in	r25, 0x3e	; 62
     b3a:	08 97       	sbiw	r24, 0x08	; 8
     b3c:	0f b6       	in	r0, 0x3f	; 63
     b3e:	f8 94       	cli
     b40:	9e bf       	out	0x3e, r25	; 62
     b42:	0f be       	out	0x3f, r0	; 63
     b44:	8d bf       	out	0x3d, r24	; 61
     b46:	ed b7       	in	r30, 0x3d	; 61
     b48:	fe b7       	in	r31, 0x3e	; 62
     b4a:	31 96       	adiw	r30, 0x01	; 1
     b4c:	ad b7       	in	r26, 0x3d	; 61
     b4e:	be b7       	in	r27, 0x3e	; 62
     b50:	12 96       	adiw	r26, 0x02	; 2
     b52:	fc 92       	st	X, r15
     b54:	ee 92       	st	-X, r14
     b56:	11 97       	sbiw	r26, 0x01	; 1
     b58:	83 e2       	ldi	r24, 0x23	; 35
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	93 83       	std	Z+3, r25	; 0x03
     b5e:	82 83       	std	Z+2, r24	; 0x02
     b60:	8f e6       	ldi	r24, 0x6F	; 111
     b62:	91 e0       	ldi	r25, 0x01	; 1
     b64:	95 83       	std	Z+5, r25	; 0x05
     b66:	84 83       	std	Z+4, r24	; 0x04
     b68:	83 e8       	ldi	r24, 0x83	; 131
     b6a:	91 e0       	ldi	r25, 0x01	; 1
     b6c:	97 83       	std	Z+7, r25	; 0x07
     b6e:	86 83       	std	Z+6, r24	; 0x06
     b70:	0e 94 77 0c 	call	0x18ee	; 0x18ee <snprintf>
    CMD_SAPBR_NEW);
  if (!sim900_send_cmd_wait_reply(0,(const uint8_t*)cmdx, (const uint8_t*)
     b74:	8d b7       	in	r24, 0x3d	; 61
     b76:	9e b7       	in	r25, 0x3e	; 62
     b78:	08 96       	adiw	r24, 0x08	; 8
     b7a:	0f b6       	in	r0, 0x3f	; 63
     b7c:	f8 94       	cli
     b7e:	9e bf       	out	0x3e, r25	; 62
     b80:	0f be       	out	0x3f, r0	; 63
     b82:	8d bf       	out	0x3d, r24	; 61
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	b7 01       	movw	r22, r14
     b88:	40 e5       	ldi	r20, 0x50	; 80
     b8a:	51 e0       	ldi	r21, 0x01	; 1
     b8c:	00 e4       	ldi	r16, 0x40	; 64
     b8e:	12 e4       	ldi	r17, 0x42	; 66
     b90:	2f e0       	ldi	r18, 0x0F	; 15
     b92:	30 e0       	ldi	r19, 0x00	; 0
     b94:	ee 24       	eor	r14, r14
     b96:	cc 24       	eor	r12, r12
     b98:	dd 24       	eor	r13, r13
     b9a:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <sim900_send_cmd_wait_reply>
     b9e:	88 23       	and	r24, r24
     ba0:	29 f4       	brne	.+10     	; 0xbac <sim900_gprs_open_connection+0xe8>
    RESPON_OK, 1000000, 0, NULL))
  {
	  free(cmdx);
     ba2:	ce 01       	movw	r24, r28
     ba4:	0e 94 81 0b 	call	0x1702	; 0x1702 <free>
    return 0;
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	c0 c0       	rjmp	.+384    	; 0xd2c <sim900_gprs_open_connection+0x268>
  }

  //set apn
  snprintf((char*)cmdx, MAX_BUFFER_NUM, "%s\"APN\",\"%s\"\r", CMD_SAPBR_NEW,
     bac:	ad b7       	in	r26, 0x3d	; 61
     bae:	be b7       	in	r27, 0x3e	; 62
     bb0:	1a 97       	sbiw	r26, 0x0a	; 10
     bb2:	0f b6       	in	r0, 0x3f	; 63
     bb4:	f8 94       	cli
     bb6:	be bf       	out	0x3e, r27	; 62
     bb8:	0f be       	out	0x3f, r0	; 63
     bba:	ad bf       	out	0x3d, r26	; 61
     bbc:	ed b7       	in	r30, 0x3d	; 61
     bbe:	fe b7       	in	r31, 0x3e	; 62
     bc0:	31 96       	adiw	r30, 0x01	; 1
     bc2:	12 96       	adiw	r26, 0x02	; 2
     bc4:	dc 93       	st	X, r29
     bc6:	ce 93       	st	-X, r28
     bc8:	11 97       	sbiw	r26, 0x01	; 1
     bca:	83 e2       	ldi	r24, 0x23	; 35
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	93 83       	std	Z+3, r25	; 0x03
     bd0:	82 83       	std	Z+2, r24	; 0x02
     bd2:	81 e9       	ldi	r24, 0x91	; 145
     bd4:	91 e0       	ldi	r25, 0x01	; 1
     bd6:	95 83       	std	Z+5, r25	; 0x05
     bd8:	84 83       	std	Z+4, r24	; 0x04
     bda:	83 e8       	ldi	r24, 0x83	; 131
     bdc:	91 e0       	ldi	r25, 0x01	; 1
     bde:	97 83       	std	Z+7, r25	; 0x07
     be0:	86 83       	std	Z+6, r24	; 0x06
     be2:	b1 86       	std	Z+9, r11	; 0x09
     be4:	a0 86       	std	Z+8, r10	; 0x08
     be6:	0e 94 77 0c 	call	0x18ee	; 0x18ee <snprintf>
    apn);
  if (!sim900_send_cmd_wait_reply(0,(const uint8_t*)cmdx, (const uint8_t*)
     bea:	8d b7       	in	r24, 0x3d	; 61
     bec:	9e b7       	in	r25, 0x3e	; 62
     bee:	0a 96       	adiw	r24, 0x0a	; 10
     bf0:	0f b6       	in	r0, 0x3f	; 63
     bf2:	f8 94       	cli
     bf4:	9e bf       	out	0x3e, r25	; 62
     bf6:	0f be       	out	0x3f, r0	; 63
     bf8:	8d bf       	out	0x3d, r24	; 61
     bfa:	80 e0       	ldi	r24, 0x00	; 0
     bfc:	be 01       	movw	r22, r28
     bfe:	40 e5       	ldi	r20, 0x50	; 80
     c00:	51 e0       	ldi	r21, 0x01	; 1
     c02:	00 e4       	ldi	r16, 0x40	; 64
     c04:	12 e4       	ldi	r17, 0x42	; 66
     c06:	2f e0       	ldi	r18, 0x0F	; 15
     c08:	30 e0       	ldi	r19, 0x00	; 0
     c0a:	ee 24       	eor	r14, r14
     c0c:	cc 24       	eor	r12, r12
     c0e:	dd 24       	eor	r13, r13
     c10:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <sim900_send_cmd_wait_reply>
     c14:	88 23       	and	r24, r24
     c16:	29 f4       	brne	.+10     	; 0xc22 <sim900_gprs_open_connection+0x15e>
    RESPON_OK, 1000000, 0, NULL))
  {
	  free(cmdx);
     c18:	ce 01       	movw	r24, r28
     c1a:	0e 94 81 0b 	call	0x1702	; 0x1702 <free>
    return 0;
     c1e:	80 e0       	ldi	r24, 0x00	; 0
     c20:	85 c0       	rjmp	.+266    	; 0xd2c <sim900_gprs_open_connection+0x268>
  }

  //set username
  snprintf((char*)cmdx, MAX_BUFFER_NUM, "%s\"USER\",\"%s\"\r", CMD_SAPBR_NEW,
     c22:	ad b7       	in	r26, 0x3d	; 61
     c24:	be b7       	in	r27, 0x3e	; 62
     c26:	1a 97       	sbiw	r26, 0x0a	; 10
     c28:	0f b6       	in	r0, 0x3f	; 63
     c2a:	f8 94       	cli
     c2c:	be bf       	out	0x3e, r27	; 62
     c2e:	0f be       	out	0x3f, r0	; 63
     c30:	ad bf       	out	0x3d, r26	; 61
     c32:	ed b7       	in	r30, 0x3d	; 61
     c34:	fe b7       	in	r31, 0x3e	; 62
     c36:	31 96       	adiw	r30, 0x01	; 1
     c38:	12 96       	adiw	r26, 0x02	; 2
     c3a:	dc 93       	st	X, r29
     c3c:	ce 93       	st	-X, r28
     c3e:	11 97       	sbiw	r26, 0x01	; 1
     c40:	83 e2       	ldi	r24, 0x23	; 35
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	93 83       	std	Z+3, r25	; 0x03
     c46:	82 83       	std	Z+2, r24	; 0x02
     c48:	8f e9       	ldi	r24, 0x9F	; 159
     c4a:	91 e0       	ldi	r25, 0x01	; 1
     c4c:	95 83       	std	Z+5, r25	; 0x05
     c4e:	84 83       	std	Z+4, r24	; 0x04
     c50:	83 e8       	ldi	r24, 0x83	; 131
     c52:	91 e0       	ldi	r25, 0x01	; 1
     c54:	97 83       	std	Z+7, r25	; 0x07
     c56:	86 83       	std	Z+6, r24	; 0x06
     c58:	91 86       	std	Z+9, r9	; 0x09
     c5a:	80 86       	std	Z+8, r8	; 0x08
     c5c:	0e 94 77 0c 	call	0x18ee	; 0x18ee <snprintf>
    username);
  if (!sim900_send_cmd_wait_reply(0,(const uint8_t*)cmdx, (const uint8_t*)
     c60:	8d b7       	in	r24, 0x3d	; 61
     c62:	9e b7       	in	r25, 0x3e	; 62
     c64:	0a 96       	adiw	r24, 0x0a	; 10
     c66:	0f b6       	in	r0, 0x3f	; 63
     c68:	f8 94       	cli
     c6a:	9e bf       	out	0x3e, r25	; 62
     c6c:	0f be       	out	0x3f, r0	; 63
     c6e:	8d bf       	out	0x3d, r24	; 61
     c70:	80 e0       	ldi	r24, 0x00	; 0
     c72:	be 01       	movw	r22, r28
     c74:	40 e5       	ldi	r20, 0x50	; 80
     c76:	51 e0       	ldi	r21, 0x01	; 1
     c78:	00 e4       	ldi	r16, 0x40	; 64
     c7a:	12 e4       	ldi	r17, 0x42	; 66
     c7c:	2f e0       	ldi	r18, 0x0F	; 15
     c7e:	30 e0       	ldi	r19, 0x00	; 0
     c80:	ee 24       	eor	r14, r14
     c82:	cc 24       	eor	r12, r12
     c84:	dd 24       	eor	r13, r13
     c86:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <sim900_send_cmd_wait_reply>
     c8a:	88 23       	and	r24, r24
     c8c:	29 f4       	brne	.+10     	; 0xc98 <sim900_gprs_open_connection+0x1d4>
    RESPON_OK, 1000000, 0, NULL))
  {
	  free(cmdx);
     c8e:	ce 01       	movw	r24, r28
     c90:	0e 94 81 0b 	call	0x1702	; 0x1702 <free>
    return 0;
     c94:	80 e0       	ldi	r24, 0x00	; 0
     c96:	4a c0       	rjmp	.+148    	; 0xd2c <sim900_gprs_open_connection+0x268>
  }

  //set passwd
  snprintf((char*)cmdx, MAX_BUFFER_NUM, "%s\"PWD\",\"%s\"\r", CMD_SAPBR_NEW,
     c98:	ad b7       	in	r26, 0x3d	; 61
     c9a:	be b7       	in	r27, 0x3e	; 62
     c9c:	1a 97       	sbiw	r26, 0x0a	; 10
     c9e:	0f b6       	in	r0, 0x3f	; 63
     ca0:	f8 94       	cli
     ca2:	be bf       	out	0x3e, r27	; 62
     ca4:	0f be       	out	0x3f, r0	; 63
     ca6:	ad bf       	out	0x3d, r26	; 61
     ca8:	ed b7       	in	r30, 0x3d	; 61
     caa:	fe b7       	in	r31, 0x3e	; 62
     cac:	31 96       	adiw	r30, 0x01	; 1
     cae:	12 96       	adiw	r26, 0x02	; 2
     cb0:	dc 93       	st	X, r29
     cb2:	ce 93       	st	-X, r28
     cb4:	11 97       	sbiw	r26, 0x01	; 1
     cb6:	83 e2       	ldi	r24, 0x23	; 35
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	93 83       	std	Z+3, r25	; 0x03
     cbc:	82 83       	std	Z+2, r24	; 0x02
     cbe:	8e ea       	ldi	r24, 0xAE	; 174
     cc0:	91 e0       	ldi	r25, 0x01	; 1
     cc2:	95 83       	std	Z+5, r25	; 0x05
     cc4:	84 83       	std	Z+4, r24	; 0x04
     cc6:	83 e8       	ldi	r24, 0x83	; 131
     cc8:	91 e0       	ldi	r25, 0x01	; 1
     cca:	97 83       	std	Z+7, r25	; 0x07
     ccc:	86 83       	std	Z+6, r24	; 0x06
     cce:	71 86       	std	Z+9, r7	; 0x09
     cd0:	60 86       	std	Z+8, r6	; 0x08
     cd2:	0e 94 77 0c 	call	0x18ee	; 0x18ee <snprintf>
    password);
  if (!sim900_send_cmd_wait_reply(0,(const uint8_t*)cmdx, (const uint8_t*)
     cd6:	8d b7       	in	r24, 0x3d	; 61
     cd8:	9e b7       	in	r25, 0x3e	; 62
     cda:	0a 96       	adiw	r24, 0x0a	; 10
     cdc:	0f b6       	in	r0, 0x3f	; 63
     cde:	f8 94       	cli
     ce0:	9e bf       	out	0x3e, r25	; 62
     ce2:	0f be       	out	0x3f, r0	; 63
     ce4:	8d bf       	out	0x3d, r24	; 61
     ce6:	80 e0       	ldi	r24, 0x00	; 0
     ce8:	be 01       	movw	r22, r28
     cea:	40 e5       	ldi	r20, 0x50	; 80
     cec:	51 e0       	ldi	r21, 0x01	; 1
     cee:	00 e4       	ldi	r16, 0x40	; 64
     cf0:	12 e4       	ldi	r17, 0x42	; 66
     cf2:	2f e0       	ldi	r18, 0x0F	; 15
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	ee 24       	eor	r14, r14
     cf8:	cc 24       	eor	r12, r12
     cfa:	dd 24       	eor	r13, r13
     cfc:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <sim900_send_cmd_wait_reply>
     d00:	88 23       	and	r24, r24
     d02:	29 f4       	brne	.+10     	; 0xd0e <sim900_gprs_open_connection+0x24a>
    RESPON_OK, 1000000, 0, NULL))
  {
	  free(cmdx);
     d04:	ce 01       	movw	r24, r28
     d06:	0e 94 81 0b 	call	0x1702	; 0x1702 <free>
    return 0;
     d0a:	80 e0       	ldi	r24, 0x00	; 0
     d0c:	0f c0       	rjmp	.+30     	; 0xd2c <sim900_gprs_open_connection+0x268>
  }

  //open gprs connection
  if (!sim900_gprs_start_connection())
     d0e:	0e 94 49 05 	call	0xa92	; 0xa92 <sim900_gprs_start_connection>
     d12:	88 23       	and	r24, r24
     d14:	29 f4       	brne	.+10     	; 0xd20 <sim900_gprs_open_connection+0x25c>
  {
	  free(cmdx);
     d16:	ce 01       	movw	r24, r28
     d18:	0e 94 81 0b 	call	0x1702	; 0x1702 <free>
    return 0;
     d1c:	80 e0       	ldi	r24, 0x00	; 0
     d1e:	06 c0       	rjmp	.+12     	; 0xd2c <sim900_gprs_open_connection+0x268>
  }

	//free buffer
	free(cmdx);
     d20:	ce 01       	movw	r24, r28
     d22:	0e 94 81 0b 	call	0x1702	; 0x1702 <free>
	
  //return the respon
  return 1;
     d26:	81 e0       	ldi	r24, 0x01	; 1
     d28:	01 c0       	rjmp	.+2      	; 0xd2c <sim900_gprs_open_connection+0x268>
  uint8_t *cmdx = (uint8_t*) calloc(MAX_BUFFER_NUM,sizeof(uint8_t));
  
  //buffer created??
  if (cmdx == NULL)
  {
	  return 0;
     d2a:	80 e0       	ldi	r24, 0x00	; 0
	//free buffer
	free(cmdx);
	
  //return the respon
  return 1;
}
     d2c:	df 91       	pop	r29
     d2e:	cf 91       	pop	r28
     d30:	1f 91       	pop	r17
     d32:	0f 91       	pop	r16
     d34:	ff 90       	pop	r15
     d36:	ef 90       	pop	r14
     d38:	df 90       	pop	r13
     d3a:	cf 90       	pop	r12
     d3c:	bf 90       	pop	r11
     d3e:	af 90       	pop	r10
     d40:	9f 90       	pop	r9
     d42:	8f 90       	pop	r8
     d44:	7f 90       	pop	r7
     d46:	6f 90       	pop	r6
     d48:	08 95       	ret

00000d4a <sim900_http_terminate>:

//terminate http session
uint8_t sim900_http_terminate()
{
     d4a:	cf 92       	push	r12
     d4c:	df 92       	push	r13
     d4e:	ef 92       	push	r14
     d50:	0f 93       	push	r16
     d52:	1f 93       	push	r17
  return sim900_send_cmd_wait_reply(1,(const uint8_t*)PSTR("AT+HTTPTERM\r"), (const
     d54:	81 e0       	ldi	r24, 0x01	; 1
     d56:	6b e0       	ldi	r22, 0x0B	; 11
     d58:	71 e0       	ldi	r23, 0x01	; 1
     d5a:	40 e5       	ldi	r20, 0x50	; 80
     d5c:	51 e0       	ldi	r21, 0x01	; 1
     d5e:	00 e4       	ldi	r16, 0x40	; 64
     d60:	1b e4       	ldi	r17, 0x4B	; 75
     d62:	2c e4       	ldi	r18, 0x4C	; 76
     d64:	30 e0       	ldi	r19, 0x00	; 0
     d66:	ee 24       	eor	r14, r14
     d68:	cc 24       	eor	r12, r12
     d6a:	dd 24       	eor	r13, r13
     d6c:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <sim900_send_cmd_wait_reply>
    uint8_t*)RESPON_OK, 5000000, 0, NULL);
}
     d70:	1f 91       	pop	r17
     d72:	0f 91       	pop	r16
     d74:	ef 90       	pop	r14
     d76:	df 90       	pop	r13
     d78:	cf 90       	pop	r12
     d7a:	08 95       	ret

00000d7c <sim900_http_send_data>:

uint8_t sim900_http_send_data(const uint8_t method, const uint8_t *aurl, const uint8_t *adata, const  uint8_t max_out_len, uint8_t *arespon_out)
{
     d7c:	3f 92       	push	r3
     d7e:	4f 92       	push	r4
     d80:	5f 92       	push	r5
     d82:	6f 92       	push	r6
     d84:	7f 92       	push	r7
     d86:	8f 92       	push	r8
     d88:	9f 92       	push	r9
     d8a:	af 92       	push	r10
     d8c:	bf 92       	push	r11
     d8e:	cf 92       	push	r12
     d90:	df 92       	push	r13
     d92:	ef 92       	push	r14
     d94:	ff 92       	push	r15
     d96:	0f 93       	push	r16
     d98:	1f 93       	push	r17
     d9a:	df 93       	push	r29
     d9c:	cf 93       	push	r28
     d9e:	00 d0       	rcall	.+0      	; 0xda0 <sim900_http_send_data+0x24>
     da0:	00 d0       	rcall	.+0      	; 0xda2 <sim900_http_send_data+0x26>
     da2:	00 d0       	rcall	.+0      	; 0xda4 <sim900_http_send_data+0x28>
     da4:	cd b7       	in	r28, 0x3d	; 61
     da6:	de b7       	in	r29, 0x3e	; 62
     da8:	78 2e       	mov	r7, r24
     daa:	2b 01       	movw	r4, r22
     dac:	64 2e       	mov	r6, r20
     dae:	35 2e       	mov	r3, r21
     db0:	f2 2e       	mov	r15, r18
     db2:	48 01       	movw	r8, r16
	#define HTTP_PARA_URL "AT+HTTPPARA=\"URL\","
	const uint8_t MAX_BUFFER = 100;
	uint8_t respon = 0;
	uint16_t num_data = 0;
	uint8_t *cmdx = (uint8_t*) calloc(MAX_BUFFER,sizeof(uint8_t));
     db4:	84 e6       	ldi	r24, 0x64	; 100
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	61 e0       	ldi	r22, 0x01	; 1
     dba:	70 e0       	ldi	r23, 0x00	; 0
     dbc:	0e 94 c2 0a 	call	0x1584	; 0x1584 <calloc>
     dc0:	a8 2e       	mov	r10, r24
     dc2:	b9 2e       	mov	r11, r25
	
	//buffer created?
	if (cmdx == NULL)
     dc4:	a1 14       	cp	r10, r1
     dc6:	b1 04       	cpc	r11, r1
     dc8:	09 f4       	brne	.+2      	; 0xdcc <sim900_http_send_data+0x50>
     dca:	06 c2       	rjmp	.+1036   	; 0x11d8 <__stack+0xd9>
	{
		return 0;
	}

	//set init result
	if (arespon_out != NULL)
     dcc:	01 15       	cp	r16, r1
     dce:	11 05       	cpc	r17, r1
     dd0:	41 f0       	breq	.+16     	; 0xde2 <sim900_http_send_data+0x66>
	{
		memset(arespon_out, '\0', max_out_len *sizeof(uint8_t));
     dd2:	80 2f       	mov	r24, r16
     dd4:	99 2d       	mov	r25, r9
     dd6:	60 e0       	ldi	r22, 0x00	; 0
     dd8:	70 e0       	ldi	r23, 0x00	; 0
     dda:	4f 2d       	mov	r20, r15
     ddc:	50 e0       	ldi	r21, 0x00	; 0
     dde:	0e 94 4e 0c 	call	0x189c	; 0x189c <memset>
	}

	//check is connected
	if (!sim900_gprs_is_opened())
     de2:	0e 94 11 05 	call	0xa22	; 0xa22 <sim900_gprs_is_opened>
     de6:	88 23       	and	r24, r24
     de8:	29 f4       	brne	.+10     	; 0xdf4 <sim900_http_send_data+0x78>
	{
		free(cmdx);
     dea:	c5 01       	movw	r24, r10
     dec:	0e 94 81 0b 	call	0x1702	; 0x1702 <free>
		return 0;
     df0:	10 e0       	ldi	r17, 0x00	; 0
     df2:	f3 c1       	rjmp	.+998    	; 0x11da <__stack+0xdb>
	}
	
	//make sure previous http is terminated
	sim900_http_terminate();
     df4:	0e 94 a5 06 	call	0xd4a	; 0xd4a <sim900_http_terminate>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     df8:	8f ef       	ldi	r24, 0xFF	; 255
     dfa:	90 e7       	ldi	r25, 0x70	; 112
     dfc:	a2 e0       	ldi	r26, 0x02	; 2
     dfe:	81 50       	subi	r24, 0x01	; 1
     e00:	90 40       	sbci	r25, 0x00	; 0
     e02:	a0 40       	sbci	r26, 0x00	; 0
     e04:	e1 f7       	brne	.-8      	; 0xdfe <sim900_http_send_data+0x82>
     e06:	00 c0       	rjmp	.+0      	; 0xe08 <sim900_http_send_data+0x8c>
     e08:	00 00       	nop
	
	//http init
	_delay_ms(100);
	if (!sim900_send_cmd_wait_reply(1,(const uint8_t*)PSTR("AT+HTTPINIT\r"), (const
     e0a:	81 e0       	ldi	r24, 0x01	; 1
     e0c:	6e ef       	ldi	r22, 0xFE	; 254
     e0e:	70 e0       	ldi	r23, 0x00	; 0
     e10:	40 e5       	ldi	r20, 0x50	; 80
     e12:	51 e0       	ldi	r21, 0x01	; 1
     e14:	00 e4       	ldi	r16, 0x40	; 64
     e16:	1b e4       	ldi	r17, 0x4B	; 75
     e18:	2c e4       	ldi	r18, 0x4C	; 76
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	ee 24       	eor	r14, r14
     e1e:	cc 24       	eor	r12, r12
     e20:	dd 24       	eor	r13, r13
     e22:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <sim900_send_cmd_wait_reply>
     e26:	88 23       	and	r24, r24
     e28:	29 f4       	brne	.+10     	; 0xe34 <sim900_http_send_data+0xb8>
	uint8_t*)RESPON_OK, 5000000, 0, NULL))
	{
		free(cmdx);
     e2a:	c5 01       	movw	r24, r10
     e2c:	0e 94 81 0b 	call	0x1702	; 0x1702 <free>
		return 0;
     e30:	10 e0       	ldi	r17, 0x00	; 0
     e32:	d3 c1       	rjmp	.+934    	; 0x11da <__stack+0xdb>
	}

	//http parameter cid
	if (!sim900_send_cmd_wait_reply(1,(const uint8_t*)PSTR("AT+HTTPPARA=\"CID\",1\r"),
     e34:	81 e0       	ldi	r24, 0x01	; 1
     e36:	69 ee       	ldi	r22, 0xE9	; 233
     e38:	70 e0       	ldi	r23, 0x00	; 0
     e3a:	40 e5       	ldi	r20, 0x50	; 80
     e3c:	51 e0       	ldi	r21, 0x01	; 1
     e3e:	00 e4       	ldi	r16, 0x40	; 64
     e40:	1b e4       	ldi	r17, 0x4B	; 75
     e42:	2c e4       	ldi	r18, 0x4C	; 76
     e44:	30 e0       	ldi	r19, 0x00	; 0
     e46:	ee 24       	eor	r14, r14
     e48:	cc 24       	eor	r12, r12
     e4a:	dd 24       	eor	r13, r13
     e4c:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <sim900_send_cmd_wait_reply>
     e50:	88 23       	and	r24, r24
     e52:	39 f4       	brne	.+14     	; 0xe62 <sim900_http_send_data+0xe6>
	(const uint8_t*)RESPON_OK, 5000000, 0, NULL))
	{
		sim900_http_terminate();
     e54:	0e 94 a5 06 	call	0xd4a	; 0xd4a <sim900_http_terminate>
		free(cmdx);
     e58:	c5 01       	movw	r24, r10
     e5a:	0e 94 81 0b 	call	0x1702	; 0x1702 <free>
		return 0;
     e5e:	10 e0       	ldi	r17, 0x00	; 0
     e60:	bc c1       	rjmp	.+888    	; 0x11da <__stack+0xdb>
	}

	//http parameter url
	memset(cmdx, '\0', MAX_BUFFER);
     e62:	ea 2d       	mov	r30, r10
     e64:	fb 2d       	mov	r31, r11
     e66:	84 e6       	ldi	r24, 0x64	; 100
     e68:	df 01       	movw	r26, r30
     e6a:	1d 92       	st	X+, r1
     e6c:	8a 95       	dec	r24
     e6e:	e9 f7       	brne	.-6      	; 0xe6a <sim900_http_send_data+0xee>
	//snprintf((char*)cmdx, MAX_BUFFER, (method ? "%s\"%s\"\r":"%s\"%s?%s\"\r"), HTTP_PARA_URL, aurl,(method ? ((char*)""):adata));
	if (method) //post
     e70:	77 20       	and	r7, r7
     e72:	41 f1       	breq	.+80     	; 0xec4 <sim900_http_send_data+0x148>
	{
		snprintf((char*)cmdx, MAX_BUFFER, "%s\"%s\"\r", HTTP_PARA_URL, aurl);
     e74:	ed b7       	in	r30, 0x3d	; 61
     e76:	fe b7       	in	r31, 0x3e	; 62
     e78:	3a 97       	sbiw	r30, 0x0a	; 10
     e7a:	0f b6       	in	r0, 0x3f	; 63
     e7c:	f8 94       	cli
     e7e:	fe bf       	out	0x3e, r31	; 62
     e80:	0f be       	out	0x3f, r0	; 63
     e82:	ed bf       	out	0x3d, r30	; 61
     e84:	31 96       	adiw	r30, 0x01	; 1
     e86:	ad b7       	in	r26, 0x3d	; 61
     e88:	be b7       	in	r27, 0x3e	; 62
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	bc 92       	st	X, r11
     e8e:	ae 92       	st	-X, r10
     e90:	11 97       	sbiw	r26, 0x01	; 1
     e92:	84 e6       	ldi	r24, 0x64	; 100
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	93 83       	std	Z+3, r25	; 0x03
     e98:	82 83       	std	Z+2, r24	; 0x02
     e9a:	80 ee       	ldi	r24, 0xE0	; 224
     e9c:	91 e0       	ldi	r25, 0x01	; 1
     e9e:	95 83       	std	Z+5, r25	; 0x05
     ea0:	84 83       	std	Z+4, r24	; 0x04
     ea2:	88 ee       	ldi	r24, 0xE8	; 232
     ea4:	91 e0       	ldi	r25, 0x01	; 1
     ea6:	97 83       	std	Z+7, r25	; 0x07
     ea8:	86 83       	std	Z+6, r24	; 0x06
     eaa:	51 86       	std	Z+9, r5	; 0x09
     eac:	40 86       	std	Z+8, r4	; 0x08
     eae:	0e 94 77 0c 	call	0x18ee	; 0x18ee <snprintf>
     eb2:	ed b7       	in	r30, 0x3d	; 61
     eb4:	fe b7       	in	r31, 0x3e	; 62
     eb6:	3a 96       	adiw	r30, 0x0a	; 10
     eb8:	0f b6       	in	r0, 0x3f	; 63
     eba:	f8 94       	cli
     ebc:	fe bf       	out	0x3e, r31	; 62
     ebe:	0f be       	out	0x3f, r0	; 63
     ec0:	ed bf       	out	0x3d, r30	; 61
     ec2:	2b c0       	rjmp	.+86     	; 0xf1a <sim900_http_send_data+0x19e>
	} 
	else //get
	{
		snprintf((char*)cmdx, MAX_BUFFER, "%s\"%s?%s\"\r", HTTP_PARA_URL, aurl, adata);
     ec4:	8d b7       	in	r24, 0x3d	; 61
     ec6:	9e b7       	in	r25, 0x3e	; 62
     ec8:	0c 97       	sbiw	r24, 0x0c	; 12
     eca:	0f b6       	in	r0, 0x3f	; 63
     ecc:	f8 94       	cli
     ece:	9e bf       	out	0x3e, r25	; 62
     ed0:	0f be       	out	0x3f, r0	; 63
     ed2:	8d bf       	out	0x3d, r24	; 61
     ed4:	ed b7       	in	r30, 0x3d	; 61
     ed6:	fe b7       	in	r31, 0x3e	; 62
     ed8:	31 96       	adiw	r30, 0x01	; 1
     eda:	ad b7       	in	r26, 0x3d	; 61
     edc:	be b7       	in	r27, 0x3e	; 62
     ede:	12 96       	adiw	r26, 0x02	; 2
     ee0:	bc 92       	st	X, r11
     ee2:	ae 92       	st	-X, r10
     ee4:	11 97       	sbiw	r26, 0x01	; 1
     ee6:	84 e6       	ldi	r24, 0x64	; 100
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	93 83       	std	Z+3, r25	; 0x03
     eec:	82 83       	std	Z+2, r24	; 0x02
     eee:	8b ef       	ldi	r24, 0xFB	; 251
     ef0:	91 e0       	ldi	r25, 0x01	; 1
     ef2:	95 83       	std	Z+5, r25	; 0x05
     ef4:	84 83       	std	Z+4, r24	; 0x04
     ef6:	88 ee       	ldi	r24, 0xE8	; 232
     ef8:	91 e0       	ldi	r25, 0x01	; 1
     efa:	97 83       	std	Z+7, r25	; 0x07
     efc:	86 83       	std	Z+6, r24	; 0x06
     efe:	51 86       	std	Z+9, r5	; 0x09
     f00:	40 86       	std	Z+8, r4	; 0x08
     f02:	62 86       	std	Z+10, r6	; 0x0a
     f04:	33 86       	std	Z+11, r3	; 0x0b
     f06:	0e 94 77 0c 	call	0x18ee	; 0x18ee <snprintf>
     f0a:	ed b7       	in	r30, 0x3d	; 61
     f0c:	fe b7       	in	r31, 0x3e	; 62
     f0e:	3c 96       	adiw	r30, 0x0c	; 12
     f10:	0f b6       	in	r0, 0x3f	; 63
     f12:	f8 94       	cli
     f14:	fe bf       	out	0x3e, r31	; 62
     f16:	0f be       	out	0x3f, r0	; 63
     f18:	ed bf       	out	0x3d, r30	; 61
	}
	if (!sim900_send_cmd_wait_reply(0,(const uint8_t*)cmdx, (const uint8_t*)
     f1a:	80 e0       	ldi	r24, 0x00	; 0
     f1c:	b5 01       	movw	r22, r10
     f1e:	40 e5       	ldi	r20, 0x50	; 80
     f20:	51 e0       	ldi	r21, 0x01	; 1
     f22:	00 e4       	ldi	r16, 0x40	; 64
     f24:	1b e4       	ldi	r17, 0x4B	; 75
     f26:	2c e4       	ldi	r18, 0x4C	; 76
     f28:	30 e0       	ldi	r19, 0x00	; 0
     f2a:	ee 24       	eor	r14, r14
     f2c:	cc 24       	eor	r12, r12
     f2e:	dd 24       	eor	r13, r13
     f30:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <sim900_send_cmd_wait_reply>
     f34:	88 23       	and	r24, r24
     f36:	39 f4       	brne	.+14     	; 0xf46 <sim900_http_send_data+0x1ca>
	RESPON_OK, 5000000, 0, NULL))
	{
		sim900_http_terminate();
     f38:	0e 94 a5 06 	call	0xd4a	; 0xd4a <sim900_http_terminate>
		free(cmdx);
     f3c:	c5 01       	movw	r24, r10
     f3e:	0e 94 81 0b 	call	0x1702	; 0x1702 <free>
		return 0;
     f42:	10 e0       	ldi	r17, 0x00	; 0
     f44:	4a c1       	rjmp	.+660    	; 0x11da <__stack+0xdb>
	}

	//set content type for post only
	if(method)
     f46:	77 20       	and	r7, r7
     f48:	09 f4       	brne	.+2      	; 0xf4c <sim900_http_send_data+0x1d0>
     f4a:	78 c0       	rjmp	.+240    	; 0x103c <sim900_http_send_data+0x2c0>
	{
		if (!sim900_send_cmd_wait_reply(1,(const uint8_t*)
     f4c:	81 e0       	ldi	r24, 0x01	; 1
     f4e:	6e ea       	ldi	r22, 0xAE	; 174
     f50:	70 e0       	ldi	r23, 0x00	; 0
     f52:	40 e5       	ldi	r20, 0x50	; 80
     f54:	51 e0       	ldi	r21, 0x01	; 1
     f56:	00 e4       	ldi	r16, 0x40	; 64
     f58:	1b e4       	ldi	r17, 0x4B	; 75
     f5a:	2c e4       	ldi	r18, 0x4C	; 76
     f5c:	30 e0       	ldi	r19, 0x00	; 0
     f5e:	ee 24       	eor	r14, r14
     f60:	cc 24       	eor	r12, r12
     f62:	dd 24       	eor	r13, r13
     f64:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <sim900_send_cmd_wait_reply>
     f68:	88 23       	and	r24, r24
     f6a:	39 f4       	brne	.+14     	; 0xf7a <sim900_http_send_data+0x1fe>
		PSTR("AT+HTTPPARA=\"CONTENT\",\"application/x-www-form-urlencoded\"\r"), (const
		uint8_t*)RESPON_OK, 5000000, 0, NULL))
		{
			sim900_http_terminate();
     f6c:	0e 94 a5 06 	call	0xd4a	; 0xd4a <sim900_http_terminate>
			free(cmdx);
     f70:	c5 01       	movw	r24, r10
     f72:	0e 94 81 0b 	call	0x1702	; 0x1702 <free>
			return 0;
     f76:	10 e0       	ldi	r17, 0x00	; 0
     f78:	30 c1       	rjmp	.+608    	; 0x11da <__stack+0xdb>
		}
		
		//http post data
		memset(cmdx, '\0', MAX_BUFFER);
     f7a:	ea 2d       	mov	r30, r10
     f7c:	fb 2d       	mov	r31, r11
     f7e:	84 e6       	ldi	r24, 0x64	; 100
     f80:	df 01       	movw	r26, r30
     f82:	1d 92       	st	X+, r1
     f84:	8a 95       	dec	r24
     f86:	e9 f7       	brne	.-6      	; 0xf82 <sim900_http_send_data+0x206>
		snprintf((char*)cmdx, MAX_BUFFER, "AT+HTTPDATA=%d,20000\r", strlen((const
     f88:	e6 2d       	mov	r30, r6
     f8a:	f3 2d       	mov	r31, r3
     f8c:	df 01       	movw	r26, r30
     f8e:	0d 90       	ld	r0, X+
     f90:	00 20       	and	r0, r0
     f92:	e9 f7       	brne	.-6      	; 0xf8e <sim900_http_send_data+0x212>
     f94:	11 97       	sbiw	r26, 0x01	; 1
     f96:	9d 01       	movw	r18, r26
     f98:	2e 1b       	sub	r18, r30
     f9a:	3f 0b       	sbc	r19, r31
     f9c:	ed b7       	in	r30, 0x3d	; 61
     f9e:	fe b7       	in	r31, 0x3e	; 62
     fa0:	38 97       	sbiw	r30, 0x08	; 8
     fa2:	0f b6       	in	r0, 0x3f	; 63
     fa4:	f8 94       	cli
     fa6:	fe bf       	out	0x3e, r31	; 62
     fa8:	0f be       	out	0x3f, r0	; 63
     faa:	ed bf       	out	0x3d, r30	; 61
     fac:	31 96       	adiw	r30, 0x01	; 1
     fae:	ad b7       	in	r26, 0x3d	; 61
     fb0:	be b7       	in	r27, 0x3e	; 62
     fb2:	12 96       	adiw	r26, 0x02	; 2
     fb4:	bc 92       	st	X, r11
     fb6:	ae 92       	st	-X, r10
     fb8:	11 97       	sbiw	r26, 0x01	; 1
     fba:	84 e6       	ldi	r24, 0x64	; 100
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	93 83       	std	Z+3, r25	; 0x03
     fc0:	82 83       	std	Z+2, r24	; 0x02
     fc2:	86 e0       	ldi	r24, 0x06	; 6
     fc4:	92 e0       	ldi	r25, 0x02	; 2
     fc6:	95 83       	std	Z+5, r25	; 0x05
     fc8:	84 83       	std	Z+4, r24	; 0x04
     fca:	37 83       	std	Z+7, r19	; 0x07
     fcc:	26 83       	std	Z+6, r18	; 0x06
     fce:	0e 94 77 0c 	call	0x18ee	; 0x18ee <snprintf>
		char*)adata));
		if (!sim900_send_cmd_wait_reply(0,(const uint8_t*)cmdx, (const uint8_t*)
     fd2:	ed b7       	in	r30, 0x3d	; 61
     fd4:	fe b7       	in	r31, 0x3e	; 62
     fd6:	38 96       	adiw	r30, 0x08	; 8
     fd8:	0f b6       	in	r0, 0x3f	; 63
     fda:	f8 94       	cli
     fdc:	fe bf       	out	0x3e, r31	; 62
     fde:	0f be       	out	0x3f, r0	; 63
     fe0:	ed bf       	out	0x3d, r30	; 61
     fe2:	80 e0       	ldi	r24, 0x00	; 0
     fe4:	b5 01       	movw	r22, r10
     fe6:	4c e1       	ldi	r20, 0x1C	; 28
     fe8:	52 e0       	ldi	r21, 0x02	; 2
     fea:	00 e0       	ldi	r16, 0x00	; 0
     fec:	1d e2       	ldi	r17, 0x2D	; 45
     fee:	21 e3       	ldi	r18, 0x31	; 49
     ff0:	31 e0       	ldi	r19, 0x01	; 1
     ff2:	ee 24       	eor	r14, r14
     ff4:	cc 24       	eor	r12, r12
     ff6:	dd 24       	eor	r13, r13
     ff8:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <sim900_send_cmd_wait_reply>
     ffc:	88 23       	and	r24, r24
     ffe:	39 f4       	brne	.+14     	; 0x100e <sim900_http_send_data+0x292>
		"DOWNLOAD", 20000000, 0, NULL))
		{
			sim900_http_terminate();
    1000:	0e 94 a5 06 	call	0xd4a	; 0xd4a <sim900_http_terminate>
			free(cmdx);
    1004:	c5 01       	movw	r24, r10
    1006:	0e 94 81 0b 	call	0x1702	; 0x1702 <free>
			return 0;
    100a:	10 e0       	ldi	r17, 0x00	; 0
    100c:	e6 c0       	rjmp	.+460    	; 0x11da <__stack+0xdb>
		}

		//send the data
		if (!sim900_send_cmd_wait_reply(0,(const uint8_t*)adata, (const uint8_t*)"OK",
    100e:	80 e0       	ldi	r24, 0x00	; 0
    1010:	66 2d       	mov	r22, r6
    1012:	73 2d       	mov	r23, r3
    1014:	40 e5       	ldi	r20, 0x50	; 80
    1016:	51 e0       	ldi	r21, 0x01	; 1
    1018:	00 e4       	ldi	r16, 0x40	; 64
    101a:	1b e4       	ldi	r17, 0x4B	; 75
    101c:	2c e4       	ldi	r18, 0x4C	; 76
    101e:	30 e0       	ldi	r19, 0x00	; 0
    1020:	ee 24       	eor	r14, r14
    1022:	cc 24       	eor	r12, r12
    1024:	dd 24       	eor	r13, r13
    1026:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <sim900_send_cmd_wait_reply>
    102a:	88 23       	and	r24, r24
    102c:	61 f4       	brne	.+24     	; 0x1046 <sim900_http_send_data+0x2ca>
		5000000, 0, NULL))
		{
			sim900_http_terminate();
    102e:	0e 94 a5 06 	call	0xd4a	; 0xd4a <sim900_http_terminate>
			free(cmdx);
    1032:	c5 01       	movw	r24, r10
    1034:	0e 94 81 0b 	call	0x1702	; 0x1702 <free>
			return 0;
    1038:	10 e0       	ldi	r17, 0x00	; 0
    103a:	cf c0       	rjmp	.+414    	; 0x11da <__stack+0xdb>
		}
	}

	//send it
	respon = sim900_send_cmd_wait_reply(1,(const uint8_t*)(method ? PSTR("AT+HTTPACTION=1\r"):PSTR("AT+HTTPACTION=0\r")),
    103c:	6c e8       	ldi	r22, 0x8C	; 140
    103e:	70 e0       	ldi	r23, 0x00	; 0
    1040:	4e ec       	ldi	r20, 0xCE	; 206
    1042:	51 e0       	ldi	r21, 0x01	; 1
    1044:	04 c0       	rjmp	.+8      	; 0x104e <sim900_http_send_data+0x2d2>
    1046:	6d e9       	ldi	r22, 0x9D	; 157
    1048:	70 e0       	ldi	r23, 0x00	; 0
    104a:	4c eb       	ldi	r20, 0xBC	; 188
    104c:	51 e0       	ldi	r21, 0x01	; 1
    104e:	81 e0       	ldi	r24, 0x01	; 1
    1050:	00 e0       	ldi	r16, 0x00	; 0
    1052:	1d e2       	ldi	r17, 0x2D	; 45
    1054:	21 e3       	ldi	r18, 0x31	; 49
    1056:	31 e0       	ldi	r19, 0x01	; 1
    1058:	ee 24       	eor	r14, r14
    105a:	cc 24       	eor	r12, r12
    105c:	dd 24       	eor	r13, r13
    105e:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <sim900_send_cmd_wait_reply>
    1062:	18 2f       	mov	r17, r24
	(const uint8_t*)(method ? "+HTTPACTION:1,200":"+HTTPACTION:0,200"), 20000000, 0, NULL);

	//if respon=1 then get the rest of data as length of respons
	if (respon)
    1064:	88 23       	and	r24, r24
    1066:	09 f4       	brne	.+2      	; 0x106a <sim900_http_send_data+0x2ee>
    1068:	b1 c0       	rjmp	.+354    	; 0x11cc <__stack+0xcd>
	{
		memset(cmdx, '\0', MAX_BUFFER);
    106a:	ea 2d       	mov	r30, r10
    106c:	fb 2d       	mov	r31, r11
    106e:	84 e6       	ldi	r24, 0x64	; 100
    1070:	df 01       	movw	r26, r30
    1072:	1d 92       	st	X+, r1
    1074:	8a 95       	dec	r24
    1076:	e9 f7       	brne	.-6      	; 0x1072 <sim900_http_send_data+0x2f6>
		//uint8_t *cmm = (uint8_t*) calloc(MAX_BUFFER,sizeof(uint8_t));
		respon = sim900_send_cmd_wait_reply(0,NULL, (const uint8_t*)"\r", 1000000,
    1078:	80 e0       	ldi	r24, 0x00	; 0
    107a:	60 e0       	ldi	r22, 0x00	; 0
    107c:	70 e0       	ldi	r23, 0x00	; 0
    107e:	45 e2       	ldi	r20, 0x25	; 37
    1080:	52 e0       	ldi	r21, 0x02	; 2
    1082:	00 e4       	ldi	r16, 0x40	; 64
    1084:	12 e4       	ldi	r17, 0x42	; 66
    1086:	2f e0       	ldi	r18, 0x0F	; 15
    1088:	30 e0       	ldi	r19, 0x00	; 0
    108a:	0f 2e       	mov	r0, r31
    108c:	f4 e6       	ldi	r31, 0x64	; 100
    108e:	ef 2e       	mov	r14, r31
    1090:	f0 2d       	mov	r31, r0
    1092:	65 01       	movw	r12, r10
    1094:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <sim900_send_cmd_wait_reply>
    1098:	18 2f       	mov	r17, r24
		MAX_BUFFER, cmdx);
		//free(cmm);

		if (respon)
    109a:	88 23       	and	r24, r24
    109c:	09 f4       	brne	.+2      	; 0x10a0 <sim900_http_send_data+0x324>
    109e:	96 c0       	rjmp	.+300    	; 0x11cc <__stack+0xcd>
		{
			//find \r on the data respons
			//cmdx form = ,[respon length]\r
			uint8_t *pr = (uint8_t*)memchr(cmdx, '\r', MAX_BUFFER);
    10a0:	c5 01       	movw	r24, r10
    10a2:	6d e0       	ldi	r22, 0x0D	; 13
    10a4:	70 e0       	ldi	r23, 0x00	; 0
    10a6:	44 e6       	ldi	r20, 0x64	; 100
    10a8:	50 e0       	ldi	r21, 0x00	; 0
    10aa:	0e 94 38 0c 	call	0x1870	; 0x1870 <memchr>
    10ae:	28 2f       	mov	r18, r24
    10b0:	39 2f       	mov	r19, r25

			num_data = 0;
			if (pr != NULL)
    10b2:	21 15       	cp	r18, r1
    10b4:	31 05       	cpc	r19, r1
    10b6:	09 f4       	brne	.+2      	; 0x10ba <sim900_http_send_data+0x33e>
    10b8:	89 c0       	rjmp	.+274    	; 0x11cc <__stack+0xcd>
			{
				uint8_t clen[6];
				memset(clen, '\0', 6); //set all to 0
    10ba:	3e 01       	movw	r6, r28
    10bc:	08 94       	sec
    10be:	61 1c       	adc	r6, r1
    10c0:	71 1c       	adc	r7, r1
    10c2:	86 e0       	ldi	r24, 0x06	; 6
    10c4:	f3 01       	movw	r30, r6
    10c6:	11 92       	st	Z+, r1
    10c8:	8a 95       	dec	r24
    10ca:	e9 f7       	brne	.-6      	; 0x10c6 <sim900_http_send_data+0x34a>
				memcpy(clen, &cmdx[1], pr - &cmdx[1]); //copy the data respon length
    10cc:	a5 01       	movw	r20, r10
    10ce:	4f 5f       	subi	r20, 0xFF	; 255
    10d0:	5f 4f       	sbci	r21, 0xFF	; 255
    10d2:	24 1b       	sub	r18, r20
    10d4:	35 0b       	sbc	r19, r21
    10d6:	c3 01       	movw	r24, r6
    10d8:	64 2f       	mov	r22, r20
    10da:	75 2f       	mov	r23, r21
    10dc:	42 2f       	mov	r20, r18
    10de:	53 2f       	mov	r21, r19
    10e0:	0e 94 45 0c 	call	0x188a	; 0x188a <memcpy>
				num_data = atoi((const char*)clen); //convert to int
    10e4:	c3 01       	movw	r24, r6
    10e6:	0e 94 1a 0c 	call	0x1834	; 0x1834 <atoi>
			}

			//just limit it
			if (num_data > max_out_len)
    10ea:	2f 2d       	mov	r18, r15
    10ec:	30 e0       	ldi	r19, 0x00	; 0
			if (pr != NULL)
			{
				uint8_t clen[6];
				memset(clen, '\0', 6); //set all to 0
				memcpy(clen, &cmdx[1], pr - &cmdx[1]); //copy the data respon length
				num_data = atoi((const char*)clen); //convert to int
    10ee:	68 2e       	mov	r6, r24
    10f0:	79 2e       	mov	r7, r25
    10f2:	26 15       	cp	r18, r6
    10f4:	37 05       	cpc	r19, r7
    10f6:	08 f4       	brcc	.+2      	; 0x10fa <sim900_http_send_data+0x37e>
    10f8:	39 01       	movw	r6, r18
			{
				num_data = max_out_len;
			}

			//read the data respon
			if (num_data > 0)
    10fa:	61 14       	cp	r6, r1
    10fc:	71 04       	cpc	r7, r1
    10fe:	09 f4       	brne	.+2      	; 0x1102 <__stack+0x3>
    1100:	65 c0       	rjmp	.+202    	; 0x11cc <__stack+0xcd>
			{
				//allocate memory
				//make sure a respon out is capable of receiveing it
				//beware that you must make sure that the usart rx buffer is capable of receiving it
				memset(cmdx, '\0', MAX_BUFFER);
    1102:	ea 2d       	mov	r30, r10
    1104:	fb 2d       	mov	r31, r11
    1106:	84 e6       	ldi	r24, 0x64	; 100
    1108:	df 01       	movw	r26, r30
    110a:	1d 92       	st	X+, r1
    110c:	8a 95       	dec	r24
    110e:	e9 f7       	brne	.-6      	; 0x110a <__stack+0xb>
				snprintf((char*)cmdx, MAX_BUFFER, "AT+HTTPREAD=0,%d\r", num_data);
    1110:	ed b7       	in	r30, 0x3d	; 61
    1112:	fe b7       	in	r31, 0x3e	; 62
    1114:	38 97       	sbiw	r30, 0x08	; 8
    1116:	0f b6       	in	r0, 0x3f	; 63
    1118:	f8 94       	cli
    111a:	fe bf       	out	0x3e, r31	; 62
    111c:	0f be       	out	0x3f, r0	; 63
    111e:	ed bf       	out	0x3d, r30	; 61
    1120:	31 96       	adiw	r30, 0x01	; 1
    1122:	ad b7       	in	r26, 0x3d	; 61
    1124:	be b7       	in	r27, 0x3e	; 62
    1126:	12 96       	adiw	r26, 0x02	; 2
    1128:	bc 92       	st	X, r11
    112a:	ae 92       	st	-X, r10
    112c:	11 97       	sbiw	r26, 0x01	; 1
    112e:	84 e6       	ldi	r24, 0x64	; 100
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	93 83       	std	Z+3, r25	; 0x03
    1134:	82 83       	std	Z+2, r24	; 0x02
    1136:	87 e2       	ldi	r24, 0x27	; 39
    1138:	92 e0       	ldi	r25, 0x02	; 2
    113a:	95 83       	std	Z+5, r25	; 0x05
    113c:	84 83       	std	Z+4, r24	; 0x04
    113e:	77 82       	std	Z+7, r7	; 0x07
    1140:	66 82       	std	Z+6, r6	; 0x06
    1142:	0e 94 77 0c 	call	0x18ee	; 0x18ee <snprintf>
				respon = sim900_send_cmd_wait_reply(0,(const uint8_t*)cmdx, (const
    1146:	ed b7       	in	r30, 0x3d	; 61
    1148:	fe b7       	in	r31, 0x3e	; 62
    114a:	38 96       	adiw	r30, 0x08	; 8
    114c:	0f b6       	in	r0, 0x3f	; 63
    114e:	f8 94       	cli
    1150:	fe bf       	out	0x3e, r31	; 62
    1152:	0f be       	out	0x3f, r0	; 63
    1154:	ed bf       	out	0x3d, r30	; 61
    1156:	80 e0       	ldi	r24, 0x00	; 0
    1158:	b5 01       	movw	r22, r10
    115a:	49 e3       	ldi	r20, 0x39	; 57
    115c:	52 e0       	ldi	r21, 0x02	; 2
    115e:	00 e4       	ldi	r16, 0x40	; 64
    1160:	1b e4       	ldi	r17, 0x4B	; 75
    1162:	2c e4       	ldi	r18, 0x4C	; 76
    1164:	30 e0       	ldi	r19, 0x00	; 0
    1166:	ee 24       	eor	r14, r14
    1168:	cc 24       	eor	r12, r12
    116a:	dd 24       	eor	r13, r13
    116c:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <sim900_send_cmd_wait_reply>
    1170:	18 2f       	mov	r17, r24
				uint8_t*)"+HTTPREAD:", 5000000, 0, NULL);
				if (respon)
    1172:	88 23       	and	r24, r24
    1174:	59 f1       	breq	.+86     	; 0x11cc <__stack+0xcd>
				{
					//get the rest of data
					memset(cmdx, '\0', MAX_BUFFER);
    1176:	ea 2d       	mov	r30, r10
    1178:	fb 2d       	mov	r31, r11
    117a:	84 e6       	ldi	r24, 0x64	; 100
    117c:	df 01       	movw	r26, r30
    117e:	1d 92       	st	X+, r1
    1180:	8a 95       	dec	r24
    1182:	e9 f7       	brne	.-6      	; 0x117e <__stack+0x7f>
					respon = sim900_send_cmd_wait_reply(0,NULL, (const uint8_t*)"\r\nOK",
    1184:	80 e0       	ldi	r24, 0x00	; 0
    1186:	60 e0       	ldi	r22, 0x00	; 0
    1188:	70 e0       	ldi	r23, 0x00	; 0
    118a:	44 e4       	ldi	r20, 0x44	; 68
    118c:	52 e0       	ldi	r21, 0x02	; 2
    118e:	00 e4       	ldi	r16, 0x40	; 64
    1190:	12 e4       	ldi	r17, 0x42	; 66
    1192:	2f e0       	ldi	r18, 0x0F	; 15
    1194:	30 e0       	ldi	r19, 0x00	; 0
    1196:	0f 2e       	mov	r0, r31
    1198:	f4 e6       	ldi	r31, 0x64	; 100
    119a:	ef 2e       	mov	r14, r31
    119c:	f0 2d       	mov	r31, r0
    119e:	65 01       	movw	r12, r10
    11a0:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <sim900_send_cmd_wait_reply>
    11a4:	18 2f       	mov	r17, r24
					1000000, MAX_BUFFER, cmdx);

					//filter out the respon and get clean data
					if (respon)
    11a6:	88 23       	and	r24, r24
    11a8:	89 f0       	breq	.+34     	; 0x11cc <__stack+0xcd>
					{
						//find first \n position
						pr = (uint8_t*)memchr(cmdx, '\n', num_data *sizeof(uint8_t));
    11aa:	c5 01       	movw	r24, r10
    11ac:	6a e0       	ldi	r22, 0x0A	; 10
    11ae:	70 e0       	ldi	r23, 0x00	; 0
    11b0:	a3 01       	movw	r20, r6
    11b2:	0e 94 38 0c 	call	0x1870	; 0x1870 <memchr>

						//copy to result
						memcpy(arespon_out, pr + 1, num_data *sizeof(uint8_t));
    11b6:	9c 01       	movw	r18, r24
    11b8:	2f 5f       	subi	r18, 0xFF	; 255
    11ba:	3f 4f       	sbci	r19, 0xFF	; 255
    11bc:	88 2d       	mov	r24, r8
    11be:	99 2d       	mov	r25, r9
    11c0:	62 2f       	mov	r22, r18
    11c2:	73 2f       	mov	r23, r19
    11c4:	46 2d       	mov	r20, r6
    11c6:	57 2d       	mov	r21, r7
    11c8:	0e 94 45 0c 	call	0x188a	; 0x188a <memcpy>
			}
		}
	}

	//terminate
	sim900_http_terminate();
    11cc:	0e 94 a5 06 	call	0xd4a	; 0xd4a <sim900_http_terminate>
	
	//free buffer
	free(cmdx);
    11d0:	c5 01       	movw	r24, r10
    11d2:	0e 94 81 0b 	call	0x1702	; 0x1702 <free>

	return respon;
    11d6:	01 c0       	rjmp	.+2      	; 0x11da <__stack+0xdb>
	uint8_t *cmdx = (uint8_t*) calloc(MAX_BUFFER,sizeof(uint8_t));
	
	//buffer created?
	if (cmdx == NULL)
	{
		return 0;
    11d8:	10 e0       	ldi	r17, 0x00	; 0
	
	//free buffer
	free(cmdx);

	return respon;
    11da:	81 2f       	mov	r24, r17
    11dc:	26 96       	adiw	r28, 0x06	; 6
    11de:	0f b6       	in	r0, 0x3f	; 63
    11e0:	f8 94       	cli
    11e2:	de bf       	out	0x3e, r29	; 62
    11e4:	0f be       	out	0x3f, r0	; 63
    11e6:	cd bf       	out	0x3d, r28	; 61
    11e8:	cf 91       	pop	r28
    11ea:	df 91       	pop	r29
    11ec:	1f 91       	pop	r17
    11ee:	0f 91       	pop	r16
    11f0:	ff 90       	pop	r15
    11f2:	ef 90       	pop	r14
    11f4:	df 90       	pop	r13
    11f6:	cf 90       	pop	r12
    11f8:	bf 90       	pop	r11
    11fa:	af 90       	pop	r10
    11fc:	9f 90       	pop	r9
    11fe:	8f 90       	pop	r8
    1200:	7f 90       	pop	r7
    1202:	6f 90       	pop	r6
    1204:	5f 90       	pop	r5
    1206:	4f 90       	pop	r4
    1208:	3f 90       	pop	r3
    120a:	08 95       	ret

0000120c <__vector_18>:
ISR (UART0_RECEIVE_INTERRUPT)	
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
    120c:	1f 92       	push	r1
    120e:	0f 92       	push	r0
    1210:	0f b6       	in	r0, 0x3f	; 63
    1212:	0f 92       	push	r0
    1214:	0b b6       	in	r0, 0x3b	; 59
    1216:	0f 92       	push	r0
    1218:	11 24       	eor	r1, r1
    121a:	2f 93       	push	r18
    121c:	3f 93       	push	r19
    121e:	8f 93       	push	r24
    1220:	9f 93       	push	r25
    1222:	ef 93       	push	r30
    1224:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */
    usr  = UART0_STATUS;
    1226:	2b b1       	in	r18, 0x0b	; 11
    data = UART0_DATA;
    1228:	3c b1       	in	r19, 0x0c	; 12
#elif defined(FE) && defined(DOR)
    lastRxError = usr & (_BV(FE)|_BV(DOR) );
#endif

    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    122a:	80 91 b7 02 	lds	r24, 0x02B7
    122e:	8f 5f       	subi	r24, 0xFF	; 255
    1230:	8f 71       	andi	r24, 0x1F	; 31
    
    if ( tmphead == UART_RxTail ) {
    1232:	90 91 b8 02 	lds	r25, 0x02B8
    1236:	89 17       	cp	r24, r25
    1238:	49 f0       	breq	.+18     	; 0x124c <__vector_18+0x40>
    usr  = UART0_STATUS;
    data = UART0_DATA;
    
    /* get FEn (Frame Error) DORn (Data OverRun) UPEn (USART Parity Error) bits */
#if defined(FE) && defined(DOR) && defined(UPE)
    lastRxError = usr & (_BV(FE)|_BV(DOR)|_BV(UPE) );
    123a:	2c 71       	andi	r18, 0x1C	; 28
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART_RxHead = tmphead;
    123c:	80 93 b7 02 	sts	0x02B7, r24
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    1240:	e9 eb       	ldi	r30, 0xB9	; 185
    1242:	f2 e0       	ldi	r31, 0x02	; 2
    1244:	e8 0f       	add	r30, r24
    1246:	f1 1d       	adc	r31, r1
    1248:	30 83       	st	Z, r19
    124a:	01 c0       	rjmp	.+2      	; 0x124e <__vector_18+0x42>
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    124c:	22 e0       	ldi	r18, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError |= lastRxError;   
    124e:	90 91 d9 02 	lds	r25, 0x02D9
    1252:	82 2f       	mov	r24, r18
    1254:	89 2b       	or	r24, r25
    1256:	80 93 d9 02 	sts	0x02D9, r24
}
    125a:	ff 91       	pop	r31
    125c:	ef 91       	pop	r30
    125e:	9f 91       	pop	r25
    1260:	8f 91       	pop	r24
    1262:	3f 91       	pop	r19
    1264:	2f 91       	pop	r18
    1266:	0f 90       	pop	r0
    1268:	0b be       	out	0x3b, r0	; 59
    126a:	0f 90       	pop	r0
    126c:	0f be       	out	0x3f, r0	; 63
    126e:	0f 90       	pop	r0
    1270:	1f 90       	pop	r1
    1272:	18 95       	reti

00001274 <__vector_19>:
ISR (UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
    1274:	1f 92       	push	r1
    1276:	0f 92       	push	r0
    1278:	0f b6       	in	r0, 0x3f	; 63
    127a:	0f 92       	push	r0
    127c:	0b b6       	in	r0, 0x3b	; 59
    127e:	0f 92       	push	r0
    1280:	11 24       	eor	r1, r1
    1282:	8f 93       	push	r24
    1284:	9f 93       	push	r25
    1286:	ef 93       	push	r30
    1288:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
    128a:	90 91 95 02 	lds	r25, 0x0295
    128e:	80 91 96 02 	lds	r24, 0x0296
    1292:	98 17       	cp	r25, r24
    1294:	69 f0       	breq	.+26     	; 0x12b0 <__vector_19+0x3c>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
    1296:	80 91 96 02 	lds	r24, 0x0296
    129a:	8f 5f       	subi	r24, 0xFF	; 255
    129c:	8f 71       	andi	r24, 0x1F	; 31
        UART_TxTail = tmptail;
    129e:	80 93 96 02 	sts	0x0296, r24
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
    12a2:	e7 e9       	ldi	r30, 0x97	; 151
    12a4:	f2 e0       	ldi	r31, 0x02	; 2
    12a6:	e8 0f       	add	r30, r24
    12a8:	f1 1d       	adc	r31, r1
    12aa:	80 81       	ld	r24, Z
    12ac:	8c b9       	out	0x0c, r24	; 12
    12ae:	01 c0       	rjmp	.+2      	; 0x12b2 <__vector_19+0x3e>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
    12b0:	55 98       	cbi	0x0a, 5	; 10
    }
}
    12b2:	ff 91       	pop	r31
    12b4:	ef 91       	pop	r30
    12b6:	9f 91       	pop	r25
    12b8:	8f 91       	pop	r24
    12ba:	0f 90       	pop	r0
    12bc:	0b be       	out	0x3b, r0	; 59
    12be:	0f 90       	pop	r0
    12c0:	0f be       	out	0x3f, r0	; 63
    12c2:	0f 90       	pop	r0
    12c4:	1f 90       	pop	r1
    12c6:	18 95       	reti

000012c8 <uart_init>:
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
    UART_TxHead = 0;
    12c8:	10 92 95 02 	sts	0x0295, r1
    UART_TxTail = 0;
    12cc:	10 92 96 02 	sts	0x0296, r1
    UART_RxHead = 0;
    12d0:	10 92 b7 02 	sts	0x02B7, r1
    UART_RxTail = 0;
    12d4:	10 92 b8 02 	sts	0x02B8, r1
#endif
#endif
#endif

    /* Set baud rate */
    if ( baudrate & 0x8000 )
    12d8:	99 23       	and	r25, r25
    12da:	14 f4       	brge	.+4      	; 0x12e0 <uart_init+0x18>
    {
        #if UART0_BIT_U2X
        UART0_STATUS = (1<<UART0_BIT_U2X);  //Enable 2x speed 
    12dc:	22 e0       	ldi	r18, 0x02	; 2
    12de:	2b b9       	out	0x0b, r18	; 11
        #endif
    } 
    #if defined(UART0_UBRRH)
    UART0_UBRRH = (unsigned char)((baudrate>>8)&0x80) ;
    12e0:	29 2f       	mov	r18, r25
    12e2:	20 78       	andi	r18, 0x80	; 128
    12e4:	20 93 90 00 	sts	0x0090, r18
    #endif    
    UART0_UBRRL = (unsigned char) (baudrate&0x00FF);
    12e8:	89 b9       	out	0x09, r24	; 9
      
    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(UART0_BIT_RXCIE)|(1<<UART0_BIT_RXEN)|(1<<UART0_BIT_TXEN);
    12ea:	88 e9       	ldi	r24, 0x98	; 152
    12ec:	8a b9       	out	0x0a, r24	; 10
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef UART0_CONTROLC
    #ifdef UART0_BIT_URSEL
    UART0_CONTROLC = (1<<UART0_BIT_URSEL)|(1<<UART0_BIT_UCSZ1)|(1<<UART0_BIT_UCSZ0);
    #else
    UART0_CONTROLC = (1<<UART0_BIT_UCSZ1)|(1<<UART0_BIT_UCSZ0);
    12ee:	86 e0       	ldi	r24, 0x06	; 6
    12f0:	80 93 95 00 	sts	0x0095, r24
    #endif 
    #endif

}/* uart_init */
    12f4:	08 95       	ret

000012f6 <uart_getc>:
    unsigned char tmptail;
    unsigned char data;
    unsigned char lastRxError;


    if ( UART_RxHead == UART_RxTail ) {
    12f6:	90 91 b7 02 	lds	r25, 0x02B7
    12fa:	80 91 b8 02 	lds	r24, 0x02B8
    12fe:	98 17       	cp	r25, r24
    1300:	a1 f0       	breq	.+40     	; 0x132a <uart_getc+0x34>
        return UART_NO_DATA;   /* no data available */
    }
    
    /* calculate buffer index */
    tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
    1302:	80 91 b8 02 	lds	r24, 0x02B8
    1306:	8f 5f       	subi	r24, 0xFF	; 255
    1308:	8f 71       	andi	r24, 0x1F	; 31
    
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
    130a:	e9 eb       	ldi	r30, 0xB9	; 185
    130c:	f2 e0       	ldi	r31, 0x02	; 2
    130e:	e8 0f       	add	r30, r24
    1310:	f1 1d       	adc	r31, r1
    1312:	90 81       	ld	r25, Z
    lastRxError = UART_LastRxError;
    1314:	40 91 d9 02 	lds	r20, 0x02D9
    
    /* store buffer index */
    UART_RxTail = tmptail; 
    1318:	80 93 b8 02 	sts	0x02B8, r24
    
    UART_LastRxError = 0;
    131c:	10 92 d9 02 	sts	0x02D9, r1
    return (lastRxError << 8) + data;
    1320:	34 2f       	mov	r19, r20
    1322:	20 e0       	ldi	r18, 0x00	; 0
    1324:	29 0f       	add	r18, r25
    1326:	31 1d       	adc	r19, r1
    1328:	02 c0       	rjmp	.+4      	; 0x132e <uart_getc+0x38>
    unsigned char data;
    unsigned char lastRxError;


    if ( UART_RxHead == UART_RxTail ) {
        return UART_NO_DATA;   /* no data available */
    132a:	20 e0       	ldi	r18, 0x00	; 0
    132c:	31 e0       	ldi	r19, 0x01	; 1
    UART_RxTail = tmptail; 
    
    UART_LastRxError = 0;
    return (lastRxError << 8) + data;

}/* uart_getc */
    132e:	82 2f       	mov	r24, r18
    1330:	93 2f       	mov	r25, r19
    1332:	08 95       	ret

00001334 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
    1334:	20 91 95 02 	lds	r18, 0x0295
    1338:	2f 5f       	subi	r18, 0xFF	; 255
    133a:	2f 71       	andi	r18, 0x1F	; 31
    
    while ( tmphead == UART_TxTail ){
    133c:	90 91 96 02 	lds	r25, 0x0296
    1340:	29 17       	cp	r18, r25
    1342:	e1 f3       	breq	.-8      	; 0x133c <uart_putc+0x8>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
    1344:	e7 e9       	ldi	r30, 0x97	; 151
    1346:	f2 e0       	ldi	r31, 0x02	; 2
    1348:	e2 0f       	add	r30, r18
    134a:	f1 1d       	adc	r31, r1
    134c:	80 83       	st	Z, r24
    UART_TxHead = tmphead;
    134e:	20 93 95 02 	sts	0x0295, r18

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
    1352:	55 9a       	sbi	0x0a, 5	; 10

}/* uart_putc */
    1354:	08 95       	ret

00001356 <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    1356:	cf 93       	push	r28
    1358:	df 93       	push	r29
    135a:	ec 01       	movw	r28, r24
    while (*s) 
    135c:	88 81       	ld	r24, Y
    135e:	88 23       	and	r24, r24
    1360:	31 f0       	breq	.+12     	; 0x136e <uart_puts+0x18>
Function: uart_puts()
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
    1362:	21 96       	adiw	r28, 0x01	; 1
{
    while (*s) 
      uart_putc(*s++);
    1364:	0e 94 9a 09 	call	0x1334	; 0x1334 <uart_putc>
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    while (*s) 
    1368:	89 91       	ld	r24, Y+
    136a:	88 23       	and	r24, r24
    136c:	d9 f7       	brne	.-10     	; 0x1364 <uart_puts+0xe>
      uart_putc(*s++);

}/* uart_puts */
    136e:	df 91       	pop	r29
    1370:	cf 91       	pop	r28
    1372:	08 95       	ret

00001374 <uart_puts_p>:
Purpose:  transmit string from program memory to UART
Input:    program memory string to be transmitted
Returns:  none
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
    1374:	cf 93       	push	r28
    1376:	df 93       	push	r29
    1378:	ec 01       	movw	r28, r24
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
    137a:	fc 01       	movw	r30, r24
    137c:	84 91       	lpm	r24, Z+
    137e:	88 23       	and	r24, r24
    1380:	41 f0       	breq	.+16     	; 0x1392 <uart_puts_p+0x1e>
    1382:	21 96       	adiw	r28, 0x01	; 1
      uart_putc(c);
    1384:	0e 94 9a 09 	call	0x1334	; 0x1334 <uart_putc>
    1388:	fe 01       	movw	r30, r28
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
    138a:	21 96       	adiw	r28, 0x01	; 1
    138c:	84 91       	lpm	r24, Z+
    138e:	88 23       	and	r24, r24
    1390:	c9 f7       	brne	.-14     	; 0x1384 <uart_puts_p+0x10>
      uart_putc(c);

}/* uart_puts_p */
    1392:	df 91       	pop	r29
    1394:	cf 91       	pop	r28
    1396:	08 95       	ret

00001398 <__vector_30>:
ISR(UART1_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART1 Receive Complete interrupt
Purpose:  called when the UART1 has received a character
**************************************************************************/
{
    1398:	1f 92       	push	r1
    139a:	0f 92       	push	r0
    139c:	0f b6       	in	r0, 0x3f	; 63
    139e:	0f 92       	push	r0
    13a0:	0b b6       	in	r0, 0x3b	; 59
    13a2:	0f 92       	push	r0
    13a4:	11 24       	eor	r1, r1
    13a6:	2f 93       	push	r18
    13a8:	3f 93       	push	r19
    13aa:	8f 93       	push	r24
    13ac:	9f 93       	push	r25
    13ae:	ef 93       	push	r30
    13b0:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */ 
    usr  = UART1_STATUS;
    13b2:	20 91 9b 00 	lds	r18, 0x009B
    data = UART1_DATA;
    13b6:	30 91 9c 00 	lds	r19, 0x009C
    
    /* get FEn (Frame Error) DORn (Data OverRun) UPEn (USART Parity Error) bits */
    lastRxError = usr & (_BV(FE1)|_BV(DOR1)|_BV(UPE1) );
            
    /* calculate buffer index */ 
    tmphead = ( UART1_RxHead + 1) & UART_RX_BUFFER_MASK;
    13ba:	80 91 72 02 	lds	r24, 0x0272
    13be:	8f 5f       	subi	r24, 0xFF	; 255
    13c0:	8f 71       	andi	r24, 0x1F	; 31
    
    if ( tmphead == UART1_RxTail ) {
    13c2:	90 91 73 02 	lds	r25, 0x0273
    13c6:	89 17       	cp	r24, r25
    13c8:	49 f0       	breq	.+18     	; 0x13dc <__vector_30+0x44>
    /* read UART status register and UART data register */ 
    usr  = UART1_STATUS;
    data = UART1_DATA;
    
    /* get FEn (Frame Error) DORn (Data OverRun) UPEn (USART Parity Error) bits */
    lastRxError = usr & (_BV(FE1)|_BV(DOR1)|_BV(UPE1) );
    13ca:	2c 71       	andi	r18, 0x1C	; 28
    if ( tmphead == UART1_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART1_RxHead = tmphead;
    13cc:	80 93 72 02 	sts	0x0272, r24
        /* store received data in buffer */
        UART1_RxBuf[tmphead] = data;
    13d0:	e4 e7       	ldi	r30, 0x74	; 116
    13d2:	f2 e0       	ldi	r31, 0x02	; 2
    13d4:	e8 0f       	add	r30, r24
    13d6:	f1 1d       	adc	r31, r1
    13d8:	30 83       	st	Z, r19
    13da:	01 c0       	rjmp	.+2      	; 0x13de <__vector_30+0x46>
    /* calculate buffer index */ 
    tmphead = ( UART1_RxHead + 1) & UART_RX_BUFFER_MASK;
    
    if ( tmphead == UART1_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    13dc:	22 e0       	ldi	r18, 0x02	; 2
        /* store new index */
        UART1_RxHead = tmphead;
        /* store received data in buffer */
        UART1_RxBuf[tmphead] = data;
    }
    UART1_LastRxError |= lastRxError;   
    13de:	90 91 94 02 	lds	r25, 0x0294
    13e2:	82 2f       	mov	r24, r18
    13e4:	89 2b       	or	r24, r25
    13e6:	80 93 94 02 	sts	0x0294, r24
}
    13ea:	ff 91       	pop	r31
    13ec:	ef 91       	pop	r30
    13ee:	9f 91       	pop	r25
    13f0:	8f 91       	pop	r24
    13f2:	3f 91       	pop	r19
    13f4:	2f 91       	pop	r18
    13f6:	0f 90       	pop	r0
    13f8:	0b be       	out	0x3b, r0	; 59
    13fa:	0f 90       	pop	r0
    13fc:	0f be       	out	0x3f, r0	; 63
    13fe:	0f 90       	pop	r0
    1400:	1f 90       	pop	r1
    1402:	18 95       	reti

00001404 <__vector_31>:
ISR(UART1_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART1 Data Register Empty interrupt
Purpose:  called when the UART1 is ready to transmit the next byte
**************************************************************************/
{
    1404:	1f 92       	push	r1
    1406:	0f 92       	push	r0
    1408:	0f b6       	in	r0, 0x3f	; 63
    140a:	0f 92       	push	r0
    140c:	0b b6       	in	r0, 0x3b	; 59
    140e:	0f 92       	push	r0
    1410:	11 24       	eor	r1, r1
    1412:	8f 93       	push	r24
    1414:	9f 93       	push	r25
    1416:	ef 93       	push	r30
    1418:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART1_TxHead != UART1_TxTail) {
    141a:	90 91 50 02 	lds	r25, 0x0250
    141e:	80 91 51 02 	lds	r24, 0x0251
    1422:	98 17       	cp	r25, r24
    1424:	71 f0       	breq	.+28     	; 0x1442 <__vector_31+0x3e>
        /* calculate and store new buffer index */
        tmptail = (UART1_TxTail + 1) & UART_TX_BUFFER_MASK;
    1426:	80 91 51 02 	lds	r24, 0x0251
    142a:	8f 5f       	subi	r24, 0xFF	; 255
    142c:	8f 71       	andi	r24, 0x1F	; 31
        UART1_TxTail = tmptail;
    142e:	80 93 51 02 	sts	0x0251, r24
        /* get one byte from buffer and write it to UART */
        UART1_DATA = UART1_TxBuf[tmptail];  /* start transmission */
    1432:	e2 e5       	ldi	r30, 0x52	; 82
    1434:	f2 e0       	ldi	r31, 0x02	; 2
    1436:	e8 0f       	add	r30, r24
    1438:	f1 1d       	adc	r31, r1
    143a:	80 81       	ld	r24, Z
    143c:	80 93 9c 00 	sts	0x009C, r24
    1440:	05 c0       	rjmp	.+10     	; 0x144c <__vector_31+0x48>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART1_CONTROL &= ~_BV(UART1_UDRIE);
    1442:	ea e9       	ldi	r30, 0x9A	; 154
    1444:	f0 e0       	ldi	r31, 0x00	; 0
    1446:	80 81       	ld	r24, Z
    1448:	8f 7d       	andi	r24, 0xDF	; 223
    144a:	80 83       	st	Z, r24
    }
}
    144c:	ff 91       	pop	r31
    144e:	ef 91       	pop	r30
    1450:	9f 91       	pop	r25
    1452:	8f 91       	pop	r24
    1454:	0f 90       	pop	r0
    1456:	0b be       	out	0x3b, r0	; 59
    1458:	0f 90       	pop	r0
    145a:	0f be       	out	0x3f, r0	; 63
    145c:	0f 90       	pop	r0
    145e:	1f 90       	pop	r1
    1460:	18 95       	reti

00001462 <uart1_init>:
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart1_init(unsigned int baudrate)
{
    UART1_TxHead = 0;
    1462:	10 92 50 02 	sts	0x0250, r1
    UART1_TxTail = 0;
    1466:	10 92 51 02 	sts	0x0251, r1
    UART1_RxHead = 0;
    146a:	10 92 72 02 	sts	0x0272, r1
    UART1_RxTail = 0;
    146e:	10 92 73 02 	sts	0x0273, r1
#endif
#endif
#endif

    /* Set baud rate */
    if ( baudrate & 0x8000 ) 
    1472:	99 23       	and	r25, r25
    1474:	1c f4       	brge	.+6      	; 0x147c <uart1_init+0x1a>
    {
        #if UART1_BIT_U2X
    	UART1_STATUS = (1<<UART1_BIT_U2X);  //Enable 2x speed 
    1476:	22 e0       	ldi	r18, 0x02	; 2
    1478:	20 93 9b 00 	sts	0x009B, r18
        #endif
    }
    UART1_UBRRH = (unsigned char)((baudrate>>8)&0x80) ;
    147c:	29 2f       	mov	r18, r25
    147e:	20 78       	andi	r18, 0x80	; 128
    1480:	20 93 98 00 	sts	0x0098, r18
    UART1_UBRRL = (unsigned char) baudrate;
    1484:	80 93 99 00 	sts	0x0099, r24
        
    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART1_CONTROL = _BV(UART1_BIT_RXCIE)|(1<<UART1_BIT_RXEN)|(1<<UART1_BIT_TXEN);    
    1488:	88 e9       	ldi	r24, 0x98	; 152
    148a:	80 93 9a 00 	sts	0x009A, r24
    
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */   
    #ifdef UART1_BIT_URSEL
    UART1_CONTROLC = (1<<UART1_BIT_URSEL)|(1<<UART1_BIT_UCSZ1)|(1<<UART1_BIT_UCSZ0);
    #else
    UART1_CONTROLC = (1<<UART1_BIT_UCSZ1)|(1<<UART1_BIT_UCSZ0);
    148e:	86 e0       	ldi	r24, 0x06	; 6
    1490:	80 93 9d 00 	sts	0x009D, r24
    #endif 
    
}/* uart_init */
    1494:	08 95       	ret

00001496 <uart1_getc>:
    unsigned char tmptail;
    unsigned int  data;
    unsigned char lastRxError;


    if ( UART1_RxHead == UART1_RxTail ) {
    1496:	90 91 72 02 	lds	r25, 0x0272
    149a:	80 91 73 02 	lds	r24, 0x0273
    149e:	98 17       	cp	r25, r24
    14a0:	a1 f0       	breq	.+40     	; 0x14ca <uart1_getc+0x34>
        return UART_NO_DATA;   /* no data available */
    }
    
    /* calculate buffer index */
    tmptail = (UART1_RxTail + 1) & UART_RX_BUFFER_MASK;
    14a2:	80 91 73 02 	lds	r24, 0x0273
    14a6:	8f 5f       	subi	r24, 0xFF	; 255
    14a8:	8f 71       	andi	r24, 0x1F	; 31
    
    /* get data from receive buffer */
    data = UART1_RxBuf[tmptail];
    14aa:	e4 e7       	ldi	r30, 0x74	; 116
    14ac:	f2 e0       	ldi	r31, 0x02	; 2
    14ae:	e8 0f       	add	r30, r24
    14b0:	f1 1d       	adc	r31, r1
    14b2:	90 81       	ld	r25, Z
    lastRxError = UART1_LastRxError;
    14b4:	40 91 94 02 	lds	r20, 0x0294
    
    /* store buffer index */
    UART1_RxTail = tmptail; 
    14b8:	80 93 73 02 	sts	0x0273, r24
    
    UART1_LastRxError = 0;
    14bc:	10 92 94 02 	sts	0x0294, r1
    return (lastRxError << 8) + data;
    14c0:	34 2f       	mov	r19, r20
    14c2:	20 e0       	ldi	r18, 0x00	; 0
    14c4:	29 0f       	add	r18, r25
    14c6:	31 1d       	adc	r19, r1
    14c8:	02 c0       	rjmp	.+4      	; 0x14ce <uart1_getc+0x38>
    unsigned int  data;
    unsigned char lastRxError;


    if ( UART1_RxHead == UART1_RxTail ) {
        return UART_NO_DATA;   /* no data available */
    14ca:	20 e0       	ldi	r18, 0x00	; 0
    14cc:	31 e0       	ldi	r19, 0x01	; 1
    UART1_RxTail = tmptail; 
    
    UART1_LastRxError = 0;
    return (lastRxError << 8) + data;

}/* uart1_getc */
    14ce:	82 2f       	mov	r24, r18
    14d0:	93 2f       	mov	r25, r19
    14d2:	08 95       	ret

000014d4 <uart1_putc>:
void uart1_putc(unsigned char data)
{
    unsigned char tmphead;

    
    tmphead  = (UART1_TxHead + 1) & UART_TX_BUFFER_MASK;
    14d4:	20 91 50 02 	lds	r18, 0x0250
    14d8:	2f 5f       	subi	r18, 0xFF	; 255
    14da:	2f 71       	andi	r18, 0x1F	; 31
    
    while ( tmphead == UART1_TxTail ){
    14dc:	90 91 51 02 	lds	r25, 0x0251
    14e0:	29 17       	cp	r18, r25
    14e2:	e1 f3       	breq	.-8      	; 0x14dc <uart1_putc+0x8>
        ;/* wait for free space in buffer */
    }
    
    UART1_TxBuf[tmphead] = data;
    14e4:	e2 e5       	ldi	r30, 0x52	; 82
    14e6:	f2 e0       	ldi	r31, 0x02	; 2
    14e8:	e2 0f       	add	r30, r18
    14ea:	f1 1d       	adc	r31, r1
    14ec:	80 83       	st	Z, r24
    UART1_TxHead = tmphead;
    14ee:	20 93 50 02 	sts	0x0250, r18

    /* enable UDRE interrupt */
    UART1_CONTROL    |= _BV(UART1_UDRIE);
    14f2:	ea e9       	ldi	r30, 0x9A	; 154
    14f4:	f0 e0       	ldi	r31, 0x00	; 0
    14f6:	80 81       	ld	r24, Z
    14f8:	80 62       	ori	r24, 0x20	; 32
    14fa:	80 83       	st	Z, r24

}/* uart1_putc */
    14fc:	08 95       	ret

000014fe <uart1_puts>:
Purpose:  transmit string to UART1
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart1_puts(const char *s )
{
    14fe:	cf 93       	push	r28
    1500:	df 93       	push	r29
    1502:	ec 01       	movw	r28, r24
    while (*s) 
    1504:	88 81       	ld	r24, Y
    1506:	88 23       	and	r24, r24
    1508:	31 f0       	breq	.+12     	; 0x1516 <uart1_puts+0x18>
Function: uart1_puts()
Purpose:  transmit string to UART1
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart1_puts(const char *s )
    150a:	21 96       	adiw	r28, 0x01	; 1
{
    while (*s) 
      uart1_putc(*s++);
    150c:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <uart1_putc>
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart1_puts(const char *s )
{
    while (*s) 
    1510:	89 91       	ld	r24, Y+
    1512:	88 23       	and	r24, r24
    1514:	d9 f7       	brne	.-10     	; 0x150c <uart1_puts+0xe>
      uart1_putc(*s++);

}/* uart1_puts */
    1516:	df 91       	pop	r29
    1518:	cf 91       	pop	r28
    151a:	08 95       	ret

0000151c <uart1_puts_p>:
Purpose:  transmit string from program memory to UART1
Input:    program memory string to be transmitted
Returns:  none
**************************************************************************/
void uart1_puts_p(const char *progmem_s )
{
    151c:	cf 93       	push	r28
    151e:	df 93       	push	r29
    1520:	ec 01       	movw	r28, r24
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
    1522:	fc 01       	movw	r30, r24
    1524:	84 91       	lpm	r24, Z+
    1526:	88 23       	and	r24, r24
    1528:	41 f0       	breq	.+16     	; 0x153a <uart1_puts_p+0x1e>
    152a:	21 96       	adiw	r28, 0x01	; 1
      uart1_putc(c);
    152c:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <uart1_putc>
    1530:	fe 01       	movw	r30, r28
**************************************************************************/
void uart1_puts_p(const char *progmem_s )
{
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
    1532:	21 96       	adiw	r28, 0x01	; 1
    1534:	84 91       	lpm	r24, Z+
    1536:	88 23       	and	r24, r24
    1538:	c9 f7       	brne	.-14     	; 0x152c <uart1_puts_p+0x10>
      uart1_putc(c);

}/* uart1_puts_p */
    153a:	df 91       	pop	r29
    153c:	cf 91       	pop	r28
    153e:	08 95       	ret

00001540 <__udivmodsi4>:
    1540:	a1 e2       	ldi	r26, 0x21	; 33
    1542:	1a 2e       	mov	r1, r26
    1544:	aa 1b       	sub	r26, r26
    1546:	bb 1b       	sub	r27, r27
    1548:	fd 01       	movw	r30, r26
    154a:	0d c0       	rjmp	.+26     	; 0x1566 <__udivmodsi4_ep>

0000154c <__udivmodsi4_loop>:
    154c:	aa 1f       	adc	r26, r26
    154e:	bb 1f       	adc	r27, r27
    1550:	ee 1f       	adc	r30, r30
    1552:	ff 1f       	adc	r31, r31
    1554:	a2 17       	cp	r26, r18
    1556:	b3 07       	cpc	r27, r19
    1558:	e4 07       	cpc	r30, r20
    155a:	f5 07       	cpc	r31, r21
    155c:	20 f0       	brcs	.+8      	; 0x1566 <__udivmodsi4_ep>
    155e:	a2 1b       	sub	r26, r18
    1560:	b3 0b       	sbc	r27, r19
    1562:	e4 0b       	sbc	r30, r20
    1564:	f5 0b       	sbc	r31, r21

00001566 <__udivmodsi4_ep>:
    1566:	66 1f       	adc	r22, r22
    1568:	77 1f       	adc	r23, r23
    156a:	88 1f       	adc	r24, r24
    156c:	99 1f       	adc	r25, r25
    156e:	1a 94       	dec	r1
    1570:	69 f7       	brne	.-38     	; 0x154c <__udivmodsi4_loop>
    1572:	60 95       	com	r22
    1574:	70 95       	com	r23
    1576:	80 95       	com	r24
    1578:	90 95       	com	r25
    157a:	9b 01       	movw	r18, r22
    157c:	ac 01       	movw	r20, r24
    157e:	bd 01       	movw	r22, r26
    1580:	cf 01       	movw	r24, r30
    1582:	08 95       	ret

00001584 <calloc>:
    1584:	ef 92       	push	r14
    1586:	ff 92       	push	r15
    1588:	0f 93       	push	r16
    158a:	1f 93       	push	r17
    158c:	cf 93       	push	r28
    158e:	df 93       	push	r29
    1590:	68 9f       	mul	r22, r24
    1592:	80 01       	movw	r16, r0
    1594:	69 9f       	mul	r22, r25
    1596:	10 0d       	add	r17, r0
    1598:	78 9f       	mul	r23, r24
    159a:	10 0d       	add	r17, r0
    159c:	11 24       	eor	r1, r1
    159e:	c8 01       	movw	r24, r16
    15a0:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <malloc>
    15a4:	e8 2e       	mov	r14, r24
    15a6:	e7 01       	movw	r28, r14
    15a8:	7e 01       	movw	r14, r28
    15aa:	f9 2e       	mov	r15, r25
    15ac:	e7 01       	movw	r28, r14
    15ae:	20 97       	sbiw	r28, 0x00	; 0
    15b0:	31 f0       	breq	.+12     	; 0x15be <calloc+0x3a>
    15b2:	8e 2d       	mov	r24, r14
    15b4:	60 e0       	ldi	r22, 0x00	; 0
    15b6:	70 e0       	ldi	r23, 0x00	; 0
    15b8:	a8 01       	movw	r20, r16
    15ba:	0e 94 4e 0c 	call	0x189c	; 0x189c <memset>
    15be:	ce 01       	movw	r24, r28
    15c0:	df 91       	pop	r29
    15c2:	cf 91       	pop	r28
    15c4:	1f 91       	pop	r17
    15c6:	0f 91       	pop	r16
    15c8:	ff 90       	pop	r15
    15ca:	ef 90       	pop	r14
    15cc:	08 95       	ret

000015ce <malloc>:
    15ce:	cf 93       	push	r28
    15d0:	df 93       	push	r29
    15d2:	82 30       	cpi	r24, 0x02	; 2
    15d4:	91 05       	cpc	r25, r1
    15d6:	10 f4       	brcc	.+4      	; 0x15dc <malloc+0xe>
    15d8:	82 e0       	ldi	r24, 0x02	; 2
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	e0 91 dc 02 	lds	r30, 0x02DC
    15e0:	f0 91 dd 02 	lds	r31, 0x02DD
    15e4:	40 e0       	ldi	r20, 0x00	; 0
    15e6:	50 e0       	ldi	r21, 0x00	; 0
    15e8:	20 e0       	ldi	r18, 0x00	; 0
    15ea:	30 e0       	ldi	r19, 0x00	; 0
    15ec:	26 c0       	rjmp	.+76     	; 0x163a <malloc+0x6c>
    15ee:	60 81       	ld	r22, Z
    15f0:	71 81       	ldd	r23, Z+1	; 0x01
    15f2:	68 17       	cp	r22, r24
    15f4:	79 07       	cpc	r23, r25
    15f6:	e0 f0       	brcs	.+56     	; 0x1630 <malloc+0x62>
    15f8:	68 17       	cp	r22, r24
    15fa:	79 07       	cpc	r23, r25
    15fc:	81 f4       	brne	.+32     	; 0x161e <malloc+0x50>
    15fe:	82 81       	ldd	r24, Z+2	; 0x02
    1600:	93 81       	ldd	r25, Z+3	; 0x03
    1602:	21 15       	cp	r18, r1
    1604:	31 05       	cpc	r19, r1
    1606:	31 f0       	breq	.+12     	; 0x1614 <malloc+0x46>
    1608:	d9 01       	movw	r26, r18
    160a:	13 96       	adiw	r26, 0x03	; 3
    160c:	9c 93       	st	X, r25
    160e:	8e 93       	st	-X, r24
    1610:	12 97       	sbiw	r26, 0x02	; 2
    1612:	2b c0       	rjmp	.+86     	; 0x166a <malloc+0x9c>
    1614:	90 93 dd 02 	sts	0x02DD, r25
    1618:	80 93 dc 02 	sts	0x02DC, r24
    161c:	26 c0       	rjmp	.+76     	; 0x166a <malloc+0x9c>
    161e:	41 15       	cp	r20, r1
    1620:	51 05       	cpc	r21, r1
    1622:	19 f0       	breq	.+6      	; 0x162a <malloc+0x5c>
    1624:	64 17       	cp	r22, r20
    1626:	75 07       	cpc	r23, r21
    1628:	18 f4       	brcc	.+6      	; 0x1630 <malloc+0x62>
    162a:	ab 01       	movw	r20, r22
    162c:	e9 01       	movw	r28, r18
    162e:	df 01       	movw	r26, r30
    1630:	9f 01       	movw	r18, r30
    1632:	72 81       	ldd	r23, Z+2	; 0x02
    1634:	63 81       	ldd	r22, Z+3	; 0x03
    1636:	e7 2f       	mov	r30, r23
    1638:	f6 2f       	mov	r31, r22
    163a:	30 97       	sbiw	r30, 0x00	; 0
    163c:	c1 f6       	brne	.-80     	; 0x15ee <malloc+0x20>
    163e:	41 15       	cp	r20, r1
    1640:	51 05       	cpc	r21, r1
    1642:	01 f1       	breq	.+64     	; 0x1684 <malloc+0xb6>
    1644:	48 1b       	sub	r20, r24
    1646:	59 0b       	sbc	r21, r25
    1648:	44 30       	cpi	r20, 0x04	; 4
    164a:	51 05       	cpc	r21, r1
    164c:	80 f4       	brcc	.+32     	; 0x166e <malloc+0xa0>
    164e:	12 96       	adiw	r26, 0x02	; 2
    1650:	8d 91       	ld	r24, X+
    1652:	9c 91       	ld	r25, X
    1654:	13 97       	sbiw	r26, 0x03	; 3
    1656:	20 97       	sbiw	r28, 0x00	; 0
    1658:	19 f0       	breq	.+6      	; 0x1660 <malloc+0x92>
    165a:	9b 83       	std	Y+3, r25	; 0x03
    165c:	8a 83       	std	Y+2, r24	; 0x02
    165e:	04 c0       	rjmp	.+8      	; 0x1668 <malloc+0x9a>
    1660:	90 93 dd 02 	sts	0x02DD, r25
    1664:	80 93 dc 02 	sts	0x02DC, r24
    1668:	fd 01       	movw	r30, r26
    166a:	32 96       	adiw	r30, 0x02	; 2
    166c:	46 c0       	rjmp	.+140    	; 0x16fa <malloc+0x12c>
    166e:	fd 01       	movw	r30, r26
    1670:	e4 0f       	add	r30, r20
    1672:	f5 1f       	adc	r31, r21
    1674:	81 93       	st	Z+, r24
    1676:	91 93       	st	Z+, r25
    1678:	42 50       	subi	r20, 0x02	; 2
    167a:	50 40       	sbci	r21, 0x00	; 0
    167c:	11 96       	adiw	r26, 0x01	; 1
    167e:	5c 93       	st	X, r21
    1680:	4e 93       	st	-X, r20
    1682:	3b c0       	rjmp	.+118    	; 0x16fa <malloc+0x12c>
    1684:	20 91 da 02 	lds	r18, 0x02DA
    1688:	30 91 db 02 	lds	r19, 0x02DB
    168c:	21 15       	cp	r18, r1
    168e:	31 05       	cpc	r19, r1
    1690:	41 f4       	brne	.+16     	; 0x16a2 <malloc+0xd4>
    1692:	20 91 4b 02 	lds	r18, 0x024B
    1696:	30 91 4c 02 	lds	r19, 0x024C
    169a:	30 93 db 02 	sts	0x02DB, r19
    169e:	20 93 da 02 	sts	0x02DA, r18
    16a2:	20 91 4d 02 	lds	r18, 0x024D
    16a6:	30 91 4e 02 	lds	r19, 0x024E
    16aa:	21 15       	cp	r18, r1
    16ac:	31 05       	cpc	r19, r1
    16ae:	41 f4       	brne	.+16     	; 0x16c0 <malloc+0xf2>
    16b0:	2d b7       	in	r18, 0x3d	; 61
    16b2:	3e b7       	in	r19, 0x3e	; 62
    16b4:	40 91 49 02 	lds	r20, 0x0249
    16b8:	50 91 4a 02 	lds	r21, 0x024A
    16bc:	24 1b       	sub	r18, r20
    16be:	35 0b       	sbc	r19, r21
    16c0:	e0 91 da 02 	lds	r30, 0x02DA
    16c4:	f0 91 db 02 	lds	r31, 0x02DB
    16c8:	e2 17       	cp	r30, r18
    16ca:	f3 07       	cpc	r31, r19
    16cc:	a0 f4       	brcc	.+40     	; 0x16f6 <malloc+0x128>
    16ce:	2e 1b       	sub	r18, r30
    16d0:	3f 0b       	sbc	r19, r31
    16d2:	28 17       	cp	r18, r24
    16d4:	39 07       	cpc	r19, r25
    16d6:	78 f0       	brcs	.+30     	; 0x16f6 <malloc+0x128>
    16d8:	ac 01       	movw	r20, r24
    16da:	4e 5f       	subi	r20, 0xFE	; 254
    16dc:	5f 4f       	sbci	r21, 0xFF	; 255
    16de:	24 17       	cp	r18, r20
    16e0:	35 07       	cpc	r19, r21
    16e2:	48 f0       	brcs	.+18     	; 0x16f6 <malloc+0x128>
    16e4:	4e 0f       	add	r20, r30
    16e6:	5f 1f       	adc	r21, r31
    16e8:	50 93 db 02 	sts	0x02DB, r21
    16ec:	40 93 da 02 	sts	0x02DA, r20
    16f0:	81 93       	st	Z+, r24
    16f2:	91 93       	st	Z+, r25
    16f4:	02 c0       	rjmp	.+4      	; 0x16fa <malloc+0x12c>
    16f6:	e0 e0       	ldi	r30, 0x00	; 0
    16f8:	f0 e0       	ldi	r31, 0x00	; 0
    16fa:	cf 01       	movw	r24, r30
    16fc:	df 91       	pop	r29
    16fe:	cf 91       	pop	r28
    1700:	08 95       	ret

00001702 <free>:
    1702:	cf 93       	push	r28
    1704:	df 93       	push	r29
    1706:	00 97       	sbiw	r24, 0x00	; 0
    1708:	09 f4       	brne	.+2      	; 0x170c <free+0xa>
    170a:	91 c0       	rjmp	.+290    	; 0x182e <free+0x12c>
    170c:	fc 01       	movw	r30, r24
    170e:	32 97       	sbiw	r30, 0x02	; 2
    1710:	13 82       	std	Z+3, r1	; 0x03
    1712:	12 82       	std	Z+2, r1	; 0x02
    1714:	60 91 dc 02 	lds	r22, 0x02DC
    1718:	70 91 dd 02 	lds	r23, 0x02DD
    171c:	61 15       	cp	r22, r1
    171e:	71 05       	cpc	r23, r1
    1720:	81 f4       	brne	.+32     	; 0x1742 <free+0x40>
    1722:	20 81       	ld	r18, Z
    1724:	31 81       	ldd	r19, Z+1	; 0x01
    1726:	28 0f       	add	r18, r24
    1728:	39 1f       	adc	r19, r25
    172a:	80 91 da 02 	lds	r24, 0x02DA
    172e:	90 91 db 02 	lds	r25, 0x02DB
    1732:	82 17       	cp	r24, r18
    1734:	93 07       	cpc	r25, r19
    1736:	99 f5       	brne	.+102    	; 0x179e <free+0x9c>
    1738:	f0 93 db 02 	sts	0x02DB, r31
    173c:	e0 93 da 02 	sts	0x02DA, r30
    1740:	76 c0       	rjmp	.+236    	; 0x182e <free+0x12c>
    1742:	db 01       	movw	r26, r22
    1744:	80 e0       	ldi	r24, 0x00	; 0
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	02 c0       	rjmp	.+4      	; 0x174e <free+0x4c>
    174a:	cd 01       	movw	r24, r26
    174c:	d9 01       	movw	r26, r18
    174e:	ae 17       	cp	r26, r30
    1750:	bf 07       	cpc	r27, r31
    1752:	48 f4       	brcc	.+18     	; 0x1766 <free+0x64>
    1754:	12 96       	adiw	r26, 0x02	; 2
    1756:	2d 91       	ld	r18, X+
    1758:	3c 91       	ld	r19, X
    175a:	13 97       	sbiw	r26, 0x03	; 3
    175c:	21 15       	cp	r18, r1
    175e:	31 05       	cpc	r19, r1
    1760:	a1 f7       	brne	.-24     	; 0x174a <free+0x48>
    1762:	cd 01       	movw	r24, r26
    1764:	21 c0       	rjmp	.+66     	; 0x17a8 <free+0xa6>
    1766:	b3 83       	std	Z+3, r27	; 0x03
    1768:	a2 83       	std	Z+2, r26	; 0x02
    176a:	ef 01       	movw	r28, r30
    176c:	49 91       	ld	r20, Y+
    176e:	59 91       	ld	r21, Y+
    1770:	9e 01       	movw	r18, r28
    1772:	24 0f       	add	r18, r20
    1774:	35 1f       	adc	r19, r21
    1776:	a2 17       	cp	r26, r18
    1778:	b3 07       	cpc	r27, r19
    177a:	79 f4       	brne	.+30     	; 0x179a <free+0x98>
    177c:	2d 91       	ld	r18, X+
    177e:	3c 91       	ld	r19, X
    1780:	11 97       	sbiw	r26, 0x01	; 1
    1782:	24 0f       	add	r18, r20
    1784:	35 1f       	adc	r19, r21
    1786:	2e 5f       	subi	r18, 0xFE	; 254
    1788:	3f 4f       	sbci	r19, 0xFF	; 255
    178a:	31 83       	std	Z+1, r19	; 0x01
    178c:	20 83       	st	Z, r18
    178e:	12 96       	adiw	r26, 0x02	; 2
    1790:	2d 91       	ld	r18, X+
    1792:	3c 91       	ld	r19, X
    1794:	13 97       	sbiw	r26, 0x03	; 3
    1796:	33 83       	std	Z+3, r19	; 0x03
    1798:	22 83       	std	Z+2, r18	; 0x02
    179a:	00 97       	sbiw	r24, 0x00	; 0
    179c:	29 f4       	brne	.+10     	; 0x17a8 <free+0xa6>
    179e:	f0 93 dd 02 	sts	0x02DD, r31
    17a2:	e0 93 dc 02 	sts	0x02DC, r30
    17a6:	43 c0       	rjmp	.+134    	; 0x182e <free+0x12c>
    17a8:	dc 01       	movw	r26, r24
    17aa:	13 96       	adiw	r26, 0x03	; 3
    17ac:	fc 93       	st	X, r31
    17ae:	ee 93       	st	-X, r30
    17b0:	12 97       	sbiw	r26, 0x02	; 2
    17b2:	4d 91       	ld	r20, X+
    17b4:	5d 91       	ld	r21, X+
    17b6:	a4 0f       	add	r26, r20
    17b8:	b5 1f       	adc	r27, r21
    17ba:	ea 17       	cp	r30, r26
    17bc:	fb 07       	cpc	r31, r27
    17be:	69 f4       	brne	.+26     	; 0x17da <free+0xd8>
    17c0:	20 81       	ld	r18, Z
    17c2:	31 81       	ldd	r19, Z+1	; 0x01
    17c4:	24 0f       	add	r18, r20
    17c6:	35 1f       	adc	r19, r21
    17c8:	2e 5f       	subi	r18, 0xFE	; 254
    17ca:	3f 4f       	sbci	r19, 0xFF	; 255
    17cc:	ec 01       	movw	r28, r24
    17ce:	39 83       	std	Y+1, r19	; 0x01
    17d0:	28 83       	st	Y, r18
    17d2:	22 81       	ldd	r18, Z+2	; 0x02
    17d4:	33 81       	ldd	r19, Z+3	; 0x03
    17d6:	3b 83       	std	Y+3, r19	; 0x03
    17d8:	2a 83       	std	Y+2, r18	; 0x02
    17da:	e0 e0       	ldi	r30, 0x00	; 0
    17dc:	f0 e0       	ldi	r31, 0x00	; 0
    17de:	02 c0       	rjmp	.+4      	; 0x17e4 <free+0xe2>
    17e0:	fb 01       	movw	r30, r22
    17e2:	bc 01       	movw	r22, r24
    17e4:	db 01       	movw	r26, r22
    17e6:	12 96       	adiw	r26, 0x02	; 2
    17e8:	8d 91       	ld	r24, X+
    17ea:	9c 91       	ld	r25, X
    17ec:	13 97       	sbiw	r26, 0x03	; 3
    17ee:	00 97       	sbiw	r24, 0x00	; 0
    17f0:	b9 f7       	brne	.-18     	; 0x17e0 <free+0xde>
    17f2:	9b 01       	movw	r18, r22
    17f4:	2e 5f       	subi	r18, 0xFE	; 254
    17f6:	3f 4f       	sbci	r19, 0xFF	; 255
    17f8:	8d 91       	ld	r24, X+
    17fa:	9c 91       	ld	r25, X
    17fc:	11 97       	sbiw	r26, 0x01	; 1
    17fe:	82 0f       	add	r24, r18
    1800:	93 1f       	adc	r25, r19
    1802:	40 91 da 02 	lds	r20, 0x02DA
    1806:	50 91 db 02 	lds	r21, 0x02DB
    180a:	48 17       	cp	r20, r24
    180c:	59 07       	cpc	r21, r25
    180e:	79 f4       	brne	.+30     	; 0x182e <free+0x12c>
    1810:	30 97       	sbiw	r30, 0x00	; 0
    1812:	29 f4       	brne	.+10     	; 0x181e <free+0x11c>
    1814:	10 92 dd 02 	sts	0x02DD, r1
    1818:	10 92 dc 02 	sts	0x02DC, r1
    181c:	02 c0       	rjmp	.+4      	; 0x1822 <free+0x120>
    181e:	13 82       	std	Z+3, r1	; 0x03
    1820:	12 82       	std	Z+2, r1	; 0x02
    1822:	22 50       	subi	r18, 0x02	; 2
    1824:	30 40       	sbci	r19, 0x00	; 0
    1826:	30 93 db 02 	sts	0x02DB, r19
    182a:	20 93 da 02 	sts	0x02DA, r18
    182e:	df 91       	pop	r29
    1830:	cf 91       	pop	r28
    1832:	08 95       	ret

00001834 <atoi>:
    1834:	fc 01       	movw	r30, r24
    1836:	88 27       	eor	r24, r24
    1838:	99 27       	eor	r25, r25
    183a:	e8 94       	clt
    183c:	21 91       	ld	r18, Z+
    183e:	20 32       	cpi	r18, 0x20	; 32
    1840:	e9 f3       	breq	.-6      	; 0x183c <atoi+0x8>
    1842:	29 30       	cpi	r18, 0x09	; 9
    1844:	10 f0       	brcs	.+4      	; 0x184a <atoi+0x16>
    1846:	2e 30       	cpi	r18, 0x0E	; 14
    1848:	c8 f3       	brcs	.-14     	; 0x183c <atoi+0x8>
    184a:	2b 32       	cpi	r18, 0x2B	; 43
    184c:	41 f0       	breq	.+16     	; 0x185e <atoi+0x2a>
    184e:	2d 32       	cpi	r18, 0x2D	; 45
    1850:	39 f4       	brne	.+14     	; 0x1860 <atoi+0x2c>
    1852:	68 94       	set
    1854:	04 c0       	rjmp	.+8      	; 0x185e <atoi+0x2a>
    1856:	0e 94 6f 0c 	call	0x18de	; 0x18de <__mulhi_const_10>
    185a:	82 0f       	add	r24, r18
    185c:	91 1d       	adc	r25, r1
    185e:	21 91       	ld	r18, Z+
    1860:	20 53       	subi	r18, 0x30	; 48
    1862:	2a 30       	cpi	r18, 0x0A	; 10
    1864:	c0 f3       	brcs	.-16     	; 0x1856 <atoi+0x22>
    1866:	1e f4       	brtc	.+6      	; 0x186e <atoi+0x3a>
    1868:	90 95       	com	r25
    186a:	81 95       	neg	r24
    186c:	9f 4f       	sbci	r25, 0xFF	; 255
    186e:	08 95       	ret

00001870 <memchr>:
    1870:	fc 01       	movw	r30, r24
    1872:	41 50       	subi	r20, 0x01	; 1
    1874:	50 40       	sbci	r21, 0x00	; 0
    1876:	30 f0       	brcs	.+12     	; 0x1884 <memchr+0x14>
    1878:	01 90       	ld	r0, Z+
    187a:	06 16       	cp	r0, r22
    187c:	d1 f7       	brne	.-12     	; 0x1872 <memchr+0x2>
    187e:	31 97       	sbiw	r30, 0x01	; 1
    1880:	cf 01       	movw	r24, r30
    1882:	08 95       	ret
    1884:	88 27       	eor	r24, r24
    1886:	99 27       	eor	r25, r25
    1888:	08 95       	ret

0000188a <memcpy>:
    188a:	fb 01       	movw	r30, r22
    188c:	dc 01       	movw	r26, r24
    188e:	02 c0       	rjmp	.+4      	; 0x1894 <memcpy+0xa>
    1890:	01 90       	ld	r0, Z+
    1892:	0d 92       	st	X+, r0
    1894:	41 50       	subi	r20, 0x01	; 1
    1896:	50 40       	sbci	r21, 0x00	; 0
    1898:	d8 f7       	brcc	.-10     	; 0x1890 <memcpy+0x6>
    189a:	08 95       	ret

0000189c <memset>:
    189c:	dc 01       	movw	r26, r24
    189e:	01 c0       	rjmp	.+2      	; 0x18a2 <memset+0x6>
    18a0:	6d 93       	st	X+, r22
    18a2:	41 50       	subi	r20, 0x01	; 1
    18a4:	50 40       	sbci	r21, 0x00	; 0
    18a6:	e0 f7       	brcc	.-8      	; 0x18a0 <memset+0x4>
    18a8:	08 95       	ret

000018aa <strstr>:
    18aa:	fb 01       	movw	r30, r22
    18ac:	51 91       	ld	r21, Z+
    18ae:	55 23       	and	r21, r21
    18b0:	a9 f0       	breq	.+42     	; 0x18dc <strstr+0x32>
    18b2:	bf 01       	movw	r22, r30
    18b4:	dc 01       	movw	r26, r24
    18b6:	4d 91       	ld	r20, X+
    18b8:	45 17       	cp	r20, r21
    18ba:	41 11       	cpse	r20, r1
    18bc:	e1 f7       	brne	.-8      	; 0x18b6 <strstr+0xc>
    18be:	59 f4       	brne	.+22     	; 0x18d6 <strstr+0x2c>
    18c0:	cd 01       	movw	r24, r26
    18c2:	01 90       	ld	r0, Z+
    18c4:	00 20       	and	r0, r0
    18c6:	49 f0       	breq	.+18     	; 0x18da <strstr+0x30>
    18c8:	4d 91       	ld	r20, X+
    18ca:	40 15       	cp	r20, r0
    18cc:	41 11       	cpse	r20, r1
    18ce:	c9 f3       	breq	.-14     	; 0x18c2 <strstr+0x18>
    18d0:	fb 01       	movw	r30, r22
    18d2:	41 11       	cpse	r20, r1
    18d4:	ef cf       	rjmp	.-34     	; 0x18b4 <strstr+0xa>
    18d6:	81 e0       	ldi	r24, 0x01	; 1
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	01 97       	sbiw	r24, 0x01	; 1
    18dc:	08 95       	ret

000018de <__mulhi_const_10>:
    18de:	7a e0       	ldi	r23, 0x0A	; 10
    18e0:	97 9f       	mul	r25, r23
    18e2:	90 2d       	mov	r25, r0
    18e4:	87 9f       	mul	r24, r23
    18e6:	80 2d       	mov	r24, r0
    18e8:	91 0d       	add	r25, r1
    18ea:	11 24       	eor	r1, r1
    18ec:	08 95       	ret

000018ee <snprintf>:
    18ee:	0f 93       	push	r16
    18f0:	1f 93       	push	r17
    18f2:	df 93       	push	r29
    18f4:	cf 93       	push	r28
    18f6:	cd b7       	in	r28, 0x3d	; 61
    18f8:	de b7       	in	r29, 0x3e	; 62
    18fa:	2e 97       	sbiw	r28, 0x0e	; 14
    18fc:	0f b6       	in	r0, 0x3f	; 63
    18fe:	f8 94       	cli
    1900:	de bf       	out	0x3e, r29	; 62
    1902:	0f be       	out	0x3f, r0	; 63
    1904:	cd bf       	out	0x3d, r28	; 61
    1906:	0d 89       	ldd	r16, Y+21	; 0x15
    1908:	1e 89       	ldd	r17, Y+22	; 0x16
    190a:	8f 89       	ldd	r24, Y+23	; 0x17
    190c:	98 8d       	ldd	r25, Y+24	; 0x18
    190e:	26 e0       	ldi	r18, 0x06	; 6
    1910:	2c 83       	std	Y+4, r18	; 0x04
    1912:	1a 83       	std	Y+2, r17	; 0x02
    1914:	09 83       	std	Y+1, r16	; 0x01
    1916:	97 ff       	sbrs	r25, 7
    1918:	02 c0       	rjmp	.+4      	; 0x191e <snprintf+0x30>
    191a:	80 e0       	ldi	r24, 0x00	; 0
    191c:	90 e8       	ldi	r25, 0x80	; 128
    191e:	01 97       	sbiw	r24, 0x01	; 1
    1920:	9e 83       	std	Y+6, r25	; 0x06
    1922:	8d 83       	std	Y+5, r24	; 0x05
    1924:	9e 01       	movw	r18, r28
    1926:	25 5e       	subi	r18, 0xE5	; 229
    1928:	3f 4f       	sbci	r19, 0xFF	; 255
    192a:	ce 01       	movw	r24, r28
    192c:	01 96       	adiw	r24, 0x01	; 1
    192e:	69 8d       	ldd	r22, Y+25	; 0x19
    1930:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1932:	a9 01       	movw	r20, r18
    1934:	0e 94 b5 0c 	call	0x196a	; 0x196a <vfprintf>
    1938:	4d 81       	ldd	r20, Y+5	; 0x05
    193a:	5e 81       	ldd	r21, Y+6	; 0x06
    193c:	57 fd       	sbrc	r21, 7
    193e:	0a c0       	rjmp	.+20     	; 0x1954 <snprintf+0x66>
    1940:	2f 81       	ldd	r18, Y+7	; 0x07
    1942:	38 85       	ldd	r19, Y+8	; 0x08
    1944:	42 17       	cp	r20, r18
    1946:	53 07       	cpc	r21, r19
    1948:	0c f4       	brge	.+2      	; 0x194c <snprintf+0x5e>
    194a:	9a 01       	movw	r18, r20
    194c:	02 0f       	add	r16, r18
    194e:	13 1f       	adc	r17, r19
    1950:	f8 01       	movw	r30, r16
    1952:	10 82       	st	Z, r1
    1954:	2e 96       	adiw	r28, 0x0e	; 14
    1956:	0f b6       	in	r0, 0x3f	; 63
    1958:	f8 94       	cli
    195a:	de bf       	out	0x3e, r29	; 62
    195c:	0f be       	out	0x3f, r0	; 63
    195e:	cd bf       	out	0x3d, r28	; 61
    1960:	cf 91       	pop	r28
    1962:	df 91       	pop	r29
    1964:	1f 91       	pop	r17
    1966:	0f 91       	pop	r16
    1968:	08 95       	ret

0000196a <vfprintf>:
    196a:	2f 92       	push	r2
    196c:	3f 92       	push	r3
    196e:	4f 92       	push	r4
    1970:	5f 92       	push	r5
    1972:	6f 92       	push	r6
    1974:	7f 92       	push	r7
    1976:	8f 92       	push	r8
    1978:	9f 92       	push	r9
    197a:	af 92       	push	r10
    197c:	bf 92       	push	r11
    197e:	cf 92       	push	r12
    1980:	df 92       	push	r13
    1982:	ef 92       	push	r14
    1984:	ff 92       	push	r15
    1986:	0f 93       	push	r16
    1988:	1f 93       	push	r17
    198a:	df 93       	push	r29
    198c:	cf 93       	push	r28
    198e:	cd b7       	in	r28, 0x3d	; 61
    1990:	de b7       	in	r29, 0x3e	; 62
    1992:	2c 97       	sbiw	r28, 0x0c	; 12
    1994:	0f b6       	in	r0, 0x3f	; 63
    1996:	f8 94       	cli
    1998:	de bf       	out	0x3e, r29	; 62
    199a:	0f be       	out	0x3f, r0	; 63
    199c:	cd bf       	out	0x3d, r28	; 61
    199e:	6c 01       	movw	r12, r24
    19a0:	1b 01       	movw	r2, r22
    19a2:	8a 01       	movw	r16, r20
    19a4:	fc 01       	movw	r30, r24
    19a6:	17 82       	std	Z+7, r1	; 0x07
    19a8:	16 82       	std	Z+6, r1	; 0x06
    19aa:	83 81       	ldd	r24, Z+3	; 0x03
    19ac:	81 ff       	sbrs	r24, 1
    19ae:	d1 c1       	rjmp	.+930    	; 0x1d52 <vfprintf+0x3e8>
    19b0:	2e 01       	movw	r4, r28
    19b2:	08 94       	sec
    19b4:	41 1c       	adc	r4, r1
    19b6:	51 1c       	adc	r5, r1
    19b8:	f6 01       	movw	r30, r12
    19ba:	93 81       	ldd	r25, Z+3	; 0x03
    19bc:	f1 01       	movw	r30, r2
    19be:	93 fd       	sbrc	r25, 3
    19c0:	85 91       	lpm	r24, Z+
    19c2:	93 ff       	sbrs	r25, 3
    19c4:	81 91       	ld	r24, Z+
    19c6:	1f 01       	movw	r2, r30
    19c8:	88 23       	and	r24, r24
    19ca:	09 f4       	brne	.+2      	; 0x19ce <vfprintf+0x64>
    19cc:	be c1       	rjmp	.+892    	; 0x1d4a <vfprintf+0x3e0>
    19ce:	85 32       	cpi	r24, 0x25	; 37
    19d0:	39 f4       	brne	.+14     	; 0x19e0 <vfprintf+0x76>
    19d2:	93 fd       	sbrc	r25, 3
    19d4:	85 91       	lpm	r24, Z+
    19d6:	93 ff       	sbrs	r25, 3
    19d8:	81 91       	ld	r24, Z+
    19da:	1f 01       	movw	r2, r30
    19dc:	85 32       	cpi	r24, 0x25	; 37
    19de:	29 f4       	brne	.+10     	; 0x19ea <vfprintf+0x80>
    19e0:	90 e0       	ldi	r25, 0x00	; 0
    19e2:	b6 01       	movw	r22, r12
    19e4:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <fputc>
    19e8:	e7 cf       	rjmp	.-50     	; 0x19b8 <vfprintf+0x4e>
    19ea:	ee 24       	eor	r14, r14
    19ec:	ff 24       	eor	r15, r15
    19ee:	20 e0       	ldi	r18, 0x00	; 0
    19f0:	20 32       	cpi	r18, 0x20	; 32
    19f2:	b0 f4       	brcc	.+44     	; 0x1a20 <vfprintf+0xb6>
    19f4:	8b 32       	cpi	r24, 0x2B	; 43
    19f6:	69 f0       	breq	.+26     	; 0x1a12 <vfprintf+0xa8>
    19f8:	8c 32       	cpi	r24, 0x2C	; 44
    19fa:	28 f4       	brcc	.+10     	; 0x1a06 <vfprintf+0x9c>
    19fc:	80 32       	cpi	r24, 0x20	; 32
    19fe:	51 f0       	breq	.+20     	; 0x1a14 <vfprintf+0xaa>
    1a00:	83 32       	cpi	r24, 0x23	; 35
    1a02:	71 f4       	brne	.+28     	; 0x1a20 <vfprintf+0xb6>
    1a04:	0b c0       	rjmp	.+22     	; 0x1a1c <vfprintf+0xb2>
    1a06:	8d 32       	cpi	r24, 0x2D	; 45
    1a08:	39 f0       	breq	.+14     	; 0x1a18 <vfprintf+0xae>
    1a0a:	80 33       	cpi	r24, 0x30	; 48
    1a0c:	49 f4       	brne	.+18     	; 0x1a20 <vfprintf+0xb6>
    1a0e:	21 60       	ori	r18, 0x01	; 1
    1a10:	2c c0       	rjmp	.+88     	; 0x1a6a <vfprintf+0x100>
    1a12:	22 60       	ori	r18, 0x02	; 2
    1a14:	24 60       	ori	r18, 0x04	; 4
    1a16:	29 c0       	rjmp	.+82     	; 0x1a6a <vfprintf+0x100>
    1a18:	28 60       	ori	r18, 0x08	; 8
    1a1a:	27 c0       	rjmp	.+78     	; 0x1a6a <vfprintf+0x100>
    1a1c:	20 61       	ori	r18, 0x10	; 16
    1a1e:	25 c0       	rjmp	.+74     	; 0x1a6a <vfprintf+0x100>
    1a20:	27 fd       	sbrc	r18, 7
    1a22:	2c c0       	rjmp	.+88     	; 0x1a7c <vfprintf+0x112>
    1a24:	38 2f       	mov	r19, r24
    1a26:	30 53       	subi	r19, 0x30	; 48
    1a28:	3a 30       	cpi	r19, 0x0A	; 10
    1a2a:	98 f4       	brcc	.+38     	; 0x1a52 <vfprintf+0xe8>
    1a2c:	26 ff       	sbrs	r18, 6
    1a2e:	08 c0       	rjmp	.+16     	; 0x1a40 <vfprintf+0xd6>
    1a30:	8e 2d       	mov	r24, r14
    1a32:	88 0f       	add	r24, r24
    1a34:	e8 2e       	mov	r14, r24
    1a36:	ee 0c       	add	r14, r14
    1a38:	ee 0c       	add	r14, r14
    1a3a:	e8 0e       	add	r14, r24
    1a3c:	e3 0e       	add	r14, r19
    1a3e:	15 c0       	rjmp	.+42     	; 0x1a6a <vfprintf+0x100>
    1a40:	8f 2d       	mov	r24, r15
    1a42:	88 0f       	add	r24, r24
    1a44:	f8 2e       	mov	r15, r24
    1a46:	ff 0c       	add	r15, r15
    1a48:	ff 0c       	add	r15, r15
    1a4a:	f8 0e       	add	r15, r24
    1a4c:	f3 0e       	add	r15, r19
    1a4e:	20 62       	ori	r18, 0x20	; 32
    1a50:	0c c0       	rjmp	.+24     	; 0x1a6a <vfprintf+0x100>
    1a52:	8e 32       	cpi	r24, 0x2E	; 46
    1a54:	21 f4       	brne	.+8      	; 0x1a5e <vfprintf+0xf4>
    1a56:	26 fd       	sbrc	r18, 6
    1a58:	78 c1       	rjmp	.+752    	; 0x1d4a <vfprintf+0x3e0>
    1a5a:	20 64       	ori	r18, 0x40	; 64
    1a5c:	06 c0       	rjmp	.+12     	; 0x1a6a <vfprintf+0x100>
    1a5e:	8c 36       	cpi	r24, 0x6C	; 108
    1a60:	11 f4       	brne	.+4      	; 0x1a66 <vfprintf+0xfc>
    1a62:	20 68       	ori	r18, 0x80	; 128
    1a64:	02 c0       	rjmp	.+4      	; 0x1a6a <vfprintf+0x100>
    1a66:	88 36       	cpi	r24, 0x68	; 104
    1a68:	49 f4       	brne	.+18     	; 0x1a7c <vfprintf+0x112>
    1a6a:	f1 01       	movw	r30, r2
    1a6c:	93 fd       	sbrc	r25, 3
    1a6e:	85 91       	lpm	r24, Z+
    1a70:	93 ff       	sbrs	r25, 3
    1a72:	81 91       	ld	r24, Z+
    1a74:	1f 01       	movw	r2, r30
    1a76:	88 23       	and	r24, r24
    1a78:	09 f0       	breq	.+2      	; 0x1a7c <vfprintf+0x112>
    1a7a:	ba cf       	rjmp	.-140    	; 0x19f0 <vfprintf+0x86>
    1a7c:	98 2f       	mov	r25, r24
    1a7e:	95 54       	subi	r25, 0x45	; 69
    1a80:	93 30       	cpi	r25, 0x03	; 3
    1a82:	18 f0       	brcs	.+6      	; 0x1a8a <vfprintf+0x120>
    1a84:	90 52       	subi	r25, 0x20	; 32
    1a86:	93 30       	cpi	r25, 0x03	; 3
    1a88:	28 f4       	brcc	.+10     	; 0x1a94 <vfprintf+0x12a>
    1a8a:	0c 5f       	subi	r16, 0xFC	; 252
    1a8c:	1f 4f       	sbci	r17, 0xFF	; 255
    1a8e:	ff e3       	ldi	r31, 0x3F	; 63
    1a90:	f9 83       	std	Y+1, r31	; 0x01
    1a92:	0d c0       	rjmp	.+26     	; 0x1aae <vfprintf+0x144>
    1a94:	83 36       	cpi	r24, 0x63	; 99
    1a96:	31 f0       	breq	.+12     	; 0x1aa4 <vfprintf+0x13a>
    1a98:	83 37       	cpi	r24, 0x73	; 115
    1a9a:	71 f0       	breq	.+28     	; 0x1ab8 <vfprintf+0x14e>
    1a9c:	83 35       	cpi	r24, 0x53	; 83
    1a9e:	09 f0       	breq	.+2      	; 0x1aa2 <vfprintf+0x138>
    1aa0:	60 c0       	rjmp	.+192    	; 0x1b62 <vfprintf+0x1f8>
    1aa2:	22 c0       	rjmp	.+68     	; 0x1ae8 <vfprintf+0x17e>
    1aa4:	f8 01       	movw	r30, r16
    1aa6:	80 81       	ld	r24, Z
    1aa8:	89 83       	std	Y+1, r24	; 0x01
    1aaa:	0e 5f       	subi	r16, 0xFE	; 254
    1aac:	1f 4f       	sbci	r17, 0xFF	; 255
    1aae:	42 01       	movw	r8, r4
    1ab0:	71 e0       	ldi	r23, 0x01	; 1
    1ab2:	a7 2e       	mov	r10, r23
    1ab4:	b1 2c       	mov	r11, r1
    1ab6:	16 c0       	rjmp	.+44     	; 0x1ae4 <vfprintf+0x17a>
    1ab8:	62 e0       	ldi	r22, 0x02	; 2
    1aba:	66 2e       	mov	r6, r22
    1abc:	71 2c       	mov	r7, r1
    1abe:	60 0e       	add	r6, r16
    1ac0:	71 1e       	adc	r7, r17
    1ac2:	f8 01       	movw	r30, r16
    1ac4:	80 80       	ld	r8, Z
    1ac6:	91 80       	ldd	r9, Z+1	; 0x01
    1ac8:	26 ff       	sbrs	r18, 6
    1aca:	03 c0       	rjmp	.+6      	; 0x1ad2 <vfprintf+0x168>
    1acc:	6e 2d       	mov	r22, r14
    1ace:	70 e0       	ldi	r23, 0x00	; 0
    1ad0:	02 c0       	rjmp	.+4      	; 0x1ad6 <vfprintf+0x16c>
    1ad2:	6f ef       	ldi	r22, 0xFF	; 255
    1ad4:	7f ef       	ldi	r23, 0xFF	; 255
    1ad6:	c4 01       	movw	r24, r8
    1ad8:	2c 87       	std	Y+12, r18	; 0x0c
    1ada:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <strnlen>
    1ade:	5c 01       	movw	r10, r24
    1ae0:	83 01       	movw	r16, r6
    1ae2:	2c 85       	ldd	r18, Y+12	; 0x0c
    1ae4:	2f 77       	andi	r18, 0x7F	; 127
    1ae6:	17 c0       	rjmp	.+46     	; 0x1b16 <vfprintf+0x1ac>
    1ae8:	52 e0       	ldi	r21, 0x02	; 2
    1aea:	65 2e       	mov	r6, r21
    1aec:	71 2c       	mov	r7, r1
    1aee:	60 0e       	add	r6, r16
    1af0:	71 1e       	adc	r7, r17
    1af2:	f8 01       	movw	r30, r16
    1af4:	80 80       	ld	r8, Z
    1af6:	91 80       	ldd	r9, Z+1	; 0x01
    1af8:	26 ff       	sbrs	r18, 6
    1afa:	03 c0       	rjmp	.+6      	; 0x1b02 <vfprintf+0x198>
    1afc:	6e 2d       	mov	r22, r14
    1afe:	70 e0       	ldi	r23, 0x00	; 0
    1b00:	02 c0       	rjmp	.+4      	; 0x1b06 <vfprintf+0x19c>
    1b02:	6f ef       	ldi	r22, 0xFF	; 255
    1b04:	7f ef       	ldi	r23, 0xFF	; 255
    1b06:	c4 01       	movw	r24, r8
    1b08:	2c 87       	std	Y+12, r18	; 0x0c
    1b0a:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <strnlen_P>
    1b0e:	5c 01       	movw	r10, r24
    1b10:	2c 85       	ldd	r18, Y+12	; 0x0c
    1b12:	20 68       	ori	r18, 0x80	; 128
    1b14:	83 01       	movw	r16, r6
    1b16:	23 fd       	sbrc	r18, 3
    1b18:	20 c0       	rjmp	.+64     	; 0x1b5a <vfprintf+0x1f0>
    1b1a:	08 c0       	rjmp	.+16     	; 0x1b2c <vfprintf+0x1c2>
    1b1c:	80 e2       	ldi	r24, 0x20	; 32
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	b6 01       	movw	r22, r12
    1b22:	2c 87       	std	Y+12, r18	; 0x0c
    1b24:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <fputc>
    1b28:	fa 94       	dec	r15
    1b2a:	2c 85       	ldd	r18, Y+12	; 0x0c
    1b2c:	8f 2d       	mov	r24, r15
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	a8 16       	cp	r10, r24
    1b32:	b9 06       	cpc	r11, r25
    1b34:	98 f3       	brcs	.-26     	; 0x1b1c <vfprintf+0x1b2>
    1b36:	11 c0       	rjmp	.+34     	; 0x1b5a <vfprintf+0x1f0>
    1b38:	f4 01       	movw	r30, r8
    1b3a:	27 fd       	sbrc	r18, 7
    1b3c:	85 91       	lpm	r24, Z+
    1b3e:	27 ff       	sbrs	r18, 7
    1b40:	81 91       	ld	r24, Z+
    1b42:	4f 01       	movw	r8, r30
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	b6 01       	movw	r22, r12
    1b48:	2c 87       	std	Y+12, r18	; 0x0c
    1b4a:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <fputc>
    1b4e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1b50:	f1 10       	cpse	r15, r1
    1b52:	fa 94       	dec	r15
    1b54:	08 94       	sec
    1b56:	a1 08       	sbc	r10, r1
    1b58:	b1 08       	sbc	r11, r1
    1b5a:	a1 14       	cp	r10, r1
    1b5c:	b1 04       	cpc	r11, r1
    1b5e:	61 f7       	brne	.-40     	; 0x1b38 <vfprintf+0x1ce>
    1b60:	f1 c0       	rjmp	.+482    	; 0x1d44 <vfprintf+0x3da>
    1b62:	84 36       	cpi	r24, 0x64	; 100
    1b64:	11 f0       	breq	.+4      	; 0x1b6a <vfprintf+0x200>
    1b66:	89 36       	cpi	r24, 0x69	; 105
    1b68:	49 f5       	brne	.+82     	; 0x1bbc <vfprintf+0x252>
    1b6a:	27 ff       	sbrs	r18, 7
    1b6c:	08 c0       	rjmp	.+16     	; 0x1b7e <vfprintf+0x214>
    1b6e:	f8 01       	movw	r30, r16
    1b70:	60 81       	ld	r22, Z
    1b72:	71 81       	ldd	r23, Z+1	; 0x01
    1b74:	82 81       	ldd	r24, Z+2	; 0x02
    1b76:	93 81       	ldd	r25, Z+3	; 0x03
    1b78:	0c 5f       	subi	r16, 0xFC	; 252
    1b7a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b7c:	09 c0       	rjmp	.+18     	; 0x1b90 <vfprintf+0x226>
    1b7e:	f8 01       	movw	r30, r16
    1b80:	60 81       	ld	r22, Z
    1b82:	71 81       	ldd	r23, Z+1	; 0x01
    1b84:	88 27       	eor	r24, r24
    1b86:	77 fd       	sbrc	r23, 7
    1b88:	80 95       	com	r24
    1b8a:	98 2f       	mov	r25, r24
    1b8c:	0e 5f       	subi	r16, 0xFE	; 254
    1b8e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b90:	4f e6       	ldi	r20, 0x6F	; 111
    1b92:	b4 2e       	mov	r11, r20
    1b94:	b2 22       	and	r11, r18
    1b96:	97 ff       	sbrs	r25, 7
    1b98:	09 c0       	rjmp	.+18     	; 0x1bac <vfprintf+0x242>
    1b9a:	90 95       	com	r25
    1b9c:	80 95       	com	r24
    1b9e:	70 95       	com	r23
    1ba0:	61 95       	neg	r22
    1ba2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ba4:	8f 4f       	sbci	r24, 0xFF	; 255
    1ba6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ba8:	f0 e8       	ldi	r31, 0x80	; 128
    1baa:	bf 2a       	or	r11, r31
    1bac:	a2 01       	movw	r20, r4
    1bae:	2a e0       	ldi	r18, 0x0A	; 10
    1bb0:	30 e0       	ldi	r19, 0x00	; 0
    1bb2:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <__ultoa_invert>
    1bb6:	78 2e       	mov	r7, r24
    1bb8:	74 18       	sub	r7, r4
    1bba:	45 c0       	rjmp	.+138    	; 0x1c46 <vfprintf+0x2dc>
    1bbc:	85 37       	cpi	r24, 0x75	; 117
    1bbe:	31 f4       	brne	.+12     	; 0x1bcc <vfprintf+0x262>
    1bc0:	3f ee       	ldi	r19, 0xEF	; 239
    1bc2:	b3 2e       	mov	r11, r19
    1bc4:	b2 22       	and	r11, r18
    1bc6:	2a e0       	ldi	r18, 0x0A	; 10
    1bc8:	30 e0       	ldi	r19, 0x00	; 0
    1bca:	25 c0       	rjmp	.+74     	; 0x1c16 <vfprintf+0x2ac>
    1bcc:	99 ef       	ldi	r25, 0xF9	; 249
    1bce:	b9 2e       	mov	r11, r25
    1bd0:	b2 22       	and	r11, r18
    1bd2:	8f 36       	cpi	r24, 0x6F	; 111
    1bd4:	c1 f0       	breq	.+48     	; 0x1c06 <vfprintf+0x29c>
    1bd6:	80 37       	cpi	r24, 0x70	; 112
    1bd8:	20 f4       	brcc	.+8      	; 0x1be2 <vfprintf+0x278>
    1bda:	88 35       	cpi	r24, 0x58	; 88
    1bdc:	09 f0       	breq	.+2      	; 0x1be0 <vfprintf+0x276>
    1bde:	b5 c0       	rjmp	.+362    	; 0x1d4a <vfprintf+0x3e0>
    1be0:	0d c0       	rjmp	.+26     	; 0x1bfc <vfprintf+0x292>
    1be2:	80 37       	cpi	r24, 0x70	; 112
    1be4:	21 f0       	breq	.+8      	; 0x1bee <vfprintf+0x284>
    1be6:	88 37       	cpi	r24, 0x78	; 120
    1be8:	09 f0       	breq	.+2      	; 0x1bec <vfprintf+0x282>
    1bea:	af c0       	rjmp	.+350    	; 0x1d4a <vfprintf+0x3e0>
    1bec:	02 c0       	rjmp	.+4      	; 0x1bf2 <vfprintf+0x288>
    1bee:	20 e1       	ldi	r18, 0x10	; 16
    1bf0:	b2 2a       	or	r11, r18
    1bf2:	b4 fe       	sbrs	r11, 4
    1bf4:	0b c0       	rjmp	.+22     	; 0x1c0c <vfprintf+0x2a2>
    1bf6:	84 e0       	ldi	r24, 0x04	; 4
    1bf8:	b8 2a       	or	r11, r24
    1bfa:	08 c0       	rjmp	.+16     	; 0x1c0c <vfprintf+0x2a2>
    1bfc:	b4 fe       	sbrs	r11, 4
    1bfe:	09 c0       	rjmp	.+18     	; 0x1c12 <vfprintf+0x2a8>
    1c00:	e6 e0       	ldi	r30, 0x06	; 6
    1c02:	be 2a       	or	r11, r30
    1c04:	06 c0       	rjmp	.+12     	; 0x1c12 <vfprintf+0x2a8>
    1c06:	28 e0       	ldi	r18, 0x08	; 8
    1c08:	30 e0       	ldi	r19, 0x00	; 0
    1c0a:	05 c0       	rjmp	.+10     	; 0x1c16 <vfprintf+0x2ac>
    1c0c:	20 e1       	ldi	r18, 0x10	; 16
    1c0e:	30 e0       	ldi	r19, 0x00	; 0
    1c10:	02 c0       	rjmp	.+4      	; 0x1c16 <vfprintf+0x2ac>
    1c12:	20 e1       	ldi	r18, 0x10	; 16
    1c14:	32 e0       	ldi	r19, 0x02	; 2
    1c16:	b7 fe       	sbrs	r11, 7
    1c18:	08 c0       	rjmp	.+16     	; 0x1c2a <vfprintf+0x2c0>
    1c1a:	f8 01       	movw	r30, r16
    1c1c:	60 81       	ld	r22, Z
    1c1e:	71 81       	ldd	r23, Z+1	; 0x01
    1c20:	82 81       	ldd	r24, Z+2	; 0x02
    1c22:	93 81       	ldd	r25, Z+3	; 0x03
    1c24:	0c 5f       	subi	r16, 0xFC	; 252
    1c26:	1f 4f       	sbci	r17, 0xFF	; 255
    1c28:	07 c0       	rjmp	.+14     	; 0x1c38 <vfprintf+0x2ce>
    1c2a:	f8 01       	movw	r30, r16
    1c2c:	60 81       	ld	r22, Z
    1c2e:	71 81       	ldd	r23, Z+1	; 0x01
    1c30:	80 e0       	ldi	r24, 0x00	; 0
    1c32:	90 e0       	ldi	r25, 0x00	; 0
    1c34:	0e 5f       	subi	r16, 0xFE	; 254
    1c36:	1f 4f       	sbci	r17, 0xFF	; 255
    1c38:	a2 01       	movw	r20, r4
    1c3a:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <__ultoa_invert>
    1c3e:	78 2e       	mov	r7, r24
    1c40:	74 18       	sub	r7, r4
    1c42:	ff e7       	ldi	r31, 0x7F	; 127
    1c44:	bf 22       	and	r11, r31
    1c46:	b6 fe       	sbrs	r11, 6
    1c48:	0b c0       	rjmp	.+22     	; 0x1c60 <vfprintf+0x2f6>
    1c4a:	2e ef       	ldi	r18, 0xFE	; 254
    1c4c:	b2 22       	and	r11, r18
    1c4e:	7e 14       	cp	r7, r14
    1c50:	38 f4       	brcc	.+14     	; 0x1c60 <vfprintf+0x2f6>
    1c52:	b4 fe       	sbrs	r11, 4
    1c54:	07 c0       	rjmp	.+14     	; 0x1c64 <vfprintf+0x2fa>
    1c56:	b2 fc       	sbrc	r11, 2
    1c58:	05 c0       	rjmp	.+10     	; 0x1c64 <vfprintf+0x2fa>
    1c5a:	8f ee       	ldi	r24, 0xEF	; 239
    1c5c:	b8 22       	and	r11, r24
    1c5e:	02 c0       	rjmp	.+4      	; 0x1c64 <vfprintf+0x2fa>
    1c60:	a7 2c       	mov	r10, r7
    1c62:	01 c0       	rjmp	.+2      	; 0x1c66 <vfprintf+0x2fc>
    1c64:	ae 2c       	mov	r10, r14
    1c66:	8b 2d       	mov	r24, r11
    1c68:	90 e0       	ldi	r25, 0x00	; 0
    1c6a:	b4 fe       	sbrs	r11, 4
    1c6c:	0d c0       	rjmp	.+26     	; 0x1c88 <vfprintf+0x31e>
    1c6e:	fe 01       	movw	r30, r28
    1c70:	e7 0d       	add	r30, r7
    1c72:	f1 1d       	adc	r31, r1
    1c74:	20 81       	ld	r18, Z
    1c76:	20 33       	cpi	r18, 0x30	; 48
    1c78:	19 f4       	brne	.+6      	; 0x1c80 <vfprintf+0x316>
    1c7a:	e9 ee       	ldi	r30, 0xE9	; 233
    1c7c:	be 22       	and	r11, r30
    1c7e:	09 c0       	rjmp	.+18     	; 0x1c92 <vfprintf+0x328>
    1c80:	a3 94       	inc	r10
    1c82:	b2 fe       	sbrs	r11, 2
    1c84:	06 c0       	rjmp	.+12     	; 0x1c92 <vfprintf+0x328>
    1c86:	04 c0       	rjmp	.+8      	; 0x1c90 <vfprintf+0x326>
    1c88:	86 78       	andi	r24, 0x86	; 134
    1c8a:	90 70       	andi	r25, 0x00	; 0
    1c8c:	00 97       	sbiw	r24, 0x00	; 0
    1c8e:	09 f0       	breq	.+2      	; 0x1c92 <vfprintf+0x328>
    1c90:	a3 94       	inc	r10
    1c92:	8b 2c       	mov	r8, r11
    1c94:	99 24       	eor	r9, r9
    1c96:	b3 fc       	sbrc	r11, 3
    1c98:	14 c0       	rjmp	.+40     	; 0x1cc2 <vfprintf+0x358>
    1c9a:	b0 fe       	sbrs	r11, 0
    1c9c:	0f c0       	rjmp	.+30     	; 0x1cbc <vfprintf+0x352>
    1c9e:	af 14       	cp	r10, r15
    1ca0:	28 f4       	brcc	.+10     	; 0x1cac <vfprintf+0x342>
    1ca2:	e7 2c       	mov	r14, r7
    1ca4:	ef 0c       	add	r14, r15
    1ca6:	ea 18       	sub	r14, r10
    1ca8:	af 2c       	mov	r10, r15
    1caa:	08 c0       	rjmp	.+16     	; 0x1cbc <vfprintf+0x352>
    1cac:	e7 2c       	mov	r14, r7
    1cae:	06 c0       	rjmp	.+12     	; 0x1cbc <vfprintf+0x352>
    1cb0:	80 e2       	ldi	r24, 0x20	; 32
    1cb2:	90 e0       	ldi	r25, 0x00	; 0
    1cb4:	b6 01       	movw	r22, r12
    1cb6:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <fputc>
    1cba:	a3 94       	inc	r10
    1cbc:	af 14       	cp	r10, r15
    1cbe:	c0 f3       	brcs	.-16     	; 0x1cb0 <vfprintf+0x346>
    1cc0:	04 c0       	rjmp	.+8      	; 0x1cca <vfprintf+0x360>
    1cc2:	af 14       	cp	r10, r15
    1cc4:	10 f4       	brcc	.+4      	; 0x1cca <vfprintf+0x360>
    1cc6:	fa 18       	sub	r15, r10
    1cc8:	01 c0       	rjmp	.+2      	; 0x1ccc <vfprintf+0x362>
    1cca:	ff 24       	eor	r15, r15
    1ccc:	84 fe       	sbrs	r8, 4
    1cce:	0f c0       	rjmp	.+30     	; 0x1cee <vfprintf+0x384>
    1cd0:	80 e3       	ldi	r24, 0x30	; 48
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	b6 01       	movw	r22, r12
    1cd6:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <fputc>
    1cda:	82 fe       	sbrs	r8, 2
    1cdc:	1f c0       	rjmp	.+62     	; 0x1d1c <vfprintf+0x3b2>
    1cde:	81 fe       	sbrs	r8, 1
    1ce0:	03 c0       	rjmp	.+6      	; 0x1ce8 <vfprintf+0x37e>
    1ce2:	88 e5       	ldi	r24, 0x58	; 88
    1ce4:	90 e0       	ldi	r25, 0x00	; 0
    1ce6:	10 c0       	rjmp	.+32     	; 0x1d08 <vfprintf+0x39e>
    1ce8:	88 e7       	ldi	r24, 0x78	; 120
    1cea:	90 e0       	ldi	r25, 0x00	; 0
    1cec:	0d c0       	rjmp	.+26     	; 0x1d08 <vfprintf+0x39e>
    1cee:	c4 01       	movw	r24, r8
    1cf0:	86 78       	andi	r24, 0x86	; 134
    1cf2:	90 70       	andi	r25, 0x00	; 0
    1cf4:	00 97       	sbiw	r24, 0x00	; 0
    1cf6:	91 f0       	breq	.+36     	; 0x1d1c <vfprintf+0x3b2>
    1cf8:	81 fc       	sbrc	r8, 1
    1cfa:	02 c0       	rjmp	.+4      	; 0x1d00 <vfprintf+0x396>
    1cfc:	80 e2       	ldi	r24, 0x20	; 32
    1cfe:	01 c0       	rjmp	.+2      	; 0x1d02 <vfprintf+0x398>
    1d00:	8b e2       	ldi	r24, 0x2B	; 43
    1d02:	b7 fc       	sbrc	r11, 7
    1d04:	8d e2       	ldi	r24, 0x2D	; 45
    1d06:	90 e0       	ldi	r25, 0x00	; 0
    1d08:	b6 01       	movw	r22, r12
    1d0a:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <fputc>
    1d0e:	06 c0       	rjmp	.+12     	; 0x1d1c <vfprintf+0x3b2>
    1d10:	80 e3       	ldi	r24, 0x30	; 48
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	b6 01       	movw	r22, r12
    1d16:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <fputc>
    1d1a:	ea 94       	dec	r14
    1d1c:	7e 14       	cp	r7, r14
    1d1e:	c0 f3       	brcs	.-16     	; 0x1d10 <vfprintf+0x3a6>
    1d20:	7a 94       	dec	r7
    1d22:	f2 01       	movw	r30, r4
    1d24:	e7 0d       	add	r30, r7
    1d26:	f1 1d       	adc	r31, r1
    1d28:	80 81       	ld	r24, Z
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	b6 01       	movw	r22, r12
    1d2e:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <fputc>
    1d32:	77 20       	and	r7, r7
    1d34:	a9 f7       	brne	.-22     	; 0x1d20 <vfprintf+0x3b6>
    1d36:	06 c0       	rjmp	.+12     	; 0x1d44 <vfprintf+0x3da>
    1d38:	80 e2       	ldi	r24, 0x20	; 32
    1d3a:	90 e0       	ldi	r25, 0x00	; 0
    1d3c:	b6 01       	movw	r22, r12
    1d3e:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <fputc>
    1d42:	fa 94       	dec	r15
    1d44:	ff 20       	and	r15, r15
    1d46:	c1 f7       	brne	.-16     	; 0x1d38 <vfprintf+0x3ce>
    1d48:	37 ce       	rjmp	.-914    	; 0x19b8 <vfprintf+0x4e>
    1d4a:	f6 01       	movw	r30, r12
    1d4c:	26 81       	ldd	r18, Z+6	; 0x06
    1d4e:	37 81       	ldd	r19, Z+7	; 0x07
    1d50:	02 c0       	rjmp	.+4      	; 0x1d56 <vfprintf+0x3ec>
    1d52:	2f ef       	ldi	r18, 0xFF	; 255
    1d54:	3f ef       	ldi	r19, 0xFF	; 255
    1d56:	c9 01       	movw	r24, r18
    1d58:	2c 96       	adiw	r28, 0x0c	; 12
    1d5a:	0f b6       	in	r0, 0x3f	; 63
    1d5c:	f8 94       	cli
    1d5e:	de bf       	out	0x3e, r29	; 62
    1d60:	0f be       	out	0x3f, r0	; 63
    1d62:	cd bf       	out	0x3d, r28	; 61
    1d64:	cf 91       	pop	r28
    1d66:	df 91       	pop	r29
    1d68:	1f 91       	pop	r17
    1d6a:	0f 91       	pop	r16
    1d6c:	ff 90       	pop	r15
    1d6e:	ef 90       	pop	r14
    1d70:	df 90       	pop	r13
    1d72:	cf 90       	pop	r12
    1d74:	bf 90       	pop	r11
    1d76:	af 90       	pop	r10
    1d78:	9f 90       	pop	r9
    1d7a:	8f 90       	pop	r8
    1d7c:	7f 90       	pop	r7
    1d7e:	6f 90       	pop	r6
    1d80:	5f 90       	pop	r5
    1d82:	4f 90       	pop	r4
    1d84:	3f 90       	pop	r3
    1d86:	2f 90       	pop	r2
    1d88:	08 95       	ret

00001d8a <strnlen_P>:
    1d8a:	fc 01       	movw	r30, r24
    1d8c:	05 90       	lpm	r0, Z+
    1d8e:	61 50       	subi	r22, 0x01	; 1
    1d90:	70 40       	sbci	r23, 0x00	; 0
    1d92:	01 10       	cpse	r0, r1
    1d94:	d8 f7       	brcc	.-10     	; 0x1d8c <strnlen_P+0x2>
    1d96:	80 95       	com	r24
    1d98:	90 95       	com	r25
    1d9a:	8e 0f       	add	r24, r30
    1d9c:	9f 1f       	adc	r25, r31
    1d9e:	08 95       	ret

00001da0 <strnlen>:
    1da0:	fc 01       	movw	r30, r24
    1da2:	61 50       	subi	r22, 0x01	; 1
    1da4:	70 40       	sbci	r23, 0x00	; 0
    1da6:	01 90       	ld	r0, Z+
    1da8:	01 10       	cpse	r0, r1
    1daa:	d8 f7       	brcc	.-10     	; 0x1da2 <strnlen+0x2>
    1dac:	80 95       	com	r24
    1dae:	90 95       	com	r25
    1db0:	8e 0f       	add	r24, r30
    1db2:	9f 1f       	adc	r25, r31
    1db4:	08 95       	ret

00001db6 <fputc>:
    1db6:	0f 93       	push	r16
    1db8:	1f 93       	push	r17
    1dba:	cf 93       	push	r28
    1dbc:	df 93       	push	r29
    1dbe:	8c 01       	movw	r16, r24
    1dc0:	eb 01       	movw	r28, r22
    1dc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc4:	81 ff       	sbrs	r24, 1
    1dc6:	1b c0       	rjmp	.+54     	; 0x1dfe <fputc+0x48>
    1dc8:	82 ff       	sbrs	r24, 2
    1dca:	0d c0       	rjmp	.+26     	; 0x1de6 <fputc+0x30>
    1dcc:	2e 81       	ldd	r18, Y+6	; 0x06
    1dce:	3f 81       	ldd	r19, Y+7	; 0x07
    1dd0:	8c 81       	ldd	r24, Y+4	; 0x04
    1dd2:	9d 81       	ldd	r25, Y+5	; 0x05
    1dd4:	28 17       	cp	r18, r24
    1dd6:	39 07       	cpc	r19, r25
    1dd8:	64 f4       	brge	.+24     	; 0x1df2 <fputc+0x3c>
    1dda:	e8 81       	ld	r30, Y
    1ddc:	f9 81       	ldd	r31, Y+1	; 0x01
    1dde:	01 93       	st	Z+, r16
    1de0:	f9 83       	std	Y+1, r31	; 0x01
    1de2:	e8 83       	st	Y, r30
    1de4:	06 c0       	rjmp	.+12     	; 0x1df2 <fputc+0x3c>
    1de6:	e8 85       	ldd	r30, Y+8	; 0x08
    1de8:	f9 85       	ldd	r31, Y+9	; 0x09
    1dea:	80 2f       	mov	r24, r16
    1dec:	09 95       	icall
    1dee:	00 97       	sbiw	r24, 0x00	; 0
    1df0:	31 f4       	brne	.+12     	; 0x1dfe <fputc+0x48>
    1df2:	8e 81       	ldd	r24, Y+6	; 0x06
    1df4:	9f 81       	ldd	r25, Y+7	; 0x07
    1df6:	01 96       	adiw	r24, 0x01	; 1
    1df8:	9f 83       	std	Y+7, r25	; 0x07
    1dfa:	8e 83       	std	Y+6, r24	; 0x06
    1dfc:	02 c0       	rjmp	.+4      	; 0x1e02 <fputc+0x4c>
    1dfe:	0f ef       	ldi	r16, 0xFF	; 255
    1e00:	1f ef       	ldi	r17, 0xFF	; 255
    1e02:	c8 01       	movw	r24, r16
    1e04:	df 91       	pop	r29
    1e06:	cf 91       	pop	r28
    1e08:	1f 91       	pop	r17
    1e0a:	0f 91       	pop	r16
    1e0c:	08 95       	ret

00001e0e <__ultoa_invert>:
    1e0e:	fa 01       	movw	r30, r20
    1e10:	aa 27       	eor	r26, r26
    1e12:	28 30       	cpi	r18, 0x08	; 8
    1e14:	51 f1       	breq	.+84     	; 0x1e6a <__ultoa_invert+0x5c>
    1e16:	20 31       	cpi	r18, 0x10	; 16
    1e18:	81 f1       	breq	.+96     	; 0x1e7a <__ultoa_invert+0x6c>
    1e1a:	e8 94       	clt
    1e1c:	6f 93       	push	r22
    1e1e:	6e 7f       	andi	r22, 0xFE	; 254
    1e20:	6e 5f       	subi	r22, 0xFE	; 254
    1e22:	7f 4f       	sbci	r23, 0xFF	; 255
    1e24:	8f 4f       	sbci	r24, 0xFF	; 255
    1e26:	9f 4f       	sbci	r25, 0xFF	; 255
    1e28:	af 4f       	sbci	r26, 0xFF	; 255
    1e2a:	b1 e0       	ldi	r27, 0x01	; 1
    1e2c:	3e d0       	rcall	.+124    	; 0x1eaa <__ultoa_invert+0x9c>
    1e2e:	b4 e0       	ldi	r27, 0x04	; 4
    1e30:	3c d0       	rcall	.+120    	; 0x1eaa <__ultoa_invert+0x9c>
    1e32:	67 0f       	add	r22, r23
    1e34:	78 1f       	adc	r23, r24
    1e36:	89 1f       	adc	r24, r25
    1e38:	9a 1f       	adc	r25, r26
    1e3a:	a1 1d       	adc	r26, r1
    1e3c:	68 0f       	add	r22, r24
    1e3e:	79 1f       	adc	r23, r25
    1e40:	8a 1f       	adc	r24, r26
    1e42:	91 1d       	adc	r25, r1
    1e44:	a1 1d       	adc	r26, r1
    1e46:	6a 0f       	add	r22, r26
    1e48:	71 1d       	adc	r23, r1
    1e4a:	81 1d       	adc	r24, r1
    1e4c:	91 1d       	adc	r25, r1
    1e4e:	a1 1d       	adc	r26, r1
    1e50:	20 d0       	rcall	.+64     	; 0x1e92 <__ultoa_invert+0x84>
    1e52:	09 f4       	brne	.+2      	; 0x1e56 <__ultoa_invert+0x48>
    1e54:	68 94       	set
    1e56:	3f 91       	pop	r19
    1e58:	2a e0       	ldi	r18, 0x0A	; 10
    1e5a:	26 9f       	mul	r18, r22
    1e5c:	11 24       	eor	r1, r1
    1e5e:	30 19       	sub	r19, r0
    1e60:	30 5d       	subi	r19, 0xD0	; 208
    1e62:	31 93       	st	Z+, r19
    1e64:	de f6       	brtc	.-74     	; 0x1e1c <__ultoa_invert+0xe>
    1e66:	cf 01       	movw	r24, r30
    1e68:	08 95       	ret
    1e6a:	46 2f       	mov	r20, r22
    1e6c:	47 70       	andi	r20, 0x07	; 7
    1e6e:	40 5d       	subi	r20, 0xD0	; 208
    1e70:	41 93       	st	Z+, r20
    1e72:	b3 e0       	ldi	r27, 0x03	; 3
    1e74:	0f d0       	rcall	.+30     	; 0x1e94 <__ultoa_invert+0x86>
    1e76:	c9 f7       	brne	.-14     	; 0x1e6a <__ultoa_invert+0x5c>
    1e78:	f6 cf       	rjmp	.-20     	; 0x1e66 <__ultoa_invert+0x58>
    1e7a:	46 2f       	mov	r20, r22
    1e7c:	4f 70       	andi	r20, 0x0F	; 15
    1e7e:	40 5d       	subi	r20, 0xD0	; 208
    1e80:	4a 33       	cpi	r20, 0x3A	; 58
    1e82:	18 f0       	brcs	.+6      	; 0x1e8a <__ultoa_invert+0x7c>
    1e84:	49 5d       	subi	r20, 0xD9	; 217
    1e86:	31 fd       	sbrc	r19, 1
    1e88:	40 52       	subi	r20, 0x20	; 32
    1e8a:	41 93       	st	Z+, r20
    1e8c:	02 d0       	rcall	.+4      	; 0x1e92 <__ultoa_invert+0x84>
    1e8e:	a9 f7       	brne	.-22     	; 0x1e7a <__ultoa_invert+0x6c>
    1e90:	ea cf       	rjmp	.-44     	; 0x1e66 <__ultoa_invert+0x58>
    1e92:	b4 e0       	ldi	r27, 0x04	; 4
    1e94:	a6 95       	lsr	r26
    1e96:	97 95       	ror	r25
    1e98:	87 95       	ror	r24
    1e9a:	77 95       	ror	r23
    1e9c:	67 95       	ror	r22
    1e9e:	ba 95       	dec	r27
    1ea0:	c9 f7       	brne	.-14     	; 0x1e94 <__ultoa_invert+0x86>
    1ea2:	00 97       	sbiw	r24, 0x00	; 0
    1ea4:	61 05       	cpc	r22, r1
    1ea6:	71 05       	cpc	r23, r1
    1ea8:	08 95       	ret
    1eaa:	9b 01       	movw	r18, r22
    1eac:	ac 01       	movw	r20, r24
    1eae:	0a 2e       	mov	r0, r26
    1eb0:	06 94       	lsr	r0
    1eb2:	57 95       	ror	r21
    1eb4:	47 95       	ror	r20
    1eb6:	37 95       	ror	r19
    1eb8:	27 95       	ror	r18
    1eba:	ba 95       	dec	r27
    1ebc:	c9 f7       	brne	.-14     	; 0x1eb0 <__ultoa_invert+0xa2>
    1ebe:	62 0f       	add	r22, r18
    1ec0:	73 1f       	adc	r23, r19
    1ec2:	84 1f       	adc	r24, r20
    1ec4:	95 1f       	adc	r25, r21
    1ec6:	a0 1d       	adc	r26, r0
    1ec8:	08 95       	ret

00001eca <_exit>:
    1eca:	f8 94       	cli

00001ecc <__stop_program>:
    1ecc:	ff cf       	rjmp	.-2      	; 0x1ecc <__stop_program>
