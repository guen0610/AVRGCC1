
AVRGCC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000186  00800100  00001f44  00001fd8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001f44  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008e  00800286  00800286  0000215e  2**0
                  ALLOC
  3 .stab         00001164  00000000  00000000  00002160  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000046b  00000000  00000000  000032c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000108  00000000  00000000  0000372f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000404  00000000  00000000  00003837  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000023cb  00000000  00000000  00003c3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000a9d  00000000  00000000  00006006  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000021ed  00000000  00000000  00006aa3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000320  00000000  00000000  00008c90  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000937  00000000  00000000  00008fb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001a3f  00000000  00000000  000098e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 000001fe  00000000  00000000  0000b326  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000000e0  00000000  00000000  0000b524  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 be 00 	jmp	0x17c	; 0x17c <__ctors_end>
       4:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
       8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
       c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      10:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      14:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      18:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      1c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      20:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      24:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      28:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      2c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      30:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      34:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      38:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      3c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      40:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      44:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      48:	0c 94 41 09 	jmp	0x1282	; 0x1282 <__vector_18>
      4c:	0c 94 75 09 	jmp	0x12ea	; 0x12ea <__vector_19>
      50:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      54:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      58:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      5c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      60:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      64:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      68:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      6c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      70:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      74:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      78:	0c 94 07 0a 	jmp	0x140e	; 0x140e <__vector_30>
      7c:	0c 94 3d 0a 	jmp	0x147a	; 0x147a <__vector_31>
      80:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      84:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      88:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>

0000008c <__c.2051>:
      8c:	41 54 2b 48 54 54 50 41 43 54 49 4f 4e 3d 30 0d     AT+HTTPACTION=0.
	...

0000009d <__c.2049>:
      9d:	41 54 2b 48 54 54 50 41 43 54 49 4f 4e 3d 31 0d     AT+HTTPACTION=1.
	...

000000ae <__c.2047>:
      ae:	41 54 2b 48 54 54 50 50 41 52 41 3d 22 43 4f 4e     AT+HTTPPARA="CON
      be:	54 45 4e 54 22 2c 22 61 70 70 6c 69 63 61 74 69     TENT","applicati
      ce:	6f 6e 2f 6a 73 6f 6e 22 0d 00                       on/json"..

000000d8 <__c.2045>:
      d8:	41 54 2b 48 54 54 50 50 41 52 41 3d 22 43 49 44     AT+HTTPPARA="CID
      e8:	22 2c 31 0d 00                                      ",1..

000000ed <__c.2043>:
      ed:	41 54 2b 48 54 54 50 49 4e 49 54 0d 00              AT+HTTPINIT..

000000fa <__c.2030>:
      fa:	41 54 2b 48 54 54 50 54 45 52 4d 0d 00              AT+HTTPTERM..

00000107 <__c.2019>:
     107:	41 54 2b 53 41 50 42 52 3d 31 2c 31 0d 00           AT+SAPBR=1,1..

00000115 <__c.2014>:
     115:	41 54 2b 53 41 50 42 52 3d 30 2c 31 0d 00           AT+SAPBR=0,1..

00000123 <__c.2009>:
     123:	41 54 2b 53 41 50 42 52 3d 32 2c 31 0d 00           AT+SAPBR=2,1..

00000131 <__c.1991>:
     131:	41 54 2b 43 4c 49 50 3d 31 0d 00                    AT+CLIP=1..

0000013c <__c.1989>:
     13c:	41 54 2b 43 50 4d 53 3d 22 53 4d 22 2c 22 53 4d     AT+CPMS="SM","SM
     14c:	22 2c 22 53 4d 22 0d 00                             ","SM"..

00000154 <__c.1987>:
     154:	41 54 2b 43 4d 47 46 3d 31 0d 00                    AT+CMGF=1..

0000015f <__c.1985>:
     15f:	41 54 0d 00                                         AT..

00000163 <__c.1980>:
     163:	41 54 0d 00                                         AT..

00000167 <__c.1974>:
     167:	41 54 2b 43 52 45 47 3f 0d 00                       AT+CREG?..

00000171 <__c.1972>:
     171:	41 54 2b 43 52 45 47 3f 0d 00 00                    AT+CREG?...

0000017c <__ctors_end>:
     17c:	11 24       	eor	r1, r1
     17e:	1f be       	out	0x3f, r1	; 63
     180:	cf ef       	ldi	r28, 0xFF	; 255
     182:	d0 e1       	ldi	r29, 0x10	; 16
     184:	de bf       	out	0x3e, r29	; 62
     186:	cd bf       	out	0x3d, r28	; 61

00000188 <__do_copy_data>:
     188:	12 e0       	ldi	r17, 0x02	; 2
     18a:	a0 e0       	ldi	r26, 0x00	; 0
     18c:	b1 e0       	ldi	r27, 0x01	; 1
     18e:	e4 e4       	ldi	r30, 0x44	; 68
     190:	ff e1       	ldi	r31, 0x1F	; 31
     192:	00 e0       	ldi	r16, 0x00	; 0
     194:	0b bf       	out	0x3b, r16	; 59
     196:	02 c0       	rjmp	.+4      	; 0x19c <__do_copy_data+0x14>
     198:	07 90       	elpm	r0, Z+
     19a:	0d 92       	st	X+, r0
     19c:	a6 38       	cpi	r26, 0x86	; 134
     19e:	b1 07       	cpc	r27, r17
     1a0:	d9 f7       	brne	.-10     	; 0x198 <__do_copy_data+0x10>

000001a2 <__do_clear_bss>:
     1a2:	13 e0       	ldi	r17, 0x03	; 3
     1a4:	a6 e8       	ldi	r26, 0x86	; 134
     1a6:	b2 e0       	ldi	r27, 0x02	; 2
     1a8:	01 c0       	rjmp	.+2      	; 0x1ac <.do_clear_bss_start>

000001aa <.do_clear_bss_loop>:
     1aa:	1d 92       	st	X+, r1

000001ac <.do_clear_bss_start>:
     1ac:	a4 31       	cpi	r26, 0x14	; 20
     1ae:	b1 07       	cpc	r27, r17
     1b0:	e1 f7       	brne	.-8      	; 0x1aa <.do_clear_bss_loop>
     1b2:	0e 94 1d 02 	call	0x43a	; 0x43a <main>
     1b6:	0c 94 a0 0f 	jmp	0x1f40	; 0x1f40 <_exit>

000001ba <__bad_interrupt>:
     1ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001be <lcd_write_4>:
  Exit:     no parameters
  Notes:    use either time delays or the busy flag
*/
void lcd_write_4(uint8_t theByte)
{
    lcd_D7_port &= ~(1<<lcd_D7_bit);                        // assume that data is '0'
     1be:	af 98       	cbi	0x15, 7	; 21
    if (theByte & 1<<7) lcd_D7_port |= (1<<lcd_D7_bit);     // make data = '1' if necessary
     1c0:	88 23       	and	r24, r24
     1c2:	0c f4       	brge	.+2      	; 0x1c6 <lcd_write_4+0x8>
     1c4:	af 9a       	sbi	0x15, 7	; 21

    lcd_D6_port &= ~(1<<lcd_D6_bit);                        // repeat for each data bit
     1c6:	ae 98       	cbi	0x15, 6	; 21
    if (theByte & 1<<6) lcd_D6_port |= (1<<lcd_D6_bit);
     1c8:	86 fd       	sbrc	r24, 6
     1ca:	ae 9a       	sbi	0x15, 6	; 21

    lcd_D5_port &= ~(1<<lcd_D5_bit);
     1cc:	ad 98       	cbi	0x15, 5	; 21
    if (theByte & 1<<5) lcd_D5_port |= (1<<lcd_D5_bit);
     1ce:	85 fd       	sbrc	r24, 5
     1d0:	ad 9a       	sbi	0x15, 5	; 21

    lcd_D4_port &= ~(1<<lcd_D4_bit);
     1d2:	ac 98       	cbi	0x15, 4	; 21
    if (theByte & 1<<4) lcd_D4_port |= (1<<lcd_D4_bit);
     1d4:	84 fd       	sbrc	r24, 4
     1d6:	ac 9a       	sbi	0x15, 4	; 21

// write the data
                                                    // 'Address set-up time' (40 nS)
    lcd_E_port |= (1<<lcd_E_bit);                   // Enable pin high
     1d8:	97 9a       	sbi	0x12, 7	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1da:	82 e0       	ldi	r24, 0x02	; 2
     1dc:	8a 95       	dec	r24
     1de:	f1 f7       	brne	.-4      	; 0x1dc <lcd_write_4+0x1e>
     1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <lcd_write_4+0x24>
    _delay_us(1);                                   // implement 'Data set-up time' (80 nS) and 'Enable pulse width' (230 nS)
    lcd_E_port &= ~(1<<lcd_E_bit);                  // Enable pin low
     1e2:	97 98       	cbi	0x12, 7	; 18
     1e4:	82 e0       	ldi	r24, 0x02	; 2
     1e6:	8a 95       	dec	r24
     1e8:	f1 f7       	brne	.-4      	; 0x1e6 <lcd_write_4+0x28>
     1ea:	00 c0       	rjmp	.+0      	; 0x1ec <lcd_write_4+0x2e>
    _delay_us(1);                                   // implement 'Data hold time' (10 nS) and 'Enable cycle time' (500 nS)
}
     1ec:	08 95       	ret

000001ee <lcd_write_instruction_4d>:
  Entry:    (theInstruction) is the information to be sent to the instruction register
  Exit:     no parameters
  Notes:    does not deal with RW (busy flag is not implemented)
*/
void lcd_write_instruction_4d(uint8_t theInstruction)
{
     1ee:	1f 93       	push	r17
     1f0:	18 2f       	mov	r17, r24
    lcd_RS_port &= ~(1<<lcd_RS_bit);                // select the Instruction Register (RS low)
     1f2:	95 98       	cbi	0x12, 5	; 18
    lcd_E_port &= ~(1<<lcd_E_bit);                  // make sure E is initially low
     1f4:	97 98       	cbi	0x12, 7	; 18
    lcd_write_4(theInstruction);                    // write the upper 4-bits of the data
     1f6:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_write_4>
    lcd_write_4(theInstruction << 4);               // write the lower 4-bits of the data
     1fa:	81 2f       	mov	r24, r17
     1fc:	82 95       	swap	r24
     1fe:	80 7f       	andi	r24, 0xF0	; 240
     200:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_write_4>
}
     204:	1f 91       	pop	r17
     206:	08 95       	ret

00000208 <lcd_write_character_4d>:
  Exit:     no parameters
  Notes:    does not deal with RW (busy flag is not implemented)
*/

void lcd_write_character_4d(uint8_t theData)
{
     208:	1f 93       	push	r17
     20a:	18 2f       	mov	r17, r24
    lcd_RS_port |= (1<<lcd_RS_bit);                 // select the Data Register (RS high)
     20c:	95 9a       	sbi	0x12, 5	; 18
    lcd_E_port &= ~(1<<lcd_E_bit);                  // make sure E is initially low
     20e:	97 98       	cbi	0x12, 7	; 18
    lcd_write_4(theData);                           // write the upper 4-bits of the data
     210:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_write_4>
    lcd_write_4(theData << 4);                      // write the lower 4-bits of the data
     214:	81 2f       	mov	r24, r17
     216:	82 95       	swap	r24
     218:	80 7f       	andi	r24, 0xF0	; 240
     21a:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_write_4>
}
     21e:	1f 91       	pop	r17
     220:	08 95       	ret

00000222 <lcd_write_string_4d>:
  Entry:    (theString) is the string to be displayed
  Exit:     no parameters
  Notes:    uses time delays rather than checking the busy flag
*/
void lcd_write_string_4d(uint8_t theString[])
{
     222:	0f 93       	push	r16
     224:	1f 93       	push	r17
     226:	df 93       	push	r29
     228:	cf 93       	push	r28
     22a:	00 d0       	rcall	.+0      	; 0x22c <lcd_write_string_4d+0xa>
     22c:	cd b7       	in	r28, 0x3d	; 61
     22e:	de b7       	in	r29, 0x3e	; 62
     230:	8c 01       	movw	r16, r24
    volatile int i = 0;                             // character counter*/
     232:	1a 82       	std	Y+2, r1	; 0x02
     234:	19 82       	std	Y+1, r1	; 0x01
    while (theString[i] != 0)
     236:	e9 81       	ldd	r30, Y+1	; 0x01
     238:	fa 81       	ldd	r31, Y+2	; 0x02
     23a:	e8 0f       	add	r30, r24
     23c:	f9 1f       	adc	r31, r25
     23e:	80 81       	ld	r24, Z
     240:	88 23       	and	r24, r24
     242:	b9 f0       	breq	.+46     	; 0x272 <lcd_write_string_4d+0x50>
    {
        lcd_write_character_4d(theString[i]);
     244:	e9 81       	ldd	r30, Y+1	; 0x01
     246:	fa 81       	ldd	r31, Y+2	; 0x02
     248:	e0 0f       	add	r30, r16
     24a:	f1 1f       	adc	r31, r17
     24c:	80 81       	ld	r24, Z
     24e:	0e 94 04 01 	call	0x208	; 0x208 <lcd_write_character_4d>
        i++;
     252:	89 81       	ldd	r24, Y+1	; 0x01
     254:	9a 81       	ldd	r25, Y+2	; 0x02
     256:	01 96       	adiw	r24, 0x01	; 1
     258:	9a 83       	std	Y+2, r25	; 0x02
     25a:	89 83       	std	Y+1, r24	; 0x01
     25c:	85 ed       	ldi	r24, 0xD5	; 213
     25e:	8a 95       	dec	r24
     260:	f1 f7       	brne	.-4      	; 0x25e <lcd_write_string_4d+0x3c>
     262:	00 00       	nop
  Notes:    uses time delays rather than checking the busy flag
*/
void lcd_write_string_4d(uint8_t theString[])
{
    volatile int i = 0;                             // character counter*/
    while (theString[i] != 0)
     264:	e9 81       	ldd	r30, Y+1	; 0x01
     266:	fa 81       	ldd	r31, Y+2	; 0x02
     268:	e0 0f       	add	r30, r16
     26a:	f1 1f       	adc	r31, r17
     26c:	80 81       	ld	r24, Z
     26e:	88 23       	and	r24, r24
     270:	49 f7       	brne	.-46     	; 0x244 <lcd_write_string_4d+0x22>
    {
        lcd_write_character_4d(theString[i]);
        i++;
        _delay_us(80);                              // 40 uS delay (min)
    }
}
     272:	0f 90       	pop	r0
     274:	0f 90       	pop	r0
     276:	cf 91       	pop	r28
     278:	df 91       	pop	r29
     27a:	1f 91       	pop	r17
     27c:	0f 91       	pop	r16
     27e:	08 95       	ret

00000280 <lcd_puthex>:
void CopyStringtoLCD(const uint8_t *FlashLoc);
void LCDsendChar(uint8_t ch);


void lcd_puthex(const char data)
{
     280:	1f 93       	push	r17
     282:	18 2f       	mov	r17, r24
     284:	85 ed       	ldi	r24, 0xD5	; 213
     286:	8a 95       	dec	r24
     288:	f1 f7       	brne	.-4      	; 0x286 <lcd_puthex+0x6>
     28a:	00 00       	nop
	//lcd_write_character_4d('0');
	//_delay_us(80);
	//print 'x'
	//lcd_write_character_4d('x');
	//_delay_us(80);
	(((data>>4)&0x0F)<=9) ? (temp='0'+((data>>4)&0x0F)) : (temp='A'+ ((data>>4)&0x0F)-0x0A);
     28c:	81 2f       	mov	r24, r17
     28e:	82 95       	swap	r24
     290:	8f 70       	andi	r24, 0x0F	; 15
     292:	28 2f       	mov	r18, r24
     294:	30 e0       	ldi	r19, 0x00	; 0
     296:	2a 30       	cpi	r18, 0x0A	; 10
     298:	31 05       	cpc	r19, r1
     29a:	14 f4       	brge	.+4      	; 0x2a0 <lcd_puthex+0x20>
     29c:	80 5d       	subi	r24, 0xD0	; 208
     29e:	01 c0       	rjmp	.+2      	; 0x2a2 <lcd_puthex+0x22>
     2a0:	89 5c       	subi	r24, 0xC9	; 201
     2a2:	95 ed       	ldi	r25, 0xD5	; 213
     2a4:	9a 95       	dec	r25
     2a6:	f1 f7       	brne	.-4      	; 0x2a4 <lcd_puthex+0x24>
     2a8:	00 00       	nop
	_delay_us(80);
	//print high nibble as hex
	lcd_write_character_4d(temp);
     2aa:	0e 94 04 01 	call	0x208	; 0x208 <lcd_write_character_4d>
     2ae:	85 ed       	ldi	r24, 0xD5	; 213
     2b0:	8a 95       	dec	r24
     2b2:	f1 f7       	brne	.-4      	; 0x2b0 <lcd_puthex+0x30>
     2b4:	00 00       	nop
	_delay_us(80);
	((data&0x0F)<=9) ? (temp='0'+ (data&0x0F)) : (temp='A'+ (data&0x0F)-0x0A);
     2b6:	21 2f       	mov	r18, r17
     2b8:	30 e0       	ldi	r19, 0x00	; 0
     2ba:	2f 70       	andi	r18, 0x0F	; 15
     2bc:	30 70       	andi	r19, 0x00	; 0
     2be:	2a 30       	cpi	r18, 0x0A	; 10
     2c0:	31 05       	cpc	r19, r1
     2c2:	24 f4       	brge	.+8      	; 0x2cc <lcd_puthex+0x4c>
     2c4:	1f 70       	andi	r17, 0x0F	; 15
     2c6:	81 2f       	mov	r24, r17
     2c8:	80 5d       	subi	r24, 0xD0	; 208
     2ca:	03 c0       	rjmp	.+6      	; 0x2d2 <lcd_puthex+0x52>
     2cc:	1f 70       	andi	r17, 0x0F	; 15
     2ce:	81 2f       	mov	r24, r17
     2d0:	89 5c       	subi	r24, 0xC9	; 201
	lcd_write_character_4d(temp);
     2d2:	0e 94 04 01 	call	0x208	; 0x208 <lcd_write_character_4d>
     2d6:	95 ed       	ldi	r25, 0xD5	; 213
     2d8:	9a 95       	dec	r25
     2da:	f1 f7       	brne	.-4      	; 0x2d8 <lcd_puthex+0x58>
     2dc:	00 00       	nop
	_delay_us(80);
	//print low nibble as hex
}
     2de:	1f 91       	pop	r17
     2e0:	08 95       	ret

000002e2 <lcd_init_4d>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2e2:	8f ef       	ldi	r24, 0xFF	; 255
     2e4:	90 e7       	ldi	r25, 0x70	; 112
     2e6:	a2 e0       	ldi	r26, 0x02	; 2
     2e8:	81 50       	subi	r24, 0x01	; 1
     2ea:	90 40       	sbci	r25, 0x00	; 0
     2ec:	a0 40       	sbci	r26, 0x00	; 0
     2ee:	e1 f7       	brne	.-8      	; 0x2e8 <lcd_init_4d+0x6>
     2f0:	00 c0       	rjmp	.+0      	; 0x2f2 <lcd_init_4d+0x10>
     2f2:	00 00       	nop
void lcd_init_4d(void)
{
// Power-up delay
    _delay_ms(100);                                 // initial 40 mSec delay

    lcd_RS_port &= ~(1<<lcd_RS_bit);                // select the Instruction Register (RS low)
     2f4:	95 98       	cbi	0x12, 5	; 18
    lcd_E_port &= ~(1<<lcd_E_bit);                  // make sure E is initially low
     2f6:	97 98       	cbi	0x12, 7	; 18

// Reset the LCD controller
    lcd_write_4(lcd_FunctionReset);                 // first part of reset sequence
     2f8:	80 e3       	ldi	r24, 0x30	; 48
     2fa:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_write_4>
     2fe:	af e1       	ldi	r26, 0x1F	; 31
     300:	be e4       	ldi	r27, 0x4E	; 78
     302:	11 97       	sbiw	r26, 0x01	; 1
     304:	f1 f7       	brne	.-4      	; 0x302 <lcd_init_4d+0x20>
     306:	00 c0       	rjmp	.+0      	; 0x308 <lcd_init_4d+0x26>
     308:	00 00       	nop
    _delay_ms(10);                                  // 4.1 mS delay (min)

    lcd_write_4(lcd_FunctionReset);                 // second part of reset sequence
     30a:	80 e3       	ldi	r24, 0x30	; 48
     30c:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_write_4>
     310:	8f ec       	ldi	r24, 0xCF	; 207
     312:	97 e0       	ldi	r25, 0x07	; 7
     314:	01 97       	sbiw	r24, 0x01	; 1
     316:	f1 f7       	brne	.-4      	; 0x314 <lcd_init_4d+0x32>
     318:	00 c0       	rjmp	.+0      	; 0x31a <lcd_init_4d+0x38>
     31a:	00 00       	nop
    _delay_ms(1);                                 // 100uS delay (min)

    lcd_write_4(lcd_FunctionReset);                 // third part of reset sequence
     31c:	80 e3       	ldi	r24, 0x30	; 48
     31e:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_write_4>
     322:	af ec       	ldi	r26, 0xCF	; 207
     324:	b7 e0       	ldi	r27, 0x07	; 7
     326:	11 97       	sbiw	r26, 0x01	; 1
     328:	f1 f7       	brne	.-4      	; 0x326 <lcd_init_4d+0x44>
     32a:	00 c0       	rjmp	.+0      	; 0x32c <lcd_init_4d+0x4a>
     32c:	00 00       	nop
// Preliminary Function Set instruction - used only to set the 4-bit mode.
// The number of lines or the font cannot be set at this time since the controller is still in the
//  8-bit mode, but the data transfer mode can be changed since this parameter is determined by one 
//  of the upper four bits of the instruction.
 
    lcd_write_4(lcd_FunctionSet4bit);               // set 4-bit mode
     32e:	88 e2       	ldi	r24, 0x28	; 40
     330:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_write_4>
     334:	8f ec       	ldi	r24, 0xCF	; 207
     336:	97 e0       	ldi	r25, 0x07	; 7
     338:	01 97       	sbiw	r24, 0x01	; 1
     33a:	f1 f7       	brne	.-4      	; 0x338 <lcd_init_4d+0x56>
     33c:	00 c0       	rjmp	.+0      	; 0x33e <lcd_init_4d+0x5c>
     33e:	00 00       	nop
    _delay_ms(1);                                  // 40uS delay (min)

// Function Set instruction
    lcd_write_instruction_4d(lcd_FunctionSet4bit);   // set mode, lines, and font
     340:	88 e2       	ldi	r24, 0x28	; 40
     342:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd_write_instruction_4d>
     346:	af ec       	ldi	r26, 0xCF	; 207
     348:	b7 e0       	ldi	r27, 0x07	; 7
     34a:	11 97       	sbiw	r26, 0x01	; 1
     34c:	f1 f7       	brne	.-4      	; 0x34a <lcd_init_4d+0x68>
     34e:	00 c0       	rjmp	.+0      	; 0x350 <lcd_init_4d+0x6e>
     350:	00 00       	nop
// The next three instructions are specified in the data sheet as part of the initialization routine, 
//  so it is a good idea (but probably not necessary) to do them just as specified and then redo them 
//  later if the application requires a different configuration.

// Display On/Off Control instruction
    lcd_write_instruction_4d(lcd_DisplayOff);        // turn display OFF
     352:	88 e0       	ldi	r24, 0x08	; 8
     354:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd_write_instruction_4d>
     358:	8f ec       	ldi	r24, 0xCF	; 207
     35a:	97 e0       	ldi	r25, 0x07	; 7
     35c:	01 97       	sbiw	r24, 0x01	; 1
     35e:	f1 f7       	brne	.-4      	; 0x35c <lcd_init_4d+0x7a>
     360:	00 c0       	rjmp	.+0      	; 0x362 <lcd_init_4d+0x80>
     362:	00 00       	nop
    _delay_ms(1);                                  // 40uS delay (min)

// Clear Display instruction
    lcd_write_instruction_4d(lcd_Clear);             // clear display RAM
     364:	81 e0       	ldi	r24, 0x01	; 1
     366:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd_write_instruction_4d>
     36a:	af e3       	ldi	r26, 0x3F	; 63
     36c:	bf e1       	ldi	r27, 0x1F	; 31
     36e:	11 97       	sbiw	r26, 0x01	; 1
     370:	f1 f7       	brne	.-4      	; 0x36e <lcd_init_4d+0x8c>
     372:	00 c0       	rjmp	.+0      	; 0x374 <lcd_init_4d+0x92>
     374:	00 00       	nop
    _delay_ms(4);                                   // 1.64 mS delay (min)

// ; Entry Mode Set instruction
    lcd_write_instruction_4d(lcd_EntryMode);         // set desired shift characteristics
     376:	86 e0       	ldi	r24, 0x06	; 6
     378:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd_write_instruction_4d>
     37c:	8f ec       	ldi	r24, 0xCF	; 207
     37e:	97 e0       	ldi	r25, 0x07	; 7
     380:	01 97       	sbiw	r24, 0x01	; 1
     382:	f1 f7       	brne	.-4      	; 0x380 <lcd_init_4d+0x9e>
     384:	00 c0       	rjmp	.+0      	; 0x386 <lcd_init_4d+0xa4>
     386:	00 00       	nop

// This is the end of the LCD controller initialization as specified in the data sheet, but the display
//  has been left in the OFF condition.  This is a good time to turn the display back ON.
 
// Display On/Off Control instruction
    lcd_write_instruction_4d(lcd_DisplayOn);         // turn the display ON
     388:	8c e0       	ldi	r24, 0x0C	; 12
     38a:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd_write_instruction_4d>
     38e:	af ec       	ldi	r26, 0xCF	; 207
     390:	b7 e0       	ldi	r27, 0x07	; 7
     392:	11 97       	sbiw	r26, 0x01	; 1
     394:	f1 f7       	brne	.-4      	; 0x392 <lcd_init_4d+0xb0>
     396:	00 c0       	rjmp	.+0      	; 0x398 <lcd_init_4d+0xb6>
     398:	00 00       	nop
    _delay_ms(1);                                  // 40uS delay (min)
}
     39a:	08 95       	ret

0000039c <LCDsendChar>:

void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{

	//4 bit part
	PORTC=(ch&0b11110000);
     39c:	98 2f       	mov	r25, r24
     39e:	90 7f       	andi	r25, 0xF0	; 240
     3a0:	95 bb       	out	0x15, r25	; 21
	PORTD|=1<<lcd_RS_bit ;
     3a2:	95 9a       	sbi	0x12, 5	; 18
	PORTG|=1<<lcd_E_bit;		
     3a4:	e5 e6       	ldi	r30, 0x65	; 101
     3a6:	f0 e0       	ldi	r31, 0x00	; 0
     3a8:	90 81       	ld	r25, Z
     3aa:	90 68       	ori	r25, 0x80	; 128
     3ac:	90 83       	st	Z, r25
     3ae:	af ec       	ldi	r26, 0xCF	; 207
     3b0:	b7 e0       	ldi	r27, 0x07	; 7
     3b2:	11 97       	sbiw	r26, 0x01	; 1
     3b4:	f1 f7       	brne	.-4      	; 0x3b2 <LCDsendChar+0x16>
     3b6:	00 c0       	rjmp	.+0      	; 0x3b8 <LCDsendChar+0x1c>
     3b8:	00 00       	nop
	_delay_ms(1);
	PORTG&=~(1<<lcd_E_bit);	
     3ba:	90 81       	ld	r25, Z
     3bc:	9f 77       	andi	r25, 0x7F	; 127
     3be:	90 83       	st	Z, r25
	PORTD&=~(1<<lcd_RS_bit);
     3c0:	95 98       	cbi	0x12, 5	; 18
     3c2:	af ec       	ldi	r26, 0xCF	; 207
     3c4:	b7 e0       	ldi	r27, 0x07	; 7
     3c6:	11 97       	sbiw	r26, 0x01	; 1
     3c8:	f1 f7       	brne	.-4      	; 0x3c6 <LCDsendChar+0x2a>
     3ca:	00 c0       	rjmp	.+0      	; 0x3cc <LCDsendChar+0x30>
     3cc:	00 00       	nop
	_delay_ms(1);
	PORTC=((ch&0b00001111)<<4);
     3ce:	90 e0       	ldi	r25, 0x00	; 0
     3d0:	82 95       	swap	r24
     3d2:	92 95       	swap	r25
     3d4:	90 7f       	andi	r25, 0xF0	; 240
     3d6:	98 27       	eor	r25, r24
     3d8:	80 7f       	andi	r24, 0xF0	; 240
     3da:	98 27       	eor	r25, r24
     3dc:	85 bb       	out	0x15, r24	; 21
	PORTD|=1<<lcd_RS_bit;
     3de:	95 9a       	sbi	0x12, 5	; 18
	PORTG|=1<<lcd_E_bit;		
     3e0:	80 81       	ld	r24, Z
     3e2:	80 68       	ori	r24, 0x80	; 128
     3e4:	80 83       	st	Z, r24
     3e6:	8f ec       	ldi	r24, 0xCF	; 207
     3e8:	97 e0       	ldi	r25, 0x07	; 7
     3ea:	01 97       	sbiw	r24, 0x01	; 1
     3ec:	f1 f7       	brne	.-4      	; 0x3ea <LCDsendChar+0x4e>
     3ee:	00 c0       	rjmp	.+0      	; 0x3f0 <LCDsendChar+0x54>
     3f0:	00 00       	nop
	_delay_ms(1);
	PORTG&=~(1<<lcd_E_bit);	
     3f2:	80 81       	ld	r24, Z
     3f4:	8f 77       	andi	r24, 0x7F	; 127
     3f6:	80 83       	st	Z, r24
	PORTD&=~(1<<lcd_RS_bit);
     3f8:	95 98       	cbi	0x12, 5	; 18
     3fa:	af ec       	ldi	r26, 0xCF	; 207
     3fc:	b7 e0       	ldi	r27, 0x07	; 7
     3fe:	11 97       	sbiw	r26, 0x01	; 1
     400:	f1 f7       	brne	.-4      	; 0x3fe <LCDsendChar+0x62>
     402:	00 c0       	rjmp	.+0      	; 0x404 <LCDsendChar+0x68>
     404:	00 00       	nop
	_delay_ms(1);
}
     406:	08 95       	ret

00000408 <CopyStringtoLCD>:
    _delay_us(1);                                   // implement 'Data set-up time' (80 nS) and 'Enable pulse width' (230 nS)
    lcd_E_port &= ~(1<<lcd_E_bit);                  // Enable pin low
    _delay_us(1);                                   // implement 'Data hold time' (10 nS) and 'Enable cycle time' (500 nS)
}
void CopyStringtoLCD(const uint8_t *FlashLoc)
{
     408:	1f 93       	push	r17
     40a:	cf 93       	push	r28
     40c:	df 93       	push	r29
     40e:	ec 01       	movw	r28, r24
	uint8_t i;
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
     410:	fe 01       	movw	r30, r28
     412:	24 91       	lpm	r18, Z+
     414:	22 23       	and	r18, r18
     416:	69 f0       	breq	.+26     	; 0x432 <CopyStringtoLCD+0x2a>
     418:	10 e0       	ldi	r17, 0x00	; 0
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
     41a:	fc 01       	movw	r30, r24
     41c:	84 91       	lpm	r24, Z+
     41e:	0e 94 ce 01 	call	0x39c	; 0x39c <LCDsendChar>
    _delay_us(1);                                   // implement 'Data hold time' (10 nS) and 'Enable cycle time' (500 nS)
}
void CopyStringtoLCD(const uint8_t *FlashLoc)
{
	uint8_t i;
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
     422:	1f 5f       	subi	r17, 0xFF	; 255
     424:	ce 01       	movw	r24, r28
     426:	81 0f       	add	r24, r17
     428:	91 1d       	adc	r25, r1
     42a:	fc 01       	movw	r30, r24
     42c:	24 91       	lpm	r18, Z+
     42e:	22 23       	and	r18, r18
     430:	a1 f7       	brne	.-24     	; 0x41a <CopyStringtoLCD+0x12>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
     432:	df 91       	pop	r29
     434:	cf 91       	pop	r28
     436:	1f 91       	pop	r17
     438:	08 95       	ret

0000043a <main>:
/* Define UART buad rate here */
#define UART_BAUD_RATE      9600      


int main(void)
{
     43a:	8f 92       	push	r8
     43c:	9f 92       	push	r9
     43e:	af 92       	push	r10
     440:	bf 92       	push	r11
     442:	cf 92       	push	r12
     444:	df 92       	push	r13
     446:	ef 92       	push	r14
     448:	ff 92       	push	r15
     44a:	0f 93       	push	r16
     44c:	1f 93       	push	r17
     44e:	df 93       	push	r29
     450:	cf 93       	push	r28
     452:	cd b7       	in	r28, 0x3d	; 61
     454:	de b7       	in	r29, 0x3e	; 62
     456:	c0 54       	subi	r28, 0x40	; 64
     458:	d0 40       	sbci	r29, 0x00	; 0
     45a:	0f b6       	in	r0, 0x3f	; 63
     45c:	f8 94       	cli
     45e:	de bf       	out	0x3e, r29	; 62
     460:	0f be       	out	0x3f, r0	; 63
     462:	cd bf       	out	0x3d, r28	; 61
	DDRC = 0xFF;    // lcd pins
     464:	8f ef       	ldi	r24, 0xFF	; 255
     466:	84 bb       	out	0x14, r24	; 20
	// configure the microprocessor pins for the control lines
    lcd_E_ddr |= (1<<lcd_E_bit);                    // E line - output
     468:	8f 9a       	sbi	0x11, 7	; 17
    lcd_RS_ddr |= (1<<lcd_RS_bit);                  // RS line - output
     46a:	8d 9a       	sbi	0x11, 5	; 17
 
    lcd_RS_port &= ~(1<<lcd_RS_bit);
     46c:	95 98       	cbi	0x12, 5	; 18
    char buffer[7];
    int  num=134;
    uint8_t answer;
    uint8_t http_respon_data[64];

    lcd_init_4d();
     46e:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lcd_init_4d>
	lcd_write_instruction_4d(lcd_Clear);
     472:	81 e0       	ldi	r24, 0x01	; 1
     474:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd_write_instruction_4d>
     478:	8f e1       	ldi	r24, 0x1F	; 31
     47a:	9e e4       	ldi	r25, 0x4E	; 78
     47c:	01 97       	sbiw	r24, 0x01	; 1
     47e:	f1 f7       	brne	.-4      	; 0x47c <main+0x42>
     480:	00 c0       	rjmp	.+0      	; 0x482 <main+0x48>
     482:	00 00       	nop
    _delay_ms(10);
    lcd_write_string_4d("main");
     484:	80 e0       	ldi	r24, 0x00	; 0
     486:	91 e0       	ldi	r25, 0x01	; 1
     488:	0e 94 11 01 	call	0x222	; 0x222 <lcd_write_string_4d>
     *  with the macro 
     *  UART_BAUD_SELECT() (normal speed mode )
     *  or 
     *  UART_BAUD_SELECT_DOUBLE_SPEED() ( double speed mode)
     */
    sim900_init_uart(9600);
     48c:	80 e8       	ldi	r24, 0x80	; 128
     48e:	95 e2       	ldi	r25, 0x25	; 37
     490:	0e 94 ac 02 	call	0x558	; 0x558 <sim900_init_uart>

    
    /*
     * now enable interrupt, since UART library is interrupt controlled
     */
    sei();
     494:	78 94       	sei
    lcd_write_instruction_4d(lcd_Clear);
     496:	81 e0       	ldi	r24, 0x01	; 1
     498:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd_write_instruction_4d>
     49c:	af e1       	ldi	r26, 0x1F	; 31
     49e:	be e4       	ldi	r27, 0x4E	; 78
     4a0:	11 97       	sbiw	r26, 0x01	; 1
     4a2:	f1 f7       	brne	.-4      	; 0x4a0 <main+0x66>
     4a4:	00 c0       	rjmp	.+0      	; 0x4a6 <main+0x6c>
     4a6:	00 00       	nop
    _delay_ms(10);
    if(sim900_gprs_is_opened())
     4a8:	0e 94 4c 05 	call	0xa98	; 0xa98 <sim900_gprs_is_opened>
     4ac:	88 23       	and	r24, r24
     4ae:	59 f0       	breq	.+22     	; 0x4c6 <main+0x8c>
    {
        answer = sim900_gprs_close_connection();
     4b0:	0e 94 65 05 	call	0xaca	; 0xaca <sim900_gprs_close_connection>
     4b4:	8f ef       	ldi	r24, 0xFF	; 255
     4b6:	93 ed       	ldi	r25, 0xD3	; 211
     4b8:	a0 e3       	ldi	r26, 0x30	; 48
     4ba:	81 50       	subi	r24, 0x01	; 1
     4bc:	90 40       	sbci	r25, 0x00	; 0
     4be:	a0 40       	sbci	r26, 0x00	; 0
     4c0:	e1 f7       	brne	.-8      	; 0x4ba <main+0x80>
     4c2:	00 c0       	rjmp	.+0      	; 0x4c4 <main+0x8a>
     4c4:	00 00       	nop
        _delay_ms(2000);
    }
    
    lcd_write_string_4d("opening gprs");
     4c6:	85 e0       	ldi	r24, 0x05	; 5
     4c8:	91 e0       	ldi	r25, 0x01	; 1
     4ca:	0e 94 11 01 	call	0x222	; 0x222 <lcd_write_string_4d>
        sim900_gprs_open_connection(
     4ce:	82 e1       	ldi	r24, 0x12	; 18
     4d0:	91 e0       	ldi	r25, 0x01	; 1
     4d2:	6b e1       	ldi	r22, 0x1B	; 27
     4d4:	71 e0       	ldi	r23, 0x01	; 1
     4d6:	44 e2       	ldi	r20, 0x24	; 36
     4d8:	51 e0       	ldi	r21, 0x01	; 1
     4da:	0e 94 9d 05 	call	0xb3a	; 0xb3a <sim900_gprs_open_connection>



    while(1)
	{
		lcd_write_string_4d("a");
     4de:	0f 2e       	mov	r0, r31
     4e0:	f6 e2       	ldi	r31, 0x26	; 38
     4e2:	cf 2e       	mov	r12, r31
     4e4:	f1 e0       	ldi	r31, 0x01	; 1
     4e6:	df 2e       	mov	r13, r31
     4e8:	f0 2d       	mov	r31, r0
		sim900_http_send_data(
     4ea:	0f 2e       	mov	r0, r31
     4ec:	f8 e2       	ldi	r31, 0x28	; 40
     4ee:	af 2e       	mov	r10, r31
     4f0:	f1 e0       	ldi	r31, 0x01	; 1
     4f2:	bf 2e       	mov	r11, r31
     4f4:	f0 2d       	mov	r31, r0
     4f6:	0f 2e       	mov	r0, r31
     4f8:	f6 e5       	ldi	r31, 0x56	; 86
     4fa:	8f 2e       	mov	r8, r31
     4fc:	f1 e0       	ldi	r31, 0x01	; 1
     4fe:	9f 2e       	mov	r9, r31
     500:	f0 2d       	mov	r31, r0
     502:	7e 01       	movw	r14, r28
     504:	08 94       	sec
     506:	e1 1c       	adc	r14, r1
     508:	f1 1c       	adc	r15, r1



    while(1)
	{
		lcd_write_string_4d("a");
     50a:	c6 01       	movw	r24, r12
     50c:	0e 94 11 01 	call	0x222	; 0x222 <lcd_write_string_4d>
		sim900_http_send_data(
     510:	81 e0       	ldi	r24, 0x01	; 1
     512:	b5 01       	movw	r22, r10
     514:	a4 01       	movw	r20, r8
     516:	20 e4       	ldi	r18, 0x40	; 64
     518:	87 01       	movw	r16, r14
     51a:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <sim900_http_send_data>
            HTTP_POST,
            (const uint8_t*)"http://intense-fjord-78468.herokuapp.com/temp",
			(const uint8_t*)"{\"temp\": 16}",
            64,
            http_respon_data);
        lcd_write_instruction_4d(lcd_Clear);
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd_write_instruction_4d>
     524:	af e1       	ldi	r26, 0x1F	; 31
     526:	be e4       	ldi	r27, 0x4E	; 78
     528:	11 97       	sbiw	r26, 0x01	; 1
     52a:	f1 f7       	brne	.-4      	; 0x528 <main+0xee>
     52c:	00 c0       	rjmp	.+0      	; 0x52e <main+0xf4>
     52e:	00 00       	nop
        _delay_ms(10);
        lcd_write_string_4d(http_respon_data);
     530:	c7 01       	movw	r24, r14
     532:	0e 94 11 01 	call	0x222	; 0x222 <lcd_write_string_4d>
     536:	8f ef       	ldi	r24, 0xFF	; 255
     538:	99 e6       	ldi	r25, 0x69	; 105
     53a:	a8 e1       	ldi	r26, 0x18	; 24
     53c:	81 50       	subi	r24, 0x01	; 1
     53e:	90 40       	sbci	r25, 0x00	; 0
     540:	a0 40       	sbci	r26, 0x00	; 0
     542:	e1 f7       	brne	.-8      	; 0x53c <main+0x102>
     544:	00 c0       	rjmp	.+0      	; 0x546 <main+0x10c>
     546:	00 00       	nop
     548:	e0 cf       	rjmp	.-64     	; 0x50a <main+0xd0>

0000054a <uart1_flush_buffer>:

#include "sim900.h"

void uart1_flush_buffer()
{
	while (uart1_getc() != UART_NO_DATA);
     54a:	0e 94 86 0a 	call	0x150c	; 0x150c <uart1_getc>
     54e:	21 e0       	ldi	r18, 0x01	; 1
     550:	80 30       	cpi	r24, 0x00	; 0
     552:	92 07       	cpc	r25, r18
     554:	d1 f7       	brne	.-12     	; 0x54a <uart1_flush_buffer>
}
     556:	08 95       	ret

00000558 <sim900_init_uart>:
void sim900_init_uart(const uint16_t baudrate)
{
     558:	cf 93       	push	r28
     55a:	df 93       	push	r29
	//init uart
	uart1_init(UART_BAUD_SELECT(baudrate, F_CPU));
     55c:	9c 01       	movw	r18, r24
     55e:	40 e0       	ldi	r20, 0x00	; 0
     560:	50 e0       	ldi	r21, 0x00	; 0
     562:	ca 01       	movw	r24, r20
     564:	b9 01       	movw	r22, r18
     566:	60 5c       	subi	r22, 0xC0	; 192
     568:	7d 4b       	sbci	r23, 0xBD	; 189
     56a:	80 4f       	sbci	r24, 0xF0	; 240
     56c:	9f 4f       	sbci	r25, 0xFF	; 255
     56e:	66 0f       	add	r22, r22
     570:	77 1f       	adc	r23, r23
     572:	88 1f       	adc	r24, r24
     574:	99 1f       	adc	r25, r25
     576:	66 0f       	add	r22, r22
     578:	77 1f       	adc	r23, r23
     57a:	88 1f       	adc	r24, r24
     57c:	99 1f       	adc	r25, r25
     57e:	66 0f       	add	r22, r22
     580:	77 1f       	adc	r23, r23
     582:	88 1f       	adc	r24, r24
     584:	99 1f       	adc	r25, r25
     586:	22 0f       	add	r18, r18
     588:	33 1f       	adc	r19, r19
     58a:	44 1f       	adc	r20, r20
     58c:	55 1f       	adc	r21, r21
     58e:	22 0f       	add	r18, r18
     590:	33 1f       	adc	r19, r19
     592:	44 1f       	adc	r20, r20
     594:	55 1f       	adc	r21, r21
     596:	22 0f       	add	r18, r18
     598:	33 1f       	adc	r19, r19
     59a:	44 1f       	adc	r20, r20
     59c:	55 1f       	adc	r21, r21
     59e:	22 0f       	add	r18, r18
     5a0:	33 1f       	adc	r19, r19
     5a2:	44 1f       	adc	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <__udivmodsi4>
     5aa:	c9 01       	movw	r24, r18
     5ac:	01 97       	sbiw	r24, 0x01	; 1
     5ae:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <uart1_init>
     5b2:	8f ef       	ldi	r24, 0xFF	; 255
     5b4:	90 e7       	ldi	r25, 0x70	; 112
     5b6:	a2 e0       	ldi	r26, 0x02	; 2
     5b8:	81 50       	subi	r24, 0x01	; 1
     5ba:	90 40       	sbci	r25, 0x00	; 0
     5bc:	a0 40       	sbci	r26, 0x00	; 0
     5be:	e1 f7       	brne	.-8      	; 0x5b8 <sim900_init_uart+0x60>
     5c0:	00 c0       	rjmp	.+0      	; 0x5c2 <sim900_init_uart+0x6a>
     5c2:	00 00       	nop
	_delay_ms(100);
	uart1_puts("A");
     5c4:	c3 e6       	ldi	r28, 0x63	; 99
     5c6:	d1 e0       	ldi	r29, 0x01	; 1
     5c8:	ce 01       	movw	r24, r28
     5ca:	0e 94 ba 0a 	call	0x1574	; 0x1574 <uart1_puts>
     5ce:	8f ef       	ldi	r24, 0xFF	; 255
     5d0:	90 e7       	ldi	r25, 0x70	; 112
     5d2:	a2 e0       	ldi	r26, 0x02	; 2
     5d4:	81 50       	subi	r24, 0x01	; 1
     5d6:	90 40       	sbci	r25, 0x00	; 0
     5d8:	a0 40       	sbci	r26, 0x00	; 0
     5da:	e1 f7       	brne	.-8      	; 0x5d4 <sim900_init_uart+0x7c>
     5dc:	00 c0       	rjmp	.+0      	; 0x5de <sim900_init_uart+0x86>
     5de:	00 00       	nop
	_delay_ms(100);
	uart1_puts("A");
     5e0:	ce 01       	movw	r24, r28
     5e2:	0e 94 ba 0a 	call	0x1574	; 0x1574 <uart1_puts>
     5e6:	8f ef       	ldi	r24, 0xFF	; 255
     5e8:	90 e7       	ldi	r25, 0x70	; 112
     5ea:	a2 e0       	ldi	r26, 0x02	; 2
     5ec:	81 50       	subi	r24, 0x01	; 1
     5ee:	90 40       	sbci	r25, 0x00	; 0
     5f0:	a0 40       	sbci	r26, 0x00	; 0
     5f2:	e1 f7       	brne	.-8      	; 0x5ec <sim900_init_uart+0x94>
     5f4:	00 c0       	rjmp	.+0      	; 0x5f6 <sim900_init_uart+0x9e>
     5f6:	00 00       	nop
	_delay_ms(100);
	uart1_puts("ATE0");
     5f8:	85 e6       	ldi	r24, 0x65	; 101
     5fa:	91 e0       	ldi	r25, 0x01	; 1
     5fc:	0e 94 ba 0a 	call	0x1574	; 0x1574 <uart1_puts>
     600:	8f ef       	ldi	r24, 0xFF	; 255
     602:	99 e6       	ldi	r25, 0x69	; 105
     604:	a8 e1       	ldi	r26, 0x18	; 24
     606:	81 50       	subi	r24, 0x01	; 1
     608:	90 40       	sbci	r25, 0x00	; 0
     60a:	a0 40       	sbci	r26, 0x00	; 0
     60c:	e1 f7       	brne	.-8      	; 0x606 <sim900_init_uart+0xae>
     60e:	00 c0       	rjmp	.+0      	; 0x610 <sim900_init_uart+0xb8>
     610:	00 00       	nop
	_delay_ms(1000);
	uart1_flush_buffer();
     612:	0e 94 a5 02 	call	0x54a	; 0x54a <uart1_flush_buffer>

}
     616:	df 91       	pop	r29
     618:	cf 91       	pop	r28
     61a:	08 95       	ret

0000061c <sim900_send_cmd_wait_reply>:

uint8_t sim900_send_cmd_wait_reply(const uint8_t send_from_progmem, const uint8_t *aCmd, const uint8_t
*aResponExit, const uint32_t aTimeoutMax, const uint8_t aLenOut, uint8_t
*aResponOut)
{
     61c:	2f 92       	push	r2
     61e:	3f 92       	push	r3
     620:	4f 92       	push	r4
     622:	5f 92       	push	r5
     624:	6f 92       	push	r6
     626:	7f 92       	push	r7
     628:	8f 92       	push	r8
     62a:	9f 92       	push	r9
     62c:	af 92       	push	r10
     62e:	bf 92       	push	r11
     630:	cf 92       	push	r12
     632:	df 92       	push	r13
     634:	ef 92       	push	r14
     636:	ff 92       	push	r15
     638:	0f 93       	push	r16
     63a:	1f 93       	push	r17
     63c:	df 93       	push	r29
     63e:	cf 93       	push	r28
     640:	00 d0       	rcall	.+0      	; 0x642 <sim900_send_cmd_wait_reply+0x26>
     642:	00 d0       	rcall	.+0      	; 0x644 <sim900_send_cmd_wait_reply+0x28>
     644:	0f 92       	push	r0
     646:	cd b7       	in	r28, 0x3d	; 61
     648:	de b7       	in	r29, 0x3e	; 62
     64a:	28 2e       	mov	r2, r24
     64c:	3b 01       	movw	r6, r22
     64e:	2a 01       	movw	r4, r20
     650:	48 01       	movw	r8, r16
     652:	59 01       	movw	r10, r18
     654:	e9 82       	std	Y+1, r14	; 0x01
     656:	db 82       	std	Y+3, r13	; 0x03
     658:	ca 82       	std	Y+2, r12	; 0x02

	uint8_t id_data, respons = 0;
	uint32_t uart_tout_cnt = 0;
	uint16_t uart_data;
	
	uint8_t *aDataBuffer = (uint8_t*) calloc(MAX_BUFFER_TMP,sizeof(uint8_t));
     65a:	80 e4       	ldi	r24, 0x40	; 64
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	61 e0       	ldi	r22, 0x01	; 1
     660:	70 e0       	ldi	r23, 0x00	; 0
     662:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <calloc>
     666:	18 2f       	mov	r17, r24
     668:	e9 2e       	mov	r14, r25
     66a:	98 2f       	mov	r25, r24
     66c:	49 2f       	mov	r20, r25
     66e:	5e 2d       	mov	r21, r14
     670:	5d 83       	std	Y+5, r21	; 0x05
     672:	4c 83       	std	Y+4, r20	; 0x04
	
	//buffer created???
	if (aDataBuffer == NULL)
     674:	41 15       	cp	r20, r1
     676:	51 05       	cpc	r21, r1
     678:	09 f4       	brne	.+2      	; 0x67c <sim900_send_cmd_wait_reply+0x60>
     67a:	78 c0       	rjmp	.+240    	; 0x76c <sim900_send_cmd_wait_reply+0x150>
	{
		return 0;
	}

	//reset to all 0
	memset(aDataBuffer, '\0', MAX_BUFFER_TMP);
     67c:	e9 2f       	mov	r30, r25
     67e:	fe 2d       	mov	r31, r14
     680:	80 e4       	ldi	r24, 0x40	; 64
     682:	df 01       	movw	r26, r30
     684:	1d 92       	st	X+, r1
     686:	8a 95       	dec	r24
     688:	e9 f7       	brne	.-6      	; 0x684 <sim900_send_cmd_wait_reply+0x68>

	//read left buffer data
	if (aCmd != NULL)
     68a:	61 14       	cp	r6, r1
     68c:	71 04       	cpc	r7, r1
     68e:	e9 f1       	breq	.+122    	; 0x70a <sim900_send_cmd_wait_reply+0xee>
	{
		uart1_flush_buffer();
     690:	0e 94 a5 02 	call	0x54a	; 0x54a <uart1_flush_buffer>
	}

	//send command
	if (aCmd != NULL)
	{
		if (send_from_progmem)
     694:	22 20       	and	r2, r2
     696:	21 f0       	breq	.+8      	; 0x6a0 <sim900_send_cmd_wait_reply+0x84>
		{
			uart1_puts_p((const char*)aCmd);
     698:	c3 01       	movw	r24, r6
     69a:	0e 94 c9 0a 	call	0x1592	; 0x1592 <uart1_puts_p>
     69e:	35 c0       	rjmp	.+106    	; 0x70a <sim900_send_cmd_wait_reply+0xee>
		}
		else
		{
			uart1_puts((const char*)aCmd);
     6a0:	c3 01       	movw	r24, r6
     6a2:	0e 94 ba 0a 	call	0x1574	; 0x1574 <uart1_puts>
     6a6:	31 c0       	rjmp	.+98     	; 0x70a <sim900_send_cmd_wait_reply+0xee>
		uart_tout_cnt = 0;
		while (((uart_data = uart1_getc()) == UART_NO_DATA) && (uart_tout_cnt <
		aTimeoutMax))
		//wait data arrive or tout
		{
			uart_tout_cnt++;
     6a8:	08 94       	sec
     6aa:	e1 1c       	adc	r14, r1
     6ac:	f1 1c       	adc	r15, r1
     6ae:	01 1d       	adc	r16, r1
     6b0:	11 1d       	adc	r17, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6b2:	b2 e0       	ldi	r27, 0x02	; 2
     6b4:	ba 95       	dec	r27
     6b6:	f1 f7       	brne	.-4      	; 0x6b4 <sim900_send_cmd_wait_reply+0x98>
     6b8:	00 c0       	rjmp	.+0      	; 0x6ba <sim900_send_cmd_wait_reply+0x9e>
	uart_tout_cnt = 0;
	while ((id_data < (MAX_BUFFER_TMP - 1)) && (uart_tout_cnt <= aTimeoutMax))
	{
		//get uart data or timeout
		uart_tout_cnt = 0;
		while (((uart_data = uart1_getc()) == UART_NO_DATA) && (uart_tout_cnt <
     6ba:	0e 94 86 0a 	call	0x150c	; 0x150c <uart1_getc>
     6be:	e1 e0       	ldi	r30, 0x01	; 1
     6c0:	80 30       	cpi	r24, 0x00	; 0
     6c2:	9e 07       	cpc	r25, r30
     6c4:	39 f4       	brne	.+14     	; 0x6d4 <sim900_send_cmd_wait_reply+0xb8>
     6c6:	e8 14       	cp	r14, r8
     6c8:	f9 04       	cpc	r15, r9
     6ca:	0a 05       	cpc	r16, r10
     6cc:	1b 05       	cpc	r17, r11
     6ce:	60 f3       	brcs	.-40     	; 0x6a8 <sim900_send_cmd_wait_reply+0x8c>
		}

		//check for timeout
		if (uart_tout_cnt >= aTimeoutMax)
		{
			respons = 0;
     6d0:	10 e0       	ldi	r17, 0x00	; 0
     6d2:	33 c0       	rjmp	.+102    	; 0x73a <sim900_send_cmd_wait_reply+0x11e>
			uart_tout_cnt++;
			_delay_us(1);
		}

		//check for timeout
		if (uart_tout_cnt >= aTimeoutMax)
     6d4:	e8 14       	cp	r14, r8
     6d6:	f9 04       	cpc	r15, r9
     6d8:	0a 05       	cpc	r16, r10
     6da:	1b 05       	cpc	r17, r11
     6dc:	38 f5       	brcc	.+78     	; 0x72c <sim900_send_cmd_wait_reply+0x110>
			respons = 0;
			break;
		}
		else
		{
			aDataBuffer[id_data] = uart_data;
     6de:	d3 01       	movw	r26, r6
     6e0:	8d 93       	st	X+, r24
     6e2:	3d 01       	movw	r6, r26
			id_data++;
     6e4:	d3 94       	inc	r13

			// check if the desired answer  is in the response of the module
			if (aResponExit != NULL)
     6e6:	41 14       	cp	r4, r1
     6e8:	51 04       	cpc	r5, r1
     6ea:	39 f0       	breq	.+14     	; 0x6fa <sim900_send_cmd_wait_reply+0xde>
			{
				if (strstr((const char*)aDataBuffer, (const char*)aResponExit) != NULL)
     6ec:	8c 81       	ldd	r24, Y+4	; 0x04
     6ee:	9d 81       	ldd	r25, Y+5	; 0x05
     6f0:	b2 01       	movw	r22, r4
     6f2:	0e 94 90 0c 	call	0x1920	; 0x1920 <strstr>
     6f6:	00 97       	sbiw	r24, 0x00	; 0
     6f8:	d9 f4       	brne	.+54     	; 0x730 <sim900_send_cmd_wait_reply+0x114>
					break;
				}
			}

			//check error also
			if (strstr((const char*)aDataBuffer, (const char*)RESPON_ERROR) != NULL)
     6fa:	8c 81       	ldd	r24, Y+4	; 0x04
     6fc:	9d 81       	ldd	r25, Y+5	; 0x05
     6fe:	b1 01       	movw	r22, r2
     700:	0e 94 90 0c 	call	0x1920	; 0x1920 <strstr>
     704:	00 97       	sbiw	r24, 0x00	; 0
     706:	59 f0       	breq	.+22     	; 0x71e <sim900_send_cmd_wait_reply+0x102>
     708:	15 c0       	rjmp	.+42     	; 0x734 <sim900_send_cmd_wait_reply+0x118>
     70a:	61 2e       	mov	r6, r17
     70c:	7e 2c       	mov	r7, r14
}

uint8_t sim900_send_cmd_wait_reply(const uint8_t send_from_progmem, const uint8_t *aCmd, const uint8_t
*aResponExit, const uint32_t aTimeoutMax, const uint8_t aLenOut, uint8_t
*aResponOut)
{
     70e:	dd 24       	eor	r13, r13
					break;
				}
			}

			//check error also
			if (strstr((const char*)aDataBuffer, (const char*)RESPON_ERROR) != NULL)
     710:	0f 2e       	mov	r0, r31
     712:	fa e6       	ldi	r31, 0x6A	; 106
     714:	2f 2e       	mov	r2, r31
     716:	f1 e0       	ldi	r31, 0x01	; 1
     718:	3f 2e       	mov	r3, r31
     71a:	f0 2d       	mov	r31, r0
     71c:	03 c0       	rjmp	.+6      	; 0x724 <sim900_send_cmd_wait_reply+0x108>
	}

	//wait for reply
	id_data = 0;
	uart_tout_cnt = 0;
	while ((id_data < (MAX_BUFFER_TMP - 1)) && (uart_tout_cnt <= aTimeoutMax))
     71e:	bd 2d       	mov	r27, r13
     720:	bf 33       	cpi	r27, 0x3F	; 63
     722:	51 f0       	breq	.+20     	; 0x738 <sim900_send_cmd_wait_reply+0x11c>
}

uint8_t sim900_send_cmd_wait_reply(const uint8_t send_from_progmem, const uint8_t *aCmd, const uint8_t
*aResponExit, const uint32_t aTimeoutMax, const uint8_t aLenOut, uint8_t
*aResponOut)
{
     724:	ee 24       	eor	r14, r14
     726:	ff 24       	eor	r15, r15
     728:	87 01       	movw	r16, r14
     72a:	c7 cf       	rjmp	.-114    	; 0x6ba <sim900_send_cmd_wait_reply+0x9e>
		}

		//check for timeout
		if (uart_tout_cnt >= aTimeoutMax)
		{
			respons = 0;
     72c:	10 e0       	ldi	r17, 0x00	; 0
     72e:	05 c0       	rjmp	.+10     	; 0x73a <sim900_send_cmd_wait_reply+0x11e>
			// check if the desired answer  is in the response of the module
			if (aResponExit != NULL)
			{
				if (strstr((const char*)aDataBuffer, (const char*)aResponExit) != NULL)
				{
					respons = 1;
     730:	11 e0       	ldi	r17, 0x01	; 1
     732:	03 c0       	rjmp	.+6      	; 0x73a <sim900_send_cmd_wait_reply+0x11e>
			}

			//check error also
			if (strstr((const char*)aDataBuffer, (const char*)RESPON_ERROR) != NULL)
			{
				respons = 0;
     734:	10 e0       	ldi	r17, 0x00	; 0
     736:	01 c0       	rjmp	.+2      	; 0x73a <sim900_send_cmd_wait_reply+0x11e>
*aResponExit, const uint32_t aTimeoutMax, const uint8_t aLenOut, uint8_t
*aResponOut)
{
	#define MAX_BUFFER_TMP	64

	uint8_t id_data, respons = 0;
     738:	10 e0       	ldi	r17, 0x00	; 0
			}
		}
	}

	//copy it to the out
	if ((aLenOut != 0) && (aResponOut != NULL) && (aLenOut > id_data) && (respons)
     73a:	e9 81       	ldd	r30, Y+1	; 0x01
     73c:	ee 23       	and	r30, r30
     73e:	89 f0       	breq	.+34     	; 0x762 <sim900_send_cmd_wait_reply+0x146>
     740:	ea 80       	ldd	r14, Y+2	; 0x02
     742:	fb 80       	ldd	r15, Y+3	; 0x03
     744:	e1 14       	cp	r14, r1
     746:	f1 04       	cpc	r15, r1
     748:	61 f0       	breq	.+24     	; 0x762 <sim900_send_cmd_wait_reply+0x146>
     74a:	de 16       	cp	r13, r30
     74c:	50 f4       	brcc	.+20     	; 0x762 <sim900_send_cmd_wait_reply+0x146>
     74e:	11 23       	and	r17, r17
     750:	41 f0       	breq	.+16     	; 0x762 <sim900_send_cmd_wait_reply+0x146>
	)
	{
		memcpy(aResponOut, aDataBuffer, id_data *sizeof(uint8_t));
     752:	8a 81       	ldd	r24, Y+2	; 0x02
     754:	9b 81       	ldd	r25, Y+3	; 0x03
     756:	6c 81       	ldd	r22, Y+4	; 0x04
     758:	7d 81       	ldd	r23, Y+5	; 0x05
     75a:	4d 2d       	mov	r20, r13
     75c:	50 e0       	ldi	r21, 0x00	; 0
     75e:	0e 94 80 0c 	call	0x1900	; 0x1900 <memcpy>
	}
	
	//free the buffer
	free(aDataBuffer);
     762:	8c 81       	ldd	r24, Y+4	; 0x04
     764:	9d 81       	ldd	r25, Y+5	; 0x05
     766:	0e 94 bc 0b 	call	0x1778	; 0x1778 <free>

	//return it
	return respons;
     76a:	01 c0       	rjmp	.+2      	; 0x76e <sim900_send_cmd_wait_reply+0x152>
	uint8_t *aDataBuffer = (uint8_t*) calloc(MAX_BUFFER_TMP,sizeof(uint8_t));
	
	//buffer created???
	if (aDataBuffer == NULL)
	{
		return 0;
     76c:	10 e0       	ldi	r17, 0x00	; 0
	//free the buffer
	free(aDataBuffer);

	//return it
	return respons;
}
     76e:	81 2f       	mov	r24, r17
     770:	0f 90       	pop	r0
     772:	0f 90       	pop	r0
     774:	0f 90       	pop	r0
     776:	0f 90       	pop	r0
     778:	0f 90       	pop	r0
     77a:	cf 91       	pop	r28
     77c:	df 91       	pop	r29
     77e:	1f 91       	pop	r17
     780:	0f 91       	pop	r16
     782:	ff 90       	pop	r15
     784:	ef 90       	pop	r14
     786:	df 90       	pop	r13
     788:	cf 90       	pop	r12
     78a:	bf 90       	pop	r11
     78c:	af 90       	pop	r10
     78e:	9f 90       	pop	r9
     790:	8f 90       	pop	r8
     792:	7f 90       	pop	r7
     794:	6f 90       	pop	r6
     796:	5f 90       	pop	r5
     798:	4f 90       	pop	r4
     79a:	3f 90       	pop	r3
     79c:	2f 90       	pop	r2
     79e:	08 95       	ret

000007a0 <sim900_is_network_registered>:

uint8_t sim900_is_network_registered()
{
     7a0:	cf 92       	push	r12
     7a2:	df 92       	push	r13
     7a4:	ef 92       	push	r14
     7a6:	0f 93       	push	r16
     7a8:	1f 93       	push	r17
	return (sim900_send_cmd_wait_reply(1,(const uint8_t*)PSTR("AT+CREG?\r"), (const
     7aa:	81 e0       	ldi	r24, 0x01	; 1
     7ac:	61 e7       	ldi	r22, 0x71	; 113
     7ae:	71 e0       	ldi	r23, 0x01	; 1
     7b0:	40 e7       	ldi	r20, 0x70	; 112
     7b2:	51 e0       	ldi	r21, 0x01	; 1
     7b4:	00 e4       	ldi	r16, 0x40	; 64
     7b6:	1b e4       	ldi	r17, 0x4B	; 75
     7b8:	2c e4       	ldi	r18, 0x4C	; 76
     7ba:	30 e0       	ldi	r19, 0x00	; 0
     7bc:	ee 24       	eor	r14, r14
     7be:	cc 24       	eor	r12, r12
     7c0:	dd 24       	eor	r13, r13
     7c2:	0e 94 0e 03 	call	0x61c	; 0x61c <sim900_send_cmd_wait_reply>
     7c6:	88 23       	and	r24, r24
     7c8:	91 f4       	brne	.+36     	; 0x7ee <sim900_is_network_registered+0x4e>
	uint8_t*)"+CREG: 0,1", 5000000, 0, NULL) || sim900_send_cmd_wait_reply(1,
     7ca:	81 e0       	ldi	r24, 0x01	; 1
     7cc:	67 e6       	ldi	r22, 0x67	; 103
     7ce:	71 e0       	ldi	r23, 0x01	; 1
     7d0:	4b e7       	ldi	r20, 0x7B	; 123
     7d2:	51 e0       	ldi	r21, 0x01	; 1
     7d4:	00 e4       	ldi	r16, 0x40	; 64
     7d6:	1b e4       	ldi	r17, 0x4B	; 75
     7d8:	2c e4       	ldi	r18, 0x4C	; 76
     7da:	30 e0       	ldi	r19, 0x00	; 0
     7dc:	0e 94 0e 03 	call	0x61c	; 0x61c <sim900_send_cmd_wait_reply>
	return respons;
}

uint8_t sim900_is_network_registered()
{
	return (sim900_send_cmd_wait_reply(1,(const uint8_t*)PSTR("AT+CREG?\r"), (const
     7e0:	21 e0       	ldi	r18, 0x01	; 1
     7e2:	30 e0       	ldi	r19, 0x00	; 0
     7e4:	88 23       	and	r24, r24
     7e6:	29 f4       	brne	.+10     	; 0x7f2 <sim900_is_network_registered+0x52>
     7e8:	20 e0       	ldi	r18, 0x00	; 0
     7ea:	30 e0       	ldi	r19, 0x00	; 0
     7ec:	02 c0       	rjmp	.+4      	; 0x7f2 <sim900_is_network_registered+0x52>
     7ee:	21 e0       	ldi	r18, 0x01	; 1
     7f0:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t*)"+CREG: 0,1", 5000000, 0, NULL) || sim900_send_cmd_wait_reply(1,
	(const uint8_t*)PSTR("AT+CREG?\r"), (const uint8_t*)"+CREG: 0,5", 5000000, 0,
	NULL));
}
     7f2:	82 2f       	mov	r24, r18
     7f4:	1f 91       	pop	r17
     7f6:	0f 91       	pop	r16
     7f8:	ef 90       	pop	r14
     7fa:	df 90       	pop	r13
     7fc:	cf 90       	pop	r12
     7fe:	08 95       	ret

00000800 <sim900_setup>:

uint8_t sim900_setup(const uint8_t isWaitingDevice)
{
     800:	af 92       	push	r10
     802:	bf 92       	push	r11
     804:	cf 92       	push	r12
     806:	df 92       	push	r13
     808:	ef 92       	push	r14
     80a:	0f 93       	push	r16
     80c:	1f 93       	push	r17
     80e:	cf 93       	push	r28
     810:	df 93       	push	r29
	uint8_t respons = 0;

	//wait modem wake up
	if (isWaitingDevice)
     812:	88 23       	and	r24, r24
     814:	b9 f0       	breq	.+46     	; 0x844 <sim900_setup+0x44>
	{
		while (!(respons = sim900_send_cmd_wait_reply(1,(const uint8_t*)PSTR("AT\r"),
     816:	c3 e6       	ldi	r28, 0x63	; 99
     818:	d1 e0       	ldi	r29, 0x01	; 1
     81a:	0f 2e       	mov	r0, r31
     81c:	f6 e8       	ldi	r31, 0x86	; 134
     81e:	af 2e       	mov	r10, r31
     820:	f1 e0       	ldi	r31, 0x01	; 1
     822:	bf 2e       	mov	r11, r31
     824:	f0 2d       	mov	r31, r0
     826:	81 e0       	ldi	r24, 0x01	; 1
     828:	be 01       	movw	r22, r28
     82a:	a5 01       	movw	r20, r10
     82c:	00 e2       	ldi	r16, 0x20	; 32
     82e:	11 ea       	ldi	r17, 0xA1	; 161
     830:	27 e0       	ldi	r18, 0x07	; 7
     832:	30 e0       	ldi	r19, 0x00	; 0
     834:	ee 24       	eor	r14, r14
     836:	cc 24       	eor	r12, r12
     838:	dd 24       	eor	r13, r13
     83a:	0e 94 0e 03 	call	0x61c	; 0x61c <sim900_send_cmd_wait_reply>
     83e:	88 23       	and	r24, r24
     840:	91 f3       	breq	.-28     	; 0x826 <sim900_setup+0x26>
     842:	10 c0       	rjmp	.+32     	; 0x864 <sim900_setup+0x64>
		(const uint8_t*)RESPON_OK, 500000, 0, NULL)))
		;
	}
	else
	{
		respons = sim900_send_cmd_wait_reply(1,(const uint8_t*)PSTR("AT\r"), (const
     844:	81 e0       	ldi	r24, 0x01	; 1
     846:	6f e5       	ldi	r22, 0x5F	; 95
     848:	71 e0       	ldi	r23, 0x01	; 1
     84a:	46 e8       	ldi	r20, 0x86	; 134
     84c:	51 e0       	ldi	r21, 0x01	; 1
     84e:	00 e2       	ldi	r16, 0x20	; 32
     850:	11 ea       	ldi	r17, 0xA1	; 161
     852:	27 e0       	ldi	r18, 0x07	; 7
     854:	30 e0       	ldi	r19, 0x00	; 0
     856:	ee 24       	eor	r14, r14
     858:	cc 24       	eor	r12, r12
     85a:	dd 24       	eor	r13, r13
     85c:	0e 94 0e 03 	call	0x61c	; 0x61c <sim900_send_cmd_wait_reply>
		uint8_t*)RESPON_OK, 500000, 0, NULL);
	}

	//modem is up?
	if (respons)
     860:	88 23       	and	r24, r24
     862:	41 f1       	breq	.+80     	; 0x8b4 <sim900_setup+0xb4>
		//no cmd echo
		//if ((respons = sim900_send_cmd_wait_reply(1,(const uint8_t*)PSTR("ATE0\r"), (const
		//uint8_t*)RESPON_OK, 500000, 0, NULL)))
		//{
			//text mode
			if ((respons = sim900_send_cmd_wait_reply(1,(const uint8_t*)PSTR("AT+CMGF=1\r"),
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	64 e5       	ldi	r22, 0x54	; 84
     868:	71 e0       	ldi	r23, 0x01	; 1
     86a:	46 e8       	ldi	r20, 0x86	; 134
     86c:	51 e0       	ldi	r21, 0x01	; 1
     86e:	00 e2       	ldi	r16, 0x20	; 32
     870:	11 ea       	ldi	r17, 0xA1	; 161
     872:	27 e0       	ldi	r18, 0x07	; 7
     874:	30 e0       	ldi	r19, 0x00	; 0
     876:	ee 24       	eor	r14, r14
     878:	cc 24       	eor	r12, r12
     87a:	dd 24       	eor	r13, r13
     87c:	0e 94 0e 03 	call	0x61c	; 0x61c <sim900_send_cmd_wait_reply>
     880:	88 23       	and	r24, r24
     882:	c1 f0       	breq	.+48     	; 0x8b4 <sim900_setup+0xb4>
			(const uint8_t*)RESPON_OK, 500000, 0, NULL)))
			{
				//storage all to Sim card
				if ((respons = sim900_send_cmd_wait_reply(1,(const uint8_t*)
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	6c e3       	ldi	r22, 0x3C	; 60
     888:	71 e0       	ldi	r23, 0x01	; 1
     88a:	46 e8       	ldi	r20, 0x86	; 134
     88c:	51 e0       	ldi	r21, 0x01	; 1
     88e:	00 e2       	ldi	r16, 0x20	; 32
     890:	11 ea       	ldi	r17, 0xA1	; 161
     892:	27 e0       	ldi	r18, 0x07	; 7
     894:	30 e0       	ldi	r19, 0x00	; 0
     896:	0e 94 0e 03 	call	0x61c	; 0x61c <sim900_send_cmd_wait_reply>
     89a:	88 23       	and	r24, r24
     89c:	59 f0       	breq	.+22     	; 0x8b4 <sim900_setup+0xb4>
				PSTR("AT+CPMS=\"SM\",\"SM\",\"SM\"\r"), (const uint8_t*)RESPON_OK, 500000,
				0, NULL)))
				{
					//clip=1
					if ((respons = sim900_send_cmd_wait_reply(1,(const uint8_t*)
     89e:	81 e0       	ldi	r24, 0x01	; 1
     8a0:	61 e3       	ldi	r22, 0x31	; 49
     8a2:	71 e0       	ldi	r23, 0x01	; 1
     8a4:	46 e8       	ldi	r20, 0x86	; 134
     8a6:	51 e0       	ldi	r21, 0x01	; 1
     8a8:	00 e2       	ldi	r16, 0x20	; 32
     8aa:	11 ea       	ldi	r17, 0xA1	; 161
     8ac:	27 e0       	ldi	r18, 0x07	; 7
     8ae:	30 e0       	ldi	r19, 0x00	; 0
     8b0:	0e 94 0e 03 	call	0x61c	; 0x61c <sim900_send_cmd_wait_reply>
	}
}

//return it
return respons;
}
     8b4:	df 91       	pop	r29
     8b6:	cf 91       	pop	r28
     8b8:	1f 91       	pop	r17
     8ba:	0f 91       	pop	r16
     8bc:	ef 90       	pop	r14
     8be:	df 90       	pop	r13
     8c0:	cf 90       	pop	r12
     8c2:	bf 90       	pop	r11
     8c4:	af 90       	pop	r10
     8c6:	08 95       	ret

000008c8 <sim900_send_sms>:

//send sms
uint8_t sim900_send_sms(const uint8_t *aSenderNumber, const uint8_t *aMessage)
{
     8c8:	af 92       	push	r10
     8ca:	bf 92       	push	r11
     8cc:	cf 92       	push	r12
     8ce:	df 92       	push	r13
     8d0:	ef 92       	push	r14
     8d2:	ff 92       	push	r15
     8d4:	0f 93       	push	r16
     8d6:	1f 93       	push	r17
     8d8:	cf 93       	push	r28
     8da:	df 93       	push	r29
     8dc:	7c 01       	movw	r14, r24
     8de:	b6 2e       	mov	r11, r22
     8e0:	a7 2e       	mov	r10, r23
	const uint8_t MAX_BUFFER = 32;
	uint8_t respon = 0/*, cmdx[MAX_BUFFER]*/;
	uint8_t *cmdx = (uint8_t*) calloc(MAX_BUFFER,sizeof(uint8_t));
     8e2:	80 e2       	ldi	r24, 0x20	; 32
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	61 e0       	ldi	r22, 0x01	; 1
     8e8:	70 e0       	ldi	r23, 0x00	; 0
     8ea:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <calloc>
     8ee:	08 2f       	mov	r16, r24
     8f0:	19 2f       	mov	r17, r25
     8f2:	c8 2e       	mov	r12, r24
     8f4:	e6 01       	movw	r28, r12
     8f6:	6e 01       	movw	r12, r28
     8f8:	d9 2e       	mov	r13, r25
     8fa:	e6 01       	movw	r28, r12
	
	//buffer created???
	if (cmdx == NULL)
     8fc:	20 97       	sbiw	r28, 0x00	; 0
     8fe:	09 f4       	brne	.+2      	; 0x902 <sim900_send_sms+0x3a>
     900:	5c c0       	rjmp	.+184    	; 0x9ba <sim900_send_sms+0xf2>
	{
		return 0;
	}

	//build the string
	memset(cmdx, '\0', MAX_BUFFER);
     902:	e0 2f       	mov	r30, r16
     904:	f9 2f       	mov	r31, r25
     906:	80 e2       	ldi	r24, 0x20	; 32
     908:	df 01       	movw	r26, r30
     90a:	1d 92       	st	X+, r1
     90c:	8a 95       	dec	r24
     90e:	e9 f7       	brne	.-6      	; 0x90a <sim900_send_sms+0x42>
	snprintf((char*)cmdx, MAX_BUFFER, "AT+CMGS=\"%s\"\r", aSenderNumber);
     910:	8d b7       	in	r24, 0x3d	; 61
     912:	9e b7       	in	r25, 0x3e	; 62
     914:	08 97       	sbiw	r24, 0x08	; 8
     916:	0f b6       	in	r0, 0x3f	; 63
     918:	f8 94       	cli
     91a:	9e bf       	out	0x3e, r25	; 62
     91c:	0f be       	out	0x3f, r0	; 63
     91e:	8d bf       	out	0x3d, r24	; 61
     920:	ed b7       	in	r30, 0x3d	; 61
     922:	fe b7       	in	r31, 0x3e	; 62
     924:	31 96       	adiw	r30, 0x01	; 1
     926:	ad b7       	in	r26, 0x3d	; 61
     928:	be b7       	in	r27, 0x3e	; 62
     92a:	11 96       	adiw	r26, 0x01	; 1
     92c:	0c 93       	st	X, r16
     92e:	11 97       	sbiw	r26, 0x01	; 1
     930:	12 96       	adiw	r26, 0x02	; 2
     932:	1c 93       	st	X, r17
     934:	80 e2       	ldi	r24, 0x20	; 32
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	93 83       	std	Z+3, r25	; 0x03
     93a:	82 83       	std	Z+2, r24	; 0x02
     93c:	89 e8       	ldi	r24, 0x89	; 137
     93e:	91 e0       	ldi	r25, 0x01	; 1
     940:	95 83       	std	Z+5, r25	; 0x05
     942:	84 83       	std	Z+4, r24	; 0x04
     944:	f7 82       	std	Z+7, r15	; 0x07
     946:	e6 82       	std	Z+6, r14	; 0x06
     948:	0e 94 b2 0c 	call	0x1964	; 0x1964 <snprintf>

	if ((respon = sim900_send_cmd_wait_reply(0,(const uint8_t*)cmdx, (const
     94c:	8d b7       	in	r24, 0x3d	; 61
     94e:	9e b7       	in	r25, 0x3e	; 62
     950:	08 96       	adiw	r24, 0x08	; 8
     952:	0f b6       	in	r0, 0x3f	; 63
     954:	f8 94       	cli
     956:	9e bf       	out	0x3e, r25	; 62
     958:	0f be       	out	0x3f, r0	; 63
     95a:	8d bf       	out	0x3d, r24	; 61
     95c:	80 e0       	ldi	r24, 0x00	; 0
     95e:	60 2f       	mov	r22, r16
     960:	71 2f       	mov	r23, r17
     962:	47 e9       	ldi	r20, 0x97	; 151
     964:	51 e0       	ldi	r21, 0x01	; 1
     966:	00 e8       	ldi	r16, 0x80	; 128
     968:	14 e8       	ldi	r17, 0x84	; 132
     96a:	2e e1       	ldi	r18, 0x1E	; 30
     96c:	30 e0       	ldi	r19, 0x00	; 0
     96e:	ee 24       	eor	r14, r14
     970:	cc 24       	eor	r12, r12
     972:	dd 24       	eor	r13, r13
     974:	0e 94 0e 03 	call	0x61c	; 0x61c <sim900_send_cmd_wait_reply>
     978:	18 2f       	mov	r17, r24
     97a:	88 23       	and	r24, r24
     97c:	d1 f0       	breq	.+52     	; 0x9b2 <sim900_send_sms+0xea>
	uint8_t*)">", 2000000, 0, NULL)))
	{
		//only copy MAX_BUFFER-2 char max from msg
		memcpy(&cmdx[0], aMessage, MAX_BUFFER - 2);
     97e:	de 01       	movw	r26, r28
     980:	8b 2d       	mov	r24, r11
     982:	9a 2d       	mov	r25, r10
     984:	fc 01       	movw	r30, r24
     986:	8e e1       	ldi	r24, 0x1E	; 30
     988:	01 90       	ld	r0, Z+
     98a:	0d 92       	st	X+, r0
     98c:	81 50       	subi	r24, 0x01	; 1
     98e:	e1 f7       	brne	.-8      	; 0x988 <sim900_send_sms+0xc0>
		cmdx[MAX_BUFFER - 2] = 0x1a;
     990:	8a e1       	ldi	r24, 0x1A	; 26
     992:	8e 8f       	std	Y+30, r24	; 0x1e
		cmdx[MAX_BUFFER - 1] = 0x00;
     994:	1f 8e       	std	Y+31, r1	; 0x1f

		if ((respon = sim900_send_cmd_wait_reply(0,(const uint8_t*)cmdx, (const
     996:	80 e0       	ldi	r24, 0x00	; 0
     998:	be 01       	movw	r22, r28
     99a:	46 e8       	ldi	r20, 0x86	; 134
     99c:	51 e0       	ldi	r21, 0x01	; 1
     99e:	00 e8       	ldi	r16, 0x80	; 128
     9a0:	16 e9       	ldi	r17, 0x96	; 150
     9a2:	28 e9       	ldi	r18, 0x98	; 152
     9a4:	30 e0       	ldi	r19, 0x00	; 0
     9a6:	ee 24       	eor	r14, r14
     9a8:	cc 24       	eor	r12, r12
     9aa:	dd 24       	eor	r13, r13
     9ac:	0e 94 0e 03 	call	0x61c	; 0x61c <sim900_send_cmd_wait_reply>
     9b0:	18 2f       	mov	r17, r24
	uint8_t*)RESPON_OK, 10000000, 0, NULL))){}
}

//free buffer
free(cmdx);
     9b2:	ce 01       	movw	r24, r28
     9b4:	0e 94 bc 0b 	call	0x1778	; 0x1778 <free>

return respon;
     9b8:	01 c0       	rjmp	.+2      	; 0x9bc <sim900_send_sms+0xf4>
	uint8_t *cmdx = (uint8_t*) calloc(MAX_BUFFER,sizeof(uint8_t));
	
	//buffer created???
	if (cmdx == NULL)
	{
		return 0;
     9ba:	10 e0       	ldi	r17, 0x00	; 0

//free buffer
free(cmdx);

return respon;
}
     9bc:	81 2f       	mov	r24, r17
     9be:	df 91       	pop	r29
     9c0:	cf 91       	pop	r28
     9c2:	1f 91       	pop	r17
     9c4:	0f 91       	pop	r16
     9c6:	ff 90       	pop	r15
     9c8:	ef 90       	pop	r14
     9ca:	df 90       	pop	r13
     9cc:	cf 90       	pop	r12
     9ce:	bf 90       	pop	r11
     9d0:	af 90       	pop	r10
     9d2:	08 95       	ret

000009d4 <sim900_call_phone>:

//calling a phone
uint8_t sim900_call_phone(const uint8_t *aSenderNumber)
{
     9d4:	cf 92       	push	r12
     9d6:	df 92       	push	r13
     9d8:	ef 92       	push	r14
     9da:	ff 92       	push	r15
     9dc:	0f 93       	push	r16
     9de:	1f 93       	push	r17
     9e0:	cf 93       	push	r28
     9e2:	df 93       	push	r29
     9e4:	8c 01       	movw	r16, r24
	const uint8_t MAX_BUFFER = 30;
	uint8_t respon = 0/*, cmdx[MAX_BUFFER]*/;
	uint8_t *cmdx = (uint8_t*) calloc(MAX_BUFFER,sizeof(uint8_t));
     9e6:	8e e1       	ldi	r24, 0x1E	; 30
     9e8:	90 e0       	ldi	r25, 0x00	; 0
     9ea:	61 e0       	ldi	r22, 0x01	; 1
     9ec:	70 e0       	ldi	r23, 0x00	; 0
     9ee:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <calloc>
     9f2:	e8 2e       	mov	r14, r24
     9f4:	e7 01       	movw	r28, r14
     9f6:	7e 01       	movw	r14, r28
     9f8:	f9 2e       	mov	r15, r25
     9fa:	e7 01       	movw	r28, r14
	
	//buffer created?
	if (cmdx == NULL)
     9fc:	20 97       	sbiw	r28, 0x00	; 0
     9fe:	09 f4       	brne	.+2      	; 0xa02 <sim900_call_phone+0x2e>
     a00:	40 c0       	rjmp	.+128    	; 0xa82 <sim900_call_phone+0xae>
	{
		return 0;
	}

	//init string
	memset(cmdx, '\0', MAX_BUFFER);
     a02:	ee 2d       	mov	r30, r14
     a04:	f9 2f       	mov	r31, r25
     a06:	8e e1       	ldi	r24, 0x1E	; 30
     a08:	df 01       	movw	r26, r30
     a0a:	1d 92       	st	X+, r1
     a0c:	8a 95       	dec	r24
     a0e:	e9 f7       	brne	.-6      	; 0xa0a <sim900_call_phone+0x36>
	snprintf((char*)cmdx, MAX_BUFFER, "ATD%s;\r", aSenderNumber);
     a10:	2d b7       	in	r18, 0x3d	; 61
     a12:	3e b7       	in	r19, 0x3e	; 62
     a14:	28 50       	subi	r18, 0x08	; 8
     a16:	30 40       	sbci	r19, 0x00	; 0
     a18:	0f b6       	in	r0, 0x3f	; 63
     a1a:	f8 94       	cli
     a1c:	3e bf       	out	0x3e, r19	; 62
     a1e:	0f be       	out	0x3f, r0	; 63
     a20:	2d bf       	out	0x3d, r18	; 61
     a22:	ed b7       	in	r30, 0x3d	; 61
     a24:	fe b7       	in	r31, 0x3e	; 62
     a26:	31 96       	adiw	r30, 0x01	; 1
     a28:	ad b7       	in	r26, 0x3d	; 61
     a2a:	be b7       	in	r27, 0x3e	; 62
     a2c:	12 96       	adiw	r26, 0x02	; 2
     a2e:	fc 92       	st	X, r15
     a30:	ee 92       	st	-X, r14
     a32:	11 97       	sbiw	r26, 0x01	; 1
     a34:	8e e1       	ldi	r24, 0x1E	; 30
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	93 83       	std	Z+3, r25	; 0x03
     a3a:	82 83       	std	Z+2, r24	; 0x02
     a3c:	89 e9       	ldi	r24, 0x99	; 153
     a3e:	91 e0       	ldi	r25, 0x01	; 1
     a40:	95 83       	std	Z+5, r25	; 0x05
     a42:	84 83       	std	Z+4, r24	; 0x04
     a44:	17 83       	std	Z+7, r17	; 0x07
     a46:	06 83       	std	Z+6, r16	; 0x06
     a48:	0e 94 b2 0c 	call	0x1964	; 0x1964 <snprintf>
	respon = sim900_send_cmd_wait_reply(0,(const uint8_t*)cmdx, (const uint8_t*)
     a4c:	2d b7       	in	r18, 0x3d	; 61
     a4e:	3e b7       	in	r19, 0x3e	; 62
     a50:	28 5f       	subi	r18, 0xF8	; 248
     a52:	3f 4f       	sbci	r19, 0xFF	; 255
     a54:	0f b6       	in	r0, 0x3f	; 63
     a56:	f8 94       	cli
     a58:	3e bf       	out	0x3e, r19	; 62
     a5a:	0f be       	out	0x3f, r0	; 63
     a5c:	2d bf       	out	0x3d, r18	; 61
     a5e:	80 e0       	ldi	r24, 0x00	; 0
     a60:	b7 01       	movw	r22, r14
     a62:	46 e8       	ldi	r20, 0x86	; 134
     a64:	51 e0       	ldi	r21, 0x01	; 1
     a66:	00 e8       	ldi	r16, 0x80	; 128
     a68:	16 e9       	ldi	r17, 0x96	; 150
     a6a:	28 e9       	ldi	r18, 0x98	; 152
     a6c:	30 e0       	ldi	r19, 0x00	; 0
     a6e:	ee 24       	eor	r14, r14
     a70:	cc 24       	eor	r12, r12
     a72:	dd 24       	eor	r13, r13
     a74:	0e 94 0e 03 	call	0x61c	; 0x61c <sim900_send_cmd_wait_reply>
     a78:	08 2f       	mov	r16, r24
	RESPON_OK, 10000000, 0, NULL);
	
	//free buffer
	free(cmdx);
     a7a:	ce 01       	movw	r24, r28
     a7c:	0e 94 bc 0b 	call	0x1778	; 0x1778 <free>
	
	return respon;
     a80:	01 c0       	rjmp	.+2      	; 0xa84 <sim900_call_phone+0xb0>
	uint8_t *cmdx = (uint8_t*) calloc(MAX_BUFFER,sizeof(uint8_t));
	
	//buffer created?
	if (cmdx == NULL)
	{
		return 0;
     a82:	00 e0       	ldi	r16, 0x00	; 0
	
	//free buffer
	free(cmdx);
	
	return respon;
}
     a84:	80 2f       	mov	r24, r16
     a86:	df 91       	pop	r29
     a88:	cf 91       	pop	r28
     a8a:	1f 91       	pop	r17
     a8c:	0f 91       	pop	r16
     a8e:	ff 90       	pop	r15
     a90:	ef 90       	pop	r14
     a92:	df 90       	pop	r13
     a94:	cf 90       	pop	r12
     a96:	08 95       	ret

00000a98 <sim900_gprs_is_opened>:

//cek gprs status
uint8_t sim900_gprs_is_opened()
{
     a98:	cf 92       	push	r12
     a9a:	df 92       	push	r13
     a9c:	ef 92       	push	r14
     a9e:	0f 93       	push	r16
     aa0:	1f 93       	push	r17
  uint8_t respon = sim900_send_cmd_wait_reply(1,(const uint8_t*)PSTR("AT+SAPBR=2,1\r"),
     aa2:	81 e0       	ldi	r24, 0x01	; 1
     aa4:	63 e2       	ldi	r22, 0x23	; 35
     aa6:	71 e0       	ldi	r23, 0x01	; 1
     aa8:	41 ea       	ldi	r20, 0xA1	; 161
     aaa:	51 e0       	ldi	r21, 0x01	; 1
     aac:	00 e2       	ldi	r16, 0x20	; 32
     aae:	11 ea       	ldi	r17, 0xA1	; 161
     ab0:	27 e0       	ldi	r18, 0x07	; 7
     ab2:	30 e0       	ldi	r19, 0x00	; 0
     ab4:	ee 24       	eor	r14, r14
     ab6:	cc 24       	eor	r12, r12
     ab8:	dd 24       	eor	r13, r13
     aba:	0e 94 0e 03 	call	0x61c	; 0x61c <sim900_send_cmd_wait_reply>
    (const uint8_t*)"1,1", 500000, 0, NULL);
  return respon;
}
     abe:	1f 91       	pop	r17
     ac0:	0f 91       	pop	r16
     ac2:	ef 90       	pop	r14
     ac4:	df 90       	pop	r13
     ac6:	cf 90       	pop	r12
     ac8:	08 95       	ret

00000aca <sim900_gprs_close_connection>:

//close gprs conn
uint8_t sim900_gprs_close_connection()
{
     aca:	cf 92       	push	r12
     acc:	df 92       	push	r13
     ace:	ef 92       	push	r14
     ad0:	0f 93       	push	r16
     ad2:	1f 93       	push	r17
  //uint8_t respon = (sim900_gprs_is_opened() ? sim900_send_cmd_wait_reply((const
    //uint8_t*)"AT+SAPBR=0,1\r", (const uint8_t*)RESPON_OK, 5000000, 0, NULL): 1);
 uint8_t respon = (sim900_gprs_is_opened() ? sim900_send_cmd_wait_reply(1,(const
     ad4:	0e 94 4c 05 	call	0xa98	; 0xa98 <sim900_gprs_is_opened>
     ad8:	88 23       	and	r24, r24
     ada:	79 f0       	breq	.+30     	; 0xafa <sim900_gprs_close_connection+0x30>
     adc:	81 e0       	ldi	r24, 0x01	; 1
     ade:	65 e1       	ldi	r22, 0x15	; 21
     ae0:	71 e0       	ldi	r23, 0x01	; 1
     ae2:	46 e8       	ldi	r20, 0x86	; 134
     ae4:	51 e0       	ldi	r21, 0x01	; 1
     ae6:	00 e4       	ldi	r16, 0x40	; 64
     ae8:	1b e4       	ldi	r17, 0x4B	; 75
     aea:	2c e4       	ldi	r18, 0x4C	; 76
     aec:	30 e0       	ldi	r19, 0x00	; 0
     aee:	ee 24       	eor	r14, r14
     af0:	cc 24       	eor	r12, r12
     af2:	dd 24       	eor	r13, r13
     af4:	0e 94 0e 03 	call	0x61c	; 0x61c <sim900_send_cmd_wait_reply>
     af8:	01 c0       	rjmp	.+2      	; 0xafc <sim900_gprs_close_connection+0x32>
     afa:	81 e0       	ldi	r24, 0x01	; 1
 uint8_t*)PSTR("AT+SAPBR=0,1\r"), (const uint8_t*)RESPON_OK, 5000000, 0, NULL): 1);
  return respon;
}
     afc:	1f 91       	pop	r17
     afe:	0f 91       	pop	r16
     b00:	ef 90       	pop	r14
     b02:	df 90       	pop	r13
     b04:	cf 90       	pop	r12
     b06:	08 95       	ret

00000b08 <sim900_gprs_start_connection>:

//open gprs conn
uint8_t sim900_gprs_start_connection()
{
     b08:	cf 92       	push	r12
     b0a:	df 92       	push	r13
     b0c:	ef 92       	push	r14
     b0e:	0f 93       	push	r16
     b10:	1f 93       	push	r17
  uint8_t respon = sim900_send_cmd_wait_reply(1,(const uint8_t*)PSTR("AT+SAPBR=1,1\r"),
     b12:	81 e0       	ldi	r24, 0x01	; 1
     b14:	67 e0       	ldi	r22, 0x07	; 7
     b16:	71 e0       	ldi	r23, 0x01	; 1
     b18:	46 e8       	ldi	r20, 0x86	; 134
     b1a:	51 e0       	ldi	r21, 0x01	; 1
     b1c:	00 e0       	ldi	r16, 0x00	; 0
     b1e:	11 ee       	ldi	r17, 0xE1	; 225
     b20:	25 ef       	ldi	r18, 0xF5	; 245
     b22:	35 e0       	ldi	r19, 0x05	; 5
     b24:	ee 24       	eor	r14, r14
     b26:	cc 24       	eor	r12, r12
     b28:	dd 24       	eor	r13, r13
     b2a:	0e 94 0e 03 	call	0x61c	; 0x61c <sim900_send_cmd_wait_reply>
    (const uint8_t*)RESPON_OK, 100000000, 0, NULL);
  return respon;
}
     b2e:	1f 91       	pop	r17
     b30:	0f 91       	pop	r16
     b32:	ef 90       	pop	r14
     b34:	df 90       	pop	r13
     b36:	cf 90       	pop	r12
     b38:	08 95       	ret

00000b3a <sim900_gprs_open_connection>:

//open gprs session
uint8_t sim900_gprs_open_connection(const uint8_t *apn, const uint8_t *username,
  const uint8_t *password)
{
     b3a:	6f 92       	push	r6
     b3c:	7f 92       	push	r7
     b3e:	8f 92       	push	r8
     b40:	9f 92       	push	r9
     b42:	af 92       	push	r10
     b44:	bf 92       	push	r11
     b46:	cf 92       	push	r12
     b48:	df 92       	push	r13
     b4a:	ef 92       	push	r14
     b4c:	ff 92       	push	r15
     b4e:	0f 93       	push	r16
     b50:	1f 93       	push	r17
     b52:	cf 93       	push	r28
     b54:	df 93       	push	r29
     b56:	5c 01       	movw	r10, r24
     b58:	4b 01       	movw	r8, r22
     b5a:	3a 01       	movw	r6, r20
  #define CMD_SAPBR_NEW	"AT+SAPBR=3,1,"

  const uint8_t MAX_BUFFER_NUM = 35;
  //uint8_t cmdx[MAX_BUFFER_NUM];
  uint8_t *cmdx = (uint8_t*) calloc(MAX_BUFFER_NUM,sizeof(uint8_t));
     b5c:	83 e2       	ldi	r24, 0x23	; 35
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	61 e0       	ldi	r22, 0x01	; 1
     b62:	70 e0       	ldi	r23, 0x00	; 0
     b64:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <calloc>
     b68:	38 2f       	mov	r19, r24
     b6a:	e8 2e       	mov	r14, r24
     b6c:	e7 01       	movw	r28, r14
     b6e:	7e 01       	movw	r14, r28
     b70:	f9 2e       	mov	r15, r25
     b72:	e7 01       	movw	r28, r14
  
  //buffer created??
  if (cmdx == NULL)
     b74:	20 97       	sbiw	r28, 0x00	; 0
     b76:	09 f4       	brne	.+2      	; 0xb7a <sim900_gprs_open_connection+0x40>
     b78:	13 c1       	rjmp	.+550    	; 0xda0 <sim900_gprs_open_connection+0x266>
  {
	  return 0;
  }

  //setup string
  memset(cmdx, '\0', MAX_BUFFER_NUM);
     b7a:	e3 2f       	mov	r30, r19
     b7c:	f9 2f       	mov	r31, r25
     b7e:	83 e2       	ldi	r24, 0x23	; 35
     b80:	df 01       	movw	r26, r30
     b82:	1d 92       	st	X+, r1
     b84:	8a 95       	dec	r24
     b86:	e9 f7       	brne	.-6      	; 0xb82 <sim900_gprs_open_connection+0x48>

  //registered to network?
  if (!sim900_is_network_registered())
     b88:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <sim900_is_network_registered>
     b8c:	88 23       	and	r24, r24
     b8e:	29 f4       	brne	.+10     	; 0xb9a <sim900_gprs_open_connection+0x60>
  {
	  free(cmdx);
     b90:	c7 01       	movw	r24, r14
     b92:	0e 94 bc 0b 	call	0x1778	; 0x1778 <free>
    return 0;
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	04 c1       	rjmp	.+520    	; 0xda2 <sim900_gprs_open_connection+0x268>
  }

  //gprs already opened?
  if (sim900_gprs_is_opened())
     b9a:	0e 94 4c 05 	call	0xa98	; 0xa98 <sim900_gprs_is_opened>
     b9e:	88 23       	and	r24, r24
     ba0:	29 f0       	breq	.+10     	; 0xbac <sim900_gprs_open_connection+0x72>
  {
	  free(cmdx);
     ba2:	c7 01       	movw	r24, r14
     ba4:	0e 94 bc 0b 	call	0x1778	; 0x1778 <free>
    return 1;
     ba8:	81 e0       	ldi	r24, 0x01	; 1
     baa:	fb c0       	rjmp	.+502    	; 0xda2 <sim900_gprs_open_connection+0x268>
  }

  //init gprs connection
  snprintf((char*)cmdx, MAX_BUFFER_NUM, "%s\"CONTYPE\",\"GPRS\"\r",
     bac:	8d b7       	in	r24, 0x3d	; 61
     bae:	9e b7       	in	r25, 0x3e	; 62
     bb0:	08 97       	sbiw	r24, 0x08	; 8
     bb2:	0f b6       	in	r0, 0x3f	; 63
     bb4:	f8 94       	cli
     bb6:	9e bf       	out	0x3e, r25	; 62
     bb8:	0f be       	out	0x3f, r0	; 63
     bba:	8d bf       	out	0x3d, r24	; 61
     bbc:	ed b7       	in	r30, 0x3d	; 61
     bbe:	fe b7       	in	r31, 0x3e	; 62
     bc0:	31 96       	adiw	r30, 0x01	; 1
     bc2:	ad b7       	in	r26, 0x3d	; 61
     bc4:	be b7       	in	r27, 0x3e	; 62
     bc6:	12 96       	adiw	r26, 0x02	; 2
     bc8:	fc 92       	st	X, r15
     bca:	ee 92       	st	-X, r14
     bcc:	11 97       	sbiw	r26, 0x01	; 1
     bce:	83 e2       	ldi	r24, 0x23	; 35
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	93 83       	std	Z+3, r25	; 0x03
     bd4:	82 83       	std	Z+2, r24	; 0x02
     bd6:	85 ea       	ldi	r24, 0xA5	; 165
     bd8:	91 e0       	ldi	r25, 0x01	; 1
     bda:	95 83       	std	Z+5, r25	; 0x05
     bdc:	84 83       	std	Z+4, r24	; 0x04
     bde:	89 eb       	ldi	r24, 0xB9	; 185
     be0:	91 e0       	ldi	r25, 0x01	; 1
     be2:	97 83       	std	Z+7, r25	; 0x07
     be4:	86 83       	std	Z+6, r24	; 0x06
     be6:	0e 94 b2 0c 	call	0x1964	; 0x1964 <snprintf>
    CMD_SAPBR_NEW);
  if (!sim900_send_cmd_wait_reply(0,(const uint8_t*)cmdx, (const uint8_t*)
     bea:	8d b7       	in	r24, 0x3d	; 61
     bec:	9e b7       	in	r25, 0x3e	; 62
     bee:	08 96       	adiw	r24, 0x08	; 8
     bf0:	0f b6       	in	r0, 0x3f	; 63
     bf2:	f8 94       	cli
     bf4:	9e bf       	out	0x3e, r25	; 62
     bf6:	0f be       	out	0x3f, r0	; 63
     bf8:	8d bf       	out	0x3d, r24	; 61
     bfa:	80 e0       	ldi	r24, 0x00	; 0
     bfc:	b7 01       	movw	r22, r14
     bfe:	46 e8       	ldi	r20, 0x86	; 134
     c00:	51 e0       	ldi	r21, 0x01	; 1
     c02:	00 e4       	ldi	r16, 0x40	; 64
     c04:	12 e4       	ldi	r17, 0x42	; 66
     c06:	2f e0       	ldi	r18, 0x0F	; 15
     c08:	30 e0       	ldi	r19, 0x00	; 0
     c0a:	ee 24       	eor	r14, r14
     c0c:	cc 24       	eor	r12, r12
     c0e:	dd 24       	eor	r13, r13
     c10:	0e 94 0e 03 	call	0x61c	; 0x61c <sim900_send_cmd_wait_reply>
     c14:	88 23       	and	r24, r24
     c16:	29 f4       	brne	.+10     	; 0xc22 <sim900_gprs_open_connection+0xe8>
    RESPON_OK, 1000000, 0, NULL))
  {
	  free(cmdx);
     c18:	ce 01       	movw	r24, r28
     c1a:	0e 94 bc 0b 	call	0x1778	; 0x1778 <free>
    return 0;
     c1e:	80 e0       	ldi	r24, 0x00	; 0
     c20:	c0 c0       	rjmp	.+384    	; 0xda2 <sim900_gprs_open_connection+0x268>
  }

  //set apn
  snprintf((char*)cmdx, MAX_BUFFER_NUM, "%s\"APN\",\"%s\"\r", CMD_SAPBR_NEW,
     c22:	ad b7       	in	r26, 0x3d	; 61
     c24:	be b7       	in	r27, 0x3e	; 62
     c26:	1a 97       	sbiw	r26, 0x0a	; 10
     c28:	0f b6       	in	r0, 0x3f	; 63
     c2a:	f8 94       	cli
     c2c:	be bf       	out	0x3e, r27	; 62
     c2e:	0f be       	out	0x3f, r0	; 63
     c30:	ad bf       	out	0x3d, r26	; 61
     c32:	ed b7       	in	r30, 0x3d	; 61
     c34:	fe b7       	in	r31, 0x3e	; 62
     c36:	31 96       	adiw	r30, 0x01	; 1
     c38:	12 96       	adiw	r26, 0x02	; 2
     c3a:	dc 93       	st	X, r29
     c3c:	ce 93       	st	-X, r28
     c3e:	11 97       	sbiw	r26, 0x01	; 1
     c40:	83 e2       	ldi	r24, 0x23	; 35
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	93 83       	std	Z+3, r25	; 0x03
     c46:	82 83       	std	Z+2, r24	; 0x02
     c48:	87 ec       	ldi	r24, 0xC7	; 199
     c4a:	91 e0       	ldi	r25, 0x01	; 1
     c4c:	95 83       	std	Z+5, r25	; 0x05
     c4e:	84 83       	std	Z+4, r24	; 0x04
     c50:	89 eb       	ldi	r24, 0xB9	; 185
     c52:	91 e0       	ldi	r25, 0x01	; 1
     c54:	97 83       	std	Z+7, r25	; 0x07
     c56:	86 83       	std	Z+6, r24	; 0x06
     c58:	b1 86       	std	Z+9, r11	; 0x09
     c5a:	a0 86       	std	Z+8, r10	; 0x08
     c5c:	0e 94 b2 0c 	call	0x1964	; 0x1964 <snprintf>
    apn);
  if (!sim900_send_cmd_wait_reply(0,(const uint8_t*)cmdx, (const uint8_t*)
     c60:	8d b7       	in	r24, 0x3d	; 61
     c62:	9e b7       	in	r25, 0x3e	; 62
     c64:	0a 96       	adiw	r24, 0x0a	; 10
     c66:	0f b6       	in	r0, 0x3f	; 63
     c68:	f8 94       	cli
     c6a:	9e bf       	out	0x3e, r25	; 62
     c6c:	0f be       	out	0x3f, r0	; 63
     c6e:	8d bf       	out	0x3d, r24	; 61
     c70:	80 e0       	ldi	r24, 0x00	; 0
     c72:	be 01       	movw	r22, r28
     c74:	46 e8       	ldi	r20, 0x86	; 134
     c76:	51 e0       	ldi	r21, 0x01	; 1
     c78:	00 e4       	ldi	r16, 0x40	; 64
     c7a:	12 e4       	ldi	r17, 0x42	; 66
     c7c:	2f e0       	ldi	r18, 0x0F	; 15
     c7e:	30 e0       	ldi	r19, 0x00	; 0
     c80:	ee 24       	eor	r14, r14
     c82:	cc 24       	eor	r12, r12
     c84:	dd 24       	eor	r13, r13
     c86:	0e 94 0e 03 	call	0x61c	; 0x61c <sim900_send_cmd_wait_reply>
     c8a:	88 23       	and	r24, r24
     c8c:	29 f4       	brne	.+10     	; 0xc98 <sim900_gprs_open_connection+0x15e>
    RESPON_OK, 1000000, 0, NULL))
  {
	  free(cmdx);
     c8e:	ce 01       	movw	r24, r28
     c90:	0e 94 bc 0b 	call	0x1778	; 0x1778 <free>
    return 0;
     c94:	80 e0       	ldi	r24, 0x00	; 0
     c96:	85 c0       	rjmp	.+266    	; 0xda2 <sim900_gprs_open_connection+0x268>
  }

  //set username
  snprintf((char*)cmdx, MAX_BUFFER_NUM, "%s\"USER\",\"%s\"\r", CMD_SAPBR_NEW,
     c98:	ad b7       	in	r26, 0x3d	; 61
     c9a:	be b7       	in	r27, 0x3e	; 62
     c9c:	1a 97       	sbiw	r26, 0x0a	; 10
     c9e:	0f b6       	in	r0, 0x3f	; 63
     ca0:	f8 94       	cli
     ca2:	be bf       	out	0x3e, r27	; 62
     ca4:	0f be       	out	0x3f, r0	; 63
     ca6:	ad bf       	out	0x3d, r26	; 61
     ca8:	ed b7       	in	r30, 0x3d	; 61
     caa:	fe b7       	in	r31, 0x3e	; 62
     cac:	31 96       	adiw	r30, 0x01	; 1
     cae:	12 96       	adiw	r26, 0x02	; 2
     cb0:	dc 93       	st	X, r29
     cb2:	ce 93       	st	-X, r28
     cb4:	11 97       	sbiw	r26, 0x01	; 1
     cb6:	83 e2       	ldi	r24, 0x23	; 35
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	93 83       	std	Z+3, r25	; 0x03
     cbc:	82 83       	std	Z+2, r24	; 0x02
     cbe:	85 ed       	ldi	r24, 0xD5	; 213
     cc0:	91 e0       	ldi	r25, 0x01	; 1
     cc2:	95 83       	std	Z+5, r25	; 0x05
     cc4:	84 83       	std	Z+4, r24	; 0x04
     cc6:	89 eb       	ldi	r24, 0xB9	; 185
     cc8:	91 e0       	ldi	r25, 0x01	; 1
     cca:	97 83       	std	Z+7, r25	; 0x07
     ccc:	86 83       	std	Z+6, r24	; 0x06
     cce:	91 86       	std	Z+9, r9	; 0x09
     cd0:	80 86       	std	Z+8, r8	; 0x08
     cd2:	0e 94 b2 0c 	call	0x1964	; 0x1964 <snprintf>
    username);
  if (!sim900_send_cmd_wait_reply(0,(const uint8_t*)cmdx, (const uint8_t*)
     cd6:	8d b7       	in	r24, 0x3d	; 61
     cd8:	9e b7       	in	r25, 0x3e	; 62
     cda:	0a 96       	adiw	r24, 0x0a	; 10
     cdc:	0f b6       	in	r0, 0x3f	; 63
     cde:	f8 94       	cli
     ce0:	9e bf       	out	0x3e, r25	; 62
     ce2:	0f be       	out	0x3f, r0	; 63
     ce4:	8d bf       	out	0x3d, r24	; 61
     ce6:	80 e0       	ldi	r24, 0x00	; 0
     ce8:	be 01       	movw	r22, r28
     cea:	46 e8       	ldi	r20, 0x86	; 134
     cec:	51 e0       	ldi	r21, 0x01	; 1
     cee:	00 e4       	ldi	r16, 0x40	; 64
     cf0:	12 e4       	ldi	r17, 0x42	; 66
     cf2:	2f e0       	ldi	r18, 0x0F	; 15
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	ee 24       	eor	r14, r14
     cf8:	cc 24       	eor	r12, r12
     cfa:	dd 24       	eor	r13, r13
     cfc:	0e 94 0e 03 	call	0x61c	; 0x61c <sim900_send_cmd_wait_reply>
     d00:	88 23       	and	r24, r24
     d02:	29 f4       	brne	.+10     	; 0xd0e <sim900_gprs_open_connection+0x1d4>
    RESPON_OK, 1000000, 0, NULL))
  {
	  free(cmdx);
     d04:	ce 01       	movw	r24, r28
     d06:	0e 94 bc 0b 	call	0x1778	; 0x1778 <free>
    return 0;
     d0a:	80 e0       	ldi	r24, 0x00	; 0
     d0c:	4a c0       	rjmp	.+148    	; 0xda2 <sim900_gprs_open_connection+0x268>
  }

  //set passwd
  snprintf((char*)cmdx, MAX_BUFFER_NUM, "%s\"PWD\",\"%s\"\r", CMD_SAPBR_NEW,
     d0e:	ad b7       	in	r26, 0x3d	; 61
     d10:	be b7       	in	r27, 0x3e	; 62
     d12:	1a 97       	sbiw	r26, 0x0a	; 10
     d14:	0f b6       	in	r0, 0x3f	; 63
     d16:	f8 94       	cli
     d18:	be bf       	out	0x3e, r27	; 62
     d1a:	0f be       	out	0x3f, r0	; 63
     d1c:	ad bf       	out	0x3d, r26	; 61
     d1e:	ed b7       	in	r30, 0x3d	; 61
     d20:	fe b7       	in	r31, 0x3e	; 62
     d22:	31 96       	adiw	r30, 0x01	; 1
     d24:	12 96       	adiw	r26, 0x02	; 2
     d26:	dc 93       	st	X, r29
     d28:	ce 93       	st	-X, r28
     d2a:	11 97       	sbiw	r26, 0x01	; 1
     d2c:	83 e2       	ldi	r24, 0x23	; 35
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	93 83       	std	Z+3, r25	; 0x03
     d32:	82 83       	std	Z+2, r24	; 0x02
     d34:	84 ee       	ldi	r24, 0xE4	; 228
     d36:	91 e0       	ldi	r25, 0x01	; 1
     d38:	95 83       	std	Z+5, r25	; 0x05
     d3a:	84 83       	std	Z+4, r24	; 0x04
     d3c:	89 eb       	ldi	r24, 0xB9	; 185
     d3e:	91 e0       	ldi	r25, 0x01	; 1
     d40:	97 83       	std	Z+7, r25	; 0x07
     d42:	86 83       	std	Z+6, r24	; 0x06
     d44:	71 86       	std	Z+9, r7	; 0x09
     d46:	60 86       	std	Z+8, r6	; 0x08
     d48:	0e 94 b2 0c 	call	0x1964	; 0x1964 <snprintf>
    password);
  if (!sim900_send_cmd_wait_reply(0,(const uint8_t*)cmdx, (const uint8_t*)
     d4c:	8d b7       	in	r24, 0x3d	; 61
     d4e:	9e b7       	in	r25, 0x3e	; 62
     d50:	0a 96       	adiw	r24, 0x0a	; 10
     d52:	0f b6       	in	r0, 0x3f	; 63
     d54:	f8 94       	cli
     d56:	9e bf       	out	0x3e, r25	; 62
     d58:	0f be       	out	0x3f, r0	; 63
     d5a:	8d bf       	out	0x3d, r24	; 61
     d5c:	80 e0       	ldi	r24, 0x00	; 0
     d5e:	be 01       	movw	r22, r28
     d60:	46 e8       	ldi	r20, 0x86	; 134
     d62:	51 e0       	ldi	r21, 0x01	; 1
     d64:	00 e4       	ldi	r16, 0x40	; 64
     d66:	12 e4       	ldi	r17, 0x42	; 66
     d68:	2f e0       	ldi	r18, 0x0F	; 15
     d6a:	30 e0       	ldi	r19, 0x00	; 0
     d6c:	ee 24       	eor	r14, r14
     d6e:	cc 24       	eor	r12, r12
     d70:	dd 24       	eor	r13, r13
     d72:	0e 94 0e 03 	call	0x61c	; 0x61c <sim900_send_cmd_wait_reply>
     d76:	88 23       	and	r24, r24
     d78:	29 f4       	brne	.+10     	; 0xd84 <sim900_gprs_open_connection+0x24a>
    RESPON_OK, 1000000, 0, NULL))
  {
	  free(cmdx);
     d7a:	ce 01       	movw	r24, r28
     d7c:	0e 94 bc 0b 	call	0x1778	; 0x1778 <free>
    return 0;
     d80:	80 e0       	ldi	r24, 0x00	; 0
     d82:	0f c0       	rjmp	.+30     	; 0xda2 <sim900_gprs_open_connection+0x268>
  }

  //open gprs connection
  if (!sim900_gprs_start_connection())
     d84:	0e 94 84 05 	call	0xb08	; 0xb08 <sim900_gprs_start_connection>
     d88:	88 23       	and	r24, r24
     d8a:	29 f4       	brne	.+10     	; 0xd96 <sim900_gprs_open_connection+0x25c>
  {
	  free(cmdx);
     d8c:	ce 01       	movw	r24, r28
     d8e:	0e 94 bc 0b 	call	0x1778	; 0x1778 <free>
    return 0;
     d92:	80 e0       	ldi	r24, 0x00	; 0
     d94:	06 c0       	rjmp	.+12     	; 0xda2 <sim900_gprs_open_connection+0x268>
  }

	//free buffer
	free(cmdx);
     d96:	ce 01       	movw	r24, r28
     d98:	0e 94 bc 0b 	call	0x1778	; 0x1778 <free>
	
  //return the respon
  return 1;
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	01 c0       	rjmp	.+2      	; 0xda2 <sim900_gprs_open_connection+0x268>
  uint8_t *cmdx = (uint8_t*) calloc(MAX_BUFFER_NUM,sizeof(uint8_t));
  
  //buffer created??
  if (cmdx == NULL)
  {
	  return 0;
     da0:	80 e0       	ldi	r24, 0x00	; 0
	//free buffer
	free(cmdx);
	
  //return the respon
  return 1;
}
     da2:	df 91       	pop	r29
     da4:	cf 91       	pop	r28
     da6:	1f 91       	pop	r17
     da8:	0f 91       	pop	r16
     daa:	ff 90       	pop	r15
     dac:	ef 90       	pop	r14
     dae:	df 90       	pop	r13
     db0:	cf 90       	pop	r12
     db2:	bf 90       	pop	r11
     db4:	af 90       	pop	r10
     db6:	9f 90       	pop	r9
     db8:	8f 90       	pop	r8
     dba:	7f 90       	pop	r7
     dbc:	6f 90       	pop	r6
     dbe:	08 95       	ret

00000dc0 <sim900_http_terminate>:

//terminate http session
uint8_t sim900_http_terminate()
{
     dc0:	cf 92       	push	r12
     dc2:	df 92       	push	r13
     dc4:	ef 92       	push	r14
     dc6:	0f 93       	push	r16
     dc8:	1f 93       	push	r17
  return sim900_send_cmd_wait_reply(1,(const uint8_t*)PSTR("AT+HTTPTERM\r"), (const
     dca:	81 e0       	ldi	r24, 0x01	; 1
     dcc:	6a ef       	ldi	r22, 0xFA	; 250
     dce:	70 e0       	ldi	r23, 0x00	; 0
     dd0:	46 e8       	ldi	r20, 0x86	; 134
     dd2:	51 e0       	ldi	r21, 0x01	; 1
     dd4:	00 e4       	ldi	r16, 0x40	; 64
     dd6:	1b e4       	ldi	r17, 0x4B	; 75
     dd8:	2c e4       	ldi	r18, 0x4C	; 76
     dda:	30 e0       	ldi	r19, 0x00	; 0
     ddc:	ee 24       	eor	r14, r14
     dde:	cc 24       	eor	r12, r12
     de0:	dd 24       	eor	r13, r13
     de2:	0e 94 0e 03 	call	0x61c	; 0x61c <sim900_send_cmd_wait_reply>
    uint8_t*)RESPON_OK, 5000000, 0, NULL);
}
     de6:	1f 91       	pop	r17
     de8:	0f 91       	pop	r16
     dea:	ef 90       	pop	r14
     dec:	df 90       	pop	r13
     dee:	cf 90       	pop	r12
     df0:	08 95       	ret

00000df2 <sim900_http_send_data>:

uint8_t sim900_http_send_data(const uint8_t method, const uint8_t *aurl, const uint8_t *adata, const  uint8_t max_out_len, uint8_t *arespon_out)
{
     df2:	3f 92       	push	r3
     df4:	4f 92       	push	r4
     df6:	5f 92       	push	r5
     df8:	6f 92       	push	r6
     dfa:	7f 92       	push	r7
     dfc:	8f 92       	push	r8
     dfe:	9f 92       	push	r9
     e00:	af 92       	push	r10
     e02:	bf 92       	push	r11
     e04:	cf 92       	push	r12
     e06:	df 92       	push	r13
     e08:	ef 92       	push	r14
     e0a:	ff 92       	push	r15
     e0c:	0f 93       	push	r16
     e0e:	1f 93       	push	r17
     e10:	df 93       	push	r29
     e12:	cf 93       	push	r28
     e14:	00 d0       	rcall	.+0      	; 0xe16 <sim900_http_send_data+0x24>
     e16:	00 d0       	rcall	.+0      	; 0xe18 <sim900_http_send_data+0x26>
     e18:	00 d0       	rcall	.+0      	; 0xe1a <sim900_http_send_data+0x28>
     e1a:	cd b7       	in	r28, 0x3d	; 61
     e1c:	de b7       	in	r29, 0x3e	; 62
     e1e:	78 2e       	mov	r7, r24
     e20:	2b 01       	movw	r4, r22
     e22:	64 2e       	mov	r6, r20
     e24:	35 2e       	mov	r3, r21
     e26:	f2 2e       	mov	r15, r18
     e28:	48 01       	movw	r8, r16
	#define HTTP_PARA_URL "AT+HTTPPARA=\"URL\","
	const uint8_t MAX_BUFFER = 100;
	uint8_t respon = 0;
	uint16_t num_data = 0;
	uint8_t *cmdx = (uint8_t*) calloc(MAX_BUFFER,sizeof(uint8_t));
     e2a:	84 e6       	ldi	r24, 0x64	; 100
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	61 e0       	ldi	r22, 0x01	; 1
     e30:	70 e0       	ldi	r23, 0x00	; 0
     e32:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <calloc>
     e36:	a8 2e       	mov	r10, r24
     e38:	b9 2e       	mov	r11, r25
	
	//buffer created?
	if (cmdx == NULL)
     e3a:	a1 14       	cp	r10, r1
     e3c:	b1 04       	cpc	r11, r1
     e3e:	09 f4       	brne	.+2      	; 0xe42 <sim900_http_send_data+0x50>
     e40:	06 c2       	rjmp	.+1036   	; 0x124e <__stack+0x14f>
	{
		return 0;
	}

	//set init result
	if (arespon_out != NULL)
     e42:	01 15       	cp	r16, r1
     e44:	11 05       	cpc	r17, r1
     e46:	41 f0       	breq	.+16     	; 0xe58 <sim900_http_send_data+0x66>
	{
		memset(arespon_out, '\0', max_out_len *sizeof(uint8_t));
     e48:	80 2f       	mov	r24, r16
     e4a:	99 2d       	mov	r25, r9
     e4c:	60 e0       	ldi	r22, 0x00	; 0
     e4e:	70 e0       	ldi	r23, 0x00	; 0
     e50:	4f 2d       	mov	r20, r15
     e52:	50 e0       	ldi	r21, 0x00	; 0
     e54:	0e 94 89 0c 	call	0x1912	; 0x1912 <memset>
	}

	//check is connected
	if (!sim900_gprs_is_opened())
     e58:	0e 94 4c 05 	call	0xa98	; 0xa98 <sim900_gprs_is_opened>
     e5c:	88 23       	and	r24, r24
     e5e:	29 f4       	brne	.+10     	; 0xe6a <sim900_http_send_data+0x78>
	{
		free(cmdx);
     e60:	c5 01       	movw	r24, r10
     e62:	0e 94 bc 0b 	call	0x1778	; 0x1778 <free>
		return 0;
     e66:	10 e0       	ldi	r17, 0x00	; 0
     e68:	f3 c1       	rjmp	.+998    	; 0x1250 <__stack+0x151>
	}
	
	//make sure previous http is terminated
	sim900_http_terminate();
     e6a:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <sim900_http_terminate>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     e6e:	8f ef       	ldi	r24, 0xFF	; 255
     e70:	90 e7       	ldi	r25, 0x70	; 112
     e72:	a2 e0       	ldi	r26, 0x02	; 2
     e74:	81 50       	subi	r24, 0x01	; 1
     e76:	90 40       	sbci	r25, 0x00	; 0
     e78:	a0 40       	sbci	r26, 0x00	; 0
     e7a:	e1 f7       	brne	.-8      	; 0xe74 <sim900_http_send_data+0x82>
     e7c:	00 c0       	rjmp	.+0      	; 0xe7e <sim900_http_send_data+0x8c>
     e7e:	00 00       	nop
	
	//http init
	_delay_ms(100);
	if (!sim900_send_cmd_wait_reply(1,(const uint8_t*)PSTR("AT+HTTPINIT\r"), (const
     e80:	81 e0       	ldi	r24, 0x01	; 1
     e82:	6d ee       	ldi	r22, 0xED	; 237
     e84:	70 e0       	ldi	r23, 0x00	; 0
     e86:	46 e8       	ldi	r20, 0x86	; 134
     e88:	51 e0       	ldi	r21, 0x01	; 1
     e8a:	00 e4       	ldi	r16, 0x40	; 64
     e8c:	1b e4       	ldi	r17, 0x4B	; 75
     e8e:	2c e4       	ldi	r18, 0x4C	; 76
     e90:	30 e0       	ldi	r19, 0x00	; 0
     e92:	ee 24       	eor	r14, r14
     e94:	cc 24       	eor	r12, r12
     e96:	dd 24       	eor	r13, r13
     e98:	0e 94 0e 03 	call	0x61c	; 0x61c <sim900_send_cmd_wait_reply>
     e9c:	88 23       	and	r24, r24
     e9e:	29 f4       	brne	.+10     	; 0xeaa <sim900_http_send_data+0xb8>
	uint8_t*)RESPON_OK, 5000000, 0, NULL))
	{
		free(cmdx);
     ea0:	c5 01       	movw	r24, r10
     ea2:	0e 94 bc 0b 	call	0x1778	; 0x1778 <free>
		return 0;
     ea6:	10 e0       	ldi	r17, 0x00	; 0
     ea8:	d3 c1       	rjmp	.+934    	; 0x1250 <__stack+0x151>
	}

	//http parameter cid
	if (!sim900_send_cmd_wait_reply(1,(const uint8_t*)PSTR("AT+HTTPPARA=\"CID\",1\r"),
     eaa:	81 e0       	ldi	r24, 0x01	; 1
     eac:	68 ed       	ldi	r22, 0xD8	; 216
     eae:	70 e0       	ldi	r23, 0x00	; 0
     eb0:	46 e8       	ldi	r20, 0x86	; 134
     eb2:	51 e0       	ldi	r21, 0x01	; 1
     eb4:	00 e4       	ldi	r16, 0x40	; 64
     eb6:	1b e4       	ldi	r17, 0x4B	; 75
     eb8:	2c e4       	ldi	r18, 0x4C	; 76
     eba:	30 e0       	ldi	r19, 0x00	; 0
     ebc:	ee 24       	eor	r14, r14
     ebe:	cc 24       	eor	r12, r12
     ec0:	dd 24       	eor	r13, r13
     ec2:	0e 94 0e 03 	call	0x61c	; 0x61c <sim900_send_cmd_wait_reply>
     ec6:	88 23       	and	r24, r24
     ec8:	39 f4       	brne	.+14     	; 0xed8 <sim900_http_send_data+0xe6>
	(const uint8_t*)RESPON_OK, 5000000, 0, NULL))
	{
		sim900_http_terminate();
     eca:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <sim900_http_terminate>
		free(cmdx);
     ece:	c5 01       	movw	r24, r10
     ed0:	0e 94 bc 0b 	call	0x1778	; 0x1778 <free>
		return 0;
     ed4:	10 e0       	ldi	r17, 0x00	; 0
     ed6:	bc c1       	rjmp	.+888    	; 0x1250 <__stack+0x151>
	}

	//http parameter url
	memset(cmdx, '\0', MAX_BUFFER);
     ed8:	ea 2d       	mov	r30, r10
     eda:	fb 2d       	mov	r31, r11
     edc:	84 e6       	ldi	r24, 0x64	; 100
     ede:	df 01       	movw	r26, r30
     ee0:	1d 92       	st	X+, r1
     ee2:	8a 95       	dec	r24
     ee4:	e9 f7       	brne	.-6      	; 0xee0 <sim900_http_send_data+0xee>
	//snprintf((char*)cmdx, MAX_BUFFER, (method ? "%s\"%s\"\r":"%s\"%s?%s\"\r"), HTTP_PARA_URL, aurl,(method ? ((char*)""):adata));
	if (method) //post
     ee6:	77 20       	and	r7, r7
     ee8:	41 f1       	breq	.+80     	; 0xf3a <sim900_http_send_data+0x148>
	{
		snprintf((char*)cmdx, MAX_BUFFER, "%s\"%s\"\r", HTTP_PARA_URL, aurl);
     eea:	ed b7       	in	r30, 0x3d	; 61
     eec:	fe b7       	in	r31, 0x3e	; 62
     eee:	3a 97       	sbiw	r30, 0x0a	; 10
     ef0:	0f b6       	in	r0, 0x3f	; 63
     ef2:	f8 94       	cli
     ef4:	fe bf       	out	0x3e, r31	; 62
     ef6:	0f be       	out	0x3f, r0	; 63
     ef8:	ed bf       	out	0x3d, r30	; 61
     efa:	31 96       	adiw	r30, 0x01	; 1
     efc:	ad b7       	in	r26, 0x3d	; 61
     efe:	be b7       	in	r27, 0x3e	; 62
     f00:	12 96       	adiw	r26, 0x02	; 2
     f02:	bc 92       	st	X, r11
     f04:	ae 92       	st	-X, r10
     f06:	11 97       	sbiw	r26, 0x01	; 1
     f08:	84 e6       	ldi	r24, 0x64	; 100
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	93 83       	std	Z+3, r25	; 0x03
     f0e:	82 83       	std	Z+2, r24	; 0x02
     f10:	86 e1       	ldi	r24, 0x16	; 22
     f12:	92 e0       	ldi	r25, 0x02	; 2
     f14:	95 83       	std	Z+5, r25	; 0x05
     f16:	84 83       	std	Z+4, r24	; 0x04
     f18:	8e e1       	ldi	r24, 0x1E	; 30
     f1a:	92 e0       	ldi	r25, 0x02	; 2
     f1c:	97 83       	std	Z+7, r25	; 0x07
     f1e:	86 83       	std	Z+6, r24	; 0x06
     f20:	51 86       	std	Z+9, r5	; 0x09
     f22:	40 86       	std	Z+8, r4	; 0x08
     f24:	0e 94 b2 0c 	call	0x1964	; 0x1964 <snprintf>
     f28:	ed b7       	in	r30, 0x3d	; 61
     f2a:	fe b7       	in	r31, 0x3e	; 62
     f2c:	3a 96       	adiw	r30, 0x0a	; 10
     f2e:	0f b6       	in	r0, 0x3f	; 63
     f30:	f8 94       	cli
     f32:	fe bf       	out	0x3e, r31	; 62
     f34:	0f be       	out	0x3f, r0	; 63
     f36:	ed bf       	out	0x3d, r30	; 61
     f38:	2b c0       	rjmp	.+86     	; 0xf90 <sim900_http_send_data+0x19e>
	} 
	else //get
	{
		snprintf((char*)cmdx, MAX_BUFFER, "%s\"%s?%s\"\r", HTTP_PARA_URL, aurl, adata);
     f3a:	8d b7       	in	r24, 0x3d	; 61
     f3c:	9e b7       	in	r25, 0x3e	; 62
     f3e:	0c 97       	sbiw	r24, 0x0c	; 12
     f40:	0f b6       	in	r0, 0x3f	; 63
     f42:	f8 94       	cli
     f44:	9e bf       	out	0x3e, r25	; 62
     f46:	0f be       	out	0x3f, r0	; 63
     f48:	8d bf       	out	0x3d, r24	; 61
     f4a:	ed b7       	in	r30, 0x3d	; 61
     f4c:	fe b7       	in	r31, 0x3e	; 62
     f4e:	31 96       	adiw	r30, 0x01	; 1
     f50:	ad b7       	in	r26, 0x3d	; 61
     f52:	be b7       	in	r27, 0x3e	; 62
     f54:	12 96       	adiw	r26, 0x02	; 2
     f56:	bc 92       	st	X, r11
     f58:	ae 92       	st	-X, r10
     f5a:	11 97       	sbiw	r26, 0x01	; 1
     f5c:	84 e6       	ldi	r24, 0x64	; 100
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	93 83       	std	Z+3, r25	; 0x03
     f62:	82 83       	std	Z+2, r24	; 0x02
     f64:	81 e3       	ldi	r24, 0x31	; 49
     f66:	92 e0       	ldi	r25, 0x02	; 2
     f68:	95 83       	std	Z+5, r25	; 0x05
     f6a:	84 83       	std	Z+4, r24	; 0x04
     f6c:	8e e1       	ldi	r24, 0x1E	; 30
     f6e:	92 e0       	ldi	r25, 0x02	; 2
     f70:	97 83       	std	Z+7, r25	; 0x07
     f72:	86 83       	std	Z+6, r24	; 0x06
     f74:	51 86       	std	Z+9, r5	; 0x09
     f76:	40 86       	std	Z+8, r4	; 0x08
     f78:	62 86       	std	Z+10, r6	; 0x0a
     f7a:	33 86       	std	Z+11, r3	; 0x0b
     f7c:	0e 94 b2 0c 	call	0x1964	; 0x1964 <snprintf>
     f80:	ed b7       	in	r30, 0x3d	; 61
     f82:	fe b7       	in	r31, 0x3e	; 62
     f84:	3c 96       	adiw	r30, 0x0c	; 12
     f86:	0f b6       	in	r0, 0x3f	; 63
     f88:	f8 94       	cli
     f8a:	fe bf       	out	0x3e, r31	; 62
     f8c:	0f be       	out	0x3f, r0	; 63
     f8e:	ed bf       	out	0x3d, r30	; 61
	}
	if (!sim900_send_cmd_wait_reply(0,(const uint8_t*)cmdx, (const uint8_t*)
     f90:	80 e0       	ldi	r24, 0x00	; 0
     f92:	b5 01       	movw	r22, r10
     f94:	46 e8       	ldi	r20, 0x86	; 134
     f96:	51 e0       	ldi	r21, 0x01	; 1
     f98:	00 e4       	ldi	r16, 0x40	; 64
     f9a:	1b e4       	ldi	r17, 0x4B	; 75
     f9c:	2c e4       	ldi	r18, 0x4C	; 76
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	ee 24       	eor	r14, r14
     fa2:	cc 24       	eor	r12, r12
     fa4:	dd 24       	eor	r13, r13
     fa6:	0e 94 0e 03 	call	0x61c	; 0x61c <sim900_send_cmd_wait_reply>
     faa:	88 23       	and	r24, r24
     fac:	39 f4       	brne	.+14     	; 0xfbc <sim900_http_send_data+0x1ca>
	RESPON_OK, 5000000, 0, NULL))
	{
		sim900_http_terminate();
     fae:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <sim900_http_terminate>
		free(cmdx);
     fb2:	c5 01       	movw	r24, r10
     fb4:	0e 94 bc 0b 	call	0x1778	; 0x1778 <free>
		return 0;
     fb8:	10 e0       	ldi	r17, 0x00	; 0
     fba:	4a c1       	rjmp	.+660    	; 0x1250 <__stack+0x151>
	}

	//set content type for post only
	if(method)
     fbc:	77 20       	and	r7, r7
     fbe:	09 f4       	brne	.+2      	; 0xfc2 <sim900_http_send_data+0x1d0>
     fc0:	78 c0       	rjmp	.+240    	; 0x10b2 <sim900_http_send_data+0x2c0>
	{
		if (!sim900_send_cmd_wait_reply(1,(const uint8_t*)
     fc2:	81 e0       	ldi	r24, 0x01	; 1
     fc4:	6e ea       	ldi	r22, 0xAE	; 174
     fc6:	70 e0       	ldi	r23, 0x00	; 0
     fc8:	46 e8       	ldi	r20, 0x86	; 134
     fca:	51 e0       	ldi	r21, 0x01	; 1
     fcc:	00 e4       	ldi	r16, 0x40	; 64
     fce:	1b e4       	ldi	r17, 0x4B	; 75
     fd0:	2c e4       	ldi	r18, 0x4C	; 76
     fd2:	30 e0       	ldi	r19, 0x00	; 0
     fd4:	ee 24       	eor	r14, r14
     fd6:	cc 24       	eor	r12, r12
     fd8:	dd 24       	eor	r13, r13
     fda:	0e 94 0e 03 	call	0x61c	; 0x61c <sim900_send_cmd_wait_reply>
     fde:	88 23       	and	r24, r24
     fe0:	39 f4       	brne	.+14     	; 0xff0 <sim900_http_send_data+0x1fe>
		PSTR("AT+HTTPPARA=\"CONTENT\",\"application/json\"\r"), (const
		uint8_t*)RESPON_OK, 5000000, 0, NULL))
		{
			sim900_http_terminate();
     fe2:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <sim900_http_terminate>
			free(cmdx);
     fe6:	c5 01       	movw	r24, r10
     fe8:	0e 94 bc 0b 	call	0x1778	; 0x1778 <free>
			return 0;
     fec:	10 e0       	ldi	r17, 0x00	; 0
     fee:	30 c1       	rjmp	.+608    	; 0x1250 <__stack+0x151>
		}
		
		//http post data
		memset(cmdx, '\0', MAX_BUFFER);
     ff0:	ea 2d       	mov	r30, r10
     ff2:	fb 2d       	mov	r31, r11
     ff4:	84 e6       	ldi	r24, 0x64	; 100
     ff6:	df 01       	movw	r26, r30
     ff8:	1d 92       	st	X+, r1
     ffa:	8a 95       	dec	r24
     ffc:	e9 f7       	brne	.-6      	; 0xff8 <sim900_http_send_data+0x206>
		snprintf((char*)cmdx, MAX_BUFFER, "AT+HTTPDATA=%d,20000\r", strlen((const
     ffe:	e6 2d       	mov	r30, r6
    1000:	f3 2d       	mov	r31, r3
    1002:	df 01       	movw	r26, r30
    1004:	0d 90       	ld	r0, X+
    1006:	00 20       	and	r0, r0
    1008:	e9 f7       	brne	.-6      	; 0x1004 <sim900_http_send_data+0x212>
    100a:	11 97       	sbiw	r26, 0x01	; 1
    100c:	9d 01       	movw	r18, r26
    100e:	2e 1b       	sub	r18, r30
    1010:	3f 0b       	sbc	r19, r31
    1012:	ed b7       	in	r30, 0x3d	; 61
    1014:	fe b7       	in	r31, 0x3e	; 62
    1016:	38 97       	sbiw	r30, 0x08	; 8
    1018:	0f b6       	in	r0, 0x3f	; 63
    101a:	f8 94       	cli
    101c:	fe bf       	out	0x3e, r31	; 62
    101e:	0f be       	out	0x3f, r0	; 63
    1020:	ed bf       	out	0x3d, r30	; 61
    1022:	31 96       	adiw	r30, 0x01	; 1
    1024:	ad b7       	in	r26, 0x3d	; 61
    1026:	be b7       	in	r27, 0x3e	; 62
    1028:	12 96       	adiw	r26, 0x02	; 2
    102a:	bc 92       	st	X, r11
    102c:	ae 92       	st	-X, r10
    102e:	11 97       	sbiw	r26, 0x01	; 1
    1030:	84 e6       	ldi	r24, 0x64	; 100
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	93 83       	std	Z+3, r25	; 0x03
    1036:	82 83       	std	Z+2, r24	; 0x02
    1038:	8c e3       	ldi	r24, 0x3C	; 60
    103a:	92 e0       	ldi	r25, 0x02	; 2
    103c:	95 83       	std	Z+5, r25	; 0x05
    103e:	84 83       	std	Z+4, r24	; 0x04
    1040:	37 83       	std	Z+7, r19	; 0x07
    1042:	26 83       	std	Z+6, r18	; 0x06
    1044:	0e 94 b2 0c 	call	0x1964	; 0x1964 <snprintf>
		char*)adata));
		if (!sim900_send_cmd_wait_reply(0,(const uint8_t*)cmdx, (const uint8_t*)
    1048:	ed b7       	in	r30, 0x3d	; 61
    104a:	fe b7       	in	r31, 0x3e	; 62
    104c:	38 96       	adiw	r30, 0x08	; 8
    104e:	0f b6       	in	r0, 0x3f	; 63
    1050:	f8 94       	cli
    1052:	fe bf       	out	0x3e, r31	; 62
    1054:	0f be       	out	0x3f, r0	; 63
    1056:	ed bf       	out	0x3d, r30	; 61
    1058:	80 e0       	ldi	r24, 0x00	; 0
    105a:	b5 01       	movw	r22, r10
    105c:	42 e5       	ldi	r20, 0x52	; 82
    105e:	52 e0       	ldi	r21, 0x02	; 2
    1060:	00 e0       	ldi	r16, 0x00	; 0
    1062:	1d e2       	ldi	r17, 0x2D	; 45
    1064:	21 e3       	ldi	r18, 0x31	; 49
    1066:	31 e0       	ldi	r19, 0x01	; 1
    1068:	ee 24       	eor	r14, r14
    106a:	cc 24       	eor	r12, r12
    106c:	dd 24       	eor	r13, r13
    106e:	0e 94 0e 03 	call	0x61c	; 0x61c <sim900_send_cmd_wait_reply>
    1072:	88 23       	and	r24, r24
    1074:	39 f4       	brne	.+14     	; 0x1084 <sim900_http_send_data+0x292>
		"DOWNLOAD", 20000000, 0, NULL))
		{
			sim900_http_terminate();
    1076:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <sim900_http_terminate>
			free(cmdx);
    107a:	c5 01       	movw	r24, r10
    107c:	0e 94 bc 0b 	call	0x1778	; 0x1778 <free>
			return 0;
    1080:	10 e0       	ldi	r17, 0x00	; 0
    1082:	e6 c0       	rjmp	.+460    	; 0x1250 <__stack+0x151>
		}

		//send the data
		if (!sim900_send_cmd_wait_reply(0,(const uint8_t*)adata, (const uint8_t*)"OK",
    1084:	80 e0       	ldi	r24, 0x00	; 0
    1086:	66 2d       	mov	r22, r6
    1088:	73 2d       	mov	r23, r3
    108a:	46 e8       	ldi	r20, 0x86	; 134
    108c:	51 e0       	ldi	r21, 0x01	; 1
    108e:	00 e4       	ldi	r16, 0x40	; 64
    1090:	1b e4       	ldi	r17, 0x4B	; 75
    1092:	2c e4       	ldi	r18, 0x4C	; 76
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	ee 24       	eor	r14, r14
    1098:	cc 24       	eor	r12, r12
    109a:	dd 24       	eor	r13, r13
    109c:	0e 94 0e 03 	call	0x61c	; 0x61c <sim900_send_cmd_wait_reply>
    10a0:	88 23       	and	r24, r24
    10a2:	61 f4       	brne	.+24     	; 0x10bc <sim900_http_send_data+0x2ca>
		5000000, 0, NULL))
		{
			sim900_http_terminate();
    10a4:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <sim900_http_terminate>
			free(cmdx);
    10a8:	c5 01       	movw	r24, r10
    10aa:	0e 94 bc 0b 	call	0x1778	; 0x1778 <free>
			return 0;
    10ae:	10 e0       	ldi	r17, 0x00	; 0
    10b0:	cf c0       	rjmp	.+414    	; 0x1250 <__stack+0x151>
		}
	}

	//send it
	respon = sim900_send_cmd_wait_reply(1,(const uint8_t*)(method ? PSTR("AT+HTTPACTION=1\r"):PSTR("AT+HTTPACTION=0\r")),
    10b2:	6c e8       	ldi	r22, 0x8C	; 140
    10b4:	70 e0       	ldi	r23, 0x00	; 0
    10b6:	44 e0       	ldi	r20, 0x04	; 4
    10b8:	52 e0       	ldi	r21, 0x02	; 2
    10ba:	04 c0       	rjmp	.+8      	; 0x10c4 <sim900_http_send_data+0x2d2>
    10bc:	6d e9       	ldi	r22, 0x9D	; 157
    10be:	70 e0       	ldi	r23, 0x00	; 0
    10c0:	42 ef       	ldi	r20, 0xF2	; 242
    10c2:	51 e0       	ldi	r21, 0x01	; 1
    10c4:	81 e0       	ldi	r24, 0x01	; 1
    10c6:	00 e0       	ldi	r16, 0x00	; 0
    10c8:	1d e2       	ldi	r17, 0x2D	; 45
    10ca:	21 e3       	ldi	r18, 0x31	; 49
    10cc:	31 e0       	ldi	r19, 0x01	; 1
    10ce:	ee 24       	eor	r14, r14
    10d0:	cc 24       	eor	r12, r12
    10d2:	dd 24       	eor	r13, r13
    10d4:	0e 94 0e 03 	call	0x61c	; 0x61c <sim900_send_cmd_wait_reply>
    10d8:	18 2f       	mov	r17, r24
	(const uint8_t*)(method ? "+HTTPACTION:1,200":"+HTTPACTION:0,200"), 20000000, 0, NULL);

	//if respon=1 then get the rest of data as length of respons
	if (respon)
    10da:	88 23       	and	r24, r24
    10dc:	09 f4       	brne	.+2      	; 0x10e0 <sim900_http_send_data+0x2ee>
    10de:	b1 c0       	rjmp	.+354    	; 0x1242 <__stack+0x143>
	{
		memset(cmdx, '\0', MAX_BUFFER);
    10e0:	ea 2d       	mov	r30, r10
    10e2:	fb 2d       	mov	r31, r11
    10e4:	84 e6       	ldi	r24, 0x64	; 100
    10e6:	df 01       	movw	r26, r30
    10e8:	1d 92       	st	X+, r1
    10ea:	8a 95       	dec	r24
    10ec:	e9 f7       	brne	.-6      	; 0x10e8 <sim900_http_send_data+0x2f6>
		//uint8_t *cmm = (uint8_t*) calloc(MAX_BUFFER,sizeof(uint8_t));
		respon = sim900_send_cmd_wait_reply(0,NULL, (const uint8_t*)"\r", 1000000,
    10ee:	80 e0       	ldi	r24, 0x00	; 0
    10f0:	60 e0       	ldi	r22, 0x00	; 0
    10f2:	70 e0       	ldi	r23, 0x00	; 0
    10f4:	4b e5       	ldi	r20, 0x5B	; 91
    10f6:	52 e0       	ldi	r21, 0x02	; 2
    10f8:	00 e4       	ldi	r16, 0x40	; 64
    10fa:	12 e4       	ldi	r17, 0x42	; 66
    10fc:	2f e0       	ldi	r18, 0x0F	; 15
    10fe:	30 e0       	ldi	r19, 0x00	; 0
    1100:	0f 2e       	mov	r0, r31
    1102:	f4 e6       	ldi	r31, 0x64	; 100
    1104:	ef 2e       	mov	r14, r31
    1106:	f0 2d       	mov	r31, r0
    1108:	65 01       	movw	r12, r10
    110a:	0e 94 0e 03 	call	0x61c	; 0x61c <sim900_send_cmd_wait_reply>
    110e:	18 2f       	mov	r17, r24
		MAX_BUFFER, cmdx);
		//free(cmm);

		if (respon)
    1110:	88 23       	and	r24, r24
    1112:	09 f4       	brne	.+2      	; 0x1116 <__stack+0x17>
    1114:	96 c0       	rjmp	.+300    	; 0x1242 <__stack+0x143>
		{
			//find \r on the data respons
			//cmdx form = ,[respon length]\r
			uint8_t *pr = (uint8_t*)memchr(cmdx, '\r', MAX_BUFFER);
    1116:	c5 01       	movw	r24, r10
    1118:	6d e0       	ldi	r22, 0x0D	; 13
    111a:	70 e0       	ldi	r23, 0x00	; 0
    111c:	44 e6       	ldi	r20, 0x64	; 100
    111e:	50 e0       	ldi	r21, 0x00	; 0
    1120:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <memchr>
    1124:	28 2f       	mov	r18, r24
    1126:	39 2f       	mov	r19, r25

			num_data = 0;
			if (pr != NULL)
    1128:	21 15       	cp	r18, r1
    112a:	31 05       	cpc	r19, r1
    112c:	09 f4       	brne	.+2      	; 0x1130 <__stack+0x31>
    112e:	89 c0       	rjmp	.+274    	; 0x1242 <__stack+0x143>
			{
				uint8_t clen[6];
				memset(clen, '\0', 6); //set all to 0
    1130:	3e 01       	movw	r6, r28
    1132:	08 94       	sec
    1134:	61 1c       	adc	r6, r1
    1136:	71 1c       	adc	r7, r1
    1138:	86 e0       	ldi	r24, 0x06	; 6
    113a:	f3 01       	movw	r30, r6
    113c:	11 92       	st	Z+, r1
    113e:	8a 95       	dec	r24
    1140:	e9 f7       	brne	.-6      	; 0x113c <__stack+0x3d>
				memcpy(clen, &cmdx[1], pr - &cmdx[1]); //copy the data respon length
    1142:	a5 01       	movw	r20, r10
    1144:	4f 5f       	subi	r20, 0xFF	; 255
    1146:	5f 4f       	sbci	r21, 0xFF	; 255
    1148:	24 1b       	sub	r18, r20
    114a:	35 0b       	sbc	r19, r21
    114c:	c3 01       	movw	r24, r6
    114e:	64 2f       	mov	r22, r20
    1150:	75 2f       	mov	r23, r21
    1152:	42 2f       	mov	r20, r18
    1154:	53 2f       	mov	r21, r19
    1156:	0e 94 80 0c 	call	0x1900	; 0x1900 <memcpy>
				num_data = atoi((const char*)clen); //convert to int
    115a:	c3 01       	movw	r24, r6
    115c:	0e 94 55 0c 	call	0x18aa	; 0x18aa <atoi>
			}

			//just limit it
			if (num_data > max_out_len)
    1160:	2f 2d       	mov	r18, r15
    1162:	30 e0       	ldi	r19, 0x00	; 0
			if (pr != NULL)
			{
				uint8_t clen[6];
				memset(clen, '\0', 6); //set all to 0
				memcpy(clen, &cmdx[1], pr - &cmdx[1]); //copy the data respon length
				num_data = atoi((const char*)clen); //convert to int
    1164:	68 2e       	mov	r6, r24
    1166:	79 2e       	mov	r7, r25
    1168:	26 15       	cp	r18, r6
    116a:	37 05       	cpc	r19, r7
    116c:	08 f4       	brcc	.+2      	; 0x1170 <__stack+0x71>
    116e:	39 01       	movw	r6, r18
			{
				num_data = max_out_len;
			}

			//read the data respon
			if (num_data > 0)
    1170:	61 14       	cp	r6, r1
    1172:	71 04       	cpc	r7, r1
    1174:	09 f4       	brne	.+2      	; 0x1178 <__stack+0x79>
    1176:	65 c0       	rjmp	.+202    	; 0x1242 <__stack+0x143>
			{
				//allocate memory
				//make sure a respon out is capable of receiveing it
				//beware that you must make sure that the usart rx buffer is capable of receiving it
				memset(cmdx, '\0', MAX_BUFFER);
    1178:	ea 2d       	mov	r30, r10
    117a:	fb 2d       	mov	r31, r11
    117c:	84 e6       	ldi	r24, 0x64	; 100
    117e:	df 01       	movw	r26, r30
    1180:	1d 92       	st	X+, r1
    1182:	8a 95       	dec	r24
    1184:	e9 f7       	brne	.-6      	; 0x1180 <__stack+0x81>
				snprintf((char*)cmdx, MAX_BUFFER, "AT+HTTPREAD=0,%d\r", num_data);
    1186:	ed b7       	in	r30, 0x3d	; 61
    1188:	fe b7       	in	r31, 0x3e	; 62
    118a:	38 97       	sbiw	r30, 0x08	; 8
    118c:	0f b6       	in	r0, 0x3f	; 63
    118e:	f8 94       	cli
    1190:	fe bf       	out	0x3e, r31	; 62
    1192:	0f be       	out	0x3f, r0	; 63
    1194:	ed bf       	out	0x3d, r30	; 61
    1196:	31 96       	adiw	r30, 0x01	; 1
    1198:	ad b7       	in	r26, 0x3d	; 61
    119a:	be b7       	in	r27, 0x3e	; 62
    119c:	12 96       	adiw	r26, 0x02	; 2
    119e:	bc 92       	st	X, r11
    11a0:	ae 92       	st	-X, r10
    11a2:	11 97       	sbiw	r26, 0x01	; 1
    11a4:	84 e6       	ldi	r24, 0x64	; 100
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	93 83       	std	Z+3, r25	; 0x03
    11aa:	82 83       	std	Z+2, r24	; 0x02
    11ac:	8d e5       	ldi	r24, 0x5D	; 93
    11ae:	92 e0       	ldi	r25, 0x02	; 2
    11b0:	95 83       	std	Z+5, r25	; 0x05
    11b2:	84 83       	std	Z+4, r24	; 0x04
    11b4:	77 82       	std	Z+7, r7	; 0x07
    11b6:	66 82       	std	Z+6, r6	; 0x06
    11b8:	0e 94 b2 0c 	call	0x1964	; 0x1964 <snprintf>
				respon = sim900_send_cmd_wait_reply(0,(const uint8_t*)cmdx, (const
    11bc:	ed b7       	in	r30, 0x3d	; 61
    11be:	fe b7       	in	r31, 0x3e	; 62
    11c0:	38 96       	adiw	r30, 0x08	; 8
    11c2:	0f b6       	in	r0, 0x3f	; 63
    11c4:	f8 94       	cli
    11c6:	fe bf       	out	0x3e, r31	; 62
    11c8:	0f be       	out	0x3f, r0	; 63
    11ca:	ed bf       	out	0x3d, r30	; 61
    11cc:	80 e0       	ldi	r24, 0x00	; 0
    11ce:	b5 01       	movw	r22, r10
    11d0:	4f e6       	ldi	r20, 0x6F	; 111
    11d2:	52 e0       	ldi	r21, 0x02	; 2
    11d4:	00 e4       	ldi	r16, 0x40	; 64
    11d6:	1b e4       	ldi	r17, 0x4B	; 75
    11d8:	2c e4       	ldi	r18, 0x4C	; 76
    11da:	30 e0       	ldi	r19, 0x00	; 0
    11dc:	ee 24       	eor	r14, r14
    11de:	cc 24       	eor	r12, r12
    11e0:	dd 24       	eor	r13, r13
    11e2:	0e 94 0e 03 	call	0x61c	; 0x61c <sim900_send_cmd_wait_reply>
    11e6:	18 2f       	mov	r17, r24
				uint8_t*)"+HTTPREAD:", 5000000, 0, NULL);
				if (respon)
    11e8:	88 23       	and	r24, r24
    11ea:	59 f1       	breq	.+86     	; 0x1242 <__stack+0x143>
				{
					//get the rest of data
					memset(cmdx, '\0', MAX_BUFFER);
    11ec:	ea 2d       	mov	r30, r10
    11ee:	fb 2d       	mov	r31, r11
    11f0:	84 e6       	ldi	r24, 0x64	; 100
    11f2:	df 01       	movw	r26, r30
    11f4:	1d 92       	st	X+, r1
    11f6:	8a 95       	dec	r24
    11f8:	e9 f7       	brne	.-6      	; 0x11f4 <__stack+0xf5>
					respon = sim900_send_cmd_wait_reply(0,NULL, (const uint8_t*)"\r\nOK",
    11fa:	80 e0       	ldi	r24, 0x00	; 0
    11fc:	60 e0       	ldi	r22, 0x00	; 0
    11fe:	70 e0       	ldi	r23, 0x00	; 0
    1200:	4a e7       	ldi	r20, 0x7A	; 122
    1202:	52 e0       	ldi	r21, 0x02	; 2
    1204:	00 e4       	ldi	r16, 0x40	; 64
    1206:	12 e4       	ldi	r17, 0x42	; 66
    1208:	2f e0       	ldi	r18, 0x0F	; 15
    120a:	30 e0       	ldi	r19, 0x00	; 0
    120c:	0f 2e       	mov	r0, r31
    120e:	f4 e6       	ldi	r31, 0x64	; 100
    1210:	ef 2e       	mov	r14, r31
    1212:	f0 2d       	mov	r31, r0
    1214:	65 01       	movw	r12, r10
    1216:	0e 94 0e 03 	call	0x61c	; 0x61c <sim900_send_cmd_wait_reply>
    121a:	18 2f       	mov	r17, r24
					1000000, MAX_BUFFER, cmdx);

					//filter out the respon and get clean data
					if (respon)
    121c:	88 23       	and	r24, r24
    121e:	89 f0       	breq	.+34     	; 0x1242 <__stack+0x143>
					{
						//find first \n position
						pr = (uint8_t*)memchr(cmdx, '\n', num_data *sizeof(uint8_t));
    1220:	c5 01       	movw	r24, r10
    1222:	6a e0       	ldi	r22, 0x0A	; 10
    1224:	70 e0       	ldi	r23, 0x00	; 0
    1226:	a3 01       	movw	r20, r6
    1228:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <memchr>

						//copy to result
						memcpy(arespon_out, pr + 1, num_data *sizeof(uint8_t));
    122c:	9c 01       	movw	r18, r24
    122e:	2f 5f       	subi	r18, 0xFF	; 255
    1230:	3f 4f       	sbci	r19, 0xFF	; 255
    1232:	88 2d       	mov	r24, r8
    1234:	99 2d       	mov	r25, r9
    1236:	62 2f       	mov	r22, r18
    1238:	73 2f       	mov	r23, r19
    123a:	46 2d       	mov	r20, r6
    123c:	57 2d       	mov	r21, r7
    123e:	0e 94 80 0c 	call	0x1900	; 0x1900 <memcpy>
			}
		}
	}

	//terminate
	sim900_http_terminate();
    1242:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <sim900_http_terminate>
	
	//free buffer
	free(cmdx);
    1246:	c5 01       	movw	r24, r10
    1248:	0e 94 bc 0b 	call	0x1778	; 0x1778 <free>

	return respon;
    124c:	01 c0       	rjmp	.+2      	; 0x1250 <__stack+0x151>
	uint8_t *cmdx = (uint8_t*) calloc(MAX_BUFFER,sizeof(uint8_t));
	
	//buffer created?
	if (cmdx == NULL)
	{
		return 0;
    124e:	10 e0       	ldi	r17, 0x00	; 0
	
	//free buffer
	free(cmdx);

	return respon;
    1250:	81 2f       	mov	r24, r17
    1252:	26 96       	adiw	r28, 0x06	; 6
    1254:	0f b6       	in	r0, 0x3f	; 63
    1256:	f8 94       	cli
    1258:	de bf       	out	0x3e, r29	; 62
    125a:	0f be       	out	0x3f, r0	; 63
    125c:	cd bf       	out	0x3d, r28	; 61
    125e:	cf 91       	pop	r28
    1260:	df 91       	pop	r29
    1262:	1f 91       	pop	r17
    1264:	0f 91       	pop	r16
    1266:	ff 90       	pop	r15
    1268:	ef 90       	pop	r14
    126a:	df 90       	pop	r13
    126c:	cf 90       	pop	r12
    126e:	bf 90       	pop	r11
    1270:	af 90       	pop	r10
    1272:	9f 90       	pop	r9
    1274:	8f 90       	pop	r8
    1276:	7f 90       	pop	r7
    1278:	6f 90       	pop	r6
    127a:	5f 90       	pop	r5
    127c:	4f 90       	pop	r4
    127e:	3f 90       	pop	r3
    1280:	08 95       	ret

00001282 <__vector_18>:
ISR (UART0_RECEIVE_INTERRUPT)	
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
    1282:	1f 92       	push	r1
    1284:	0f 92       	push	r0
    1286:	0f b6       	in	r0, 0x3f	; 63
    1288:	0f 92       	push	r0
    128a:	0b b6       	in	r0, 0x3b	; 59
    128c:	0f 92       	push	r0
    128e:	11 24       	eor	r1, r1
    1290:	2f 93       	push	r18
    1292:	3f 93       	push	r19
    1294:	8f 93       	push	r24
    1296:	9f 93       	push	r25
    1298:	ef 93       	push	r30
    129a:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */
    usr  = UART0_STATUS;
    129c:	2b b1       	in	r18, 0x0b	; 11
    data = UART0_DATA;
    129e:	3c b1       	in	r19, 0x0c	; 12
#elif defined(FE) && defined(DOR)
    lastRxError = usr & (_BV(FE)|_BV(DOR) );
#endif

    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    12a0:	80 91 ed 02 	lds	r24, 0x02ED
    12a4:	8f 5f       	subi	r24, 0xFF	; 255
    12a6:	8f 71       	andi	r24, 0x1F	; 31
    
    if ( tmphead == UART_RxTail ) {
    12a8:	90 91 ee 02 	lds	r25, 0x02EE
    12ac:	89 17       	cp	r24, r25
    12ae:	49 f0       	breq	.+18     	; 0x12c2 <__vector_18+0x40>
    usr  = UART0_STATUS;
    data = UART0_DATA;
    
    /* get FEn (Frame Error) DORn (Data OverRun) UPEn (USART Parity Error) bits */
#if defined(FE) && defined(DOR) && defined(UPE)
    lastRxError = usr & (_BV(FE)|_BV(DOR)|_BV(UPE) );
    12b0:	2c 71       	andi	r18, 0x1C	; 28
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART_RxHead = tmphead;
    12b2:	80 93 ed 02 	sts	0x02ED, r24
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    12b6:	ef ee       	ldi	r30, 0xEF	; 239
    12b8:	f2 e0       	ldi	r31, 0x02	; 2
    12ba:	e8 0f       	add	r30, r24
    12bc:	f1 1d       	adc	r31, r1
    12be:	30 83       	st	Z, r19
    12c0:	01 c0       	rjmp	.+2      	; 0x12c4 <__vector_18+0x42>
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    12c2:	22 e0       	ldi	r18, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError |= lastRxError;   
    12c4:	90 91 0f 03 	lds	r25, 0x030F
    12c8:	82 2f       	mov	r24, r18
    12ca:	89 2b       	or	r24, r25
    12cc:	80 93 0f 03 	sts	0x030F, r24
}
    12d0:	ff 91       	pop	r31
    12d2:	ef 91       	pop	r30
    12d4:	9f 91       	pop	r25
    12d6:	8f 91       	pop	r24
    12d8:	3f 91       	pop	r19
    12da:	2f 91       	pop	r18
    12dc:	0f 90       	pop	r0
    12de:	0b be       	out	0x3b, r0	; 59
    12e0:	0f 90       	pop	r0
    12e2:	0f be       	out	0x3f, r0	; 63
    12e4:	0f 90       	pop	r0
    12e6:	1f 90       	pop	r1
    12e8:	18 95       	reti

000012ea <__vector_19>:
ISR (UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
    12ea:	1f 92       	push	r1
    12ec:	0f 92       	push	r0
    12ee:	0f b6       	in	r0, 0x3f	; 63
    12f0:	0f 92       	push	r0
    12f2:	0b b6       	in	r0, 0x3b	; 59
    12f4:	0f 92       	push	r0
    12f6:	11 24       	eor	r1, r1
    12f8:	8f 93       	push	r24
    12fa:	9f 93       	push	r25
    12fc:	ef 93       	push	r30
    12fe:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
    1300:	90 91 cb 02 	lds	r25, 0x02CB
    1304:	80 91 cc 02 	lds	r24, 0x02CC
    1308:	98 17       	cp	r25, r24
    130a:	69 f0       	breq	.+26     	; 0x1326 <__vector_19+0x3c>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
    130c:	80 91 cc 02 	lds	r24, 0x02CC
    1310:	8f 5f       	subi	r24, 0xFF	; 255
    1312:	8f 71       	andi	r24, 0x1F	; 31
        UART_TxTail = tmptail;
    1314:	80 93 cc 02 	sts	0x02CC, r24
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
    1318:	ed ec       	ldi	r30, 0xCD	; 205
    131a:	f2 e0       	ldi	r31, 0x02	; 2
    131c:	e8 0f       	add	r30, r24
    131e:	f1 1d       	adc	r31, r1
    1320:	80 81       	ld	r24, Z
    1322:	8c b9       	out	0x0c, r24	; 12
    1324:	01 c0       	rjmp	.+2      	; 0x1328 <__vector_19+0x3e>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
    1326:	55 98       	cbi	0x0a, 5	; 10
    }
}
    1328:	ff 91       	pop	r31
    132a:	ef 91       	pop	r30
    132c:	9f 91       	pop	r25
    132e:	8f 91       	pop	r24
    1330:	0f 90       	pop	r0
    1332:	0b be       	out	0x3b, r0	; 59
    1334:	0f 90       	pop	r0
    1336:	0f be       	out	0x3f, r0	; 63
    1338:	0f 90       	pop	r0
    133a:	1f 90       	pop	r1
    133c:	18 95       	reti

0000133e <uart_init>:
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
    UART_TxHead = 0;
    133e:	10 92 cb 02 	sts	0x02CB, r1
    UART_TxTail = 0;
    1342:	10 92 cc 02 	sts	0x02CC, r1
    UART_RxHead = 0;
    1346:	10 92 ed 02 	sts	0x02ED, r1
    UART_RxTail = 0;
    134a:	10 92 ee 02 	sts	0x02EE, r1
#endif
#endif
#endif

    /* Set baud rate */
    if ( baudrate & 0x8000 )
    134e:	99 23       	and	r25, r25
    1350:	14 f4       	brge	.+4      	; 0x1356 <uart_init+0x18>
    {
        #if UART0_BIT_U2X
        UART0_STATUS = (1<<UART0_BIT_U2X);  //Enable 2x speed 
    1352:	22 e0       	ldi	r18, 0x02	; 2
    1354:	2b b9       	out	0x0b, r18	; 11
        #endif
    } 
    #if defined(UART0_UBRRH)
    UART0_UBRRH = (unsigned char)((baudrate>>8)&0x80) ;
    1356:	29 2f       	mov	r18, r25
    1358:	20 78       	andi	r18, 0x80	; 128
    135a:	20 93 90 00 	sts	0x0090, r18
    #endif    
    UART0_UBRRL = (unsigned char) (baudrate&0x00FF);
    135e:	89 b9       	out	0x09, r24	; 9
      
    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(UART0_BIT_RXCIE)|(1<<UART0_BIT_RXEN)|(1<<UART0_BIT_TXEN);
    1360:	88 e9       	ldi	r24, 0x98	; 152
    1362:	8a b9       	out	0x0a, r24	; 10
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef UART0_CONTROLC
    #ifdef UART0_BIT_URSEL
    UART0_CONTROLC = (1<<UART0_BIT_URSEL)|(1<<UART0_BIT_UCSZ1)|(1<<UART0_BIT_UCSZ0);
    #else
    UART0_CONTROLC = (1<<UART0_BIT_UCSZ1)|(1<<UART0_BIT_UCSZ0);
    1364:	86 e0       	ldi	r24, 0x06	; 6
    1366:	80 93 95 00 	sts	0x0095, r24
    #endif 
    #endif

}/* uart_init */
    136a:	08 95       	ret

0000136c <uart_getc>:
    unsigned char tmptail;
    unsigned char data;
    unsigned char lastRxError;


    if ( UART_RxHead == UART_RxTail ) {
    136c:	90 91 ed 02 	lds	r25, 0x02ED
    1370:	80 91 ee 02 	lds	r24, 0x02EE
    1374:	98 17       	cp	r25, r24
    1376:	a1 f0       	breq	.+40     	; 0x13a0 <uart_getc+0x34>
        return UART_NO_DATA;   /* no data available */
    }
    
    /* calculate buffer index */
    tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
    1378:	80 91 ee 02 	lds	r24, 0x02EE
    137c:	8f 5f       	subi	r24, 0xFF	; 255
    137e:	8f 71       	andi	r24, 0x1F	; 31
    
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
    1380:	ef ee       	ldi	r30, 0xEF	; 239
    1382:	f2 e0       	ldi	r31, 0x02	; 2
    1384:	e8 0f       	add	r30, r24
    1386:	f1 1d       	adc	r31, r1
    1388:	90 81       	ld	r25, Z
    lastRxError = UART_LastRxError;
    138a:	40 91 0f 03 	lds	r20, 0x030F
    
    /* store buffer index */
    UART_RxTail = tmptail; 
    138e:	80 93 ee 02 	sts	0x02EE, r24
    
    UART_LastRxError = 0;
    1392:	10 92 0f 03 	sts	0x030F, r1
    return (lastRxError << 8) + data;
    1396:	34 2f       	mov	r19, r20
    1398:	20 e0       	ldi	r18, 0x00	; 0
    139a:	29 0f       	add	r18, r25
    139c:	31 1d       	adc	r19, r1
    139e:	02 c0       	rjmp	.+4      	; 0x13a4 <uart_getc+0x38>
    unsigned char data;
    unsigned char lastRxError;


    if ( UART_RxHead == UART_RxTail ) {
        return UART_NO_DATA;   /* no data available */
    13a0:	20 e0       	ldi	r18, 0x00	; 0
    13a2:	31 e0       	ldi	r19, 0x01	; 1
    UART_RxTail = tmptail; 
    
    UART_LastRxError = 0;
    return (lastRxError << 8) + data;

}/* uart_getc */
    13a4:	82 2f       	mov	r24, r18
    13a6:	93 2f       	mov	r25, r19
    13a8:	08 95       	ret

000013aa <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
    13aa:	20 91 cb 02 	lds	r18, 0x02CB
    13ae:	2f 5f       	subi	r18, 0xFF	; 255
    13b0:	2f 71       	andi	r18, 0x1F	; 31
    
    while ( tmphead == UART_TxTail ){
    13b2:	90 91 cc 02 	lds	r25, 0x02CC
    13b6:	29 17       	cp	r18, r25
    13b8:	e1 f3       	breq	.-8      	; 0x13b2 <uart_putc+0x8>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
    13ba:	ed ec       	ldi	r30, 0xCD	; 205
    13bc:	f2 e0       	ldi	r31, 0x02	; 2
    13be:	e2 0f       	add	r30, r18
    13c0:	f1 1d       	adc	r31, r1
    13c2:	80 83       	st	Z, r24
    UART_TxHead = tmphead;
    13c4:	20 93 cb 02 	sts	0x02CB, r18

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
    13c8:	55 9a       	sbi	0x0a, 5	; 10

}/* uart_putc */
    13ca:	08 95       	ret

000013cc <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    13cc:	cf 93       	push	r28
    13ce:	df 93       	push	r29
    13d0:	ec 01       	movw	r28, r24
    while (*s) 
    13d2:	88 81       	ld	r24, Y
    13d4:	88 23       	and	r24, r24
    13d6:	31 f0       	breq	.+12     	; 0x13e4 <uart_puts+0x18>
Function: uart_puts()
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
    13d8:	21 96       	adiw	r28, 0x01	; 1
{
    while (*s) 
      uart_putc(*s++);
    13da:	0e 94 d5 09 	call	0x13aa	; 0x13aa <uart_putc>
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    while (*s) 
    13de:	89 91       	ld	r24, Y+
    13e0:	88 23       	and	r24, r24
    13e2:	d9 f7       	brne	.-10     	; 0x13da <uart_puts+0xe>
      uart_putc(*s++);

}/* uart_puts */
    13e4:	df 91       	pop	r29
    13e6:	cf 91       	pop	r28
    13e8:	08 95       	ret

000013ea <uart_puts_p>:
Purpose:  transmit string from program memory to UART
Input:    program memory string to be transmitted
Returns:  none
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
    13ea:	cf 93       	push	r28
    13ec:	df 93       	push	r29
    13ee:	ec 01       	movw	r28, r24
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
    13f0:	fc 01       	movw	r30, r24
    13f2:	84 91       	lpm	r24, Z+
    13f4:	88 23       	and	r24, r24
    13f6:	41 f0       	breq	.+16     	; 0x1408 <uart_puts_p+0x1e>
    13f8:	21 96       	adiw	r28, 0x01	; 1
      uart_putc(c);
    13fa:	0e 94 d5 09 	call	0x13aa	; 0x13aa <uart_putc>
    13fe:	fe 01       	movw	r30, r28
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
    1400:	21 96       	adiw	r28, 0x01	; 1
    1402:	84 91       	lpm	r24, Z+
    1404:	88 23       	and	r24, r24
    1406:	c9 f7       	brne	.-14     	; 0x13fa <uart_puts_p+0x10>
      uart_putc(c);

}/* uart_puts_p */
    1408:	df 91       	pop	r29
    140a:	cf 91       	pop	r28
    140c:	08 95       	ret

0000140e <__vector_30>:
ISR(UART1_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART1 Receive Complete interrupt
Purpose:  called when the UART1 has received a character
**************************************************************************/
{
    140e:	1f 92       	push	r1
    1410:	0f 92       	push	r0
    1412:	0f b6       	in	r0, 0x3f	; 63
    1414:	0f 92       	push	r0
    1416:	0b b6       	in	r0, 0x3b	; 59
    1418:	0f 92       	push	r0
    141a:	11 24       	eor	r1, r1
    141c:	2f 93       	push	r18
    141e:	3f 93       	push	r19
    1420:	8f 93       	push	r24
    1422:	9f 93       	push	r25
    1424:	ef 93       	push	r30
    1426:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */ 
    usr  = UART1_STATUS;
    1428:	20 91 9b 00 	lds	r18, 0x009B
    data = UART1_DATA;
    142c:	30 91 9c 00 	lds	r19, 0x009C
    
    /* get FEn (Frame Error) DORn (Data OverRun) UPEn (USART Parity Error) bits */
    lastRxError = usr & (_BV(FE1)|_BV(DOR1)|_BV(UPE1) );
            
    /* calculate buffer index */ 
    tmphead = ( UART1_RxHead + 1) & UART_RX_BUFFER_MASK;
    1430:	80 91 a8 02 	lds	r24, 0x02A8
    1434:	8f 5f       	subi	r24, 0xFF	; 255
    1436:	8f 71       	andi	r24, 0x1F	; 31
    
    if ( tmphead == UART1_RxTail ) {
    1438:	90 91 a9 02 	lds	r25, 0x02A9
    143c:	89 17       	cp	r24, r25
    143e:	49 f0       	breq	.+18     	; 0x1452 <__vector_30+0x44>
    /* read UART status register and UART data register */ 
    usr  = UART1_STATUS;
    data = UART1_DATA;
    
    /* get FEn (Frame Error) DORn (Data OverRun) UPEn (USART Parity Error) bits */
    lastRxError = usr & (_BV(FE1)|_BV(DOR1)|_BV(UPE1) );
    1440:	2c 71       	andi	r18, 0x1C	; 28
    if ( tmphead == UART1_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART1_RxHead = tmphead;
    1442:	80 93 a8 02 	sts	0x02A8, r24
        /* store received data in buffer */
        UART1_RxBuf[tmphead] = data;
    1446:	ea ea       	ldi	r30, 0xAA	; 170
    1448:	f2 e0       	ldi	r31, 0x02	; 2
    144a:	e8 0f       	add	r30, r24
    144c:	f1 1d       	adc	r31, r1
    144e:	30 83       	st	Z, r19
    1450:	01 c0       	rjmp	.+2      	; 0x1454 <__vector_30+0x46>
    /* calculate buffer index */ 
    tmphead = ( UART1_RxHead + 1) & UART_RX_BUFFER_MASK;
    
    if ( tmphead == UART1_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    1452:	22 e0       	ldi	r18, 0x02	; 2
        /* store new index */
        UART1_RxHead = tmphead;
        /* store received data in buffer */
        UART1_RxBuf[tmphead] = data;
    }
    UART1_LastRxError |= lastRxError;   
    1454:	90 91 ca 02 	lds	r25, 0x02CA
    1458:	82 2f       	mov	r24, r18
    145a:	89 2b       	or	r24, r25
    145c:	80 93 ca 02 	sts	0x02CA, r24
}
    1460:	ff 91       	pop	r31
    1462:	ef 91       	pop	r30
    1464:	9f 91       	pop	r25
    1466:	8f 91       	pop	r24
    1468:	3f 91       	pop	r19
    146a:	2f 91       	pop	r18
    146c:	0f 90       	pop	r0
    146e:	0b be       	out	0x3b, r0	; 59
    1470:	0f 90       	pop	r0
    1472:	0f be       	out	0x3f, r0	; 63
    1474:	0f 90       	pop	r0
    1476:	1f 90       	pop	r1
    1478:	18 95       	reti

0000147a <__vector_31>:
ISR(UART1_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART1 Data Register Empty interrupt
Purpose:  called when the UART1 is ready to transmit the next byte
**************************************************************************/
{
    147a:	1f 92       	push	r1
    147c:	0f 92       	push	r0
    147e:	0f b6       	in	r0, 0x3f	; 63
    1480:	0f 92       	push	r0
    1482:	0b b6       	in	r0, 0x3b	; 59
    1484:	0f 92       	push	r0
    1486:	11 24       	eor	r1, r1
    1488:	8f 93       	push	r24
    148a:	9f 93       	push	r25
    148c:	ef 93       	push	r30
    148e:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART1_TxHead != UART1_TxTail) {
    1490:	90 91 86 02 	lds	r25, 0x0286
    1494:	80 91 87 02 	lds	r24, 0x0287
    1498:	98 17       	cp	r25, r24
    149a:	71 f0       	breq	.+28     	; 0x14b8 <__vector_31+0x3e>
        /* calculate and store new buffer index */
        tmptail = (UART1_TxTail + 1) & UART_TX_BUFFER_MASK;
    149c:	80 91 87 02 	lds	r24, 0x0287
    14a0:	8f 5f       	subi	r24, 0xFF	; 255
    14a2:	8f 71       	andi	r24, 0x1F	; 31
        UART1_TxTail = tmptail;
    14a4:	80 93 87 02 	sts	0x0287, r24
        /* get one byte from buffer and write it to UART */
        UART1_DATA = UART1_TxBuf[tmptail];  /* start transmission */
    14a8:	e8 e8       	ldi	r30, 0x88	; 136
    14aa:	f2 e0       	ldi	r31, 0x02	; 2
    14ac:	e8 0f       	add	r30, r24
    14ae:	f1 1d       	adc	r31, r1
    14b0:	80 81       	ld	r24, Z
    14b2:	80 93 9c 00 	sts	0x009C, r24
    14b6:	05 c0       	rjmp	.+10     	; 0x14c2 <__vector_31+0x48>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART1_CONTROL &= ~_BV(UART1_UDRIE);
    14b8:	ea e9       	ldi	r30, 0x9A	; 154
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	80 81       	ld	r24, Z
    14be:	8f 7d       	andi	r24, 0xDF	; 223
    14c0:	80 83       	st	Z, r24
    }
}
    14c2:	ff 91       	pop	r31
    14c4:	ef 91       	pop	r30
    14c6:	9f 91       	pop	r25
    14c8:	8f 91       	pop	r24
    14ca:	0f 90       	pop	r0
    14cc:	0b be       	out	0x3b, r0	; 59
    14ce:	0f 90       	pop	r0
    14d0:	0f be       	out	0x3f, r0	; 63
    14d2:	0f 90       	pop	r0
    14d4:	1f 90       	pop	r1
    14d6:	18 95       	reti

000014d8 <uart1_init>:
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart1_init(unsigned int baudrate)
{
    UART1_TxHead = 0;
    14d8:	10 92 86 02 	sts	0x0286, r1
    UART1_TxTail = 0;
    14dc:	10 92 87 02 	sts	0x0287, r1
    UART1_RxHead = 0;
    14e0:	10 92 a8 02 	sts	0x02A8, r1
    UART1_RxTail = 0;
    14e4:	10 92 a9 02 	sts	0x02A9, r1
#endif
#endif
#endif

    /* Set baud rate */
    if ( baudrate & 0x8000 ) 
    14e8:	99 23       	and	r25, r25
    14ea:	1c f4       	brge	.+6      	; 0x14f2 <uart1_init+0x1a>
    {
        #if UART1_BIT_U2X
    	UART1_STATUS = (1<<UART1_BIT_U2X);  //Enable 2x speed 
    14ec:	22 e0       	ldi	r18, 0x02	; 2
    14ee:	20 93 9b 00 	sts	0x009B, r18
        #endif
    }
    UART1_UBRRH = (unsigned char)((baudrate>>8)&0x80) ;
    14f2:	29 2f       	mov	r18, r25
    14f4:	20 78       	andi	r18, 0x80	; 128
    14f6:	20 93 98 00 	sts	0x0098, r18
    UART1_UBRRL = (unsigned char) baudrate;
    14fa:	80 93 99 00 	sts	0x0099, r24
        
    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART1_CONTROL = _BV(UART1_BIT_RXCIE)|(1<<UART1_BIT_RXEN)|(1<<UART1_BIT_TXEN);    
    14fe:	88 e9       	ldi	r24, 0x98	; 152
    1500:	80 93 9a 00 	sts	0x009A, r24
    
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */   
    #ifdef UART1_BIT_URSEL
    UART1_CONTROLC = (1<<UART1_BIT_URSEL)|(1<<UART1_BIT_UCSZ1)|(1<<UART1_BIT_UCSZ0);
    #else
    UART1_CONTROLC = (1<<UART1_BIT_UCSZ1)|(1<<UART1_BIT_UCSZ0);
    1504:	86 e0       	ldi	r24, 0x06	; 6
    1506:	80 93 9d 00 	sts	0x009D, r24
    #endif 
    
}/* uart_init */
    150a:	08 95       	ret

0000150c <uart1_getc>:
    unsigned char tmptail;
    unsigned int  data;
    unsigned char lastRxError;


    if ( UART1_RxHead == UART1_RxTail ) {
    150c:	90 91 a8 02 	lds	r25, 0x02A8
    1510:	80 91 a9 02 	lds	r24, 0x02A9
    1514:	98 17       	cp	r25, r24
    1516:	a1 f0       	breq	.+40     	; 0x1540 <uart1_getc+0x34>
        return UART_NO_DATA;   /* no data available */
    }
    
    /* calculate buffer index */
    tmptail = (UART1_RxTail + 1) & UART_RX_BUFFER_MASK;
    1518:	80 91 a9 02 	lds	r24, 0x02A9
    151c:	8f 5f       	subi	r24, 0xFF	; 255
    151e:	8f 71       	andi	r24, 0x1F	; 31
    
    /* get data from receive buffer */
    data = UART1_RxBuf[tmptail];
    1520:	ea ea       	ldi	r30, 0xAA	; 170
    1522:	f2 e0       	ldi	r31, 0x02	; 2
    1524:	e8 0f       	add	r30, r24
    1526:	f1 1d       	adc	r31, r1
    1528:	90 81       	ld	r25, Z
    lastRxError = UART1_LastRxError;
    152a:	40 91 ca 02 	lds	r20, 0x02CA
    
    /* store buffer index */
    UART1_RxTail = tmptail; 
    152e:	80 93 a9 02 	sts	0x02A9, r24
    
    UART1_LastRxError = 0;
    1532:	10 92 ca 02 	sts	0x02CA, r1
    return (lastRxError << 8) + data;
    1536:	34 2f       	mov	r19, r20
    1538:	20 e0       	ldi	r18, 0x00	; 0
    153a:	29 0f       	add	r18, r25
    153c:	31 1d       	adc	r19, r1
    153e:	02 c0       	rjmp	.+4      	; 0x1544 <uart1_getc+0x38>
    unsigned int  data;
    unsigned char lastRxError;


    if ( UART1_RxHead == UART1_RxTail ) {
        return UART_NO_DATA;   /* no data available */
    1540:	20 e0       	ldi	r18, 0x00	; 0
    1542:	31 e0       	ldi	r19, 0x01	; 1
    UART1_RxTail = tmptail; 
    
    UART1_LastRxError = 0;
    return (lastRxError << 8) + data;

}/* uart1_getc */
    1544:	82 2f       	mov	r24, r18
    1546:	93 2f       	mov	r25, r19
    1548:	08 95       	ret

0000154a <uart1_putc>:
void uart1_putc(unsigned char data)
{
    unsigned char tmphead;

    
    tmphead  = (UART1_TxHead + 1) & UART_TX_BUFFER_MASK;
    154a:	20 91 86 02 	lds	r18, 0x0286
    154e:	2f 5f       	subi	r18, 0xFF	; 255
    1550:	2f 71       	andi	r18, 0x1F	; 31
    
    while ( tmphead == UART1_TxTail ){
    1552:	90 91 87 02 	lds	r25, 0x0287
    1556:	29 17       	cp	r18, r25
    1558:	e1 f3       	breq	.-8      	; 0x1552 <uart1_putc+0x8>
        ;/* wait for free space in buffer */
    }
    
    UART1_TxBuf[tmphead] = data;
    155a:	e8 e8       	ldi	r30, 0x88	; 136
    155c:	f2 e0       	ldi	r31, 0x02	; 2
    155e:	e2 0f       	add	r30, r18
    1560:	f1 1d       	adc	r31, r1
    1562:	80 83       	st	Z, r24
    UART1_TxHead = tmphead;
    1564:	20 93 86 02 	sts	0x0286, r18

    /* enable UDRE interrupt */
    UART1_CONTROL    |= _BV(UART1_UDRIE);
    1568:	ea e9       	ldi	r30, 0x9A	; 154
    156a:	f0 e0       	ldi	r31, 0x00	; 0
    156c:	80 81       	ld	r24, Z
    156e:	80 62       	ori	r24, 0x20	; 32
    1570:	80 83       	st	Z, r24

}/* uart1_putc */
    1572:	08 95       	ret

00001574 <uart1_puts>:
Purpose:  transmit string to UART1
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart1_puts(const char *s )
{
    1574:	cf 93       	push	r28
    1576:	df 93       	push	r29
    1578:	ec 01       	movw	r28, r24
    while (*s) 
    157a:	88 81       	ld	r24, Y
    157c:	88 23       	and	r24, r24
    157e:	31 f0       	breq	.+12     	; 0x158c <uart1_puts+0x18>
Function: uart1_puts()
Purpose:  transmit string to UART1
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart1_puts(const char *s )
    1580:	21 96       	adiw	r28, 0x01	; 1
{
    while (*s) 
      uart1_putc(*s++);
    1582:	0e 94 a5 0a 	call	0x154a	; 0x154a <uart1_putc>
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart1_puts(const char *s )
{
    while (*s) 
    1586:	89 91       	ld	r24, Y+
    1588:	88 23       	and	r24, r24
    158a:	d9 f7       	brne	.-10     	; 0x1582 <uart1_puts+0xe>
      uart1_putc(*s++);

}/* uart1_puts */
    158c:	df 91       	pop	r29
    158e:	cf 91       	pop	r28
    1590:	08 95       	ret

00001592 <uart1_puts_p>:
Purpose:  transmit string from program memory to UART1
Input:    program memory string to be transmitted
Returns:  none
**************************************************************************/
void uart1_puts_p(const char *progmem_s )
{
    1592:	cf 93       	push	r28
    1594:	df 93       	push	r29
    1596:	ec 01       	movw	r28, r24
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
    1598:	fc 01       	movw	r30, r24
    159a:	84 91       	lpm	r24, Z+
    159c:	88 23       	and	r24, r24
    159e:	41 f0       	breq	.+16     	; 0x15b0 <uart1_puts_p+0x1e>
    15a0:	21 96       	adiw	r28, 0x01	; 1
      uart1_putc(c);
    15a2:	0e 94 a5 0a 	call	0x154a	; 0x154a <uart1_putc>
    15a6:	fe 01       	movw	r30, r28
**************************************************************************/
void uart1_puts_p(const char *progmem_s )
{
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
    15a8:	21 96       	adiw	r28, 0x01	; 1
    15aa:	84 91       	lpm	r24, Z+
    15ac:	88 23       	and	r24, r24
    15ae:	c9 f7       	brne	.-14     	; 0x15a2 <uart1_puts_p+0x10>
      uart1_putc(c);

}/* uart1_puts_p */
    15b0:	df 91       	pop	r29
    15b2:	cf 91       	pop	r28
    15b4:	08 95       	ret

000015b6 <__udivmodsi4>:
    15b6:	a1 e2       	ldi	r26, 0x21	; 33
    15b8:	1a 2e       	mov	r1, r26
    15ba:	aa 1b       	sub	r26, r26
    15bc:	bb 1b       	sub	r27, r27
    15be:	fd 01       	movw	r30, r26
    15c0:	0d c0       	rjmp	.+26     	; 0x15dc <__udivmodsi4_ep>

000015c2 <__udivmodsi4_loop>:
    15c2:	aa 1f       	adc	r26, r26
    15c4:	bb 1f       	adc	r27, r27
    15c6:	ee 1f       	adc	r30, r30
    15c8:	ff 1f       	adc	r31, r31
    15ca:	a2 17       	cp	r26, r18
    15cc:	b3 07       	cpc	r27, r19
    15ce:	e4 07       	cpc	r30, r20
    15d0:	f5 07       	cpc	r31, r21
    15d2:	20 f0       	brcs	.+8      	; 0x15dc <__udivmodsi4_ep>
    15d4:	a2 1b       	sub	r26, r18
    15d6:	b3 0b       	sbc	r27, r19
    15d8:	e4 0b       	sbc	r30, r20
    15da:	f5 0b       	sbc	r31, r21

000015dc <__udivmodsi4_ep>:
    15dc:	66 1f       	adc	r22, r22
    15de:	77 1f       	adc	r23, r23
    15e0:	88 1f       	adc	r24, r24
    15e2:	99 1f       	adc	r25, r25
    15e4:	1a 94       	dec	r1
    15e6:	69 f7       	brne	.-38     	; 0x15c2 <__udivmodsi4_loop>
    15e8:	60 95       	com	r22
    15ea:	70 95       	com	r23
    15ec:	80 95       	com	r24
    15ee:	90 95       	com	r25
    15f0:	9b 01       	movw	r18, r22
    15f2:	ac 01       	movw	r20, r24
    15f4:	bd 01       	movw	r22, r26
    15f6:	cf 01       	movw	r24, r30
    15f8:	08 95       	ret

000015fa <calloc>:
    15fa:	ef 92       	push	r14
    15fc:	ff 92       	push	r15
    15fe:	0f 93       	push	r16
    1600:	1f 93       	push	r17
    1602:	cf 93       	push	r28
    1604:	df 93       	push	r29
    1606:	68 9f       	mul	r22, r24
    1608:	80 01       	movw	r16, r0
    160a:	69 9f       	mul	r22, r25
    160c:	10 0d       	add	r17, r0
    160e:	78 9f       	mul	r23, r24
    1610:	10 0d       	add	r17, r0
    1612:	11 24       	eor	r1, r1
    1614:	c8 01       	movw	r24, r16
    1616:	0e 94 22 0b 	call	0x1644	; 0x1644 <malloc>
    161a:	e8 2e       	mov	r14, r24
    161c:	e7 01       	movw	r28, r14
    161e:	7e 01       	movw	r14, r28
    1620:	f9 2e       	mov	r15, r25
    1622:	e7 01       	movw	r28, r14
    1624:	20 97       	sbiw	r28, 0x00	; 0
    1626:	31 f0       	breq	.+12     	; 0x1634 <calloc+0x3a>
    1628:	8e 2d       	mov	r24, r14
    162a:	60 e0       	ldi	r22, 0x00	; 0
    162c:	70 e0       	ldi	r23, 0x00	; 0
    162e:	a8 01       	movw	r20, r16
    1630:	0e 94 89 0c 	call	0x1912	; 0x1912 <memset>
    1634:	ce 01       	movw	r24, r28
    1636:	df 91       	pop	r29
    1638:	cf 91       	pop	r28
    163a:	1f 91       	pop	r17
    163c:	0f 91       	pop	r16
    163e:	ff 90       	pop	r15
    1640:	ef 90       	pop	r14
    1642:	08 95       	ret

00001644 <malloc>:
    1644:	cf 93       	push	r28
    1646:	df 93       	push	r29
    1648:	82 30       	cpi	r24, 0x02	; 2
    164a:	91 05       	cpc	r25, r1
    164c:	10 f4       	brcc	.+4      	; 0x1652 <malloc+0xe>
    164e:	82 e0       	ldi	r24, 0x02	; 2
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	e0 91 12 03 	lds	r30, 0x0312
    1656:	f0 91 13 03 	lds	r31, 0x0313
    165a:	40 e0       	ldi	r20, 0x00	; 0
    165c:	50 e0       	ldi	r21, 0x00	; 0
    165e:	20 e0       	ldi	r18, 0x00	; 0
    1660:	30 e0       	ldi	r19, 0x00	; 0
    1662:	26 c0       	rjmp	.+76     	; 0x16b0 <malloc+0x6c>
    1664:	60 81       	ld	r22, Z
    1666:	71 81       	ldd	r23, Z+1	; 0x01
    1668:	68 17       	cp	r22, r24
    166a:	79 07       	cpc	r23, r25
    166c:	e0 f0       	brcs	.+56     	; 0x16a6 <malloc+0x62>
    166e:	68 17       	cp	r22, r24
    1670:	79 07       	cpc	r23, r25
    1672:	81 f4       	brne	.+32     	; 0x1694 <malloc+0x50>
    1674:	82 81       	ldd	r24, Z+2	; 0x02
    1676:	93 81       	ldd	r25, Z+3	; 0x03
    1678:	21 15       	cp	r18, r1
    167a:	31 05       	cpc	r19, r1
    167c:	31 f0       	breq	.+12     	; 0x168a <malloc+0x46>
    167e:	d9 01       	movw	r26, r18
    1680:	13 96       	adiw	r26, 0x03	; 3
    1682:	9c 93       	st	X, r25
    1684:	8e 93       	st	-X, r24
    1686:	12 97       	sbiw	r26, 0x02	; 2
    1688:	2b c0       	rjmp	.+86     	; 0x16e0 <malloc+0x9c>
    168a:	90 93 13 03 	sts	0x0313, r25
    168e:	80 93 12 03 	sts	0x0312, r24
    1692:	26 c0       	rjmp	.+76     	; 0x16e0 <malloc+0x9c>
    1694:	41 15       	cp	r20, r1
    1696:	51 05       	cpc	r21, r1
    1698:	19 f0       	breq	.+6      	; 0x16a0 <malloc+0x5c>
    169a:	64 17       	cp	r22, r20
    169c:	75 07       	cpc	r23, r21
    169e:	18 f4       	brcc	.+6      	; 0x16a6 <malloc+0x62>
    16a0:	ab 01       	movw	r20, r22
    16a2:	e9 01       	movw	r28, r18
    16a4:	df 01       	movw	r26, r30
    16a6:	9f 01       	movw	r18, r30
    16a8:	72 81       	ldd	r23, Z+2	; 0x02
    16aa:	63 81       	ldd	r22, Z+3	; 0x03
    16ac:	e7 2f       	mov	r30, r23
    16ae:	f6 2f       	mov	r31, r22
    16b0:	30 97       	sbiw	r30, 0x00	; 0
    16b2:	c1 f6       	brne	.-80     	; 0x1664 <malloc+0x20>
    16b4:	41 15       	cp	r20, r1
    16b6:	51 05       	cpc	r21, r1
    16b8:	01 f1       	breq	.+64     	; 0x16fa <malloc+0xb6>
    16ba:	48 1b       	sub	r20, r24
    16bc:	59 0b       	sbc	r21, r25
    16be:	44 30       	cpi	r20, 0x04	; 4
    16c0:	51 05       	cpc	r21, r1
    16c2:	80 f4       	brcc	.+32     	; 0x16e4 <malloc+0xa0>
    16c4:	12 96       	adiw	r26, 0x02	; 2
    16c6:	8d 91       	ld	r24, X+
    16c8:	9c 91       	ld	r25, X
    16ca:	13 97       	sbiw	r26, 0x03	; 3
    16cc:	20 97       	sbiw	r28, 0x00	; 0
    16ce:	19 f0       	breq	.+6      	; 0x16d6 <malloc+0x92>
    16d0:	9b 83       	std	Y+3, r25	; 0x03
    16d2:	8a 83       	std	Y+2, r24	; 0x02
    16d4:	04 c0       	rjmp	.+8      	; 0x16de <malloc+0x9a>
    16d6:	90 93 13 03 	sts	0x0313, r25
    16da:	80 93 12 03 	sts	0x0312, r24
    16de:	fd 01       	movw	r30, r26
    16e0:	32 96       	adiw	r30, 0x02	; 2
    16e2:	46 c0       	rjmp	.+140    	; 0x1770 <malloc+0x12c>
    16e4:	fd 01       	movw	r30, r26
    16e6:	e4 0f       	add	r30, r20
    16e8:	f5 1f       	adc	r31, r21
    16ea:	81 93       	st	Z+, r24
    16ec:	91 93       	st	Z+, r25
    16ee:	42 50       	subi	r20, 0x02	; 2
    16f0:	50 40       	sbci	r21, 0x00	; 0
    16f2:	11 96       	adiw	r26, 0x01	; 1
    16f4:	5c 93       	st	X, r21
    16f6:	4e 93       	st	-X, r20
    16f8:	3b c0       	rjmp	.+118    	; 0x1770 <malloc+0x12c>
    16fa:	20 91 10 03 	lds	r18, 0x0310
    16fe:	30 91 11 03 	lds	r19, 0x0311
    1702:	21 15       	cp	r18, r1
    1704:	31 05       	cpc	r19, r1
    1706:	41 f4       	brne	.+16     	; 0x1718 <malloc+0xd4>
    1708:	20 91 81 02 	lds	r18, 0x0281
    170c:	30 91 82 02 	lds	r19, 0x0282
    1710:	30 93 11 03 	sts	0x0311, r19
    1714:	20 93 10 03 	sts	0x0310, r18
    1718:	20 91 83 02 	lds	r18, 0x0283
    171c:	30 91 84 02 	lds	r19, 0x0284
    1720:	21 15       	cp	r18, r1
    1722:	31 05       	cpc	r19, r1
    1724:	41 f4       	brne	.+16     	; 0x1736 <malloc+0xf2>
    1726:	2d b7       	in	r18, 0x3d	; 61
    1728:	3e b7       	in	r19, 0x3e	; 62
    172a:	40 91 7f 02 	lds	r20, 0x027F
    172e:	50 91 80 02 	lds	r21, 0x0280
    1732:	24 1b       	sub	r18, r20
    1734:	35 0b       	sbc	r19, r21
    1736:	e0 91 10 03 	lds	r30, 0x0310
    173a:	f0 91 11 03 	lds	r31, 0x0311
    173e:	e2 17       	cp	r30, r18
    1740:	f3 07       	cpc	r31, r19
    1742:	a0 f4       	brcc	.+40     	; 0x176c <malloc+0x128>
    1744:	2e 1b       	sub	r18, r30
    1746:	3f 0b       	sbc	r19, r31
    1748:	28 17       	cp	r18, r24
    174a:	39 07       	cpc	r19, r25
    174c:	78 f0       	brcs	.+30     	; 0x176c <malloc+0x128>
    174e:	ac 01       	movw	r20, r24
    1750:	4e 5f       	subi	r20, 0xFE	; 254
    1752:	5f 4f       	sbci	r21, 0xFF	; 255
    1754:	24 17       	cp	r18, r20
    1756:	35 07       	cpc	r19, r21
    1758:	48 f0       	brcs	.+18     	; 0x176c <malloc+0x128>
    175a:	4e 0f       	add	r20, r30
    175c:	5f 1f       	adc	r21, r31
    175e:	50 93 11 03 	sts	0x0311, r21
    1762:	40 93 10 03 	sts	0x0310, r20
    1766:	81 93       	st	Z+, r24
    1768:	91 93       	st	Z+, r25
    176a:	02 c0       	rjmp	.+4      	; 0x1770 <malloc+0x12c>
    176c:	e0 e0       	ldi	r30, 0x00	; 0
    176e:	f0 e0       	ldi	r31, 0x00	; 0
    1770:	cf 01       	movw	r24, r30
    1772:	df 91       	pop	r29
    1774:	cf 91       	pop	r28
    1776:	08 95       	ret

00001778 <free>:
    1778:	cf 93       	push	r28
    177a:	df 93       	push	r29
    177c:	00 97       	sbiw	r24, 0x00	; 0
    177e:	09 f4       	brne	.+2      	; 0x1782 <free+0xa>
    1780:	91 c0       	rjmp	.+290    	; 0x18a4 <free+0x12c>
    1782:	fc 01       	movw	r30, r24
    1784:	32 97       	sbiw	r30, 0x02	; 2
    1786:	13 82       	std	Z+3, r1	; 0x03
    1788:	12 82       	std	Z+2, r1	; 0x02
    178a:	60 91 12 03 	lds	r22, 0x0312
    178e:	70 91 13 03 	lds	r23, 0x0313
    1792:	61 15       	cp	r22, r1
    1794:	71 05       	cpc	r23, r1
    1796:	81 f4       	brne	.+32     	; 0x17b8 <free+0x40>
    1798:	20 81       	ld	r18, Z
    179a:	31 81       	ldd	r19, Z+1	; 0x01
    179c:	28 0f       	add	r18, r24
    179e:	39 1f       	adc	r19, r25
    17a0:	80 91 10 03 	lds	r24, 0x0310
    17a4:	90 91 11 03 	lds	r25, 0x0311
    17a8:	82 17       	cp	r24, r18
    17aa:	93 07       	cpc	r25, r19
    17ac:	99 f5       	brne	.+102    	; 0x1814 <free+0x9c>
    17ae:	f0 93 11 03 	sts	0x0311, r31
    17b2:	e0 93 10 03 	sts	0x0310, r30
    17b6:	76 c0       	rjmp	.+236    	; 0x18a4 <free+0x12c>
    17b8:	db 01       	movw	r26, r22
    17ba:	80 e0       	ldi	r24, 0x00	; 0
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	02 c0       	rjmp	.+4      	; 0x17c4 <free+0x4c>
    17c0:	cd 01       	movw	r24, r26
    17c2:	d9 01       	movw	r26, r18
    17c4:	ae 17       	cp	r26, r30
    17c6:	bf 07       	cpc	r27, r31
    17c8:	48 f4       	brcc	.+18     	; 0x17dc <free+0x64>
    17ca:	12 96       	adiw	r26, 0x02	; 2
    17cc:	2d 91       	ld	r18, X+
    17ce:	3c 91       	ld	r19, X
    17d0:	13 97       	sbiw	r26, 0x03	; 3
    17d2:	21 15       	cp	r18, r1
    17d4:	31 05       	cpc	r19, r1
    17d6:	a1 f7       	brne	.-24     	; 0x17c0 <free+0x48>
    17d8:	cd 01       	movw	r24, r26
    17da:	21 c0       	rjmp	.+66     	; 0x181e <free+0xa6>
    17dc:	b3 83       	std	Z+3, r27	; 0x03
    17de:	a2 83       	std	Z+2, r26	; 0x02
    17e0:	ef 01       	movw	r28, r30
    17e2:	49 91       	ld	r20, Y+
    17e4:	59 91       	ld	r21, Y+
    17e6:	9e 01       	movw	r18, r28
    17e8:	24 0f       	add	r18, r20
    17ea:	35 1f       	adc	r19, r21
    17ec:	a2 17       	cp	r26, r18
    17ee:	b3 07       	cpc	r27, r19
    17f0:	79 f4       	brne	.+30     	; 0x1810 <free+0x98>
    17f2:	2d 91       	ld	r18, X+
    17f4:	3c 91       	ld	r19, X
    17f6:	11 97       	sbiw	r26, 0x01	; 1
    17f8:	24 0f       	add	r18, r20
    17fa:	35 1f       	adc	r19, r21
    17fc:	2e 5f       	subi	r18, 0xFE	; 254
    17fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1800:	31 83       	std	Z+1, r19	; 0x01
    1802:	20 83       	st	Z, r18
    1804:	12 96       	adiw	r26, 0x02	; 2
    1806:	2d 91       	ld	r18, X+
    1808:	3c 91       	ld	r19, X
    180a:	13 97       	sbiw	r26, 0x03	; 3
    180c:	33 83       	std	Z+3, r19	; 0x03
    180e:	22 83       	std	Z+2, r18	; 0x02
    1810:	00 97       	sbiw	r24, 0x00	; 0
    1812:	29 f4       	brne	.+10     	; 0x181e <free+0xa6>
    1814:	f0 93 13 03 	sts	0x0313, r31
    1818:	e0 93 12 03 	sts	0x0312, r30
    181c:	43 c0       	rjmp	.+134    	; 0x18a4 <free+0x12c>
    181e:	dc 01       	movw	r26, r24
    1820:	13 96       	adiw	r26, 0x03	; 3
    1822:	fc 93       	st	X, r31
    1824:	ee 93       	st	-X, r30
    1826:	12 97       	sbiw	r26, 0x02	; 2
    1828:	4d 91       	ld	r20, X+
    182a:	5d 91       	ld	r21, X+
    182c:	a4 0f       	add	r26, r20
    182e:	b5 1f       	adc	r27, r21
    1830:	ea 17       	cp	r30, r26
    1832:	fb 07       	cpc	r31, r27
    1834:	69 f4       	brne	.+26     	; 0x1850 <free+0xd8>
    1836:	20 81       	ld	r18, Z
    1838:	31 81       	ldd	r19, Z+1	; 0x01
    183a:	24 0f       	add	r18, r20
    183c:	35 1f       	adc	r19, r21
    183e:	2e 5f       	subi	r18, 0xFE	; 254
    1840:	3f 4f       	sbci	r19, 0xFF	; 255
    1842:	ec 01       	movw	r28, r24
    1844:	39 83       	std	Y+1, r19	; 0x01
    1846:	28 83       	st	Y, r18
    1848:	22 81       	ldd	r18, Z+2	; 0x02
    184a:	33 81       	ldd	r19, Z+3	; 0x03
    184c:	3b 83       	std	Y+3, r19	; 0x03
    184e:	2a 83       	std	Y+2, r18	; 0x02
    1850:	e0 e0       	ldi	r30, 0x00	; 0
    1852:	f0 e0       	ldi	r31, 0x00	; 0
    1854:	02 c0       	rjmp	.+4      	; 0x185a <free+0xe2>
    1856:	fb 01       	movw	r30, r22
    1858:	bc 01       	movw	r22, r24
    185a:	db 01       	movw	r26, r22
    185c:	12 96       	adiw	r26, 0x02	; 2
    185e:	8d 91       	ld	r24, X+
    1860:	9c 91       	ld	r25, X
    1862:	13 97       	sbiw	r26, 0x03	; 3
    1864:	00 97       	sbiw	r24, 0x00	; 0
    1866:	b9 f7       	brne	.-18     	; 0x1856 <free+0xde>
    1868:	9b 01       	movw	r18, r22
    186a:	2e 5f       	subi	r18, 0xFE	; 254
    186c:	3f 4f       	sbci	r19, 0xFF	; 255
    186e:	8d 91       	ld	r24, X+
    1870:	9c 91       	ld	r25, X
    1872:	11 97       	sbiw	r26, 0x01	; 1
    1874:	82 0f       	add	r24, r18
    1876:	93 1f       	adc	r25, r19
    1878:	40 91 10 03 	lds	r20, 0x0310
    187c:	50 91 11 03 	lds	r21, 0x0311
    1880:	48 17       	cp	r20, r24
    1882:	59 07       	cpc	r21, r25
    1884:	79 f4       	brne	.+30     	; 0x18a4 <free+0x12c>
    1886:	30 97       	sbiw	r30, 0x00	; 0
    1888:	29 f4       	brne	.+10     	; 0x1894 <free+0x11c>
    188a:	10 92 13 03 	sts	0x0313, r1
    188e:	10 92 12 03 	sts	0x0312, r1
    1892:	02 c0       	rjmp	.+4      	; 0x1898 <free+0x120>
    1894:	13 82       	std	Z+3, r1	; 0x03
    1896:	12 82       	std	Z+2, r1	; 0x02
    1898:	22 50       	subi	r18, 0x02	; 2
    189a:	30 40       	sbci	r19, 0x00	; 0
    189c:	30 93 11 03 	sts	0x0311, r19
    18a0:	20 93 10 03 	sts	0x0310, r18
    18a4:	df 91       	pop	r29
    18a6:	cf 91       	pop	r28
    18a8:	08 95       	ret

000018aa <atoi>:
    18aa:	fc 01       	movw	r30, r24
    18ac:	88 27       	eor	r24, r24
    18ae:	99 27       	eor	r25, r25
    18b0:	e8 94       	clt
    18b2:	21 91       	ld	r18, Z+
    18b4:	20 32       	cpi	r18, 0x20	; 32
    18b6:	e9 f3       	breq	.-6      	; 0x18b2 <atoi+0x8>
    18b8:	29 30       	cpi	r18, 0x09	; 9
    18ba:	10 f0       	brcs	.+4      	; 0x18c0 <atoi+0x16>
    18bc:	2e 30       	cpi	r18, 0x0E	; 14
    18be:	c8 f3       	brcs	.-14     	; 0x18b2 <atoi+0x8>
    18c0:	2b 32       	cpi	r18, 0x2B	; 43
    18c2:	41 f0       	breq	.+16     	; 0x18d4 <atoi+0x2a>
    18c4:	2d 32       	cpi	r18, 0x2D	; 45
    18c6:	39 f4       	brne	.+14     	; 0x18d6 <atoi+0x2c>
    18c8:	68 94       	set
    18ca:	04 c0       	rjmp	.+8      	; 0x18d4 <atoi+0x2a>
    18cc:	0e 94 aa 0c 	call	0x1954	; 0x1954 <__mulhi_const_10>
    18d0:	82 0f       	add	r24, r18
    18d2:	91 1d       	adc	r25, r1
    18d4:	21 91       	ld	r18, Z+
    18d6:	20 53       	subi	r18, 0x30	; 48
    18d8:	2a 30       	cpi	r18, 0x0A	; 10
    18da:	c0 f3       	brcs	.-16     	; 0x18cc <atoi+0x22>
    18dc:	1e f4       	brtc	.+6      	; 0x18e4 <atoi+0x3a>
    18de:	90 95       	com	r25
    18e0:	81 95       	neg	r24
    18e2:	9f 4f       	sbci	r25, 0xFF	; 255
    18e4:	08 95       	ret

000018e6 <memchr>:
    18e6:	fc 01       	movw	r30, r24
    18e8:	41 50       	subi	r20, 0x01	; 1
    18ea:	50 40       	sbci	r21, 0x00	; 0
    18ec:	30 f0       	brcs	.+12     	; 0x18fa <memchr+0x14>
    18ee:	01 90       	ld	r0, Z+
    18f0:	06 16       	cp	r0, r22
    18f2:	d1 f7       	brne	.-12     	; 0x18e8 <memchr+0x2>
    18f4:	31 97       	sbiw	r30, 0x01	; 1
    18f6:	cf 01       	movw	r24, r30
    18f8:	08 95       	ret
    18fa:	88 27       	eor	r24, r24
    18fc:	99 27       	eor	r25, r25
    18fe:	08 95       	ret

00001900 <memcpy>:
    1900:	fb 01       	movw	r30, r22
    1902:	dc 01       	movw	r26, r24
    1904:	02 c0       	rjmp	.+4      	; 0x190a <memcpy+0xa>
    1906:	01 90       	ld	r0, Z+
    1908:	0d 92       	st	X+, r0
    190a:	41 50       	subi	r20, 0x01	; 1
    190c:	50 40       	sbci	r21, 0x00	; 0
    190e:	d8 f7       	brcc	.-10     	; 0x1906 <memcpy+0x6>
    1910:	08 95       	ret

00001912 <memset>:
    1912:	dc 01       	movw	r26, r24
    1914:	01 c0       	rjmp	.+2      	; 0x1918 <memset+0x6>
    1916:	6d 93       	st	X+, r22
    1918:	41 50       	subi	r20, 0x01	; 1
    191a:	50 40       	sbci	r21, 0x00	; 0
    191c:	e0 f7       	brcc	.-8      	; 0x1916 <memset+0x4>
    191e:	08 95       	ret

00001920 <strstr>:
    1920:	fb 01       	movw	r30, r22
    1922:	51 91       	ld	r21, Z+
    1924:	55 23       	and	r21, r21
    1926:	a9 f0       	breq	.+42     	; 0x1952 <strstr+0x32>
    1928:	bf 01       	movw	r22, r30
    192a:	dc 01       	movw	r26, r24
    192c:	4d 91       	ld	r20, X+
    192e:	45 17       	cp	r20, r21
    1930:	41 11       	cpse	r20, r1
    1932:	e1 f7       	brne	.-8      	; 0x192c <strstr+0xc>
    1934:	59 f4       	brne	.+22     	; 0x194c <strstr+0x2c>
    1936:	cd 01       	movw	r24, r26
    1938:	01 90       	ld	r0, Z+
    193a:	00 20       	and	r0, r0
    193c:	49 f0       	breq	.+18     	; 0x1950 <strstr+0x30>
    193e:	4d 91       	ld	r20, X+
    1940:	40 15       	cp	r20, r0
    1942:	41 11       	cpse	r20, r1
    1944:	c9 f3       	breq	.-14     	; 0x1938 <strstr+0x18>
    1946:	fb 01       	movw	r30, r22
    1948:	41 11       	cpse	r20, r1
    194a:	ef cf       	rjmp	.-34     	; 0x192a <strstr+0xa>
    194c:	81 e0       	ldi	r24, 0x01	; 1
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	01 97       	sbiw	r24, 0x01	; 1
    1952:	08 95       	ret

00001954 <__mulhi_const_10>:
    1954:	7a e0       	ldi	r23, 0x0A	; 10
    1956:	97 9f       	mul	r25, r23
    1958:	90 2d       	mov	r25, r0
    195a:	87 9f       	mul	r24, r23
    195c:	80 2d       	mov	r24, r0
    195e:	91 0d       	add	r25, r1
    1960:	11 24       	eor	r1, r1
    1962:	08 95       	ret

00001964 <snprintf>:
    1964:	0f 93       	push	r16
    1966:	1f 93       	push	r17
    1968:	df 93       	push	r29
    196a:	cf 93       	push	r28
    196c:	cd b7       	in	r28, 0x3d	; 61
    196e:	de b7       	in	r29, 0x3e	; 62
    1970:	2e 97       	sbiw	r28, 0x0e	; 14
    1972:	0f b6       	in	r0, 0x3f	; 63
    1974:	f8 94       	cli
    1976:	de bf       	out	0x3e, r29	; 62
    1978:	0f be       	out	0x3f, r0	; 63
    197a:	cd bf       	out	0x3d, r28	; 61
    197c:	0d 89       	ldd	r16, Y+21	; 0x15
    197e:	1e 89       	ldd	r17, Y+22	; 0x16
    1980:	8f 89       	ldd	r24, Y+23	; 0x17
    1982:	98 8d       	ldd	r25, Y+24	; 0x18
    1984:	26 e0       	ldi	r18, 0x06	; 6
    1986:	2c 83       	std	Y+4, r18	; 0x04
    1988:	1a 83       	std	Y+2, r17	; 0x02
    198a:	09 83       	std	Y+1, r16	; 0x01
    198c:	97 ff       	sbrs	r25, 7
    198e:	02 c0       	rjmp	.+4      	; 0x1994 <snprintf+0x30>
    1990:	80 e0       	ldi	r24, 0x00	; 0
    1992:	90 e8       	ldi	r25, 0x80	; 128
    1994:	01 97       	sbiw	r24, 0x01	; 1
    1996:	9e 83       	std	Y+6, r25	; 0x06
    1998:	8d 83       	std	Y+5, r24	; 0x05
    199a:	9e 01       	movw	r18, r28
    199c:	25 5e       	subi	r18, 0xE5	; 229
    199e:	3f 4f       	sbci	r19, 0xFF	; 255
    19a0:	ce 01       	movw	r24, r28
    19a2:	01 96       	adiw	r24, 0x01	; 1
    19a4:	69 8d       	ldd	r22, Y+25	; 0x19
    19a6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19a8:	a9 01       	movw	r20, r18
    19aa:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <vfprintf>
    19ae:	4d 81       	ldd	r20, Y+5	; 0x05
    19b0:	5e 81       	ldd	r21, Y+6	; 0x06
    19b2:	57 fd       	sbrc	r21, 7
    19b4:	0a c0       	rjmp	.+20     	; 0x19ca <snprintf+0x66>
    19b6:	2f 81       	ldd	r18, Y+7	; 0x07
    19b8:	38 85       	ldd	r19, Y+8	; 0x08
    19ba:	42 17       	cp	r20, r18
    19bc:	53 07       	cpc	r21, r19
    19be:	0c f4       	brge	.+2      	; 0x19c2 <snprintf+0x5e>
    19c0:	9a 01       	movw	r18, r20
    19c2:	02 0f       	add	r16, r18
    19c4:	13 1f       	adc	r17, r19
    19c6:	f8 01       	movw	r30, r16
    19c8:	10 82       	st	Z, r1
    19ca:	2e 96       	adiw	r28, 0x0e	; 14
    19cc:	0f b6       	in	r0, 0x3f	; 63
    19ce:	f8 94       	cli
    19d0:	de bf       	out	0x3e, r29	; 62
    19d2:	0f be       	out	0x3f, r0	; 63
    19d4:	cd bf       	out	0x3d, r28	; 61
    19d6:	cf 91       	pop	r28
    19d8:	df 91       	pop	r29
    19da:	1f 91       	pop	r17
    19dc:	0f 91       	pop	r16
    19de:	08 95       	ret

000019e0 <vfprintf>:
    19e0:	2f 92       	push	r2
    19e2:	3f 92       	push	r3
    19e4:	4f 92       	push	r4
    19e6:	5f 92       	push	r5
    19e8:	6f 92       	push	r6
    19ea:	7f 92       	push	r7
    19ec:	8f 92       	push	r8
    19ee:	9f 92       	push	r9
    19f0:	af 92       	push	r10
    19f2:	bf 92       	push	r11
    19f4:	cf 92       	push	r12
    19f6:	df 92       	push	r13
    19f8:	ef 92       	push	r14
    19fa:	ff 92       	push	r15
    19fc:	0f 93       	push	r16
    19fe:	1f 93       	push	r17
    1a00:	df 93       	push	r29
    1a02:	cf 93       	push	r28
    1a04:	cd b7       	in	r28, 0x3d	; 61
    1a06:	de b7       	in	r29, 0x3e	; 62
    1a08:	2c 97       	sbiw	r28, 0x0c	; 12
    1a0a:	0f b6       	in	r0, 0x3f	; 63
    1a0c:	f8 94       	cli
    1a0e:	de bf       	out	0x3e, r29	; 62
    1a10:	0f be       	out	0x3f, r0	; 63
    1a12:	cd bf       	out	0x3d, r28	; 61
    1a14:	6c 01       	movw	r12, r24
    1a16:	1b 01       	movw	r2, r22
    1a18:	8a 01       	movw	r16, r20
    1a1a:	fc 01       	movw	r30, r24
    1a1c:	17 82       	std	Z+7, r1	; 0x07
    1a1e:	16 82       	std	Z+6, r1	; 0x06
    1a20:	83 81       	ldd	r24, Z+3	; 0x03
    1a22:	81 ff       	sbrs	r24, 1
    1a24:	d1 c1       	rjmp	.+930    	; 0x1dc8 <vfprintf+0x3e8>
    1a26:	2e 01       	movw	r4, r28
    1a28:	08 94       	sec
    1a2a:	41 1c       	adc	r4, r1
    1a2c:	51 1c       	adc	r5, r1
    1a2e:	f6 01       	movw	r30, r12
    1a30:	93 81       	ldd	r25, Z+3	; 0x03
    1a32:	f1 01       	movw	r30, r2
    1a34:	93 fd       	sbrc	r25, 3
    1a36:	85 91       	lpm	r24, Z+
    1a38:	93 ff       	sbrs	r25, 3
    1a3a:	81 91       	ld	r24, Z+
    1a3c:	1f 01       	movw	r2, r30
    1a3e:	88 23       	and	r24, r24
    1a40:	09 f4       	brne	.+2      	; 0x1a44 <vfprintf+0x64>
    1a42:	be c1       	rjmp	.+892    	; 0x1dc0 <vfprintf+0x3e0>
    1a44:	85 32       	cpi	r24, 0x25	; 37
    1a46:	39 f4       	brne	.+14     	; 0x1a56 <vfprintf+0x76>
    1a48:	93 fd       	sbrc	r25, 3
    1a4a:	85 91       	lpm	r24, Z+
    1a4c:	93 ff       	sbrs	r25, 3
    1a4e:	81 91       	ld	r24, Z+
    1a50:	1f 01       	movw	r2, r30
    1a52:	85 32       	cpi	r24, 0x25	; 37
    1a54:	29 f4       	brne	.+10     	; 0x1a60 <vfprintf+0x80>
    1a56:	90 e0       	ldi	r25, 0x00	; 0
    1a58:	b6 01       	movw	r22, r12
    1a5a:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <fputc>
    1a5e:	e7 cf       	rjmp	.-50     	; 0x1a2e <vfprintf+0x4e>
    1a60:	ee 24       	eor	r14, r14
    1a62:	ff 24       	eor	r15, r15
    1a64:	20 e0       	ldi	r18, 0x00	; 0
    1a66:	20 32       	cpi	r18, 0x20	; 32
    1a68:	b0 f4       	brcc	.+44     	; 0x1a96 <vfprintf+0xb6>
    1a6a:	8b 32       	cpi	r24, 0x2B	; 43
    1a6c:	69 f0       	breq	.+26     	; 0x1a88 <vfprintf+0xa8>
    1a6e:	8c 32       	cpi	r24, 0x2C	; 44
    1a70:	28 f4       	brcc	.+10     	; 0x1a7c <vfprintf+0x9c>
    1a72:	80 32       	cpi	r24, 0x20	; 32
    1a74:	51 f0       	breq	.+20     	; 0x1a8a <vfprintf+0xaa>
    1a76:	83 32       	cpi	r24, 0x23	; 35
    1a78:	71 f4       	brne	.+28     	; 0x1a96 <vfprintf+0xb6>
    1a7a:	0b c0       	rjmp	.+22     	; 0x1a92 <vfprintf+0xb2>
    1a7c:	8d 32       	cpi	r24, 0x2D	; 45
    1a7e:	39 f0       	breq	.+14     	; 0x1a8e <vfprintf+0xae>
    1a80:	80 33       	cpi	r24, 0x30	; 48
    1a82:	49 f4       	brne	.+18     	; 0x1a96 <vfprintf+0xb6>
    1a84:	21 60       	ori	r18, 0x01	; 1
    1a86:	2c c0       	rjmp	.+88     	; 0x1ae0 <vfprintf+0x100>
    1a88:	22 60       	ori	r18, 0x02	; 2
    1a8a:	24 60       	ori	r18, 0x04	; 4
    1a8c:	29 c0       	rjmp	.+82     	; 0x1ae0 <vfprintf+0x100>
    1a8e:	28 60       	ori	r18, 0x08	; 8
    1a90:	27 c0       	rjmp	.+78     	; 0x1ae0 <vfprintf+0x100>
    1a92:	20 61       	ori	r18, 0x10	; 16
    1a94:	25 c0       	rjmp	.+74     	; 0x1ae0 <vfprintf+0x100>
    1a96:	27 fd       	sbrc	r18, 7
    1a98:	2c c0       	rjmp	.+88     	; 0x1af2 <vfprintf+0x112>
    1a9a:	38 2f       	mov	r19, r24
    1a9c:	30 53       	subi	r19, 0x30	; 48
    1a9e:	3a 30       	cpi	r19, 0x0A	; 10
    1aa0:	98 f4       	brcc	.+38     	; 0x1ac8 <vfprintf+0xe8>
    1aa2:	26 ff       	sbrs	r18, 6
    1aa4:	08 c0       	rjmp	.+16     	; 0x1ab6 <vfprintf+0xd6>
    1aa6:	8e 2d       	mov	r24, r14
    1aa8:	88 0f       	add	r24, r24
    1aaa:	e8 2e       	mov	r14, r24
    1aac:	ee 0c       	add	r14, r14
    1aae:	ee 0c       	add	r14, r14
    1ab0:	e8 0e       	add	r14, r24
    1ab2:	e3 0e       	add	r14, r19
    1ab4:	15 c0       	rjmp	.+42     	; 0x1ae0 <vfprintf+0x100>
    1ab6:	8f 2d       	mov	r24, r15
    1ab8:	88 0f       	add	r24, r24
    1aba:	f8 2e       	mov	r15, r24
    1abc:	ff 0c       	add	r15, r15
    1abe:	ff 0c       	add	r15, r15
    1ac0:	f8 0e       	add	r15, r24
    1ac2:	f3 0e       	add	r15, r19
    1ac4:	20 62       	ori	r18, 0x20	; 32
    1ac6:	0c c0       	rjmp	.+24     	; 0x1ae0 <vfprintf+0x100>
    1ac8:	8e 32       	cpi	r24, 0x2E	; 46
    1aca:	21 f4       	brne	.+8      	; 0x1ad4 <vfprintf+0xf4>
    1acc:	26 fd       	sbrc	r18, 6
    1ace:	78 c1       	rjmp	.+752    	; 0x1dc0 <vfprintf+0x3e0>
    1ad0:	20 64       	ori	r18, 0x40	; 64
    1ad2:	06 c0       	rjmp	.+12     	; 0x1ae0 <vfprintf+0x100>
    1ad4:	8c 36       	cpi	r24, 0x6C	; 108
    1ad6:	11 f4       	brne	.+4      	; 0x1adc <vfprintf+0xfc>
    1ad8:	20 68       	ori	r18, 0x80	; 128
    1ada:	02 c0       	rjmp	.+4      	; 0x1ae0 <vfprintf+0x100>
    1adc:	88 36       	cpi	r24, 0x68	; 104
    1ade:	49 f4       	brne	.+18     	; 0x1af2 <vfprintf+0x112>
    1ae0:	f1 01       	movw	r30, r2
    1ae2:	93 fd       	sbrc	r25, 3
    1ae4:	85 91       	lpm	r24, Z+
    1ae6:	93 ff       	sbrs	r25, 3
    1ae8:	81 91       	ld	r24, Z+
    1aea:	1f 01       	movw	r2, r30
    1aec:	88 23       	and	r24, r24
    1aee:	09 f0       	breq	.+2      	; 0x1af2 <vfprintf+0x112>
    1af0:	ba cf       	rjmp	.-140    	; 0x1a66 <vfprintf+0x86>
    1af2:	98 2f       	mov	r25, r24
    1af4:	95 54       	subi	r25, 0x45	; 69
    1af6:	93 30       	cpi	r25, 0x03	; 3
    1af8:	18 f0       	brcs	.+6      	; 0x1b00 <vfprintf+0x120>
    1afa:	90 52       	subi	r25, 0x20	; 32
    1afc:	93 30       	cpi	r25, 0x03	; 3
    1afe:	28 f4       	brcc	.+10     	; 0x1b0a <vfprintf+0x12a>
    1b00:	0c 5f       	subi	r16, 0xFC	; 252
    1b02:	1f 4f       	sbci	r17, 0xFF	; 255
    1b04:	ff e3       	ldi	r31, 0x3F	; 63
    1b06:	f9 83       	std	Y+1, r31	; 0x01
    1b08:	0d c0       	rjmp	.+26     	; 0x1b24 <vfprintf+0x144>
    1b0a:	83 36       	cpi	r24, 0x63	; 99
    1b0c:	31 f0       	breq	.+12     	; 0x1b1a <vfprintf+0x13a>
    1b0e:	83 37       	cpi	r24, 0x73	; 115
    1b10:	71 f0       	breq	.+28     	; 0x1b2e <vfprintf+0x14e>
    1b12:	83 35       	cpi	r24, 0x53	; 83
    1b14:	09 f0       	breq	.+2      	; 0x1b18 <vfprintf+0x138>
    1b16:	60 c0       	rjmp	.+192    	; 0x1bd8 <vfprintf+0x1f8>
    1b18:	22 c0       	rjmp	.+68     	; 0x1b5e <vfprintf+0x17e>
    1b1a:	f8 01       	movw	r30, r16
    1b1c:	80 81       	ld	r24, Z
    1b1e:	89 83       	std	Y+1, r24	; 0x01
    1b20:	0e 5f       	subi	r16, 0xFE	; 254
    1b22:	1f 4f       	sbci	r17, 0xFF	; 255
    1b24:	42 01       	movw	r8, r4
    1b26:	71 e0       	ldi	r23, 0x01	; 1
    1b28:	a7 2e       	mov	r10, r23
    1b2a:	b1 2c       	mov	r11, r1
    1b2c:	16 c0       	rjmp	.+44     	; 0x1b5a <vfprintf+0x17a>
    1b2e:	62 e0       	ldi	r22, 0x02	; 2
    1b30:	66 2e       	mov	r6, r22
    1b32:	71 2c       	mov	r7, r1
    1b34:	60 0e       	add	r6, r16
    1b36:	71 1e       	adc	r7, r17
    1b38:	f8 01       	movw	r30, r16
    1b3a:	80 80       	ld	r8, Z
    1b3c:	91 80       	ldd	r9, Z+1	; 0x01
    1b3e:	26 ff       	sbrs	r18, 6
    1b40:	03 c0       	rjmp	.+6      	; 0x1b48 <vfprintf+0x168>
    1b42:	6e 2d       	mov	r22, r14
    1b44:	70 e0       	ldi	r23, 0x00	; 0
    1b46:	02 c0       	rjmp	.+4      	; 0x1b4c <vfprintf+0x16c>
    1b48:	6f ef       	ldi	r22, 0xFF	; 255
    1b4a:	7f ef       	ldi	r23, 0xFF	; 255
    1b4c:	c4 01       	movw	r24, r8
    1b4e:	2c 87       	std	Y+12, r18	; 0x0c
    1b50:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <strnlen>
    1b54:	5c 01       	movw	r10, r24
    1b56:	83 01       	movw	r16, r6
    1b58:	2c 85       	ldd	r18, Y+12	; 0x0c
    1b5a:	2f 77       	andi	r18, 0x7F	; 127
    1b5c:	17 c0       	rjmp	.+46     	; 0x1b8c <vfprintf+0x1ac>
    1b5e:	52 e0       	ldi	r21, 0x02	; 2
    1b60:	65 2e       	mov	r6, r21
    1b62:	71 2c       	mov	r7, r1
    1b64:	60 0e       	add	r6, r16
    1b66:	71 1e       	adc	r7, r17
    1b68:	f8 01       	movw	r30, r16
    1b6a:	80 80       	ld	r8, Z
    1b6c:	91 80       	ldd	r9, Z+1	; 0x01
    1b6e:	26 ff       	sbrs	r18, 6
    1b70:	03 c0       	rjmp	.+6      	; 0x1b78 <vfprintf+0x198>
    1b72:	6e 2d       	mov	r22, r14
    1b74:	70 e0       	ldi	r23, 0x00	; 0
    1b76:	02 c0       	rjmp	.+4      	; 0x1b7c <vfprintf+0x19c>
    1b78:	6f ef       	ldi	r22, 0xFF	; 255
    1b7a:	7f ef       	ldi	r23, 0xFF	; 255
    1b7c:	c4 01       	movw	r24, r8
    1b7e:	2c 87       	std	Y+12, r18	; 0x0c
    1b80:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <strnlen_P>
    1b84:	5c 01       	movw	r10, r24
    1b86:	2c 85       	ldd	r18, Y+12	; 0x0c
    1b88:	20 68       	ori	r18, 0x80	; 128
    1b8a:	83 01       	movw	r16, r6
    1b8c:	23 fd       	sbrc	r18, 3
    1b8e:	20 c0       	rjmp	.+64     	; 0x1bd0 <vfprintf+0x1f0>
    1b90:	08 c0       	rjmp	.+16     	; 0x1ba2 <vfprintf+0x1c2>
    1b92:	80 e2       	ldi	r24, 0x20	; 32
    1b94:	90 e0       	ldi	r25, 0x00	; 0
    1b96:	b6 01       	movw	r22, r12
    1b98:	2c 87       	std	Y+12, r18	; 0x0c
    1b9a:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <fputc>
    1b9e:	fa 94       	dec	r15
    1ba0:	2c 85       	ldd	r18, Y+12	; 0x0c
    1ba2:	8f 2d       	mov	r24, r15
    1ba4:	90 e0       	ldi	r25, 0x00	; 0
    1ba6:	a8 16       	cp	r10, r24
    1ba8:	b9 06       	cpc	r11, r25
    1baa:	98 f3       	brcs	.-26     	; 0x1b92 <vfprintf+0x1b2>
    1bac:	11 c0       	rjmp	.+34     	; 0x1bd0 <vfprintf+0x1f0>
    1bae:	f4 01       	movw	r30, r8
    1bb0:	27 fd       	sbrc	r18, 7
    1bb2:	85 91       	lpm	r24, Z+
    1bb4:	27 ff       	sbrs	r18, 7
    1bb6:	81 91       	ld	r24, Z+
    1bb8:	4f 01       	movw	r8, r30
    1bba:	90 e0       	ldi	r25, 0x00	; 0
    1bbc:	b6 01       	movw	r22, r12
    1bbe:	2c 87       	std	Y+12, r18	; 0x0c
    1bc0:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <fputc>
    1bc4:	2c 85       	ldd	r18, Y+12	; 0x0c
    1bc6:	f1 10       	cpse	r15, r1
    1bc8:	fa 94       	dec	r15
    1bca:	08 94       	sec
    1bcc:	a1 08       	sbc	r10, r1
    1bce:	b1 08       	sbc	r11, r1
    1bd0:	a1 14       	cp	r10, r1
    1bd2:	b1 04       	cpc	r11, r1
    1bd4:	61 f7       	brne	.-40     	; 0x1bae <vfprintf+0x1ce>
    1bd6:	f1 c0       	rjmp	.+482    	; 0x1dba <vfprintf+0x3da>
    1bd8:	84 36       	cpi	r24, 0x64	; 100
    1bda:	11 f0       	breq	.+4      	; 0x1be0 <vfprintf+0x200>
    1bdc:	89 36       	cpi	r24, 0x69	; 105
    1bde:	49 f5       	brne	.+82     	; 0x1c32 <vfprintf+0x252>
    1be0:	27 ff       	sbrs	r18, 7
    1be2:	08 c0       	rjmp	.+16     	; 0x1bf4 <vfprintf+0x214>
    1be4:	f8 01       	movw	r30, r16
    1be6:	60 81       	ld	r22, Z
    1be8:	71 81       	ldd	r23, Z+1	; 0x01
    1bea:	82 81       	ldd	r24, Z+2	; 0x02
    1bec:	93 81       	ldd	r25, Z+3	; 0x03
    1bee:	0c 5f       	subi	r16, 0xFC	; 252
    1bf0:	1f 4f       	sbci	r17, 0xFF	; 255
    1bf2:	09 c0       	rjmp	.+18     	; 0x1c06 <vfprintf+0x226>
    1bf4:	f8 01       	movw	r30, r16
    1bf6:	60 81       	ld	r22, Z
    1bf8:	71 81       	ldd	r23, Z+1	; 0x01
    1bfa:	88 27       	eor	r24, r24
    1bfc:	77 fd       	sbrc	r23, 7
    1bfe:	80 95       	com	r24
    1c00:	98 2f       	mov	r25, r24
    1c02:	0e 5f       	subi	r16, 0xFE	; 254
    1c04:	1f 4f       	sbci	r17, 0xFF	; 255
    1c06:	4f e6       	ldi	r20, 0x6F	; 111
    1c08:	b4 2e       	mov	r11, r20
    1c0a:	b2 22       	and	r11, r18
    1c0c:	97 ff       	sbrs	r25, 7
    1c0e:	09 c0       	rjmp	.+18     	; 0x1c22 <vfprintf+0x242>
    1c10:	90 95       	com	r25
    1c12:	80 95       	com	r24
    1c14:	70 95       	com	r23
    1c16:	61 95       	neg	r22
    1c18:	7f 4f       	sbci	r23, 0xFF	; 255
    1c1a:	8f 4f       	sbci	r24, 0xFF	; 255
    1c1c:	9f 4f       	sbci	r25, 0xFF	; 255
    1c1e:	f0 e8       	ldi	r31, 0x80	; 128
    1c20:	bf 2a       	or	r11, r31
    1c22:	a2 01       	movw	r20, r4
    1c24:	2a e0       	ldi	r18, 0x0A	; 10
    1c26:	30 e0       	ldi	r19, 0x00	; 0
    1c28:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <__ultoa_invert>
    1c2c:	78 2e       	mov	r7, r24
    1c2e:	74 18       	sub	r7, r4
    1c30:	45 c0       	rjmp	.+138    	; 0x1cbc <vfprintf+0x2dc>
    1c32:	85 37       	cpi	r24, 0x75	; 117
    1c34:	31 f4       	brne	.+12     	; 0x1c42 <vfprintf+0x262>
    1c36:	3f ee       	ldi	r19, 0xEF	; 239
    1c38:	b3 2e       	mov	r11, r19
    1c3a:	b2 22       	and	r11, r18
    1c3c:	2a e0       	ldi	r18, 0x0A	; 10
    1c3e:	30 e0       	ldi	r19, 0x00	; 0
    1c40:	25 c0       	rjmp	.+74     	; 0x1c8c <vfprintf+0x2ac>
    1c42:	99 ef       	ldi	r25, 0xF9	; 249
    1c44:	b9 2e       	mov	r11, r25
    1c46:	b2 22       	and	r11, r18
    1c48:	8f 36       	cpi	r24, 0x6F	; 111
    1c4a:	c1 f0       	breq	.+48     	; 0x1c7c <vfprintf+0x29c>
    1c4c:	80 37       	cpi	r24, 0x70	; 112
    1c4e:	20 f4       	brcc	.+8      	; 0x1c58 <vfprintf+0x278>
    1c50:	88 35       	cpi	r24, 0x58	; 88
    1c52:	09 f0       	breq	.+2      	; 0x1c56 <vfprintf+0x276>
    1c54:	b5 c0       	rjmp	.+362    	; 0x1dc0 <vfprintf+0x3e0>
    1c56:	0d c0       	rjmp	.+26     	; 0x1c72 <vfprintf+0x292>
    1c58:	80 37       	cpi	r24, 0x70	; 112
    1c5a:	21 f0       	breq	.+8      	; 0x1c64 <vfprintf+0x284>
    1c5c:	88 37       	cpi	r24, 0x78	; 120
    1c5e:	09 f0       	breq	.+2      	; 0x1c62 <vfprintf+0x282>
    1c60:	af c0       	rjmp	.+350    	; 0x1dc0 <vfprintf+0x3e0>
    1c62:	02 c0       	rjmp	.+4      	; 0x1c68 <vfprintf+0x288>
    1c64:	20 e1       	ldi	r18, 0x10	; 16
    1c66:	b2 2a       	or	r11, r18
    1c68:	b4 fe       	sbrs	r11, 4
    1c6a:	0b c0       	rjmp	.+22     	; 0x1c82 <vfprintf+0x2a2>
    1c6c:	84 e0       	ldi	r24, 0x04	; 4
    1c6e:	b8 2a       	or	r11, r24
    1c70:	08 c0       	rjmp	.+16     	; 0x1c82 <vfprintf+0x2a2>
    1c72:	b4 fe       	sbrs	r11, 4
    1c74:	09 c0       	rjmp	.+18     	; 0x1c88 <vfprintf+0x2a8>
    1c76:	e6 e0       	ldi	r30, 0x06	; 6
    1c78:	be 2a       	or	r11, r30
    1c7a:	06 c0       	rjmp	.+12     	; 0x1c88 <vfprintf+0x2a8>
    1c7c:	28 e0       	ldi	r18, 0x08	; 8
    1c7e:	30 e0       	ldi	r19, 0x00	; 0
    1c80:	05 c0       	rjmp	.+10     	; 0x1c8c <vfprintf+0x2ac>
    1c82:	20 e1       	ldi	r18, 0x10	; 16
    1c84:	30 e0       	ldi	r19, 0x00	; 0
    1c86:	02 c0       	rjmp	.+4      	; 0x1c8c <vfprintf+0x2ac>
    1c88:	20 e1       	ldi	r18, 0x10	; 16
    1c8a:	32 e0       	ldi	r19, 0x02	; 2
    1c8c:	b7 fe       	sbrs	r11, 7
    1c8e:	08 c0       	rjmp	.+16     	; 0x1ca0 <vfprintf+0x2c0>
    1c90:	f8 01       	movw	r30, r16
    1c92:	60 81       	ld	r22, Z
    1c94:	71 81       	ldd	r23, Z+1	; 0x01
    1c96:	82 81       	ldd	r24, Z+2	; 0x02
    1c98:	93 81       	ldd	r25, Z+3	; 0x03
    1c9a:	0c 5f       	subi	r16, 0xFC	; 252
    1c9c:	1f 4f       	sbci	r17, 0xFF	; 255
    1c9e:	07 c0       	rjmp	.+14     	; 0x1cae <vfprintf+0x2ce>
    1ca0:	f8 01       	movw	r30, r16
    1ca2:	60 81       	ld	r22, Z
    1ca4:	71 81       	ldd	r23, Z+1	; 0x01
    1ca6:	80 e0       	ldi	r24, 0x00	; 0
    1ca8:	90 e0       	ldi	r25, 0x00	; 0
    1caa:	0e 5f       	subi	r16, 0xFE	; 254
    1cac:	1f 4f       	sbci	r17, 0xFF	; 255
    1cae:	a2 01       	movw	r20, r4
    1cb0:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <__ultoa_invert>
    1cb4:	78 2e       	mov	r7, r24
    1cb6:	74 18       	sub	r7, r4
    1cb8:	ff e7       	ldi	r31, 0x7F	; 127
    1cba:	bf 22       	and	r11, r31
    1cbc:	b6 fe       	sbrs	r11, 6
    1cbe:	0b c0       	rjmp	.+22     	; 0x1cd6 <vfprintf+0x2f6>
    1cc0:	2e ef       	ldi	r18, 0xFE	; 254
    1cc2:	b2 22       	and	r11, r18
    1cc4:	7e 14       	cp	r7, r14
    1cc6:	38 f4       	brcc	.+14     	; 0x1cd6 <vfprintf+0x2f6>
    1cc8:	b4 fe       	sbrs	r11, 4
    1cca:	07 c0       	rjmp	.+14     	; 0x1cda <vfprintf+0x2fa>
    1ccc:	b2 fc       	sbrc	r11, 2
    1cce:	05 c0       	rjmp	.+10     	; 0x1cda <vfprintf+0x2fa>
    1cd0:	8f ee       	ldi	r24, 0xEF	; 239
    1cd2:	b8 22       	and	r11, r24
    1cd4:	02 c0       	rjmp	.+4      	; 0x1cda <vfprintf+0x2fa>
    1cd6:	a7 2c       	mov	r10, r7
    1cd8:	01 c0       	rjmp	.+2      	; 0x1cdc <vfprintf+0x2fc>
    1cda:	ae 2c       	mov	r10, r14
    1cdc:	8b 2d       	mov	r24, r11
    1cde:	90 e0       	ldi	r25, 0x00	; 0
    1ce0:	b4 fe       	sbrs	r11, 4
    1ce2:	0d c0       	rjmp	.+26     	; 0x1cfe <vfprintf+0x31e>
    1ce4:	fe 01       	movw	r30, r28
    1ce6:	e7 0d       	add	r30, r7
    1ce8:	f1 1d       	adc	r31, r1
    1cea:	20 81       	ld	r18, Z
    1cec:	20 33       	cpi	r18, 0x30	; 48
    1cee:	19 f4       	brne	.+6      	; 0x1cf6 <vfprintf+0x316>
    1cf0:	e9 ee       	ldi	r30, 0xE9	; 233
    1cf2:	be 22       	and	r11, r30
    1cf4:	09 c0       	rjmp	.+18     	; 0x1d08 <vfprintf+0x328>
    1cf6:	a3 94       	inc	r10
    1cf8:	b2 fe       	sbrs	r11, 2
    1cfa:	06 c0       	rjmp	.+12     	; 0x1d08 <vfprintf+0x328>
    1cfc:	04 c0       	rjmp	.+8      	; 0x1d06 <vfprintf+0x326>
    1cfe:	86 78       	andi	r24, 0x86	; 134
    1d00:	90 70       	andi	r25, 0x00	; 0
    1d02:	00 97       	sbiw	r24, 0x00	; 0
    1d04:	09 f0       	breq	.+2      	; 0x1d08 <vfprintf+0x328>
    1d06:	a3 94       	inc	r10
    1d08:	8b 2c       	mov	r8, r11
    1d0a:	99 24       	eor	r9, r9
    1d0c:	b3 fc       	sbrc	r11, 3
    1d0e:	14 c0       	rjmp	.+40     	; 0x1d38 <vfprintf+0x358>
    1d10:	b0 fe       	sbrs	r11, 0
    1d12:	0f c0       	rjmp	.+30     	; 0x1d32 <vfprintf+0x352>
    1d14:	af 14       	cp	r10, r15
    1d16:	28 f4       	brcc	.+10     	; 0x1d22 <vfprintf+0x342>
    1d18:	e7 2c       	mov	r14, r7
    1d1a:	ef 0c       	add	r14, r15
    1d1c:	ea 18       	sub	r14, r10
    1d1e:	af 2c       	mov	r10, r15
    1d20:	08 c0       	rjmp	.+16     	; 0x1d32 <vfprintf+0x352>
    1d22:	e7 2c       	mov	r14, r7
    1d24:	06 c0       	rjmp	.+12     	; 0x1d32 <vfprintf+0x352>
    1d26:	80 e2       	ldi	r24, 0x20	; 32
    1d28:	90 e0       	ldi	r25, 0x00	; 0
    1d2a:	b6 01       	movw	r22, r12
    1d2c:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <fputc>
    1d30:	a3 94       	inc	r10
    1d32:	af 14       	cp	r10, r15
    1d34:	c0 f3       	brcs	.-16     	; 0x1d26 <vfprintf+0x346>
    1d36:	04 c0       	rjmp	.+8      	; 0x1d40 <vfprintf+0x360>
    1d38:	af 14       	cp	r10, r15
    1d3a:	10 f4       	brcc	.+4      	; 0x1d40 <vfprintf+0x360>
    1d3c:	fa 18       	sub	r15, r10
    1d3e:	01 c0       	rjmp	.+2      	; 0x1d42 <vfprintf+0x362>
    1d40:	ff 24       	eor	r15, r15
    1d42:	84 fe       	sbrs	r8, 4
    1d44:	0f c0       	rjmp	.+30     	; 0x1d64 <vfprintf+0x384>
    1d46:	80 e3       	ldi	r24, 0x30	; 48
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	b6 01       	movw	r22, r12
    1d4c:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <fputc>
    1d50:	82 fe       	sbrs	r8, 2
    1d52:	1f c0       	rjmp	.+62     	; 0x1d92 <vfprintf+0x3b2>
    1d54:	81 fe       	sbrs	r8, 1
    1d56:	03 c0       	rjmp	.+6      	; 0x1d5e <vfprintf+0x37e>
    1d58:	88 e5       	ldi	r24, 0x58	; 88
    1d5a:	90 e0       	ldi	r25, 0x00	; 0
    1d5c:	10 c0       	rjmp	.+32     	; 0x1d7e <vfprintf+0x39e>
    1d5e:	88 e7       	ldi	r24, 0x78	; 120
    1d60:	90 e0       	ldi	r25, 0x00	; 0
    1d62:	0d c0       	rjmp	.+26     	; 0x1d7e <vfprintf+0x39e>
    1d64:	c4 01       	movw	r24, r8
    1d66:	86 78       	andi	r24, 0x86	; 134
    1d68:	90 70       	andi	r25, 0x00	; 0
    1d6a:	00 97       	sbiw	r24, 0x00	; 0
    1d6c:	91 f0       	breq	.+36     	; 0x1d92 <vfprintf+0x3b2>
    1d6e:	81 fc       	sbrc	r8, 1
    1d70:	02 c0       	rjmp	.+4      	; 0x1d76 <vfprintf+0x396>
    1d72:	80 e2       	ldi	r24, 0x20	; 32
    1d74:	01 c0       	rjmp	.+2      	; 0x1d78 <vfprintf+0x398>
    1d76:	8b e2       	ldi	r24, 0x2B	; 43
    1d78:	b7 fc       	sbrc	r11, 7
    1d7a:	8d e2       	ldi	r24, 0x2D	; 45
    1d7c:	90 e0       	ldi	r25, 0x00	; 0
    1d7e:	b6 01       	movw	r22, r12
    1d80:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <fputc>
    1d84:	06 c0       	rjmp	.+12     	; 0x1d92 <vfprintf+0x3b2>
    1d86:	80 e3       	ldi	r24, 0x30	; 48
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	b6 01       	movw	r22, r12
    1d8c:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <fputc>
    1d90:	ea 94       	dec	r14
    1d92:	7e 14       	cp	r7, r14
    1d94:	c0 f3       	brcs	.-16     	; 0x1d86 <vfprintf+0x3a6>
    1d96:	7a 94       	dec	r7
    1d98:	f2 01       	movw	r30, r4
    1d9a:	e7 0d       	add	r30, r7
    1d9c:	f1 1d       	adc	r31, r1
    1d9e:	80 81       	ld	r24, Z
    1da0:	90 e0       	ldi	r25, 0x00	; 0
    1da2:	b6 01       	movw	r22, r12
    1da4:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <fputc>
    1da8:	77 20       	and	r7, r7
    1daa:	a9 f7       	brne	.-22     	; 0x1d96 <vfprintf+0x3b6>
    1dac:	06 c0       	rjmp	.+12     	; 0x1dba <vfprintf+0x3da>
    1dae:	80 e2       	ldi	r24, 0x20	; 32
    1db0:	90 e0       	ldi	r25, 0x00	; 0
    1db2:	b6 01       	movw	r22, r12
    1db4:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <fputc>
    1db8:	fa 94       	dec	r15
    1dba:	ff 20       	and	r15, r15
    1dbc:	c1 f7       	brne	.-16     	; 0x1dae <vfprintf+0x3ce>
    1dbe:	37 ce       	rjmp	.-914    	; 0x1a2e <vfprintf+0x4e>
    1dc0:	f6 01       	movw	r30, r12
    1dc2:	26 81       	ldd	r18, Z+6	; 0x06
    1dc4:	37 81       	ldd	r19, Z+7	; 0x07
    1dc6:	02 c0       	rjmp	.+4      	; 0x1dcc <vfprintf+0x3ec>
    1dc8:	2f ef       	ldi	r18, 0xFF	; 255
    1dca:	3f ef       	ldi	r19, 0xFF	; 255
    1dcc:	c9 01       	movw	r24, r18
    1dce:	2c 96       	adiw	r28, 0x0c	; 12
    1dd0:	0f b6       	in	r0, 0x3f	; 63
    1dd2:	f8 94       	cli
    1dd4:	de bf       	out	0x3e, r29	; 62
    1dd6:	0f be       	out	0x3f, r0	; 63
    1dd8:	cd bf       	out	0x3d, r28	; 61
    1dda:	cf 91       	pop	r28
    1ddc:	df 91       	pop	r29
    1dde:	1f 91       	pop	r17
    1de0:	0f 91       	pop	r16
    1de2:	ff 90       	pop	r15
    1de4:	ef 90       	pop	r14
    1de6:	df 90       	pop	r13
    1de8:	cf 90       	pop	r12
    1dea:	bf 90       	pop	r11
    1dec:	af 90       	pop	r10
    1dee:	9f 90       	pop	r9
    1df0:	8f 90       	pop	r8
    1df2:	7f 90       	pop	r7
    1df4:	6f 90       	pop	r6
    1df6:	5f 90       	pop	r5
    1df8:	4f 90       	pop	r4
    1dfa:	3f 90       	pop	r3
    1dfc:	2f 90       	pop	r2
    1dfe:	08 95       	ret

00001e00 <strnlen_P>:
    1e00:	fc 01       	movw	r30, r24
    1e02:	05 90       	lpm	r0, Z+
    1e04:	61 50       	subi	r22, 0x01	; 1
    1e06:	70 40       	sbci	r23, 0x00	; 0
    1e08:	01 10       	cpse	r0, r1
    1e0a:	d8 f7       	brcc	.-10     	; 0x1e02 <strnlen_P+0x2>
    1e0c:	80 95       	com	r24
    1e0e:	90 95       	com	r25
    1e10:	8e 0f       	add	r24, r30
    1e12:	9f 1f       	adc	r25, r31
    1e14:	08 95       	ret

00001e16 <strnlen>:
    1e16:	fc 01       	movw	r30, r24
    1e18:	61 50       	subi	r22, 0x01	; 1
    1e1a:	70 40       	sbci	r23, 0x00	; 0
    1e1c:	01 90       	ld	r0, Z+
    1e1e:	01 10       	cpse	r0, r1
    1e20:	d8 f7       	brcc	.-10     	; 0x1e18 <strnlen+0x2>
    1e22:	80 95       	com	r24
    1e24:	90 95       	com	r25
    1e26:	8e 0f       	add	r24, r30
    1e28:	9f 1f       	adc	r25, r31
    1e2a:	08 95       	ret

00001e2c <fputc>:
    1e2c:	0f 93       	push	r16
    1e2e:	1f 93       	push	r17
    1e30:	cf 93       	push	r28
    1e32:	df 93       	push	r29
    1e34:	8c 01       	movw	r16, r24
    1e36:	eb 01       	movw	r28, r22
    1e38:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3a:	81 ff       	sbrs	r24, 1
    1e3c:	1b c0       	rjmp	.+54     	; 0x1e74 <fputc+0x48>
    1e3e:	82 ff       	sbrs	r24, 2
    1e40:	0d c0       	rjmp	.+26     	; 0x1e5c <fputc+0x30>
    1e42:	2e 81       	ldd	r18, Y+6	; 0x06
    1e44:	3f 81       	ldd	r19, Y+7	; 0x07
    1e46:	8c 81       	ldd	r24, Y+4	; 0x04
    1e48:	9d 81       	ldd	r25, Y+5	; 0x05
    1e4a:	28 17       	cp	r18, r24
    1e4c:	39 07       	cpc	r19, r25
    1e4e:	64 f4       	brge	.+24     	; 0x1e68 <fputc+0x3c>
    1e50:	e8 81       	ld	r30, Y
    1e52:	f9 81       	ldd	r31, Y+1	; 0x01
    1e54:	01 93       	st	Z+, r16
    1e56:	f9 83       	std	Y+1, r31	; 0x01
    1e58:	e8 83       	st	Y, r30
    1e5a:	06 c0       	rjmp	.+12     	; 0x1e68 <fputc+0x3c>
    1e5c:	e8 85       	ldd	r30, Y+8	; 0x08
    1e5e:	f9 85       	ldd	r31, Y+9	; 0x09
    1e60:	80 2f       	mov	r24, r16
    1e62:	09 95       	icall
    1e64:	00 97       	sbiw	r24, 0x00	; 0
    1e66:	31 f4       	brne	.+12     	; 0x1e74 <fputc+0x48>
    1e68:	8e 81       	ldd	r24, Y+6	; 0x06
    1e6a:	9f 81       	ldd	r25, Y+7	; 0x07
    1e6c:	01 96       	adiw	r24, 0x01	; 1
    1e6e:	9f 83       	std	Y+7, r25	; 0x07
    1e70:	8e 83       	std	Y+6, r24	; 0x06
    1e72:	02 c0       	rjmp	.+4      	; 0x1e78 <fputc+0x4c>
    1e74:	0f ef       	ldi	r16, 0xFF	; 255
    1e76:	1f ef       	ldi	r17, 0xFF	; 255
    1e78:	c8 01       	movw	r24, r16
    1e7a:	df 91       	pop	r29
    1e7c:	cf 91       	pop	r28
    1e7e:	1f 91       	pop	r17
    1e80:	0f 91       	pop	r16
    1e82:	08 95       	ret

00001e84 <__ultoa_invert>:
    1e84:	fa 01       	movw	r30, r20
    1e86:	aa 27       	eor	r26, r26
    1e88:	28 30       	cpi	r18, 0x08	; 8
    1e8a:	51 f1       	breq	.+84     	; 0x1ee0 <__ultoa_invert+0x5c>
    1e8c:	20 31       	cpi	r18, 0x10	; 16
    1e8e:	81 f1       	breq	.+96     	; 0x1ef0 <__ultoa_invert+0x6c>
    1e90:	e8 94       	clt
    1e92:	6f 93       	push	r22
    1e94:	6e 7f       	andi	r22, 0xFE	; 254
    1e96:	6e 5f       	subi	r22, 0xFE	; 254
    1e98:	7f 4f       	sbci	r23, 0xFF	; 255
    1e9a:	8f 4f       	sbci	r24, 0xFF	; 255
    1e9c:	9f 4f       	sbci	r25, 0xFF	; 255
    1e9e:	af 4f       	sbci	r26, 0xFF	; 255
    1ea0:	b1 e0       	ldi	r27, 0x01	; 1
    1ea2:	3e d0       	rcall	.+124    	; 0x1f20 <__ultoa_invert+0x9c>
    1ea4:	b4 e0       	ldi	r27, 0x04	; 4
    1ea6:	3c d0       	rcall	.+120    	; 0x1f20 <__ultoa_invert+0x9c>
    1ea8:	67 0f       	add	r22, r23
    1eaa:	78 1f       	adc	r23, r24
    1eac:	89 1f       	adc	r24, r25
    1eae:	9a 1f       	adc	r25, r26
    1eb0:	a1 1d       	adc	r26, r1
    1eb2:	68 0f       	add	r22, r24
    1eb4:	79 1f       	adc	r23, r25
    1eb6:	8a 1f       	adc	r24, r26
    1eb8:	91 1d       	adc	r25, r1
    1eba:	a1 1d       	adc	r26, r1
    1ebc:	6a 0f       	add	r22, r26
    1ebe:	71 1d       	adc	r23, r1
    1ec0:	81 1d       	adc	r24, r1
    1ec2:	91 1d       	adc	r25, r1
    1ec4:	a1 1d       	adc	r26, r1
    1ec6:	20 d0       	rcall	.+64     	; 0x1f08 <__ultoa_invert+0x84>
    1ec8:	09 f4       	brne	.+2      	; 0x1ecc <__ultoa_invert+0x48>
    1eca:	68 94       	set
    1ecc:	3f 91       	pop	r19
    1ece:	2a e0       	ldi	r18, 0x0A	; 10
    1ed0:	26 9f       	mul	r18, r22
    1ed2:	11 24       	eor	r1, r1
    1ed4:	30 19       	sub	r19, r0
    1ed6:	30 5d       	subi	r19, 0xD0	; 208
    1ed8:	31 93       	st	Z+, r19
    1eda:	de f6       	brtc	.-74     	; 0x1e92 <__ultoa_invert+0xe>
    1edc:	cf 01       	movw	r24, r30
    1ede:	08 95       	ret
    1ee0:	46 2f       	mov	r20, r22
    1ee2:	47 70       	andi	r20, 0x07	; 7
    1ee4:	40 5d       	subi	r20, 0xD0	; 208
    1ee6:	41 93       	st	Z+, r20
    1ee8:	b3 e0       	ldi	r27, 0x03	; 3
    1eea:	0f d0       	rcall	.+30     	; 0x1f0a <__ultoa_invert+0x86>
    1eec:	c9 f7       	brne	.-14     	; 0x1ee0 <__ultoa_invert+0x5c>
    1eee:	f6 cf       	rjmp	.-20     	; 0x1edc <__ultoa_invert+0x58>
    1ef0:	46 2f       	mov	r20, r22
    1ef2:	4f 70       	andi	r20, 0x0F	; 15
    1ef4:	40 5d       	subi	r20, 0xD0	; 208
    1ef6:	4a 33       	cpi	r20, 0x3A	; 58
    1ef8:	18 f0       	brcs	.+6      	; 0x1f00 <__ultoa_invert+0x7c>
    1efa:	49 5d       	subi	r20, 0xD9	; 217
    1efc:	31 fd       	sbrc	r19, 1
    1efe:	40 52       	subi	r20, 0x20	; 32
    1f00:	41 93       	st	Z+, r20
    1f02:	02 d0       	rcall	.+4      	; 0x1f08 <__ultoa_invert+0x84>
    1f04:	a9 f7       	brne	.-22     	; 0x1ef0 <__ultoa_invert+0x6c>
    1f06:	ea cf       	rjmp	.-44     	; 0x1edc <__ultoa_invert+0x58>
    1f08:	b4 e0       	ldi	r27, 0x04	; 4
    1f0a:	a6 95       	lsr	r26
    1f0c:	97 95       	ror	r25
    1f0e:	87 95       	ror	r24
    1f10:	77 95       	ror	r23
    1f12:	67 95       	ror	r22
    1f14:	ba 95       	dec	r27
    1f16:	c9 f7       	brne	.-14     	; 0x1f0a <__ultoa_invert+0x86>
    1f18:	00 97       	sbiw	r24, 0x00	; 0
    1f1a:	61 05       	cpc	r22, r1
    1f1c:	71 05       	cpc	r23, r1
    1f1e:	08 95       	ret
    1f20:	9b 01       	movw	r18, r22
    1f22:	ac 01       	movw	r20, r24
    1f24:	0a 2e       	mov	r0, r26
    1f26:	06 94       	lsr	r0
    1f28:	57 95       	ror	r21
    1f2a:	47 95       	ror	r20
    1f2c:	37 95       	ror	r19
    1f2e:	27 95       	ror	r18
    1f30:	ba 95       	dec	r27
    1f32:	c9 f7       	brne	.-14     	; 0x1f26 <__ultoa_invert+0xa2>
    1f34:	62 0f       	add	r22, r18
    1f36:	73 1f       	adc	r23, r19
    1f38:	84 1f       	adc	r24, r20
    1f3a:	95 1f       	adc	r25, r21
    1f3c:	a0 1d       	adc	r26, r0
    1f3e:	08 95       	ret

00001f40 <_exit>:
    1f40:	f8 94       	cli

00001f42 <__stop_program>:
    1f42:	ff cf       	rjmp	.-2      	; 0x1f42 <__stop_program>
