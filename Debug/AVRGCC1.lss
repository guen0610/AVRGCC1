
AVRGCC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  00000844  000008d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000844  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008a  0080011c  0080011c  000008f4  2**0
                  ALLOC
  3 .stab         00000954  00000000  00000000  000008f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000016e  00000000  00000000  00001248  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000040  00000000  00000000  000013b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001a5  00000000  00000000  000013f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000e25  00000000  00000000  0000159b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000002be  00000000  00000000  000023c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000aab  00000000  00000000  0000267e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000190  00000000  00000000  0000312c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000381  00000000  00000000  000032bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000067c  00000000  00000000  0000363d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000063  00000000  00000000  00003cb9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000058  00000000  00000000  00003d1c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
   8:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
   c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  10:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  14:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  18:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  1c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  20:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  24:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  28:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  2c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  30:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  34:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  38:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  3c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  40:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  44:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  48:	0c 94 41 02 	jmp	0x482	; 0x482 <__vector_18>
  4c:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <__vector_19>
  50:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  54:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  58:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  5c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  60:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  64:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  68:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  6c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  70:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  74:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  78:	0c 94 07 03 	jmp	0x60e	; 0x60e <__vector_30>
  7c:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__vector_31>
  80:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  84:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  88:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>

0000008c <__c.1664>:
  8c:	42 75 66 66 65 72 20 6f 76 65 72 66 6c 6f 77 20     Buffer overflow 
  9c:	65 72 72 6f 72 3a 20 00                             error: .

000000a4 <__c.1662>:
  a4:	55 41 52 54 20 4f 76 65 72 72 75 6e 20 45 72 72     UART Overrun Err
  b4:	6f 72 3a 20 00                                      or: .

000000b9 <__c.1660>:
  b9:	55 41 52 54 20 46 72 61 6d 65 20 45 72 72 6f 72     UART Frame Error
  c9:	3a 20 00                                            : .

000000cc <__c.1658>:
  cc:	53 74 72 69 6e 67 20 73 74 6f 72 65 64 20 69 6e     String stored in
  dc:	20 46 4c 41 53 48 0a 00                              FLASH..

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d0 e1       	ldi	r29, 0x10	; 16
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
  f0:	11 e0       	ldi	r17, 0x01	; 1
  f2:	a0 e0       	ldi	r26, 0x00	; 0
  f4:	b1 e0       	ldi	r27, 0x01	; 1
  f6:	e4 e4       	ldi	r30, 0x44	; 68
  f8:	f8 e0       	ldi	r31, 0x08	; 8
  fa:	00 e0       	ldi	r16, 0x00	; 0
  fc:	0b bf       	out	0x3b, r16	; 59
  fe:	02 c0       	rjmp	.+4      	; 0x104 <__do_copy_data+0x14>
 100:	07 90       	elpm	r0, Z+
 102:	0d 92       	st	X+, r0
 104:	ac 31       	cpi	r26, 0x1C	; 28
 106:	b1 07       	cpc	r27, r17
 108:	d9 f7       	brne	.-10     	; 0x100 <__do_copy_data+0x10>

0000010a <__do_clear_bss>:
 10a:	11 e0       	ldi	r17, 0x01	; 1
 10c:	ac e1       	ldi	r26, 0x1C	; 28
 10e:	b1 e0       	ldi	r27, 0x01	; 1
 110:	01 c0       	rjmp	.+2      	; 0x114 <.do_clear_bss_start>

00000112 <.do_clear_bss_loop>:
 112:	1d 92       	st	X+, r1

00000114 <.do_clear_bss_start>:
 114:	a6 3a       	cpi	r26, 0xA6	; 166
 116:	b1 07       	cpc	r27, r17
 118:	e1 f7       	brne	.-8      	; 0x112 <.do_clear_bss_loop>
 11a:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <main>
 11e:	0c 94 20 04 	jmp	0x840	; 0x840 <_exit>

00000122 <__bad_interrupt>:
 122:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000126 <lcd_write_4>:
  Exit:     no parameters
  Notes:    use either time delays or the busy flag
*/
void lcd_write_4(uint8_t theByte)
{
    lcd_D7_port &= ~(1<<lcd_D7_bit);                        // assume that data is '0'
 126:	af 98       	cbi	0x15, 7	; 21
    if (theByte & 1<<7) lcd_D7_port |= (1<<lcd_D7_bit);     // make data = '1' if necessary
 128:	88 23       	and	r24, r24
 12a:	0c f4       	brge	.+2      	; 0x12e <lcd_write_4+0x8>
 12c:	af 9a       	sbi	0x15, 7	; 21

    lcd_D6_port &= ~(1<<lcd_D6_bit);                        // repeat for each data bit
 12e:	ae 98       	cbi	0x15, 6	; 21
    if (theByte & 1<<6) lcd_D6_port |= (1<<lcd_D6_bit);
 130:	86 fd       	sbrc	r24, 6
 132:	ae 9a       	sbi	0x15, 6	; 21

    lcd_D5_port &= ~(1<<lcd_D5_bit);
 134:	ad 98       	cbi	0x15, 5	; 21
    if (theByte & 1<<5) lcd_D5_port |= (1<<lcd_D5_bit);
 136:	85 fd       	sbrc	r24, 5
 138:	ad 9a       	sbi	0x15, 5	; 21

    lcd_D4_port &= ~(1<<lcd_D4_bit);
 13a:	ac 98       	cbi	0x15, 4	; 21
    if (theByte & 1<<4) lcd_D4_port |= (1<<lcd_D4_bit);
 13c:	84 fd       	sbrc	r24, 4
 13e:	ac 9a       	sbi	0x15, 4	; 21

// write the data
                                                    // 'Address set-up time' (40 nS)
    lcd_E_port |= (1<<lcd_E_bit);                   // Enable pin high
 140:	97 9a       	sbi	0x12, 7	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 142:	82 e0       	ldi	r24, 0x02	; 2
 144:	8a 95       	dec	r24
 146:	f1 f7       	brne	.-4      	; 0x144 <lcd_write_4+0x1e>
 148:	00 c0       	rjmp	.+0      	; 0x14a <lcd_write_4+0x24>
    _delay_us(1);                                   // implement 'Data set-up time' (80 nS) and 'Enable pulse width' (230 nS)
    lcd_E_port &= ~(1<<lcd_E_bit);                  // Enable pin low
 14a:	97 98       	cbi	0x12, 7	; 18
 14c:	82 e0       	ldi	r24, 0x02	; 2
 14e:	8a 95       	dec	r24
 150:	f1 f7       	brne	.-4      	; 0x14e <lcd_write_4+0x28>
 152:	00 c0       	rjmp	.+0      	; 0x154 <lcd_write_4+0x2e>
    _delay_us(1);                                   // implement 'Data hold time' (10 nS) and 'Enable cycle time' (500 nS)
}
 154:	08 95       	ret

00000156 <lcd_write_instruction_4d>:
  Entry:    (theInstruction) is the information to be sent to the instruction register
  Exit:     no parameters
  Notes:    does not deal with RW (busy flag is not implemented)
*/
void lcd_write_instruction_4d(uint8_t theInstruction)
{
 156:	1f 93       	push	r17
 158:	18 2f       	mov	r17, r24
    lcd_RS_port &= ~(1<<lcd_RS_bit);                // select the Instruction Register (RS low)
 15a:	95 98       	cbi	0x12, 5	; 18
    lcd_E_port &= ~(1<<lcd_E_bit);                  // make sure E is initially low
 15c:	97 98       	cbi	0x12, 7	; 18
    lcd_write_4(theInstruction);                    // write the upper 4-bits of the data
 15e:	0e 94 93 00 	call	0x126	; 0x126 <lcd_write_4>
    lcd_write_4(theInstruction << 4);               // write the lower 4-bits of the data
 162:	81 2f       	mov	r24, r17
 164:	82 95       	swap	r24
 166:	80 7f       	andi	r24, 0xF0	; 240
 168:	0e 94 93 00 	call	0x126	; 0x126 <lcd_write_4>
}
 16c:	1f 91       	pop	r17
 16e:	08 95       	ret

00000170 <lcd_write_character_4d>:
  Exit:     no parameters
  Notes:    does not deal with RW (busy flag is not implemented)
*/

void lcd_write_character_4d(uint8_t theData)
{
 170:	1f 93       	push	r17
 172:	18 2f       	mov	r17, r24
    lcd_RS_port |= (1<<lcd_RS_bit);                 // select the Data Register (RS high)
 174:	95 9a       	sbi	0x12, 5	; 18
    lcd_E_port &= ~(1<<lcd_E_bit);                  // make sure E is initially low
 176:	97 98       	cbi	0x12, 7	; 18
    lcd_write_4(theData);                           // write the upper 4-bits of the data
 178:	0e 94 93 00 	call	0x126	; 0x126 <lcd_write_4>
    lcd_write_4(theData << 4);                      // write the lower 4-bits of the data
 17c:	81 2f       	mov	r24, r17
 17e:	82 95       	swap	r24
 180:	80 7f       	andi	r24, 0xF0	; 240
 182:	0e 94 93 00 	call	0x126	; 0x126 <lcd_write_4>
}
 186:	1f 91       	pop	r17
 188:	08 95       	ret

0000018a <lcd_write_string_4d>:
  Entry:    (theString) is the string to be displayed
  Exit:     no parameters
  Notes:    uses time delays rather than checking the busy flag
*/
void lcd_write_string_4d(uint8_t theString[])
{
 18a:	0f 93       	push	r16
 18c:	1f 93       	push	r17
 18e:	df 93       	push	r29
 190:	cf 93       	push	r28
 192:	00 d0       	rcall	.+0      	; 0x194 <lcd_write_string_4d+0xa>
 194:	cd b7       	in	r28, 0x3d	; 61
 196:	de b7       	in	r29, 0x3e	; 62
 198:	8c 01       	movw	r16, r24
    volatile int i = 0;                             // character counter*/
 19a:	1a 82       	std	Y+2, r1	; 0x02
 19c:	19 82       	std	Y+1, r1	; 0x01
    while (theString[i] != 0)
 19e:	e9 81       	ldd	r30, Y+1	; 0x01
 1a0:	fa 81       	ldd	r31, Y+2	; 0x02
 1a2:	e8 0f       	add	r30, r24
 1a4:	f9 1f       	adc	r31, r25
 1a6:	80 81       	ld	r24, Z
 1a8:	88 23       	and	r24, r24
 1aa:	b9 f0       	breq	.+46     	; 0x1da <lcd_write_string_4d+0x50>
    {
        lcd_write_character_4d(theString[i]);
 1ac:	e9 81       	ldd	r30, Y+1	; 0x01
 1ae:	fa 81       	ldd	r31, Y+2	; 0x02
 1b0:	e0 0f       	add	r30, r16
 1b2:	f1 1f       	adc	r31, r17
 1b4:	80 81       	ld	r24, Z
 1b6:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_write_character_4d>
        i++;
 1ba:	89 81       	ldd	r24, Y+1	; 0x01
 1bc:	9a 81       	ldd	r25, Y+2	; 0x02
 1be:	01 96       	adiw	r24, 0x01	; 1
 1c0:	9a 83       	std	Y+2, r25	; 0x02
 1c2:	89 83       	std	Y+1, r24	; 0x01
 1c4:	85 ed       	ldi	r24, 0xD5	; 213
 1c6:	8a 95       	dec	r24
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <lcd_write_string_4d+0x3c>
 1ca:	00 00       	nop
  Notes:    uses time delays rather than checking the busy flag
*/
void lcd_write_string_4d(uint8_t theString[])
{
    volatile int i = 0;                             // character counter*/
    while (theString[i] != 0)
 1cc:	e9 81       	ldd	r30, Y+1	; 0x01
 1ce:	fa 81       	ldd	r31, Y+2	; 0x02
 1d0:	e0 0f       	add	r30, r16
 1d2:	f1 1f       	adc	r31, r17
 1d4:	80 81       	ld	r24, Z
 1d6:	88 23       	and	r24, r24
 1d8:	49 f7       	brne	.-46     	; 0x1ac <lcd_write_string_4d+0x22>
    {
        lcd_write_character_4d(theString[i]);
        i++;
        _delay_us(80);                              // 40 uS delay (min)
    }
}
 1da:	0f 90       	pop	r0
 1dc:	0f 90       	pop	r0
 1de:	cf 91       	pop	r28
 1e0:	df 91       	pop	r29
 1e2:	1f 91       	pop	r17
 1e4:	0f 91       	pop	r16
 1e6:	08 95       	ret

000001e8 <lcd_puthex>:
void CopyStringtoLCD(const uint8_t *FlashLoc);
void LCDsendChar(uint8_t ch);


void lcd_puthex(const char data)
{
 1e8:	1f 93       	push	r17
 1ea:	18 2f       	mov	r17, r24
 1ec:	85 ed       	ldi	r24, 0xD5	; 213
 1ee:	8a 95       	dec	r24
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <lcd_puthex+0x6>
 1f2:	00 00       	nop
	//lcd_write_character_4d('0');
	//_delay_us(80);
	//print 'x'
	//lcd_write_character_4d('x');
	//_delay_us(80);
	(((data>>4)&0x0F)<=9) ? (temp='0'+((data>>4)&0x0F)) : (temp='A'+ ((data>>4)&0x0F)-0x0A);
 1f4:	81 2f       	mov	r24, r17
 1f6:	82 95       	swap	r24
 1f8:	8f 70       	andi	r24, 0x0F	; 15
 1fa:	28 2f       	mov	r18, r24
 1fc:	30 e0       	ldi	r19, 0x00	; 0
 1fe:	2a 30       	cpi	r18, 0x0A	; 10
 200:	31 05       	cpc	r19, r1
 202:	14 f4       	brge	.+4      	; 0x208 <lcd_puthex+0x20>
 204:	80 5d       	subi	r24, 0xD0	; 208
 206:	01 c0       	rjmp	.+2      	; 0x20a <lcd_puthex+0x22>
 208:	89 5c       	subi	r24, 0xC9	; 201
 20a:	95 ed       	ldi	r25, 0xD5	; 213
 20c:	9a 95       	dec	r25
 20e:	f1 f7       	brne	.-4      	; 0x20c <lcd_puthex+0x24>
 210:	00 00       	nop
	_delay_us(80);
	//print high nibble as hex
	lcd_write_character_4d(temp);
 212:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_write_character_4d>
 216:	85 ed       	ldi	r24, 0xD5	; 213
 218:	8a 95       	dec	r24
 21a:	f1 f7       	brne	.-4      	; 0x218 <lcd_puthex+0x30>
 21c:	00 00       	nop
	_delay_us(80);
	((data&0x0F)<=9) ? (temp='0'+ (data&0x0F)) : (temp='A'+ (data&0x0F)-0x0A);
 21e:	21 2f       	mov	r18, r17
 220:	30 e0       	ldi	r19, 0x00	; 0
 222:	2f 70       	andi	r18, 0x0F	; 15
 224:	30 70       	andi	r19, 0x00	; 0
 226:	2a 30       	cpi	r18, 0x0A	; 10
 228:	31 05       	cpc	r19, r1
 22a:	24 f4       	brge	.+8      	; 0x234 <lcd_puthex+0x4c>
 22c:	1f 70       	andi	r17, 0x0F	; 15
 22e:	81 2f       	mov	r24, r17
 230:	80 5d       	subi	r24, 0xD0	; 208
 232:	03 c0       	rjmp	.+6      	; 0x23a <lcd_puthex+0x52>
 234:	1f 70       	andi	r17, 0x0F	; 15
 236:	81 2f       	mov	r24, r17
 238:	89 5c       	subi	r24, 0xC9	; 201
	lcd_write_character_4d(temp);
 23a:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_write_character_4d>
 23e:	95 ed       	ldi	r25, 0xD5	; 213
 240:	9a 95       	dec	r25
 242:	f1 f7       	brne	.-4      	; 0x240 <lcd_puthex+0x58>
 244:	00 00       	nop
	_delay_us(80);
	//print low nibble as hex
}
 246:	1f 91       	pop	r17
 248:	08 95       	ret

0000024a <lcd_init_4d>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 24a:	8f ef       	ldi	r24, 0xFF	; 255
 24c:	90 e7       	ldi	r25, 0x70	; 112
 24e:	a2 e0       	ldi	r26, 0x02	; 2
 250:	81 50       	subi	r24, 0x01	; 1
 252:	90 40       	sbci	r25, 0x00	; 0
 254:	a0 40       	sbci	r26, 0x00	; 0
 256:	e1 f7       	brne	.-8      	; 0x250 <lcd_init_4d+0x6>
 258:	00 c0       	rjmp	.+0      	; 0x25a <lcd_init_4d+0x10>
 25a:	00 00       	nop
void lcd_init_4d(void)
{
// Power-up delay
    _delay_ms(100);                                 // initial 40 mSec delay

    lcd_RS_port &= ~(1<<lcd_RS_bit);                // select the Instruction Register (RS low)
 25c:	95 98       	cbi	0x12, 5	; 18
    lcd_E_port &= ~(1<<lcd_E_bit);                  // make sure E is initially low
 25e:	97 98       	cbi	0x12, 7	; 18

// Reset the LCD controller
    lcd_write_4(lcd_FunctionReset);                 // first part of reset sequence
 260:	80 e3       	ldi	r24, 0x30	; 48
 262:	0e 94 93 00 	call	0x126	; 0x126 <lcd_write_4>
 266:	af e1       	ldi	r26, 0x1F	; 31
 268:	be e4       	ldi	r27, 0x4E	; 78
 26a:	11 97       	sbiw	r26, 0x01	; 1
 26c:	f1 f7       	brne	.-4      	; 0x26a <lcd_init_4d+0x20>
 26e:	00 c0       	rjmp	.+0      	; 0x270 <lcd_init_4d+0x26>
 270:	00 00       	nop
    _delay_ms(10);                                  // 4.1 mS delay (min)

    lcd_write_4(lcd_FunctionReset);                 // second part of reset sequence
 272:	80 e3       	ldi	r24, 0x30	; 48
 274:	0e 94 93 00 	call	0x126	; 0x126 <lcd_write_4>
 278:	8f ec       	ldi	r24, 0xCF	; 207
 27a:	97 e0       	ldi	r25, 0x07	; 7
 27c:	01 97       	sbiw	r24, 0x01	; 1
 27e:	f1 f7       	brne	.-4      	; 0x27c <lcd_init_4d+0x32>
 280:	00 c0       	rjmp	.+0      	; 0x282 <lcd_init_4d+0x38>
 282:	00 00       	nop
    _delay_ms(1);                                 // 100uS delay (min)

    lcd_write_4(lcd_FunctionReset);                 // third part of reset sequence
 284:	80 e3       	ldi	r24, 0x30	; 48
 286:	0e 94 93 00 	call	0x126	; 0x126 <lcd_write_4>
 28a:	af ec       	ldi	r26, 0xCF	; 207
 28c:	b7 e0       	ldi	r27, 0x07	; 7
 28e:	11 97       	sbiw	r26, 0x01	; 1
 290:	f1 f7       	brne	.-4      	; 0x28e <lcd_init_4d+0x44>
 292:	00 c0       	rjmp	.+0      	; 0x294 <lcd_init_4d+0x4a>
 294:	00 00       	nop
// Preliminary Function Set instruction - used only to set the 4-bit mode.
// The number of lines or the font cannot be set at this time since the controller is still in the
//  8-bit mode, but the data transfer mode can be changed since this parameter is determined by one 
//  of the upper four bits of the instruction.
 
    lcd_write_4(lcd_FunctionSet4bit);               // set 4-bit mode
 296:	88 e2       	ldi	r24, 0x28	; 40
 298:	0e 94 93 00 	call	0x126	; 0x126 <lcd_write_4>
 29c:	8f ec       	ldi	r24, 0xCF	; 207
 29e:	97 e0       	ldi	r25, 0x07	; 7
 2a0:	01 97       	sbiw	r24, 0x01	; 1
 2a2:	f1 f7       	brne	.-4      	; 0x2a0 <lcd_init_4d+0x56>
 2a4:	00 c0       	rjmp	.+0      	; 0x2a6 <lcd_init_4d+0x5c>
 2a6:	00 00       	nop
    _delay_ms(1);                                  // 40uS delay (min)

// Function Set instruction
    lcd_write_instruction_4d(lcd_FunctionSet4bit);   // set mode, lines, and font
 2a8:	88 e2       	ldi	r24, 0x28	; 40
 2aa:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_write_instruction_4d>
 2ae:	af ec       	ldi	r26, 0xCF	; 207
 2b0:	b7 e0       	ldi	r27, 0x07	; 7
 2b2:	11 97       	sbiw	r26, 0x01	; 1
 2b4:	f1 f7       	brne	.-4      	; 0x2b2 <lcd_init_4d+0x68>
 2b6:	00 c0       	rjmp	.+0      	; 0x2b8 <lcd_init_4d+0x6e>
 2b8:	00 00       	nop
// The next three instructions are specified in the data sheet as part of the initialization routine, 
//  so it is a good idea (but probably not necessary) to do them just as specified and then redo them 
//  later if the application requires a different configuration.

// Display On/Off Control instruction
    lcd_write_instruction_4d(lcd_DisplayOff);        // turn display OFF
 2ba:	88 e0       	ldi	r24, 0x08	; 8
 2bc:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_write_instruction_4d>
 2c0:	8f ec       	ldi	r24, 0xCF	; 207
 2c2:	97 e0       	ldi	r25, 0x07	; 7
 2c4:	01 97       	sbiw	r24, 0x01	; 1
 2c6:	f1 f7       	brne	.-4      	; 0x2c4 <lcd_init_4d+0x7a>
 2c8:	00 c0       	rjmp	.+0      	; 0x2ca <lcd_init_4d+0x80>
 2ca:	00 00       	nop
    _delay_ms(1);                                  // 40uS delay (min)

// Clear Display instruction
    lcd_write_instruction_4d(lcd_Clear);             // clear display RAM
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_write_instruction_4d>
 2d2:	af e3       	ldi	r26, 0x3F	; 63
 2d4:	bf e1       	ldi	r27, 0x1F	; 31
 2d6:	11 97       	sbiw	r26, 0x01	; 1
 2d8:	f1 f7       	brne	.-4      	; 0x2d6 <lcd_init_4d+0x8c>
 2da:	00 c0       	rjmp	.+0      	; 0x2dc <lcd_init_4d+0x92>
 2dc:	00 00       	nop
    _delay_ms(4);                                   // 1.64 mS delay (min)

// ; Entry Mode Set instruction
    lcd_write_instruction_4d(lcd_EntryMode);         // set desired shift characteristics
 2de:	86 e0       	ldi	r24, 0x06	; 6
 2e0:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_write_instruction_4d>
 2e4:	8f ec       	ldi	r24, 0xCF	; 207
 2e6:	97 e0       	ldi	r25, 0x07	; 7
 2e8:	01 97       	sbiw	r24, 0x01	; 1
 2ea:	f1 f7       	brne	.-4      	; 0x2e8 <lcd_init_4d+0x9e>
 2ec:	00 c0       	rjmp	.+0      	; 0x2ee <lcd_init_4d+0xa4>
 2ee:	00 00       	nop

// This is the end of the LCD controller initialization as specified in the data sheet, but the display
//  has been left in the OFF condition.  This is a good time to turn the display back ON.
 
// Display On/Off Control instruction
    lcd_write_instruction_4d(lcd_DisplayOn);         // turn the display ON
 2f0:	8c e0       	ldi	r24, 0x0C	; 12
 2f2:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_write_instruction_4d>
 2f6:	af ec       	ldi	r26, 0xCF	; 207
 2f8:	b7 e0       	ldi	r27, 0x07	; 7
 2fa:	11 97       	sbiw	r26, 0x01	; 1
 2fc:	f1 f7       	brne	.-4      	; 0x2fa <lcd_init_4d+0xb0>
 2fe:	00 c0       	rjmp	.+0      	; 0x300 <lcd_init_4d+0xb6>
 300:	00 00       	nop
    _delay_ms(1);                                  // 40uS delay (min)
}
 302:	08 95       	ret

00000304 <LCDsendChar>:

void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{

	//4 bit part
	PORTC=(ch&0b11110000);
 304:	98 2f       	mov	r25, r24
 306:	90 7f       	andi	r25, 0xF0	; 240
 308:	95 bb       	out	0x15, r25	; 21
	PORTD|=1<<lcd_RS_bit ;
 30a:	95 9a       	sbi	0x12, 5	; 18
	PORTG|=1<<lcd_E_bit;		
 30c:	e5 e6       	ldi	r30, 0x65	; 101
 30e:	f0 e0       	ldi	r31, 0x00	; 0
 310:	90 81       	ld	r25, Z
 312:	90 68       	ori	r25, 0x80	; 128
 314:	90 83       	st	Z, r25
 316:	af ec       	ldi	r26, 0xCF	; 207
 318:	b7 e0       	ldi	r27, 0x07	; 7
 31a:	11 97       	sbiw	r26, 0x01	; 1
 31c:	f1 f7       	brne	.-4      	; 0x31a <LCDsendChar+0x16>
 31e:	00 c0       	rjmp	.+0      	; 0x320 <LCDsendChar+0x1c>
 320:	00 00       	nop
	_delay_ms(1);
	PORTG&=~(1<<lcd_E_bit);	
 322:	90 81       	ld	r25, Z
 324:	9f 77       	andi	r25, 0x7F	; 127
 326:	90 83       	st	Z, r25
	PORTD&=~(1<<lcd_RS_bit);
 328:	95 98       	cbi	0x12, 5	; 18
 32a:	af ec       	ldi	r26, 0xCF	; 207
 32c:	b7 e0       	ldi	r27, 0x07	; 7
 32e:	11 97       	sbiw	r26, 0x01	; 1
 330:	f1 f7       	brne	.-4      	; 0x32e <LCDsendChar+0x2a>
 332:	00 c0       	rjmp	.+0      	; 0x334 <LCDsendChar+0x30>
 334:	00 00       	nop
	_delay_ms(1);
	PORTC=((ch&0b00001111)<<4);
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	82 95       	swap	r24
 33a:	92 95       	swap	r25
 33c:	90 7f       	andi	r25, 0xF0	; 240
 33e:	98 27       	eor	r25, r24
 340:	80 7f       	andi	r24, 0xF0	; 240
 342:	98 27       	eor	r25, r24
 344:	85 bb       	out	0x15, r24	; 21
	PORTD|=1<<lcd_RS_bit;
 346:	95 9a       	sbi	0x12, 5	; 18
	PORTG|=1<<lcd_E_bit;		
 348:	80 81       	ld	r24, Z
 34a:	80 68       	ori	r24, 0x80	; 128
 34c:	80 83       	st	Z, r24
 34e:	8f ec       	ldi	r24, 0xCF	; 207
 350:	97 e0       	ldi	r25, 0x07	; 7
 352:	01 97       	sbiw	r24, 0x01	; 1
 354:	f1 f7       	brne	.-4      	; 0x352 <LCDsendChar+0x4e>
 356:	00 c0       	rjmp	.+0      	; 0x358 <LCDsendChar+0x54>
 358:	00 00       	nop
	_delay_ms(1);
	PORTG&=~(1<<lcd_E_bit);	
 35a:	80 81       	ld	r24, Z
 35c:	8f 77       	andi	r24, 0x7F	; 127
 35e:	80 83       	st	Z, r24
	PORTD&=~(1<<lcd_RS_bit);
 360:	95 98       	cbi	0x12, 5	; 18
 362:	af ec       	ldi	r26, 0xCF	; 207
 364:	b7 e0       	ldi	r27, 0x07	; 7
 366:	11 97       	sbiw	r26, 0x01	; 1
 368:	f1 f7       	brne	.-4      	; 0x366 <LCDsendChar+0x62>
 36a:	00 c0       	rjmp	.+0      	; 0x36c <LCDsendChar+0x68>
 36c:	00 00       	nop
	_delay_ms(1);
}
 36e:	08 95       	ret

00000370 <CopyStringtoLCD>:
    _delay_us(1);                                   // implement 'Data set-up time' (80 nS) and 'Enable pulse width' (230 nS)
    lcd_E_port &= ~(1<<lcd_E_bit);                  // Enable pin low
    _delay_us(1);                                   // implement 'Data hold time' (10 nS) and 'Enable cycle time' (500 nS)
}
void CopyStringtoLCD(const uint8_t *FlashLoc)
{
 370:	1f 93       	push	r17
 372:	cf 93       	push	r28
 374:	df 93       	push	r29
 376:	ec 01       	movw	r28, r24
	uint8_t i;
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
 378:	fe 01       	movw	r30, r28
 37a:	24 91       	lpm	r18, Z+
 37c:	22 23       	and	r18, r18
 37e:	69 f0       	breq	.+26     	; 0x39a <CopyStringtoLCD+0x2a>
 380:	10 e0       	ldi	r17, 0x00	; 0
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
 382:	fc 01       	movw	r30, r24
 384:	84 91       	lpm	r24, Z+
 386:	0e 94 82 01 	call	0x304	; 0x304 <LCDsendChar>
    _delay_us(1);                                   // implement 'Data hold time' (10 nS) and 'Enable cycle time' (500 nS)
}
void CopyStringtoLCD(const uint8_t *FlashLoc)
{
	uint8_t i;
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
 38a:	1f 5f       	subi	r17, 0xFF	; 255
 38c:	ce 01       	movw	r24, r28
 38e:	81 0f       	add	r24, r17
 390:	91 1d       	adc	r25, r1
 392:	fc 01       	movw	r30, r24
 394:	24 91       	lpm	r18, Z+
 396:	22 23       	and	r18, r18
 398:	a1 f7       	brne	.-24     	; 0x382 <CopyStringtoLCD+0x12>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
 39a:	df 91       	pop	r29
 39c:	cf 91       	pop	r28
 39e:	1f 91       	pop	r17
 3a0:	08 95       	ret

000003a2 <main>:
/* Define UART buad rate here */
#define UART_BAUD_RATE      9600      


int main(void)
{
 3a2:	af 92       	push	r10
 3a4:	bf 92       	push	r11
 3a6:	cf 92       	push	r12
 3a8:	df 92       	push	r13
 3aa:	ef 92       	push	r14
 3ac:	ff 92       	push	r15
 3ae:	0f 93       	push	r16
 3b0:	1f 93       	push	r17
 3b2:	df 93       	push	r29
 3b4:	cf 93       	push	r28
 3b6:	cd b7       	in	r28, 0x3d	; 61
 3b8:	de b7       	in	r29, 0x3e	; 62
 3ba:	27 97       	sbiw	r28, 0x07	; 7
 3bc:	0f b6       	in	r0, 0x3f	; 63
 3be:	f8 94       	cli
 3c0:	de bf       	out	0x3e, r29	; 62
 3c2:	0f be       	out	0x3f, r0	; 63
 3c4:	cd bf       	out	0x3d, r28	; 61
	DDRC = 0xFF;    // lcd pins
 3c6:	8f ef       	ldi	r24, 0xFF	; 255
 3c8:	84 bb       	out	0x14, r24	; 20
	// configure the microprocessor pins for the control lines
    lcd_E_ddr |= (1<<lcd_E_bit);                    // E line - output
 3ca:	8f 9a       	sbi	0x11, 7	; 17
    lcd_RS_ddr |= (1<<lcd_RS_bit);                  // RS line - output
 3cc:	8d 9a       	sbi	0x11, 5	; 17
 
    lcd_RS_port &= ~(1<<lcd_RS_bit);
 3ce:	95 98       	cbi	0x12, 5	; 18
	
    unsigned int c;
    char buffer[7];
    int  num=134;

    lcd_init_4d();
 3d0:	0e 94 25 01 	call	0x24a	; 0x24a <lcd_init_4d>
	lcd_write_instruction_4d(lcd_Clear);
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_write_instruction_4d>
 3da:	8f e1       	ldi	r24, 0x1F	; 31
 3dc:	9e e4       	ldi	r25, 0x4E	; 78
 3de:	01 97       	sbiw	r24, 0x01	; 1
 3e0:	f1 f7       	brne	.-4      	; 0x3de <main+0x3c>
 3e2:	00 c0       	rjmp	.+0      	; 0x3e4 <main+0x42>
 3e4:	00 00       	nop
    _delay_ms(10);
    lcd_write_string_4d("main");
 3e6:	80 e0       	ldi	r24, 0x00	; 0
 3e8:	91 e0       	ldi	r25, 0x01	; 1
 3ea:	0e 94 c5 00 	call	0x18a	; 0x18a <lcd_write_string_4d>
     *  with the macro 
     *  UART_BAUD_SELECT() (normal speed mode )
     *  or 
     *  UART_BAUD_SELECT_DOUBLE_SPEED() ( double speed mode)
     */
    uart_init( UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU) ); 
 3ee:	83 e3       	ldi	r24, 0x33	; 51
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	0e 94 9f 02 	call	0x53e	; 0x53e <uart_init>
    
    /*
     * now enable interrupt, since UART library is interrupt controlled
     */
    sei();
 3f6:	78 94       	sei
     *  The string is buffered by the uart library in a circular buffer
     *  and one character at a time is transmitted to the UART using interrupts.
     *  uart_puts() blocks if it can not write the whole string to the circular 
     *  buffer
     */
    uart_puts("String stored in SRAM\n");
 3f8:	85 e0       	ldi	r24, 0x05	; 5
 3fa:	91 e0       	ldi	r25, 0x01	; 1
 3fc:	0e 94 e6 02 	call	0x5cc	; 0x5cc <uart_puts>
    
    /*
     * Transmit string from program memory to UART
     */
    uart_puts_P("String stored in FLASH\n");
 400:	8c ec       	ldi	r24, 0xCC	; 204
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	0e 94 f5 02 	call	0x5ea	; 0x5ea <uart_puts_p>
        
    /* 
     * Use standard avr-libc functions to convert numbers into string
     * before transmitting via UART
     */     
    itoa( num, buffer, 10);   // convert interger into string (decimal format)         
 408:	86 e8       	ldi	r24, 0x86	; 134
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	8e 01       	movw	r16, r28
 40e:	0f 5f       	subi	r16, 0xFF	; 255
 410:	1f 4f       	sbci	r17, 0xFF	; 255
 412:	b8 01       	movw	r22, r16
 414:	4a e0       	ldi	r20, 0x0A	; 10
 416:	50 e0       	ldi	r21, 0x00	; 0
 418:	0e 94 db 03 	call	0x7b6	; 0x7b6 <itoa>
    uart_puts(buffer);        // and transmit string to UART
 41c:	c8 01       	movw	r24, r16
 41e:	0e 94 e6 02 	call	0x5cc	; 0x5cc <uart_puts>

    /*
     * Transmit single character to UART
     */
    uart_putc('\r');
 422:	8d e0       	ldi	r24, 0x0D	; 13
 424:	0e 94 d5 02 	call	0x5aa	; 0x5aa <uart_putc>
            {
                /* 
                 * We are not reading the receive buffer fast enough,
                 * one or more received character have been dropped 
                 */
                uart_puts_P("Buffer overflow error: ");
 428:	0f 2e       	mov	r0, r31
 42a:	fc e8       	ldi	r31, 0x8C	; 140
 42c:	ef 2e       	mov	r14, r31
 42e:	f0 e0       	ldi	r31, 0x00	; 0
 430:	ff 2e       	mov	r15, r31
 432:	f0 2d       	mov	r31, r0
                /* 
                 * Overrun, a character already present in the UART UDR register was 
                 * not read by the interrupt handler before the next character arrived,
                 * one or more received characters have been dropped
                 */
                uart_puts_P("UART Overrun Error: ");
 434:	0f 2e       	mov	r0, r31
 436:	f4 ea       	ldi	r31, 0xA4	; 164
 438:	cf 2e       	mov	r12, r31
 43a:	f0 e0       	ldi	r31, 0x00	; 0
 43c:	df 2e       	mov	r13, r31
 43e:	f0 2d       	mov	r31, r0
             * check for Frame or Overrun error
             */
            if ( c & UART_FRAME_ERROR )
            {
                /* Framing Error detected, i.e no stop bit detected */
                uart_puts_P("UART Frame Error: ");
 440:	0f 2e       	mov	r0, r31
 442:	f9 eb       	ldi	r31, 0xB9	; 185
 444:	af 2e       	mov	r10, r31
 446:	f0 e0       	ldi	r31, 0x00	; 0
 448:	bf 2e       	mov	r11, r31
 44a:	f0 2d       	mov	r31, r0
         * uart_getc() returns in the lower byte the received character and 
         * in the higher byte (bitmask) the last receive error
         * UART_NO_DATA is returned when no data is available.
         *
         */
        c = uart_getc();
 44c:	0e 94 b6 02 	call	0x56c	; 0x56c <uart_getc>
 450:	8c 01       	movw	r16, r24
        if ( c & UART_NO_DATA )
 452:	90 fd       	sbrc	r25, 0
 454:	fb cf       	rjmp	.-10     	; 0x44c <main+0xaa>
        {
            /*
             * new data available from UART
             * check for Frame or Overrun error
             */
            if ( c & UART_FRAME_ERROR )
 456:	94 ff       	sbrs	r25, 4
 458:	03 c0       	rjmp	.+6      	; 0x460 <main+0xbe>
            {
                /* Framing Error detected, i.e no stop bit detected */
                uart_puts_P("UART Frame Error: ");
 45a:	c5 01       	movw	r24, r10
 45c:	0e 94 f5 02 	call	0x5ea	; 0x5ea <uart_puts_p>
            }
            if ( c & UART_OVERRUN_ERROR )
 460:	13 ff       	sbrs	r17, 3
 462:	03 c0       	rjmp	.+6      	; 0x46a <main+0xc8>
                /* 
                 * Overrun, a character already present in the UART UDR register was 
                 * not read by the interrupt handler before the next character arrived,
                 * one or more received characters have been dropped
                 */
                uart_puts_P("UART Overrun Error: ");
 464:	c6 01       	movw	r24, r12
 466:	0e 94 f5 02 	call	0x5ea	; 0x5ea <uart_puts_p>
            }
            if ( c & UART_BUFFER_OVERFLOW )
 46a:	11 ff       	sbrs	r17, 1
 46c:	03 c0       	rjmp	.+6      	; 0x474 <main+0xd2>
            {
                /* 
                 * We are not reading the receive buffer fast enough,
                 * one or more received character have been dropped 
                 */
                uart_puts_P("Buffer overflow error: ");
 46e:	c7 01       	movw	r24, r14
 470:	0e 94 f5 02 	call	0x5ea	; 0x5ea <uart_puts_p>
            }
            /* 
             * send received character back
             */
            uart_putc( (unsigned char)c );
 474:	80 2f       	mov	r24, r16
 476:	0e 94 d5 02 	call	0x5aa	; 0x5aa <uart_putc>
			lcd_write_character_4d((unsigned char)c);
 47a:	80 2f       	mov	r24, r16
 47c:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_write_character_4d>
 480:	e5 cf       	rjmp	.-54     	; 0x44c <main+0xaa>

00000482 <__vector_18>:
ISR (UART0_RECEIVE_INTERRUPT)	
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
 482:	1f 92       	push	r1
 484:	0f 92       	push	r0
 486:	0f b6       	in	r0, 0x3f	; 63
 488:	0f 92       	push	r0
 48a:	0b b6       	in	r0, 0x3b	; 59
 48c:	0f 92       	push	r0
 48e:	11 24       	eor	r1, r1
 490:	2f 93       	push	r18
 492:	3f 93       	push	r19
 494:	8f 93       	push	r24
 496:	9f 93       	push	r25
 498:	ef 93       	push	r30
 49a:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */
    usr  = UART0_STATUS;
 49c:	2b b1       	in	r18, 0x0b	; 11
    data = UART0_DATA;
 49e:	3c b1       	in	r19, 0x0c	; 12
#elif defined(FE) && defined(DOR)
    lastRxError = usr & (_BV(FE)|_BV(DOR) );
#endif

    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
 4a0:	80 91 83 01 	lds	r24, 0x0183
 4a4:	8f 5f       	subi	r24, 0xFF	; 255
 4a6:	8f 71       	andi	r24, 0x1F	; 31
    
    if ( tmphead == UART_RxTail ) {
 4a8:	90 91 84 01 	lds	r25, 0x0184
 4ac:	89 17       	cp	r24, r25
 4ae:	49 f0       	breq	.+18     	; 0x4c2 <__vector_18+0x40>
    usr  = UART0_STATUS;
    data = UART0_DATA;
    
    /* get FEn (Frame Error) DORn (Data OverRun) UPEn (USART Parity Error) bits */
#if defined(FE) && defined(DOR) && defined(UPE)
    lastRxError = usr & (_BV(FE)|_BV(DOR)|_BV(UPE) );
 4b0:	2c 71       	andi	r18, 0x1C	; 28
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART_RxHead = tmphead;
 4b2:	80 93 83 01 	sts	0x0183, r24
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
 4b6:	e5 e8       	ldi	r30, 0x85	; 133
 4b8:	f1 e0       	ldi	r31, 0x01	; 1
 4ba:	e8 0f       	add	r30, r24
 4bc:	f1 1d       	adc	r31, r1
 4be:	30 83       	st	Z, r19
 4c0:	01 c0       	rjmp	.+2      	; 0x4c4 <__vector_18+0x42>
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
 4c2:	22 e0       	ldi	r18, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError |= lastRxError;   
 4c4:	90 91 a5 01 	lds	r25, 0x01A5
 4c8:	82 2f       	mov	r24, r18
 4ca:	89 2b       	or	r24, r25
 4cc:	80 93 a5 01 	sts	0x01A5, r24
}
 4d0:	ff 91       	pop	r31
 4d2:	ef 91       	pop	r30
 4d4:	9f 91       	pop	r25
 4d6:	8f 91       	pop	r24
 4d8:	3f 91       	pop	r19
 4da:	2f 91       	pop	r18
 4dc:	0f 90       	pop	r0
 4de:	0b be       	out	0x3b, r0	; 59
 4e0:	0f 90       	pop	r0
 4e2:	0f be       	out	0x3f, r0	; 63
 4e4:	0f 90       	pop	r0
 4e6:	1f 90       	pop	r1
 4e8:	18 95       	reti

000004ea <__vector_19>:
ISR (UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
 4ea:	1f 92       	push	r1
 4ec:	0f 92       	push	r0
 4ee:	0f b6       	in	r0, 0x3f	; 63
 4f0:	0f 92       	push	r0
 4f2:	0b b6       	in	r0, 0x3b	; 59
 4f4:	0f 92       	push	r0
 4f6:	11 24       	eor	r1, r1
 4f8:	8f 93       	push	r24
 4fa:	9f 93       	push	r25
 4fc:	ef 93       	push	r30
 4fe:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
 500:	90 91 61 01 	lds	r25, 0x0161
 504:	80 91 62 01 	lds	r24, 0x0162
 508:	98 17       	cp	r25, r24
 50a:	69 f0       	breq	.+26     	; 0x526 <__vector_19+0x3c>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
 50c:	80 91 62 01 	lds	r24, 0x0162
 510:	8f 5f       	subi	r24, 0xFF	; 255
 512:	8f 71       	andi	r24, 0x1F	; 31
        UART_TxTail = tmptail;
 514:	80 93 62 01 	sts	0x0162, r24
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
 518:	e3 e6       	ldi	r30, 0x63	; 99
 51a:	f1 e0       	ldi	r31, 0x01	; 1
 51c:	e8 0f       	add	r30, r24
 51e:	f1 1d       	adc	r31, r1
 520:	80 81       	ld	r24, Z
 522:	8c b9       	out	0x0c, r24	; 12
 524:	01 c0       	rjmp	.+2      	; 0x528 <__vector_19+0x3e>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
 526:	55 98       	cbi	0x0a, 5	; 10
    }
}
 528:	ff 91       	pop	r31
 52a:	ef 91       	pop	r30
 52c:	9f 91       	pop	r25
 52e:	8f 91       	pop	r24
 530:	0f 90       	pop	r0
 532:	0b be       	out	0x3b, r0	; 59
 534:	0f 90       	pop	r0
 536:	0f be       	out	0x3f, r0	; 63
 538:	0f 90       	pop	r0
 53a:	1f 90       	pop	r1
 53c:	18 95       	reti

0000053e <uart_init>:
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
    UART_TxHead = 0;
 53e:	10 92 61 01 	sts	0x0161, r1
    UART_TxTail = 0;
 542:	10 92 62 01 	sts	0x0162, r1
    UART_RxHead = 0;
 546:	10 92 83 01 	sts	0x0183, r1
    UART_RxTail = 0;
 54a:	10 92 84 01 	sts	0x0184, r1
#endif
#endif
#endif

    /* Set baud rate */
    if ( baudrate & 0x8000 )
 54e:	99 23       	and	r25, r25
 550:	14 f4       	brge	.+4      	; 0x556 <uart_init+0x18>
    {
        #if UART0_BIT_U2X
        UART0_STATUS = (1<<UART0_BIT_U2X);  //Enable 2x speed 
 552:	22 e0       	ldi	r18, 0x02	; 2
 554:	2b b9       	out	0x0b, r18	; 11
        #endif
    } 
    #if defined(UART0_UBRRH)
    UART0_UBRRH = (unsigned char)((baudrate>>8)&0x80) ;
 556:	29 2f       	mov	r18, r25
 558:	20 78       	andi	r18, 0x80	; 128
 55a:	20 93 90 00 	sts	0x0090, r18
    #endif    
    UART0_UBRRL = (unsigned char) (baudrate&0x00FF);
 55e:	89 b9       	out	0x09, r24	; 9
      
    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(UART0_BIT_RXCIE)|(1<<UART0_BIT_RXEN)|(1<<UART0_BIT_TXEN);
 560:	88 e9       	ldi	r24, 0x98	; 152
 562:	8a b9       	out	0x0a, r24	; 10
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef UART0_CONTROLC
    #ifdef UART0_BIT_URSEL
    UART0_CONTROLC = (1<<UART0_BIT_URSEL)|(1<<UART0_BIT_UCSZ1)|(1<<UART0_BIT_UCSZ0);
    #else
    UART0_CONTROLC = (1<<UART0_BIT_UCSZ1)|(1<<UART0_BIT_UCSZ0);
 564:	86 e0       	ldi	r24, 0x06	; 6
 566:	80 93 95 00 	sts	0x0095, r24
    #endif 
    #endif

}/* uart_init */
 56a:	08 95       	ret

0000056c <uart_getc>:
    unsigned char tmptail;
    unsigned char data;
    unsigned char lastRxError;


    if ( UART_RxHead == UART_RxTail ) {
 56c:	90 91 83 01 	lds	r25, 0x0183
 570:	80 91 84 01 	lds	r24, 0x0184
 574:	98 17       	cp	r25, r24
 576:	a1 f0       	breq	.+40     	; 0x5a0 <uart_getc+0x34>
        return UART_NO_DATA;   /* no data available */
    }
    
    /* calculate buffer index */
    tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
 578:	80 91 84 01 	lds	r24, 0x0184
 57c:	8f 5f       	subi	r24, 0xFF	; 255
 57e:	8f 71       	andi	r24, 0x1F	; 31
    
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
 580:	e5 e8       	ldi	r30, 0x85	; 133
 582:	f1 e0       	ldi	r31, 0x01	; 1
 584:	e8 0f       	add	r30, r24
 586:	f1 1d       	adc	r31, r1
 588:	90 81       	ld	r25, Z
    lastRxError = UART_LastRxError;
 58a:	40 91 a5 01 	lds	r20, 0x01A5
    
    /* store buffer index */
    UART_RxTail = tmptail; 
 58e:	80 93 84 01 	sts	0x0184, r24
    
    UART_LastRxError = 0;
 592:	10 92 a5 01 	sts	0x01A5, r1
    return (lastRxError << 8) + data;
 596:	34 2f       	mov	r19, r20
 598:	20 e0       	ldi	r18, 0x00	; 0
 59a:	29 0f       	add	r18, r25
 59c:	31 1d       	adc	r19, r1
 59e:	02 c0       	rjmp	.+4      	; 0x5a4 <uart_getc+0x38>
    unsigned char data;
    unsigned char lastRxError;


    if ( UART_RxHead == UART_RxTail ) {
        return UART_NO_DATA;   /* no data available */
 5a0:	20 e0       	ldi	r18, 0x00	; 0
 5a2:	31 e0       	ldi	r19, 0x01	; 1
    UART_RxTail = tmptail; 
    
    UART_LastRxError = 0;
    return (lastRxError << 8) + data;

}/* uart_getc */
 5a4:	82 2f       	mov	r24, r18
 5a6:	93 2f       	mov	r25, r19
 5a8:	08 95       	ret

000005aa <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 5aa:	20 91 61 01 	lds	r18, 0x0161
 5ae:	2f 5f       	subi	r18, 0xFF	; 255
 5b0:	2f 71       	andi	r18, 0x1F	; 31
    
    while ( tmphead == UART_TxTail ){
 5b2:	90 91 62 01 	lds	r25, 0x0162
 5b6:	29 17       	cp	r18, r25
 5b8:	e1 f3       	breq	.-8      	; 0x5b2 <uart_putc+0x8>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
 5ba:	e3 e6       	ldi	r30, 0x63	; 99
 5bc:	f1 e0       	ldi	r31, 0x01	; 1
 5be:	e2 0f       	add	r30, r18
 5c0:	f1 1d       	adc	r31, r1
 5c2:	80 83       	st	Z, r24
    UART_TxHead = tmphead;
 5c4:	20 93 61 01 	sts	0x0161, r18

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
 5c8:	55 9a       	sbi	0x0a, 5	; 10

}/* uart_putc */
 5ca:	08 95       	ret

000005cc <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
 5cc:	cf 93       	push	r28
 5ce:	df 93       	push	r29
 5d0:	ec 01       	movw	r28, r24
    while (*s) 
 5d2:	88 81       	ld	r24, Y
 5d4:	88 23       	and	r24, r24
 5d6:	31 f0       	breq	.+12     	; 0x5e4 <uart_puts+0x18>
Function: uart_puts()
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
 5d8:	21 96       	adiw	r28, 0x01	; 1
{
    while (*s) 
      uart_putc(*s++);
 5da:	0e 94 d5 02 	call	0x5aa	; 0x5aa <uart_putc>
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    while (*s) 
 5de:	89 91       	ld	r24, Y+
 5e0:	88 23       	and	r24, r24
 5e2:	d9 f7       	brne	.-10     	; 0x5da <uart_puts+0xe>
      uart_putc(*s++);

}/* uart_puts */
 5e4:	df 91       	pop	r29
 5e6:	cf 91       	pop	r28
 5e8:	08 95       	ret

000005ea <uart_puts_p>:
Purpose:  transmit string from program memory to UART
Input:    program memory string to be transmitted
Returns:  none
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
 5ea:	cf 93       	push	r28
 5ec:	df 93       	push	r29
 5ee:	ec 01       	movw	r28, r24
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
 5f0:	fc 01       	movw	r30, r24
 5f2:	84 91       	lpm	r24, Z+
 5f4:	88 23       	and	r24, r24
 5f6:	41 f0       	breq	.+16     	; 0x608 <uart_puts_p+0x1e>
 5f8:	21 96       	adiw	r28, 0x01	; 1
      uart_putc(c);
 5fa:	0e 94 d5 02 	call	0x5aa	; 0x5aa <uart_putc>
 5fe:	fe 01       	movw	r30, r28
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
 600:	21 96       	adiw	r28, 0x01	; 1
 602:	84 91       	lpm	r24, Z+
 604:	88 23       	and	r24, r24
 606:	c9 f7       	brne	.-14     	; 0x5fa <uart_puts_p+0x10>
      uart_putc(c);

}/* uart_puts_p */
 608:	df 91       	pop	r29
 60a:	cf 91       	pop	r28
 60c:	08 95       	ret

0000060e <__vector_30>:
ISR(UART1_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART1 Receive Complete interrupt
Purpose:  called when the UART1 has received a character
**************************************************************************/
{
 60e:	1f 92       	push	r1
 610:	0f 92       	push	r0
 612:	0f b6       	in	r0, 0x3f	; 63
 614:	0f 92       	push	r0
 616:	0b b6       	in	r0, 0x3b	; 59
 618:	0f 92       	push	r0
 61a:	11 24       	eor	r1, r1
 61c:	2f 93       	push	r18
 61e:	3f 93       	push	r19
 620:	8f 93       	push	r24
 622:	9f 93       	push	r25
 624:	ef 93       	push	r30
 626:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */ 
    usr  = UART1_STATUS;
 628:	20 91 9b 00 	lds	r18, 0x009B
    data = UART1_DATA;
 62c:	30 91 9c 00 	lds	r19, 0x009C
    
    /* get FEn (Frame Error) DORn (Data OverRun) UPEn (USART Parity Error) bits */
    lastRxError = usr & (_BV(FE1)|_BV(DOR1)|_BV(UPE1) );
            
    /* calculate buffer index */ 
    tmphead = ( UART1_RxHead + 1) & UART_RX_BUFFER_MASK;
 630:	80 91 3e 01 	lds	r24, 0x013E
 634:	8f 5f       	subi	r24, 0xFF	; 255
 636:	8f 71       	andi	r24, 0x1F	; 31
    
    if ( tmphead == UART1_RxTail ) {
 638:	90 91 3f 01 	lds	r25, 0x013F
 63c:	89 17       	cp	r24, r25
 63e:	49 f0       	breq	.+18     	; 0x652 <__vector_30+0x44>
    /* read UART status register and UART data register */ 
    usr  = UART1_STATUS;
    data = UART1_DATA;
    
    /* get FEn (Frame Error) DORn (Data OverRun) UPEn (USART Parity Error) bits */
    lastRxError = usr & (_BV(FE1)|_BV(DOR1)|_BV(UPE1) );
 640:	2c 71       	andi	r18, 0x1C	; 28
    if ( tmphead == UART1_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART1_RxHead = tmphead;
 642:	80 93 3e 01 	sts	0x013E, r24
        /* store received data in buffer */
        UART1_RxBuf[tmphead] = data;
 646:	e0 e4       	ldi	r30, 0x40	; 64
 648:	f1 e0       	ldi	r31, 0x01	; 1
 64a:	e8 0f       	add	r30, r24
 64c:	f1 1d       	adc	r31, r1
 64e:	30 83       	st	Z, r19
 650:	01 c0       	rjmp	.+2      	; 0x654 <__vector_30+0x46>
    /* calculate buffer index */ 
    tmphead = ( UART1_RxHead + 1) & UART_RX_BUFFER_MASK;
    
    if ( tmphead == UART1_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
 652:	22 e0       	ldi	r18, 0x02	; 2
        /* store new index */
        UART1_RxHead = tmphead;
        /* store received data in buffer */
        UART1_RxBuf[tmphead] = data;
    }
    UART1_LastRxError |= lastRxError;   
 654:	90 91 60 01 	lds	r25, 0x0160
 658:	82 2f       	mov	r24, r18
 65a:	89 2b       	or	r24, r25
 65c:	80 93 60 01 	sts	0x0160, r24
}
 660:	ff 91       	pop	r31
 662:	ef 91       	pop	r30
 664:	9f 91       	pop	r25
 666:	8f 91       	pop	r24
 668:	3f 91       	pop	r19
 66a:	2f 91       	pop	r18
 66c:	0f 90       	pop	r0
 66e:	0b be       	out	0x3b, r0	; 59
 670:	0f 90       	pop	r0
 672:	0f be       	out	0x3f, r0	; 63
 674:	0f 90       	pop	r0
 676:	1f 90       	pop	r1
 678:	18 95       	reti

0000067a <__vector_31>:
ISR(UART1_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART1 Data Register Empty interrupt
Purpose:  called when the UART1 is ready to transmit the next byte
**************************************************************************/
{
 67a:	1f 92       	push	r1
 67c:	0f 92       	push	r0
 67e:	0f b6       	in	r0, 0x3f	; 63
 680:	0f 92       	push	r0
 682:	0b b6       	in	r0, 0x3b	; 59
 684:	0f 92       	push	r0
 686:	11 24       	eor	r1, r1
 688:	8f 93       	push	r24
 68a:	9f 93       	push	r25
 68c:	ef 93       	push	r30
 68e:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART1_TxHead != UART1_TxTail) {
 690:	90 91 1c 01 	lds	r25, 0x011C
 694:	80 91 1d 01 	lds	r24, 0x011D
 698:	98 17       	cp	r25, r24
 69a:	71 f0       	breq	.+28     	; 0x6b8 <__vector_31+0x3e>
        /* calculate and store new buffer index */
        tmptail = (UART1_TxTail + 1) & UART_TX_BUFFER_MASK;
 69c:	80 91 1d 01 	lds	r24, 0x011D
 6a0:	8f 5f       	subi	r24, 0xFF	; 255
 6a2:	8f 71       	andi	r24, 0x1F	; 31
        UART1_TxTail = tmptail;
 6a4:	80 93 1d 01 	sts	0x011D, r24
        /* get one byte from buffer and write it to UART */
        UART1_DATA = UART1_TxBuf[tmptail];  /* start transmission */
 6a8:	ee e1       	ldi	r30, 0x1E	; 30
 6aa:	f1 e0       	ldi	r31, 0x01	; 1
 6ac:	e8 0f       	add	r30, r24
 6ae:	f1 1d       	adc	r31, r1
 6b0:	80 81       	ld	r24, Z
 6b2:	80 93 9c 00 	sts	0x009C, r24
 6b6:	05 c0       	rjmp	.+10     	; 0x6c2 <__vector_31+0x48>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART1_CONTROL &= ~_BV(UART1_UDRIE);
 6b8:	ea e9       	ldi	r30, 0x9A	; 154
 6ba:	f0 e0       	ldi	r31, 0x00	; 0
 6bc:	80 81       	ld	r24, Z
 6be:	8f 7d       	andi	r24, 0xDF	; 223
 6c0:	80 83       	st	Z, r24
    }
}
 6c2:	ff 91       	pop	r31
 6c4:	ef 91       	pop	r30
 6c6:	9f 91       	pop	r25
 6c8:	8f 91       	pop	r24
 6ca:	0f 90       	pop	r0
 6cc:	0b be       	out	0x3b, r0	; 59
 6ce:	0f 90       	pop	r0
 6d0:	0f be       	out	0x3f, r0	; 63
 6d2:	0f 90       	pop	r0
 6d4:	1f 90       	pop	r1
 6d6:	18 95       	reti

000006d8 <uart1_init>:
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart1_init(unsigned int baudrate)
{
    UART1_TxHead = 0;
 6d8:	10 92 1c 01 	sts	0x011C, r1
    UART1_TxTail = 0;
 6dc:	10 92 1d 01 	sts	0x011D, r1
    UART1_RxHead = 0;
 6e0:	10 92 3e 01 	sts	0x013E, r1
    UART1_RxTail = 0;
 6e4:	10 92 3f 01 	sts	0x013F, r1
#endif
#endif
#endif

    /* Set baud rate */
    if ( baudrate & 0x8000 ) 
 6e8:	99 23       	and	r25, r25
 6ea:	1c f4       	brge	.+6      	; 0x6f2 <uart1_init+0x1a>
    {
        #if UART1_BIT_U2X
    	UART1_STATUS = (1<<UART1_BIT_U2X);  //Enable 2x speed 
 6ec:	22 e0       	ldi	r18, 0x02	; 2
 6ee:	20 93 9b 00 	sts	0x009B, r18
        #endif
    }
    UART1_UBRRH = (unsigned char)((baudrate>>8)&0x80) ;
 6f2:	29 2f       	mov	r18, r25
 6f4:	20 78       	andi	r18, 0x80	; 128
 6f6:	20 93 98 00 	sts	0x0098, r18
    UART1_UBRRL = (unsigned char) baudrate;
 6fa:	80 93 99 00 	sts	0x0099, r24
        
    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART1_CONTROL = _BV(UART1_BIT_RXCIE)|(1<<UART1_BIT_RXEN)|(1<<UART1_BIT_TXEN);    
 6fe:	88 e9       	ldi	r24, 0x98	; 152
 700:	80 93 9a 00 	sts	0x009A, r24
    
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */   
    #ifdef UART1_BIT_URSEL
    UART1_CONTROLC = (1<<UART1_BIT_URSEL)|(1<<UART1_BIT_UCSZ1)|(1<<UART1_BIT_UCSZ0);
    #else
    UART1_CONTROLC = (1<<UART1_BIT_UCSZ1)|(1<<UART1_BIT_UCSZ0);
 704:	86 e0       	ldi	r24, 0x06	; 6
 706:	80 93 9d 00 	sts	0x009D, r24
    #endif 
    
}/* uart_init */
 70a:	08 95       	ret

0000070c <uart1_getc>:
    unsigned char tmptail;
    unsigned int  data;
    unsigned char lastRxError;


    if ( UART1_RxHead == UART1_RxTail ) {
 70c:	90 91 3e 01 	lds	r25, 0x013E
 710:	80 91 3f 01 	lds	r24, 0x013F
 714:	98 17       	cp	r25, r24
 716:	a1 f0       	breq	.+40     	; 0x740 <uart1_getc+0x34>
        return UART_NO_DATA;   /* no data available */
    }
    
    /* calculate buffer index */
    tmptail = (UART1_RxTail + 1) & UART_RX_BUFFER_MASK;
 718:	80 91 3f 01 	lds	r24, 0x013F
 71c:	8f 5f       	subi	r24, 0xFF	; 255
 71e:	8f 71       	andi	r24, 0x1F	; 31
    
    /* get data from receive buffer */
    data = UART1_RxBuf[tmptail];
 720:	e0 e4       	ldi	r30, 0x40	; 64
 722:	f1 e0       	ldi	r31, 0x01	; 1
 724:	e8 0f       	add	r30, r24
 726:	f1 1d       	adc	r31, r1
 728:	90 81       	ld	r25, Z
    lastRxError = UART1_LastRxError;
 72a:	40 91 60 01 	lds	r20, 0x0160
    
    /* store buffer index */
    UART1_RxTail = tmptail; 
 72e:	80 93 3f 01 	sts	0x013F, r24
    
    UART1_LastRxError = 0;
 732:	10 92 60 01 	sts	0x0160, r1
    return (lastRxError << 8) + data;
 736:	34 2f       	mov	r19, r20
 738:	20 e0       	ldi	r18, 0x00	; 0
 73a:	29 0f       	add	r18, r25
 73c:	31 1d       	adc	r19, r1
 73e:	02 c0       	rjmp	.+4      	; 0x744 <uart1_getc+0x38>
    unsigned int  data;
    unsigned char lastRxError;


    if ( UART1_RxHead == UART1_RxTail ) {
        return UART_NO_DATA;   /* no data available */
 740:	20 e0       	ldi	r18, 0x00	; 0
 742:	31 e0       	ldi	r19, 0x01	; 1
    UART1_RxTail = tmptail; 
    
    UART1_LastRxError = 0;
    return (lastRxError << 8) + data;

}/* uart1_getc */
 744:	82 2f       	mov	r24, r18
 746:	93 2f       	mov	r25, r19
 748:	08 95       	ret

0000074a <uart1_putc>:
void uart1_putc(unsigned char data)
{
    unsigned char tmphead;

    
    tmphead  = (UART1_TxHead + 1) & UART_TX_BUFFER_MASK;
 74a:	20 91 1c 01 	lds	r18, 0x011C
 74e:	2f 5f       	subi	r18, 0xFF	; 255
 750:	2f 71       	andi	r18, 0x1F	; 31
    
    while ( tmphead == UART1_TxTail ){
 752:	90 91 1d 01 	lds	r25, 0x011D
 756:	29 17       	cp	r18, r25
 758:	e1 f3       	breq	.-8      	; 0x752 <uart1_putc+0x8>
        ;/* wait for free space in buffer */
    }
    
    UART1_TxBuf[tmphead] = data;
 75a:	ee e1       	ldi	r30, 0x1E	; 30
 75c:	f1 e0       	ldi	r31, 0x01	; 1
 75e:	e2 0f       	add	r30, r18
 760:	f1 1d       	adc	r31, r1
 762:	80 83       	st	Z, r24
    UART1_TxHead = tmphead;
 764:	20 93 1c 01 	sts	0x011C, r18

    /* enable UDRE interrupt */
    UART1_CONTROL    |= _BV(UART1_UDRIE);
 768:	ea e9       	ldi	r30, 0x9A	; 154
 76a:	f0 e0       	ldi	r31, 0x00	; 0
 76c:	80 81       	ld	r24, Z
 76e:	80 62       	ori	r24, 0x20	; 32
 770:	80 83       	st	Z, r24

}/* uart1_putc */
 772:	08 95       	ret

00000774 <uart1_puts>:
Purpose:  transmit string to UART1
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart1_puts(const char *s )
{
 774:	cf 93       	push	r28
 776:	df 93       	push	r29
 778:	ec 01       	movw	r28, r24
    while (*s) 
 77a:	88 81       	ld	r24, Y
 77c:	88 23       	and	r24, r24
 77e:	31 f0       	breq	.+12     	; 0x78c <uart1_puts+0x18>
Function: uart1_puts()
Purpose:  transmit string to UART1
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart1_puts(const char *s )
 780:	21 96       	adiw	r28, 0x01	; 1
{
    while (*s) 
      uart1_putc(*s++);
 782:	0e 94 a5 03 	call	0x74a	; 0x74a <uart1_putc>
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart1_puts(const char *s )
{
    while (*s) 
 786:	89 91       	ld	r24, Y+
 788:	88 23       	and	r24, r24
 78a:	d9 f7       	brne	.-10     	; 0x782 <uart1_puts+0xe>
      uart1_putc(*s++);

}/* uart1_puts */
 78c:	df 91       	pop	r29
 78e:	cf 91       	pop	r28
 790:	08 95       	ret

00000792 <uart1_puts_p>:
Purpose:  transmit string from program memory to UART1
Input:    program memory string to be transmitted
Returns:  none
**************************************************************************/
void uart1_puts_p(const char *progmem_s )
{
 792:	cf 93       	push	r28
 794:	df 93       	push	r29
 796:	ec 01       	movw	r28, r24
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
 798:	fc 01       	movw	r30, r24
 79a:	84 91       	lpm	r24, Z+
 79c:	88 23       	and	r24, r24
 79e:	41 f0       	breq	.+16     	; 0x7b0 <uart1_puts_p+0x1e>
 7a0:	21 96       	adiw	r28, 0x01	; 1
      uart1_putc(c);
 7a2:	0e 94 a5 03 	call	0x74a	; 0x74a <uart1_putc>
 7a6:	fe 01       	movw	r30, r28
**************************************************************************/
void uart1_puts_p(const char *progmem_s )
{
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
 7a8:	21 96       	adiw	r28, 0x01	; 1
 7aa:	84 91       	lpm	r24, Z+
 7ac:	88 23       	and	r24, r24
 7ae:	c9 f7       	brne	.-14     	; 0x7a2 <uart1_puts_p+0x10>
      uart1_putc(c);

}/* uart1_puts_p */
 7b0:	df 91       	pop	r29
 7b2:	cf 91       	pop	r28
 7b4:	08 95       	ret

000007b6 <itoa>:
 7b6:	fb 01       	movw	r30, r22
 7b8:	9f 01       	movw	r18, r30
 7ba:	e8 94       	clt
 7bc:	42 30       	cpi	r20, 0x02	; 2
 7be:	c4 f0       	brlt	.+48     	; 0x7f0 <itoa+0x3a>
 7c0:	45 32       	cpi	r20, 0x25	; 37
 7c2:	b4 f4       	brge	.+44     	; 0x7f0 <itoa+0x3a>
 7c4:	4a 30       	cpi	r20, 0x0A	; 10
 7c6:	29 f4       	brne	.+10     	; 0x7d2 <itoa+0x1c>
 7c8:	97 fb       	bst	r25, 7
 7ca:	1e f4       	brtc	.+6      	; 0x7d2 <itoa+0x1c>
 7cc:	90 95       	com	r25
 7ce:	81 95       	neg	r24
 7d0:	9f 4f       	sbci	r25, 0xFF	; 255
 7d2:	64 2f       	mov	r22, r20
 7d4:	77 27       	eor	r23, r23
 7d6:	0e 94 0c 04 	call	0x818	; 0x818 <__udivmodhi4>
 7da:	80 5d       	subi	r24, 0xD0	; 208
 7dc:	8a 33       	cpi	r24, 0x3A	; 58
 7de:	0c f0       	brlt	.+2      	; 0x7e2 <itoa+0x2c>
 7e0:	89 5d       	subi	r24, 0xD9	; 217
 7e2:	81 93       	st	Z+, r24
 7e4:	cb 01       	movw	r24, r22
 7e6:	00 97       	sbiw	r24, 0x00	; 0
 7e8:	a1 f7       	brne	.-24     	; 0x7d2 <itoa+0x1c>
 7ea:	16 f4       	brtc	.+4      	; 0x7f0 <itoa+0x3a>
 7ec:	5d e2       	ldi	r21, 0x2D	; 45
 7ee:	51 93       	st	Z+, r21
 7f0:	10 82       	st	Z, r1
 7f2:	c9 01       	movw	r24, r18
 7f4:	0c 94 fc 03 	jmp	0x7f8	; 0x7f8 <strrev>

000007f8 <strrev>:
 7f8:	dc 01       	movw	r26, r24
 7fa:	fc 01       	movw	r30, r24
 7fc:	67 2f       	mov	r22, r23
 7fe:	71 91       	ld	r23, Z+
 800:	77 23       	and	r23, r23
 802:	e1 f7       	brne	.-8      	; 0x7fc <strrev+0x4>
 804:	32 97       	sbiw	r30, 0x02	; 2
 806:	04 c0       	rjmp	.+8      	; 0x810 <strrev+0x18>
 808:	7c 91       	ld	r23, X
 80a:	6d 93       	st	X+, r22
 80c:	70 83       	st	Z, r23
 80e:	62 91       	ld	r22, -Z
 810:	ae 17       	cp	r26, r30
 812:	bf 07       	cpc	r27, r31
 814:	c8 f3       	brcs	.-14     	; 0x808 <strrev+0x10>
 816:	08 95       	ret

00000818 <__udivmodhi4>:
 818:	aa 1b       	sub	r26, r26
 81a:	bb 1b       	sub	r27, r27
 81c:	51 e1       	ldi	r21, 0x11	; 17
 81e:	07 c0       	rjmp	.+14     	; 0x82e <__udivmodhi4_ep>

00000820 <__udivmodhi4_loop>:
 820:	aa 1f       	adc	r26, r26
 822:	bb 1f       	adc	r27, r27
 824:	a6 17       	cp	r26, r22
 826:	b7 07       	cpc	r27, r23
 828:	10 f0       	brcs	.+4      	; 0x82e <__udivmodhi4_ep>
 82a:	a6 1b       	sub	r26, r22
 82c:	b7 0b       	sbc	r27, r23

0000082e <__udivmodhi4_ep>:
 82e:	88 1f       	adc	r24, r24
 830:	99 1f       	adc	r25, r25
 832:	5a 95       	dec	r21
 834:	a9 f7       	brne	.-22     	; 0x820 <__udivmodhi4_loop>
 836:	80 95       	com	r24
 838:	90 95       	com	r25
 83a:	bc 01       	movw	r22, r24
 83c:	cd 01       	movw	r24, r26
 83e:	08 95       	ret

00000840 <_exit>:
 840:	f8 94       	cli

00000842 <__stop_program>:
 842:	ff cf       	rjmp	.-2      	; 0x842 <__stop_program>
