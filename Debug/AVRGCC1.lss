
AVRGCC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001fc  00800100  00002088  0000211c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002088  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000090  008002fc  008002fc  00002318  2**0
                  ALLOC
  3 .stab         000013d4  00000000  00000000  00002318  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000547  00000000  00000000  000036ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000128  00000000  00000000  00003c33  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000421  00000000  00000000  00003d5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000254b  00000000  00000000  0000417c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000b21  00000000  00000000  000066c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002354  00000000  00000000  000071e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000340  00000000  00000000  0000953c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000009bf  00000000  00000000  0000987c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001ab7  00000000  00000000  0000a23b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000210  00000000  00000000  0000bcf2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000000f0  00000000  00000000  0000bf02  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 be 00 	jmp	0x17c	; 0x17c <__ctors_end>
       4:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
       8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
       c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      10:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      14:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      18:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      1c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      20:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      24:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      28:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      2c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      30:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      34:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      38:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      3c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      40:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      44:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      48:	0c 94 b0 09 	jmp	0x1360	; 0x1360 <__vector_18>
      4c:	0c 94 e4 09 	jmp	0x13c8	; 0x13c8 <__vector_19>
      50:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      54:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      58:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      5c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      60:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      64:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      68:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      6c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      70:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      74:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      78:	0c 94 76 0a 	jmp	0x14ec	; 0x14ec <__vector_30>
      7c:	0c 94 ac 0a 	jmp	0x1558	; 0x1558 <__vector_31>
      80:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      84:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
      88:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>

0000008c <__c.2051>:
      8c:	41 54 2b 48 54 54 50 41 43 54 49 4f 4e 3d 30 0d     AT+HTTPACTION=0.
	...

0000009d <__c.2049>:
      9d:	41 54 2b 48 54 54 50 41 43 54 49 4f 4e 3d 31 0d     AT+HTTPACTION=1.
	...

000000ae <__c.2047>:
      ae:	41 54 2b 48 54 54 50 50 41 52 41 3d 22 43 4f 4e     AT+HTTPPARA="CON
      be:	54 45 4e 54 22 2c 22 61 70 70 6c 69 63 61 74 69     TENT","applicati
      ce:	6f 6e 2f 6a 73 6f 6e 22 0d 00                       on/json"..

000000d8 <__c.2045>:
      d8:	41 54 2b 48 54 54 50 50 41 52 41 3d 22 43 49 44     AT+HTTPPARA="CID
      e8:	22 2c 31 0d 00                                      ",1..

000000ed <__c.2043>:
      ed:	41 54 2b 48 54 54 50 49 4e 49 54 0d 00              AT+HTTPINIT..

000000fa <__c.2030>:
      fa:	41 54 2b 48 54 54 50 54 45 52 4d 0d 00              AT+HTTPTERM..

00000107 <__c.2019>:
     107:	41 54 2b 53 41 50 42 52 3d 31 2c 31 0d 00           AT+SAPBR=1,1..

00000115 <__c.2014>:
     115:	41 54 2b 53 41 50 42 52 3d 30 2c 31 0d 00           AT+SAPBR=0,1..

00000123 <__c.2009>:
     123:	41 54 2b 53 41 50 42 52 3d 32 2c 31 0d 00           AT+SAPBR=2,1..

00000131 <__c.1991>:
     131:	41 54 2b 43 4c 49 50 3d 31 0d 00                    AT+CLIP=1..

0000013c <__c.1989>:
     13c:	41 54 2b 43 50 4d 53 3d 22 53 4d 22 2c 22 53 4d     AT+CPMS="SM","SM
     14c:	22 2c 22 53 4d 22 0d 00                             ","SM"..

00000154 <__c.1987>:
     154:	41 54 2b 43 4d 47 46 3d 31 0d 00                    AT+CMGF=1..

0000015f <__c.1985>:
     15f:	41 54 0d 00                                         AT..

00000163 <__c.1980>:
     163:	41 54 0d 00                                         AT..

00000167 <__c.1974>:
     167:	41 54 2b 43 52 45 47 3f 0d 00                       AT+CREG?..

00000171 <__c.1972>:
     171:	41 54 2b 43 52 45 47 3f 0d 00 00                    AT+CREG?...

0000017c <__ctors_end>:
     17c:	11 24       	eor	r1, r1
     17e:	1f be       	out	0x3f, r1	; 63
     180:	cf ef       	ldi	r28, 0xFF	; 255
     182:	d0 e1       	ldi	r29, 0x10	; 16
     184:	de bf       	out	0x3e, r29	; 62
     186:	cd bf       	out	0x3d, r28	; 61

00000188 <__do_copy_data>:
     188:	12 e0       	ldi	r17, 0x02	; 2
     18a:	a0 e0       	ldi	r26, 0x00	; 0
     18c:	b1 e0       	ldi	r27, 0x01	; 1
     18e:	e8 e8       	ldi	r30, 0x88	; 136
     190:	f0 e2       	ldi	r31, 0x20	; 32
     192:	00 e0       	ldi	r16, 0x00	; 0
     194:	0b bf       	out	0x3b, r16	; 59
     196:	02 c0       	rjmp	.+4      	; 0x19c <__do_copy_data+0x14>
     198:	07 90       	elpm	r0, Z+
     19a:	0d 92       	st	X+, r0
     19c:	ac 3f       	cpi	r26, 0xFC	; 252
     19e:	b1 07       	cpc	r27, r17
     1a0:	d9 f7       	brne	.-10     	; 0x198 <__do_copy_data+0x10>

000001a2 <__do_clear_bss>:
     1a2:	13 e0       	ldi	r17, 0x03	; 3
     1a4:	ac ef       	ldi	r26, 0xFC	; 252
     1a6:	b2 e0       	ldi	r27, 0x02	; 2
     1a8:	01 c0       	rjmp	.+2      	; 0x1ac <.do_clear_bss_start>

000001aa <.do_clear_bss_loop>:
     1aa:	1d 92       	st	X+, r1

000001ac <.do_clear_bss_start>:
     1ac:	ac 38       	cpi	r26, 0x8C	; 140
     1ae:	b1 07       	cpc	r27, r17
     1b0:	e1 f7       	brne	.-8      	; 0x1aa <.do_clear_bss_loop>
     1b2:	0e 94 1d 02 	call	0x43a	; 0x43a <main>
     1b6:	0c 94 42 10 	jmp	0x2084	; 0x2084 <_exit>

000001ba <__bad_interrupt>:
     1ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001be <lcd_write_4>:
  Exit:     no parameters
  Notes:    use either time delays or the busy flag
*/
void lcd_write_4(uint8_t theByte)
{
    lcd_D7_port &= ~(1<<lcd_D7_bit);                        // assume that data is '0'
     1be:	af 98       	cbi	0x15, 7	; 21
    if (theByte & 1<<7) lcd_D7_port |= (1<<lcd_D7_bit);     // make data = '1' if necessary
     1c0:	88 23       	and	r24, r24
     1c2:	0c f4       	brge	.+2      	; 0x1c6 <lcd_write_4+0x8>
     1c4:	af 9a       	sbi	0x15, 7	; 21

    lcd_D6_port &= ~(1<<lcd_D6_bit);                        // repeat for each data bit
     1c6:	ae 98       	cbi	0x15, 6	; 21
    if (theByte & 1<<6) lcd_D6_port |= (1<<lcd_D6_bit);
     1c8:	86 fd       	sbrc	r24, 6
     1ca:	ae 9a       	sbi	0x15, 6	; 21

    lcd_D5_port &= ~(1<<lcd_D5_bit);
     1cc:	ad 98       	cbi	0x15, 5	; 21
    if (theByte & 1<<5) lcd_D5_port |= (1<<lcd_D5_bit);
     1ce:	85 fd       	sbrc	r24, 5
     1d0:	ad 9a       	sbi	0x15, 5	; 21

    lcd_D4_port &= ~(1<<lcd_D4_bit);
     1d2:	ac 98       	cbi	0x15, 4	; 21
    if (theByte & 1<<4) lcd_D4_port |= (1<<lcd_D4_bit);
     1d4:	84 fd       	sbrc	r24, 4
     1d6:	ac 9a       	sbi	0x15, 4	; 21

// write the data
                                                    // 'Address set-up time' (40 nS)
    lcd_E_port |= (1<<lcd_E_bit);                   // Enable pin high
     1d8:	97 9a       	sbi	0x12, 7	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1da:	82 e0       	ldi	r24, 0x02	; 2
     1dc:	8a 95       	dec	r24
     1de:	f1 f7       	brne	.-4      	; 0x1dc <lcd_write_4+0x1e>
     1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <lcd_write_4+0x24>
    _delay_us(1);                                   // implement 'Data set-up time' (80 nS) and 'Enable pulse width' (230 nS)
    lcd_E_port &= ~(1<<lcd_E_bit);                  // Enable pin low
     1e2:	97 98       	cbi	0x12, 7	; 18
     1e4:	82 e0       	ldi	r24, 0x02	; 2
     1e6:	8a 95       	dec	r24
     1e8:	f1 f7       	brne	.-4      	; 0x1e6 <lcd_write_4+0x28>
     1ea:	00 c0       	rjmp	.+0      	; 0x1ec <lcd_write_4+0x2e>
    _delay_us(1);                                   // implement 'Data hold time' (10 nS) and 'Enable cycle time' (500 nS)
}
     1ec:	08 95       	ret

000001ee <lcd_write_instruction_4d>:
  Entry:    (theInstruction) is the information to be sent to the instruction register
  Exit:     no parameters
  Notes:    does not deal with RW (busy flag is not implemented)
*/
void lcd_write_instruction_4d(uint8_t theInstruction)
{
     1ee:	1f 93       	push	r17
     1f0:	18 2f       	mov	r17, r24
    lcd_RS_port &= ~(1<<lcd_RS_bit);                // select the Instruction Register (RS low)
     1f2:	95 98       	cbi	0x12, 5	; 18
    lcd_E_port &= ~(1<<lcd_E_bit);                  // make sure E is initially low
     1f4:	97 98       	cbi	0x12, 7	; 18
    lcd_write_4(theInstruction);                    // write the upper 4-bits of the data
     1f6:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_write_4>
    lcd_write_4(theInstruction << 4);               // write the lower 4-bits of the data
     1fa:	81 2f       	mov	r24, r17
     1fc:	82 95       	swap	r24
     1fe:	80 7f       	andi	r24, 0xF0	; 240
     200:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_write_4>
}
     204:	1f 91       	pop	r17
     206:	08 95       	ret

00000208 <lcd_write_character_4d>:
  Exit:     no parameters
  Notes:    does not deal with RW (busy flag is not implemented)
*/

void lcd_write_character_4d(uint8_t theData)
{
     208:	1f 93       	push	r17
     20a:	18 2f       	mov	r17, r24
    lcd_RS_port |= (1<<lcd_RS_bit);                 // select the Data Register (RS high)
     20c:	95 9a       	sbi	0x12, 5	; 18
    lcd_E_port &= ~(1<<lcd_E_bit);                  // make sure E is initially low
     20e:	97 98       	cbi	0x12, 7	; 18
    lcd_write_4(theData);                           // write the upper 4-bits of the data
     210:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_write_4>
    lcd_write_4(theData << 4);                      // write the lower 4-bits of the data
     214:	81 2f       	mov	r24, r17
     216:	82 95       	swap	r24
     218:	80 7f       	andi	r24, 0xF0	; 240
     21a:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_write_4>
}
     21e:	1f 91       	pop	r17
     220:	08 95       	ret

00000222 <lcd_write_string_4d>:
  Entry:    (theString) is the string to be displayed
  Exit:     no parameters
  Notes:    uses time delays rather than checking the busy flag
*/
void lcd_write_string_4d(uint8_t theString[])
{
     222:	0f 93       	push	r16
     224:	1f 93       	push	r17
     226:	df 93       	push	r29
     228:	cf 93       	push	r28
     22a:	00 d0       	rcall	.+0      	; 0x22c <lcd_write_string_4d+0xa>
     22c:	cd b7       	in	r28, 0x3d	; 61
     22e:	de b7       	in	r29, 0x3e	; 62
     230:	8c 01       	movw	r16, r24
    volatile int i = 0;                             // character counter*/
     232:	1a 82       	std	Y+2, r1	; 0x02
     234:	19 82       	std	Y+1, r1	; 0x01
    while (theString[i] != 0)
     236:	e9 81       	ldd	r30, Y+1	; 0x01
     238:	fa 81       	ldd	r31, Y+2	; 0x02
     23a:	e8 0f       	add	r30, r24
     23c:	f9 1f       	adc	r31, r25
     23e:	80 81       	ld	r24, Z
     240:	88 23       	and	r24, r24
     242:	b9 f0       	breq	.+46     	; 0x272 <lcd_write_string_4d+0x50>
    {
        lcd_write_character_4d(theString[i]);
     244:	e9 81       	ldd	r30, Y+1	; 0x01
     246:	fa 81       	ldd	r31, Y+2	; 0x02
     248:	e0 0f       	add	r30, r16
     24a:	f1 1f       	adc	r31, r17
     24c:	80 81       	ld	r24, Z
     24e:	0e 94 04 01 	call	0x208	; 0x208 <lcd_write_character_4d>
        i++;
     252:	89 81       	ldd	r24, Y+1	; 0x01
     254:	9a 81       	ldd	r25, Y+2	; 0x02
     256:	01 96       	adiw	r24, 0x01	; 1
     258:	9a 83       	std	Y+2, r25	; 0x02
     25a:	89 83       	std	Y+1, r24	; 0x01
     25c:	85 ed       	ldi	r24, 0xD5	; 213
     25e:	8a 95       	dec	r24
     260:	f1 f7       	brne	.-4      	; 0x25e <lcd_write_string_4d+0x3c>
     262:	00 00       	nop
  Notes:    uses time delays rather than checking the busy flag
*/
void lcd_write_string_4d(uint8_t theString[])
{
    volatile int i = 0;                             // character counter*/
    while (theString[i] != 0)
     264:	e9 81       	ldd	r30, Y+1	; 0x01
     266:	fa 81       	ldd	r31, Y+2	; 0x02
     268:	e0 0f       	add	r30, r16
     26a:	f1 1f       	adc	r31, r17
     26c:	80 81       	ld	r24, Z
     26e:	88 23       	and	r24, r24
     270:	49 f7       	brne	.-46     	; 0x244 <lcd_write_string_4d+0x22>
    {
        lcd_write_character_4d(theString[i]);
        i++;
        _delay_us(80);                              // 40 uS delay (min)
    }
}
     272:	0f 90       	pop	r0
     274:	0f 90       	pop	r0
     276:	cf 91       	pop	r28
     278:	df 91       	pop	r29
     27a:	1f 91       	pop	r17
     27c:	0f 91       	pop	r16
     27e:	08 95       	ret

00000280 <lcd_puthex>:
void CopyStringtoLCD(const uint8_t *FlashLoc);
void LCDsendChar(uint8_t ch);


void lcd_puthex(const char data)
{
     280:	1f 93       	push	r17
     282:	18 2f       	mov	r17, r24
     284:	85 ed       	ldi	r24, 0xD5	; 213
     286:	8a 95       	dec	r24
     288:	f1 f7       	brne	.-4      	; 0x286 <lcd_puthex+0x6>
     28a:	00 00       	nop
	//lcd_write_character_4d('0');
	//_delay_us(80);
	//print 'x'
	//lcd_write_character_4d('x');
	//_delay_us(80);
	(((data>>4)&0x0F)<=9) ? (temp='0'+((data>>4)&0x0F)) : (temp='A'+ ((data>>4)&0x0F)-0x0A);
     28c:	81 2f       	mov	r24, r17
     28e:	82 95       	swap	r24
     290:	8f 70       	andi	r24, 0x0F	; 15
     292:	28 2f       	mov	r18, r24
     294:	30 e0       	ldi	r19, 0x00	; 0
     296:	2a 30       	cpi	r18, 0x0A	; 10
     298:	31 05       	cpc	r19, r1
     29a:	14 f4       	brge	.+4      	; 0x2a0 <lcd_puthex+0x20>
     29c:	80 5d       	subi	r24, 0xD0	; 208
     29e:	01 c0       	rjmp	.+2      	; 0x2a2 <lcd_puthex+0x22>
     2a0:	89 5c       	subi	r24, 0xC9	; 201
     2a2:	95 ed       	ldi	r25, 0xD5	; 213
     2a4:	9a 95       	dec	r25
     2a6:	f1 f7       	brne	.-4      	; 0x2a4 <lcd_puthex+0x24>
     2a8:	00 00       	nop
	_delay_us(80);
	//print high nibble as hex
	lcd_write_character_4d(temp);
     2aa:	0e 94 04 01 	call	0x208	; 0x208 <lcd_write_character_4d>
     2ae:	85 ed       	ldi	r24, 0xD5	; 213
     2b0:	8a 95       	dec	r24
     2b2:	f1 f7       	brne	.-4      	; 0x2b0 <lcd_puthex+0x30>
     2b4:	00 00       	nop
	_delay_us(80);
	((data&0x0F)<=9) ? (temp='0'+ (data&0x0F)) : (temp='A'+ (data&0x0F)-0x0A);
     2b6:	21 2f       	mov	r18, r17
     2b8:	30 e0       	ldi	r19, 0x00	; 0
     2ba:	2f 70       	andi	r18, 0x0F	; 15
     2bc:	30 70       	andi	r19, 0x00	; 0
     2be:	2a 30       	cpi	r18, 0x0A	; 10
     2c0:	31 05       	cpc	r19, r1
     2c2:	24 f4       	brge	.+8      	; 0x2cc <lcd_puthex+0x4c>
     2c4:	1f 70       	andi	r17, 0x0F	; 15
     2c6:	81 2f       	mov	r24, r17
     2c8:	80 5d       	subi	r24, 0xD0	; 208
     2ca:	03 c0       	rjmp	.+6      	; 0x2d2 <lcd_puthex+0x52>
     2cc:	1f 70       	andi	r17, 0x0F	; 15
     2ce:	81 2f       	mov	r24, r17
     2d0:	89 5c       	subi	r24, 0xC9	; 201
	lcd_write_character_4d(temp);
     2d2:	0e 94 04 01 	call	0x208	; 0x208 <lcd_write_character_4d>
     2d6:	95 ed       	ldi	r25, 0xD5	; 213
     2d8:	9a 95       	dec	r25
     2da:	f1 f7       	brne	.-4      	; 0x2d8 <lcd_puthex+0x58>
     2dc:	00 00       	nop
	_delay_us(80);
	//print low nibble as hex
}
     2de:	1f 91       	pop	r17
     2e0:	08 95       	ret

000002e2 <lcd_init_4d>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2e2:	8f ef       	ldi	r24, 0xFF	; 255
     2e4:	90 e7       	ldi	r25, 0x70	; 112
     2e6:	a2 e0       	ldi	r26, 0x02	; 2
     2e8:	81 50       	subi	r24, 0x01	; 1
     2ea:	90 40       	sbci	r25, 0x00	; 0
     2ec:	a0 40       	sbci	r26, 0x00	; 0
     2ee:	e1 f7       	brne	.-8      	; 0x2e8 <lcd_init_4d+0x6>
     2f0:	00 c0       	rjmp	.+0      	; 0x2f2 <lcd_init_4d+0x10>
     2f2:	00 00       	nop
void lcd_init_4d(void)
{
// Power-up delay
    _delay_ms(100);                                 // initial 40 mSec delay

    lcd_RS_port &= ~(1<<lcd_RS_bit);                // select the Instruction Register (RS low)
     2f4:	95 98       	cbi	0x12, 5	; 18
    lcd_E_port &= ~(1<<lcd_E_bit);                  // make sure E is initially low
     2f6:	97 98       	cbi	0x12, 7	; 18

// Reset the LCD controller
    lcd_write_4(lcd_FunctionReset);                 // first part of reset sequence
     2f8:	80 e3       	ldi	r24, 0x30	; 48
     2fa:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_write_4>
     2fe:	af e1       	ldi	r26, 0x1F	; 31
     300:	be e4       	ldi	r27, 0x4E	; 78
     302:	11 97       	sbiw	r26, 0x01	; 1
     304:	f1 f7       	brne	.-4      	; 0x302 <lcd_init_4d+0x20>
     306:	00 c0       	rjmp	.+0      	; 0x308 <lcd_init_4d+0x26>
     308:	00 00       	nop
    _delay_ms(10);                                  // 4.1 mS delay (min)

    lcd_write_4(lcd_FunctionReset);                 // second part of reset sequence
     30a:	80 e3       	ldi	r24, 0x30	; 48
     30c:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_write_4>
     310:	8f ec       	ldi	r24, 0xCF	; 207
     312:	97 e0       	ldi	r25, 0x07	; 7
     314:	01 97       	sbiw	r24, 0x01	; 1
     316:	f1 f7       	brne	.-4      	; 0x314 <lcd_init_4d+0x32>
     318:	00 c0       	rjmp	.+0      	; 0x31a <lcd_init_4d+0x38>
     31a:	00 00       	nop
    _delay_ms(1);                                 // 100uS delay (min)

    lcd_write_4(lcd_FunctionReset);                 // third part of reset sequence
     31c:	80 e3       	ldi	r24, 0x30	; 48
     31e:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_write_4>
     322:	af ec       	ldi	r26, 0xCF	; 207
     324:	b7 e0       	ldi	r27, 0x07	; 7
     326:	11 97       	sbiw	r26, 0x01	; 1
     328:	f1 f7       	brne	.-4      	; 0x326 <lcd_init_4d+0x44>
     32a:	00 c0       	rjmp	.+0      	; 0x32c <lcd_init_4d+0x4a>
     32c:	00 00       	nop
// Preliminary Function Set instruction - used only to set the 4-bit mode.
// The number of lines or the font cannot be set at this time since the controller is still in the
//  8-bit mode, but the data transfer mode can be changed since this parameter is determined by one 
//  of the upper four bits of the instruction.
 
    lcd_write_4(lcd_FunctionSet4bit);               // set 4-bit mode
     32e:	88 e2       	ldi	r24, 0x28	; 40
     330:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_write_4>
     334:	8f ec       	ldi	r24, 0xCF	; 207
     336:	97 e0       	ldi	r25, 0x07	; 7
     338:	01 97       	sbiw	r24, 0x01	; 1
     33a:	f1 f7       	brne	.-4      	; 0x338 <lcd_init_4d+0x56>
     33c:	00 c0       	rjmp	.+0      	; 0x33e <lcd_init_4d+0x5c>
     33e:	00 00       	nop
    _delay_ms(1);                                  // 40uS delay (min)

// Function Set instruction
    lcd_write_instruction_4d(lcd_FunctionSet4bit);   // set mode, lines, and font
     340:	88 e2       	ldi	r24, 0x28	; 40
     342:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd_write_instruction_4d>
     346:	af ec       	ldi	r26, 0xCF	; 207
     348:	b7 e0       	ldi	r27, 0x07	; 7
     34a:	11 97       	sbiw	r26, 0x01	; 1
     34c:	f1 f7       	brne	.-4      	; 0x34a <lcd_init_4d+0x68>
     34e:	00 c0       	rjmp	.+0      	; 0x350 <lcd_init_4d+0x6e>
     350:	00 00       	nop
// The next three instructions are specified in the data sheet as part of the initialization routine, 
//  so it is a good idea (but probably not necessary) to do them just as specified and then redo them 
//  later if the application requires a different configuration.

// Display On/Off Control instruction
    lcd_write_instruction_4d(lcd_DisplayOff);        // turn display OFF
     352:	88 e0       	ldi	r24, 0x08	; 8
     354:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd_write_instruction_4d>
     358:	8f ec       	ldi	r24, 0xCF	; 207
     35a:	97 e0       	ldi	r25, 0x07	; 7
     35c:	01 97       	sbiw	r24, 0x01	; 1
     35e:	f1 f7       	brne	.-4      	; 0x35c <lcd_init_4d+0x7a>
     360:	00 c0       	rjmp	.+0      	; 0x362 <lcd_init_4d+0x80>
     362:	00 00       	nop
    _delay_ms(1);                                  // 40uS delay (min)

// Clear Display instruction
    lcd_write_instruction_4d(lcd_Clear);             // clear display RAM
     364:	81 e0       	ldi	r24, 0x01	; 1
     366:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd_write_instruction_4d>
     36a:	af e3       	ldi	r26, 0x3F	; 63
     36c:	bf e1       	ldi	r27, 0x1F	; 31
     36e:	11 97       	sbiw	r26, 0x01	; 1
     370:	f1 f7       	brne	.-4      	; 0x36e <lcd_init_4d+0x8c>
     372:	00 c0       	rjmp	.+0      	; 0x374 <lcd_init_4d+0x92>
     374:	00 00       	nop
    _delay_ms(4);                                   // 1.64 mS delay (min)

// ; Entry Mode Set instruction
    lcd_write_instruction_4d(lcd_EntryMode);         // set desired shift characteristics
     376:	86 e0       	ldi	r24, 0x06	; 6
     378:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd_write_instruction_4d>
     37c:	8f ec       	ldi	r24, 0xCF	; 207
     37e:	97 e0       	ldi	r25, 0x07	; 7
     380:	01 97       	sbiw	r24, 0x01	; 1
     382:	f1 f7       	brne	.-4      	; 0x380 <lcd_init_4d+0x9e>
     384:	00 c0       	rjmp	.+0      	; 0x386 <lcd_init_4d+0xa4>
     386:	00 00       	nop

// This is the end of the LCD controller initialization as specified in the data sheet, but the display
//  has been left in the OFF condition.  This is a good time to turn the display back ON.
 
// Display On/Off Control instruction
    lcd_write_instruction_4d(lcd_DisplayOn);         // turn the display ON
     388:	8c e0       	ldi	r24, 0x0C	; 12
     38a:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd_write_instruction_4d>
     38e:	af ec       	ldi	r26, 0xCF	; 207
     390:	b7 e0       	ldi	r27, 0x07	; 7
     392:	11 97       	sbiw	r26, 0x01	; 1
     394:	f1 f7       	brne	.-4      	; 0x392 <lcd_init_4d+0xb0>
     396:	00 c0       	rjmp	.+0      	; 0x398 <lcd_init_4d+0xb6>
     398:	00 00       	nop
    _delay_ms(1);                                  // 40uS delay (min)
}
     39a:	08 95       	ret

0000039c <LCDsendChar>:

void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{

	//4 bit part
	PORTC=(ch&0b11110000);
     39c:	98 2f       	mov	r25, r24
     39e:	90 7f       	andi	r25, 0xF0	; 240
     3a0:	95 bb       	out	0x15, r25	; 21
	PORTD|=1<<lcd_RS_bit ;
     3a2:	95 9a       	sbi	0x12, 5	; 18
	PORTG|=1<<lcd_E_bit;		
     3a4:	e5 e6       	ldi	r30, 0x65	; 101
     3a6:	f0 e0       	ldi	r31, 0x00	; 0
     3a8:	90 81       	ld	r25, Z
     3aa:	90 68       	ori	r25, 0x80	; 128
     3ac:	90 83       	st	Z, r25
     3ae:	af ec       	ldi	r26, 0xCF	; 207
     3b0:	b7 e0       	ldi	r27, 0x07	; 7
     3b2:	11 97       	sbiw	r26, 0x01	; 1
     3b4:	f1 f7       	brne	.-4      	; 0x3b2 <LCDsendChar+0x16>
     3b6:	00 c0       	rjmp	.+0      	; 0x3b8 <LCDsendChar+0x1c>
     3b8:	00 00       	nop
	_delay_ms(1);
	PORTG&=~(1<<lcd_E_bit);	
     3ba:	90 81       	ld	r25, Z
     3bc:	9f 77       	andi	r25, 0x7F	; 127
     3be:	90 83       	st	Z, r25
	PORTD&=~(1<<lcd_RS_bit);
     3c0:	95 98       	cbi	0x12, 5	; 18
     3c2:	af ec       	ldi	r26, 0xCF	; 207
     3c4:	b7 e0       	ldi	r27, 0x07	; 7
     3c6:	11 97       	sbiw	r26, 0x01	; 1
     3c8:	f1 f7       	brne	.-4      	; 0x3c6 <LCDsendChar+0x2a>
     3ca:	00 c0       	rjmp	.+0      	; 0x3cc <LCDsendChar+0x30>
     3cc:	00 00       	nop
	_delay_ms(1);
	PORTC=((ch&0b00001111)<<4);
     3ce:	90 e0       	ldi	r25, 0x00	; 0
     3d0:	82 95       	swap	r24
     3d2:	92 95       	swap	r25
     3d4:	90 7f       	andi	r25, 0xF0	; 240
     3d6:	98 27       	eor	r25, r24
     3d8:	80 7f       	andi	r24, 0xF0	; 240
     3da:	98 27       	eor	r25, r24
     3dc:	85 bb       	out	0x15, r24	; 21
	PORTD|=1<<lcd_RS_bit;
     3de:	95 9a       	sbi	0x12, 5	; 18
	PORTG|=1<<lcd_E_bit;		
     3e0:	80 81       	ld	r24, Z
     3e2:	80 68       	ori	r24, 0x80	; 128
     3e4:	80 83       	st	Z, r24
     3e6:	8f ec       	ldi	r24, 0xCF	; 207
     3e8:	97 e0       	ldi	r25, 0x07	; 7
     3ea:	01 97       	sbiw	r24, 0x01	; 1
     3ec:	f1 f7       	brne	.-4      	; 0x3ea <LCDsendChar+0x4e>
     3ee:	00 c0       	rjmp	.+0      	; 0x3f0 <LCDsendChar+0x54>
     3f0:	00 00       	nop
	_delay_ms(1);
	PORTG&=~(1<<lcd_E_bit);	
     3f2:	80 81       	ld	r24, Z
     3f4:	8f 77       	andi	r24, 0x7F	; 127
     3f6:	80 83       	st	Z, r24
	PORTD&=~(1<<lcd_RS_bit);
     3f8:	95 98       	cbi	0x12, 5	; 18
     3fa:	af ec       	ldi	r26, 0xCF	; 207
     3fc:	b7 e0       	ldi	r27, 0x07	; 7
     3fe:	11 97       	sbiw	r26, 0x01	; 1
     400:	f1 f7       	brne	.-4      	; 0x3fe <LCDsendChar+0x62>
     402:	00 c0       	rjmp	.+0      	; 0x404 <LCDsendChar+0x68>
     404:	00 00       	nop
	_delay_ms(1);
}
     406:	08 95       	ret

00000408 <CopyStringtoLCD>:
    _delay_us(1);                                   // implement 'Data set-up time' (80 nS) and 'Enable pulse width' (230 nS)
    lcd_E_port &= ~(1<<lcd_E_bit);                  // Enable pin low
    _delay_us(1);                                   // implement 'Data hold time' (10 nS) and 'Enable cycle time' (500 nS)
}
void CopyStringtoLCD(const uint8_t *FlashLoc)
{
     408:	1f 93       	push	r17
     40a:	cf 93       	push	r28
     40c:	df 93       	push	r29
     40e:	ec 01       	movw	r28, r24
	uint8_t i;
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
     410:	fe 01       	movw	r30, r28
     412:	24 91       	lpm	r18, Z+
     414:	22 23       	and	r18, r18
     416:	69 f0       	breq	.+26     	; 0x432 <CopyStringtoLCD+0x2a>
     418:	10 e0       	ldi	r17, 0x00	; 0
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
     41a:	fc 01       	movw	r30, r24
     41c:	84 91       	lpm	r24, Z+
     41e:	0e 94 ce 01 	call	0x39c	; 0x39c <LCDsendChar>
    _delay_us(1);                                   // implement 'Data hold time' (10 nS) and 'Enable cycle time' (500 nS)
}
void CopyStringtoLCD(const uint8_t *FlashLoc)
{
	uint8_t i;
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
     422:	1f 5f       	subi	r17, 0xFF	; 255
     424:	ce 01       	movw	r24, r28
     426:	81 0f       	add	r24, r17
     428:	91 1d       	adc	r25, r1
     42a:	fc 01       	movw	r30, r24
     42c:	24 91       	lpm	r18, Z+
     42e:	22 23       	and	r18, r18
     430:	a1 f7       	brne	.-24     	; 0x41a <CopyStringtoLCD+0x12>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
     432:	df 91       	pop	r29
     434:	cf 91       	pop	r28
     436:	1f 91       	pop	r17
     438:	08 95       	ret

0000043a <main>:
/* Define UART buad rate here */
#define UART_BAUD_RATE      9600      
#define PARSE_CONST         9

int main(void)
{
     43a:	2f 92       	push	r2
     43c:	3f 92       	push	r3
     43e:	4f 92       	push	r4
     440:	5f 92       	push	r5
     442:	6f 92       	push	r6
     444:	7f 92       	push	r7
     446:	8f 92       	push	r8
     448:	9f 92       	push	r9
     44a:	af 92       	push	r10
     44c:	bf 92       	push	r11
     44e:	cf 92       	push	r12
     450:	df 92       	push	r13
     452:	ef 92       	push	r14
     454:	ff 92       	push	r15
     456:	0f 93       	push	r16
     458:	1f 93       	push	r17
     45a:	df 93       	push	r29
     45c:	cf 93       	push	r28
     45e:	cd b7       	in	r28, 0x3d	; 61
     460:	de b7       	in	r29, 0x3e	; 62
     462:	c9 54       	subi	r28, 0x49	; 73
     464:	d0 40       	sbci	r29, 0x00	; 0
     466:	0f b6       	in	r0, 0x3f	; 63
     468:	f8 94       	cli
     46a:	de bf       	out	0x3e, r29	; 62
     46c:	0f be       	out	0x3f, r0	; 63
     46e:	cd bf       	out	0x3d, r28	; 61
	  DDRC = 0xFF;    // lcd pins
     470:	8f ef       	ldi	r24, 0xFF	; 255
     472:	84 bb       	out	0x14, r24	; 20
	// configure the microprocessor pins for the control lines
    lcd_E_ddr |= (1<<lcd_E_bit);                    // E line - output
     474:	8f 9a       	sbi	0x11, 7	; 17
    lcd_RS_ddr |= (1<<lcd_RS_bit);                  // RS line - output
     476:	8d 9a       	sbi	0x11, 5	; 17
 
    lcd_RS_port &= ~(1<<lcd_RS_bit);
     478:	95 98       	cbi	0x12, 5	; 18
    char buffer[7];
    int  num=134;
    uint8_t answer;
    uint8_t temp_min[3];
    uint8_t temp_max[3];
	  uint8_t http_respon_data[64]="12,25";
     47a:	de 01       	movw	r26, r28
     47c:	17 96       	adiw	r26, 0x07	; 7
     47e:	e7 e9       	ldi	r30, 0x97	; 151
     480:	f1 e0       	ldi	r31, 0x01	; 1
     482:	86 e0       	ldi	r24, 0x06	; 6
     484:	01 90       	ld	r0, Z+
     486:	0d 92       	st	X+, r0
     488:	81 50       	subi	r24, 0x01	; 1
     48a:	e1 f7       	brne	.-8      	; 0x484 <main+0x4a>
     48c:	fe 01       	movw	r30, r28
     48e:	3d 96       	adiw	r30, 0x0d	; 13
     490:	8a e3       	ldi	r24, 0x3A	; 58
     492:	df 01       	movw	r26, r30
     494:	1d 92       	st	X+, r1
     496:	8a 95       	dec	r24
     498:	e9 f7       	brne	.-6      	; 0x494 <main+0x5a>
    volatile uint8_t room1_temp;
    char s[2] = ",";
     49a:	80 91 d7 01 	lds	r24, 0x01D7
     49e:	90 91 d8 01 	lds	r25, 0x01D8
     4a2:	fe 01       	movw	r30, r28
     4a4:	e8 5b       	subi	r30, 0xB8	; 184
     4a6:	ff 4f       	sbci	r31, 0xFF	; 255
     4a8:	91 83       	std	Z+1, r25	; 0x01
     4aa:	80 83       	st	Z, r24
    char *token;
    
    lcd_init_4d();
     4ac:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lcd_init_4d>
	  lcd_write_instruction_4d(lcd_Clear);
     4b0:	81 e0       	ldi	r24, 0x01	; 1
     4b2:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd_write_instruction_4d>
     4b6:	8f e1       	ldi	r24, 0x1F	; 31
     4b8:	9e e4       	ldi	r25, 0x4E	; 78
     4ba:	01 97       	sbiw	r24, 0x01	; 1
     4bc:	f1 f7       	brne	.-4      	; 0x4ba <main+0x80>
     4be:	00 c0       	rjmp	.+0      	; 0x4c0 <main+0x86>
     4c0:	00 00       	nop
    _delay_ms(10);
    lcd_write_string_4d("main");
     4c2:	80 e0       	ldi	r24, 0x00	; 0
     4c4:	91 e0       	ldi	r25, 0x01	; 1
     4c6:	0e 94 11 01 	call	0x222	; 0x222 <lcd_write_string_4d>
     *  with the macro 
     *  UART_BAUD_SELECT() (normal speed mode )
     *  or 
     *  UART_BAUD_SELECT_DOUBLE_SPEED() ( double speed mode)
     */
    sim900_init_uart(9600);
     4ca:	80 e8       	ldi	r24, 0x80	; 128
     4cc:	95 e2       	ldi	r25, 0x25	; 37
     4ce:	0e 94 1b 03 	call	0x636	; 0x636 <sim900_init_uart>
//lcd_write_string_4d(" ");
		    //lcd_write_string_4d(temp_max);
    /*
     * now enable interrupt, since UART library is interrupt controlled
     */
    sei();
     4d2:	78 94       	sei
    lcd_write_instruction_4d(lcd_Clear);
     4d4:	81 e0       	ldi	r24, 0x01	; 1
     4d6:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd_write_instruction_4d>
     4da:	af e1       	ldi	r26, 0x1F	; 31
     4dc:	be e4       	ldi	r27, 0x4E	; 78
     4de:	11 97       	sbiw	r26, 0x01	; 1
     4e0:	f1 f7       	brne	.-4      	; 0x4de <main+0xa4>
     4e2:	00 c0       	rjmp	.+0      	; 0x4e4 <main+0xaa>
     4e4:	00 00       	nop
    _delay_ms(10);
    if(sim900_gprs_is_opened())
     4e6:	0e 94 bb 05 	call	0xb76	; 0xb76 <sim900_gprs_is_opened>
     4ea:	88 23       	and	r24, r24
     4ec:	59 f0       	breq	.+22     	; 0x504 <main+0xca>
    {
        answer = sim900_gprs_close_connection();
     4ee:	0e 94 d4 05 	call	0xba8	; 0xba8 <sim900_gprs_close_connection>
     4f2:	8f ef       	ldi	r24, 0xFF	; 255
     4f4:	93 ed       	ldi	r25, 0xD3	; 211
     4f6:	a0 e3       	ldi	r26, 0x30	; 48
     4f8:	81 50       	subi	r24, 0x01	; 1
     4fa:	90 40       	sbci	r25, 0x00	; 0
     4fc:	a0 40       	sbci	r26, 0x00	; 0
     4fe:	e1 f7       	brne	.-8      	; 0x4f8 <main+0xbe>
     500:	00 c0       	rjmp	.+0      	; 0x502 <main+0xc8>
     502:	00 00       	nop
        _delay_ms(2000);
    }
    
    lcd_write_string_4d("Opening GPRS...");
     504:	85 e0       	ldi	r24, 0x05	; 5
     506:	91 e0       	ldi	r25, 0x01	; 1
     508:	0e 94 11 01 	call	0x222	; 0x222 <lcd_write_string_4d>
        sim900_gprs_open_connection(
     50c:	85 e1       	ldi	r24, 0x15	; 21
     50e:	91 e0       	ldi	r25, 0x01	; 1
     510:	6e e1       	ldi	r22, 0x1E	; 30
     512:	71 e0       	ldi	r23, 0x01	; 1
     514:	47 e2       	ldi	r20, 0x27	; 39
     516:	51 e0       	ldi	r21, 0x01	; 1
     518:	0e 94 0c 06 	call	0xc18	; 0xc18 <sim900_gprs_open_connection>
            (const uint8_t*)"internet", (const uint8_t*)"MobiCom ", (const uint8_t*)" ");
	lcd_write_instruction_4d(lcd_Clear);
     51c:	81 e0       	ldi	r24, 0x01	; 1
     51e:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd_write_instruction_4d>
     522:	af e1       	ldi	r26, 0x1F	; 31
     524:	be e4       	ldi	r27, 0x4E	; 78
     526:	11 97       	sbiw	r26, 0x01	; 1
     528:	f1 f7       	brne	.-4      	; 0x526 <main+0xec>
     52a:	00 c0       	rjmp	.+0      	; 0x52c <main+0xf2>
     52c:	00 00       	nop
    _delay_ms(10);
	lcd_write_string_4d("Initializing HTTP...");
     52e:	89 e2       	ldi	r24, 0x29	; 41
     530:	91 e0       	ldi	r25, 0x01	; 1
     532:	0e 94 11 01 	call	0x222	; 0x222 <lcd_write_string_4d>


    while(1)
	  {
		sim900_http_send_data(
     536:	0f 2e       	mov	r0, r31
     538:	fe e3       	ldi	r31, 0x3E	; 62
     53a:	6f 2e       	mov	r6, r31
     53c:	f1 e0       	ldi	r31, 0x01	; 1
     53e:	7f 2e       	mov	r7, r31
     540:	f0 2d       	mov	r31, r0
     542:	0f 2e       	mov	r0, r31
     544:	fc e6       	ldi	r31, 0x6C	; 108
     546:	4f 2e       	mov	r4, r31
     548:	f1 e0       	ldi	r31, 0x01	; 1
     54a:	5f 2e       	mov	r5, r31
     54c:	f0 2d       	mov	r31, r0
     54e:	0f 2e       	mov	r0, r31
     550:	f7 e0       	ldi	r31, 0x07	; 7
     552:	ef 2e       	mov	r14, r31
     554:	ff 24       	eor	r15, r15
     556:	f0 2d       	mov	r31, r0
     558:	ec 0e       	add	r14, r28
     55a:	fd 1e       	adc	r15, r29
            HTTP_POST,
            (const uint8_t*)"http://intense-fjord-78468.herokuapp.com/temp",
			(const uint8_t*)"{\"temp\": 16}",
            64,
            http_respon_data);
        token = strtok(http_respon_data,s);
     55c:	0f 2e       	mov	r0, r31
     55e:	f8 e4       	ldi	r31, 0x48	; 72
     560:	af 2e       	mov	r10, r31
     562:	bb 24       	eor	r11, r11
     564:	f0 2d       	mov	r31, r0
     566:	ac 0e       	add	r10, r28
     568:	bd 1e       	adc	r11, r29
        strcpy(temp_min,token);
     56a:	6e 01       	movw	r12, r28
     56c:	08 94       	sec
     56e:	c1 1c       	adc	r12, r1
     570:	d1 1c       	adc	r13, r1
        token = strtok(NULL,s);
        strcpy(temp_max,token);
     572:	88 24       	eor	r8, r8
     574:	99 24       	eor	r9, r9
     576:	68 94       	set
     578:	82 f8       	bld	r8, 2
     57a:	8c 0e       	add	r8, r28
     57c:	9d 1e       	adc	r9, r29
          else
            temp_max[1] = '\0'; 
        }*/
        lcd_write_instruction_4d(lcd_Clear);
        _delay_ms(10);
        lcd_write_string_4d("main     min: ");
     57e:	0f 2e       	mov	r0, r31
     580:	f9 e7       	ldi	r31, 0x79	; 121
     582:	2f 2e       	mov	r2, r31
     584:	f1 e0       	ldi	r31, 0x01	; 1
     586:	3f 2e       	mov	r3, r31
     588:	f0 2d       	mov	r31, r0
	lcd_write_string_4d("Initializing HTTP...");


    while(1)
	  {
		sim900_http_send_data(
     58a:	81 e0       	ldi	r24, 0x01	; 1
     58c:	b3 01       	movw	r22, r6
     58e:	a2 01       	movw	r20, r4
     590:	20 e4       	ldi	r18, 0x40	; 64
     592:	87 01       	movw	r16, r14
     594:	0e 94 68 07 	call	0xed0	; 0xed0 <sim900_http_send_data>
            HTTP_POST,
            (const uint8_t*)"http://intense-fjord-78468.herokuapp.com/temp",
			(const uint8_t*)"{\"temp\": 16}",
            64,
            http_respon_data);
        token = strtok(http_respon_data,s);
     598:	c7 01       	movw	r24, r14
     59a:	b5 01       	movw	r22, r10
     59c:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <strtok>
     5a0:	bc 01       	movw	r22, r24
        strcpy(temp_min,token);
     5a2:	c6 01       	movw	r24, r12
     5a4:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <strcpy>
        token = strtok(NULL,s);
     5a8:	80 e0       	ldi	r24, 0x00	; 0
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	b5 01       	movw	r22, r10
     5ae:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <strtok>
     5b2:	bc 01       	movw	r22, r24
        strcpy(temp_max,token);
     5b4:	c4 01       	movw	r24, r8
     5b6:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <strcpy>
            temp_max[2] = '\0'; 
          } 
          else
            temp_max[1] = '\0'; 
        }*/
        lcd_write_instruction_4d(lcd_Clear);
     5ba:	81 e0       	ldi	r24, 0x01	; 1
     5bc:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd_write_instruction_4d>
     5c0:	8f e1       	ldi	r24, 0x1F	; 31
     5c2:	9e e4       	ldi	r25, 0x4E	; 78
     5c4:	01 97       	sbiw	r24, 0x01	; 1
     5c6:	f1 f7       	brne	.-4      	; 0x5c4 <main+0x18a>
     5c8:	00 c0       	rjmp	.+0      	; 0x5ca <main+0x190>
     5ca:	00 00       	nop
        _delay_ms(10);
        lcd_write_string_4d("main     min: ");
     5cc:	c1 01       	movw	r24, r2
     5ce:	0e 94 11 01 	call	0x222	; 0x222 <lcd_write_string_4d>
        lcd_write_string_4d(temp_min);
     5d2:	c6 01       	movw	r24, r12
     5d4:	0e 94 11 01 	call	0x222	; 0x222 <lcd_write_string_4d>
        lcd_write_instruction_4d(lcd_SetCursor|lcd_LineTwo);
     5d8:	80 ec       	ldi	r24, 0xC0	; 192
     5da:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd_write_instruction_4d>
     5de:	af e1       	ldi	r26, 0x1F	; 31
     5e0:	be e4       	ldi	r27, 0x4E	; 78
     5e2:	11 97       	sbiw	r26, 0x01	; 1
     5e4:	f1 f7       	brne	.-4      	; 0x5e2 <main+0x1a8>
     5e6:	00 c0       	rjmp	.+0      	; 0x5e8 <main+0x1ae>
     5e8:	00 00       	nop
		    _delay_ms(10);
        lcd_write_string_4d("temp:   ");
     5ea:	88 e8       	ldi	r24, 0x88	; 136
     5ec:	91 e0       	ldi	r25, 0x01	; 1
     5ee:	0e 94 11 01 	call	0x222	; 0x222 <lcd_write_string_4d>
        lcd_write_string_4d(room1_temp);
     5f2:	28 96       	adiw	r28, 0x08	; 8
     5f4:	8f ad       	ldd	r24, Y+63	; 0x3f
     5f6:	28 97       	sbiw	r28, 0x08	; 8
     5f8:	90 e0       	ldi	r25, 0x00	; 0
     5fa:	0e 94 11 01 	call	0x222	; 0x222 <lcd_write_string_4d>
        lcd_write_string_4d(" ");
     5fe:	87 e2       	ldi	r24, 0x27	; 39
     600:	91 e0       	ldi	r25, 0x01	; 1
     602:	0e 94 11 01 	call	0x222	; 0x222 <lcd_write_string_4d>
        lcd_write_string_4d("max: ");
     606:	81 e9       	ldi	r24, 0x91	; 145
     608:	91 e0       	ldi	r25, 0x01	; 1
     60a:	0e 94 11 01 	call	0x222	; 0x222 <lcd_write_string_4d>
        lcd_write_string_4d(temp_max);
     60e:	c4 01       	movw	r24, r8
     610:	0e 94 11 01 	call	0x222	; 0x222 <lcd_write_string_4d>
     614:	8f ef       	ldi	r24, 0xFF	; 255
     616:	99 e6       	ldi	r25, 0x69	; 105
     618:	a8 e1       	ldi	r26, 0x18	; 24
     61a:	81 50       	subi	r24, 0x01	; 1
     61c:	90 40       	sbci	r25, 0x00	; 0
     61e:	a0 40       	sbci	r26, 0x00	; 0
     620:	e1 f7       	brne	.-8      	; 0x61a <main+0x1e0>
     622:	00 c0       	rjmp	.+0      	; 0x624 <main+0x1ea>
     624:	00 00       	nop
     626:	b1 cf       	rjmp	.-158    	; 0x58a <main+0x150>

00000628 <uart1_flush_buffer>:

#include "sim900.h"

void uart1_flush_buffer()
{
	while (uart1_getc() != UART_NO_DATA);
     628:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <uart1_getc>
     62c:	21 e0       	ldi	r18, 0x01	; 1
     62e:	80 30       	cpi	r24, 0x00	; 0
     630:	92 07       	cpc	r25, r18
     632:	d1 f7       	brne	.-12     	; 0x628 <uart1_flush_buffer>
}
     634:	08 95       	ret

00000636 <sim900_init_uart>:
void sim900_init_uart(const uint16_t baudrate)
{
     636:	cf 93       	push	r28
     638:	df 93       	push	r29
	//init uart
	uart1_init(UART_BAUD_SELECT(baudrate, F_CPU));
     63a:	9c 01       	movw	r18, r24
     63c:	40 e0       	ldi	r20, 0x00	; 0
     63e:	50 e0       	ldi	r21, 0x00	; 0
     640:	ca 01       	movw	r24, r20
     642:	b9 01       	movw	r22, r18
     644:	60 5c       	subi	r22, 0xC0	; 192
     646:	7d 4b       	sbci	r23, 0xBD	; 189
     648:	80 4f       	sbci	r24, 0xF0	; 240
     64a:	9f 4f       	sbci	r25, 0xFF	; 255
     64c:	66 0f       	add	r22, r22
     64e:	77 1f       	adc	r23, r23
     650:	88 1f       	adc	r24, r24
     652:	99 1f       	adc	r25, r25
     654:	66 0f       	add	r22, r22
     656:	77 1f       	adc	r23, r23
     658:	88 1f       	adc	r24, r24
     65a:	99 1f       	adc	r25, r25
     65c:	66 0f       	add	r22, r22
     65e:	77 1f       	adc	r23, r23
     660:	88 1f       	adc	r24, r24
     662:	99 1f       	adc	r25, r25
     664:	22 0f       	add	r18, r18
     666:	33 1f       	adc	r19, r19
     668:	44 1f       	adc	r20, r20
     66a:	55 1f       	adc	r21, r21
     66c:	22 0f       	add	r18, r18
     66e:	33 1f       	adc	r19, r19
     670:	44 1f       	adc	r20, r20
     672:	55 1f       	adc	r21, r21
     674:	22 0f       	add	r18, r18
     676:	33 1f       	adc	r19, r19
     678:	44 1f       	adc	r20, r20
     67a:	55 1f       	adc	r21, r21
     67c:	22 0f       	add	r18, r18
     67e:	33 1f       	adc	r19, r19
     680:	44 1f       	adc	r20, r20
     682:	55 1f       	adc	r21, r21
     684:	0e 94 4a 0b 	call	0x1694	; 0x1694 <__udivmodsi4>
     688:	c9 01       	movw	r24, r18
     68a:	01 97       	sbiw	r24, 0x01	; 1
     68c:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <uart1_init>
     690:	8f ef       	ldi	r24, 0xFF	; 255
     692:	90 e7       	ldi	r25, 0x70	; 112
     694:	a2 e0       	ldi	r26, 0x02	; 2
     696:	81 50       	subi	r24, 0x01	; 1
     698:	90 40       	sbci	r25, 0x00	; 0
     69a:	a0 40       	sbci	r26, 0x00	; 0
     69c:	e1 f7       	brne	.-8      	; 0x696 <sim900_init_uart+0x60>
     69e:	00 c0       	rjmp	.+0      	; 0x6a0 <sim900_init_uart+0x6a>
     6a0:	00 00       	nop
	_delay_ms(100);
	uart1_puts("A");
     6a2:	c9 ed       	ldi	r28, 0xD9	; 217
     6a4:	d1 e0       	ldi	r29, 0x01	; 1
     6a6:	ce 01       	movw	r24, r28
     6a8:	0e 94 29 0b 	call	0x1652	; 0x1652 <uart1_puts>
     6ac:	8f ef       	ldi	r24, 0xFF	; 255
     6ae:	90 e7       	ldi	r25, 0x70	; 112
     6b0:	a2 e0       	ldi	r26, 0x02	; 2
     6b2:	81 50       	subi	r24, 0x01	; 1
     6b4:	90 40       	sbci	r25, 0x00	; 0
     6b6:	a0 40       	sbci	r26, 0x00	; 0
     6b8:	e1 f7       	brne	.-8      	; 0x6b2 <sim900_init_uart+0x7c>
     6ba:	00 c0       	rjmp	.+0      	; 0x6bc <sim900_init_uart+0x86>
     6bc:	00 00       	nop
	_delay_ms(100);
	uart1_puts("A");
     6be:	ce 01       	movw	r24, r28
     6c0:	0e 94 29 0b 	call	0x1652	; 0x1652 <uart1_puts>
     6c4:	8f ef       	ldi	r24, 0xFF	; 255
     6c6:	90 e7       	ldi	r25, 0x70	; 112
     6c8:	a2 e0       	ldi	r26, 0x02	; 2
     6ca:	81 50       	subi	r24, 0x01	; 1
     6cc:	90 40       	sbci	r25, 0x00	; 0
     6ce:	a0 40       	sbci	r26, 0x00	; 0
     6d0:	e1 f7       	brne	.-8      	; 0x6ca <sim900_init_uart+0x94>
     6d2:	00 c0       	rjmp	.+0      	; 0x6d4 <sim900_init_uart+0x9e>
     6d4:	00 00       	nop
	_delay_ms(100);
	uart1_puts("ATE0");
     6d6:	8b ed       	ldi	r24, 0xDB	; 219
     6d8:	91 e0       	ldi	r25, 0x01	; 1
     6da:	0e 94 29 0b 	call	0x1652	; 0x1652 <uart1_puts>
     6de:	8f ef       	ldi	r24, 0xFF	; 255
     6e0:	99 e6       	ldi	r25, 0x69	; 105
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	81 50       	subi	r24, 0x01	; 1
     6e6:	90 40       	sbci	r25, 0x00	; 0
     6e8:	a0 40       	sbci	r26, 0x00	; 0
     6ea:	e1 f7       	brne	.-8      	; 0x6e4 <sim900_init_uart+0xae>
     6ec:	00 c0       	rjmp	.+0      	; 0x6ee <sim900_init_uart+0xb8>
     6ee:	00 00       	nop
	_delay_ms(1000);
	uart1_flush_buffer();
     6f0:	0e 94 14 03 	call	0x628	; 0x628 <uart1_flush_buffer>

}
     6f4:	df 91       	pop	r29
     6f6:	cf 91       	pop	r28
     6f8:	08 95       	ret

000006fa <sim900_send_cmd_wait_reply>:

uint8_t sim900_send_cmd_wait_reply(const uint8_t send_from_progmem, const uint8_t *aCmd, const uint8_t
*aResponExit, const uint32_t aTimeoutMax, const uint8_t aLenOut, uint8_t
*aResponOut)
{
     6fa:	2f 92       	push	r2
     6fc:	3f 92       	push	r3
     6fe:	4f 92       	push	r4
     700:	5f 92       	push	r5
     702:	6f 92       	push	r6
     704:	7f 92       	push	r7
     706:	8f 92       	push	r8
     708:	9f 92       	push	r9
     70a:	af 92       	push	r10
     70c:	bf 92       	push	r11
     70e:	cf 92       	push	r12
     710:	df 92       	push	r13
     712:	ef 92       	push	r14
     714:	ff 92       	push	r15
     716:	0f 93       	push	r16
     718:	1f 93       	push	r17
     71a:	df 93       	push	r29
     71c:	cf 93       	push	r28
     71e:	00 d0       	rcall	.+0      	; 0x720 <sim900_send_cmd_wait_reply+0x26>
     720:	00 d0       	rcall	.+0      	; 0x722 <sim900_send_cmd_wait_reply+0x28>
     722:	0f 92       	push	r0
     724:	cd b7       	in	r28, 0x3d	; 61
     726:	de b7       	in	r29, 0x3e	; 62
     728:	28 2e       	mov	r2, r24
     72a:	3b 01       	movw	r6, r22
     72c:	2a 01       	movw	r4, r20
     72e:	48 01       	movw	r8, r16
     730:	59 01       	movw	r10, r18
     732:	e9 82       	std	Y+1, r14	; 0x01
     734:	db 82       	std	Y+3, r13	; 0x03
     736:	ca 82       	std	Y+2, r12	; 0x02

	uint8_t id_data, respons = 0;
	uint32_t uart_tout_cnt = 0;
	uint16_t uart_data;
	
	uint8_t *aDataBuffer = (uint8_t*) calloc(MAX_BUFFER_TMP,sizeof(uint8_t));
     738:	80 e4       	ldi	r24, 0x40	; 64
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	61 e0       	ldi	r22, 0x01	; 1
     73e:	70 e0       	ldi	r23, 0x00	; 0
     740:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <calloc>
     744:	18 2f       	mov	r17, r24
     746:	e9 2e       	mov	r14, r25
     748:	98 2f       	mov	r25, r24
     74a:	49 2f       	mov	r20, r25
     74c:	5e 2d       	mov	r21, r14
     74e:	5d 83       	std	Y+5, r21	; 0x05
     750:	4c 83       	std	Y+4, r20	; 0x04
	
	//buffer created???
	if (aDataBuffer == NULL)
     752:	41 15       	cp	r20, r1
     754:	51 05       	cpc	r21, r1
     756:	09 f4       	brne	.+2      	; 0x75a <sim900_send_cmd_wait_reply+0x60>
     758:	78 c0       	rjmp	.+240    	; 0x84a <sim900_send_cmd_wait_reply+0x150>
	{
		return 0;
	}

	//reset to all 0
	memset(aDataBuffer, '\0', MAX_BUFFER_TMP);
     75a:	e9 2f       	mov	r30, r25
     75c:	fe 2d       	mov	r31, r14
     75e:	80 e4       	ldi	r24, 0x40	; 64
     760:	df 01       	movw	r26, r30
     762:	1d 92       	st	X+, r1
     764:	8a 95       	dec	r24
     766:	e9 f7       	brne	.-6      	; 0x762 <sim900_send_cmd_wait_reply+0x68>

	//read left buffer data
	if (aCmd != NULL)
     768:	61 14       	cp	r6, r1
     76a:	71 04       	cpc	r7, r1
     76c:	e9 f1       	breq	.+122    	; 0x7e8 <sim900_send_cmd_wait_reply+0xee>
	{
		uart1_flush_buffer();
     76e:	0e 94 14 03 	call	0x628	; 0x628 <uart1_flush_buffer>
	}

	//send command
	if (aCmd != NULL)
	{
		if (send_from_progmem)
     772:	22 20       	and	r2, r2
     774:	21 f0       	breq	.+8      	; 0x77e <sim900_send_cmd_wait_reply+0x84>
		{
			uart1_puts_p((const char*)aCmd);
     776:	c3 01       	movw	r24, r6
     778:	0e 94 38 0b 	call	0x1670	; 0x1670 <uart1_puts_p>
     77c:	35 c0       	rjmp	.+106    	; 0x7e8 <sim900_send_cmd_wait_reply+0xee>
		}
		else
		{
			uart1_puts((const char*)aCmd);
     77e:	c3 01       	movw	r24, r6
     780:	0e 94 29 0b 	call	0x1652	; 0x1652 <uart1_puts>
     784:	31 c0       	rjmp	.+98     	; 0x7e8 <sim900_send_cmd_wait_reply+0xee>
		uart_tout_cnt = 0;
		while (((uart_data = uart1_getc()) == UART_NO_DATA) && (uart_tout_cnt <
		aTimeoutMax))
		//wait data arrive or tout
		{
			uart_tout_cnt++;
     786:	08 94       	sec
     788:	e1 1c       	adc	r14, r1
     78a:	f1 1c       	adc	r15, r1
     78c:	01 1d       	adc	r16, r1
     78e:	11 1d       	adc	r17, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     790:	b2 e0       	ldi	r27, 0x02	; 2
     792:	ba 95       	dec	r27
     794:	f1 f7       	brne	.-4      	; 0x792 <sim900_send_cmd_wait_reply+0x98>
     796:	00 c0       	rjmp	.+0      	; 0x798 <sim900_send_cmd_wait_reply+0x9e>
	uart_tout_cnt = 0;
	while ((id_data < (MAX_BUFFER_TMP - 1)) && (uart_tout_cnt <= aTimeoutMax))
	{
		//get uart data or timeout
		uart_tout_cnt = 0;
		while (((uart_data = uart1_getc()) == UART_NO_DATA) && (uart_tout_cnt <
     798:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <uart1_getc>
     79c:	e1 e0       	ldi	r30, 0x01	; 1
     79e:	80 30       	cpi	r24, 0x00	; 0
     7a0:	9e 07       	cpc	r25, r30
     7a2:	39 f4       	brne	.+14     	; 0x7b2 <sim900_send_cmd_wait_reply+0xb8>
     7a4:	e8 14       	cp	r14, r8
     7a6:	f9 04       	cpc	r15, r9
     7a8:	0a 05       	cpc	r16, r10
     7aa:	1b 05       	cpc	r17, r11
     7ac:	60 f3       	brcs	.-40     	; 0x786 <sim900_send_cmd_wait_reply+0x8c>
		}

		//check for timeout
		if (uart_tout_cnt >= aTimeoutMax)
		{
			respons = 0;
     7ae:	10 e0       	ldi	r17, 0x00	; 0
     7b0:	33 c0       	rjmp	.+102    	; 0x818 <sim900_send_cmd_wait_reply+0x11e>
			uart_tout_cnt++;
			_delay_us(1);
		}

		//check for timeout
		if (uart_tout_cnt >= aTimeoutMax)
     7b2:	e8 14       	cp	r14, r8
     7b4:	f9 04       	cpc	r15, r9
     7b6:	0a 05       	cpc	r16, r10
     7b8:	1b 05       	cpc	r17, r11
     7ba:	38 f5       	brcc	.+78     	; 0x80a <sim900_send_cmd_wait_reply+0x110>
			respons = 0;
			break;
		}
		else
		{
			aDataBuffer[id_data] = uart_data;
     7bc:	d3 01       	movw	r26, r6
     7be:	8d 93       	st	X+, r24
     7c0:	3d 01       	movw	r6, r26
			id_data++;
     7c2:	d3 94       	inc	r13

			// check if the desired answer  is in the response of the module
			if (aResponExit != NULL)
     7c4:	41 14       	cp	r4, r1
     7c6:	51 04       	cpc	r5, r1
     7c8:	39 f0       	breq	.+14     	; 0x7d8 <sim900_send_cmd_wait_reply+0xde>
			{
				if (strstr((const char*)aDataBuffer, (const char*)aResponExit) != NULL)
     7ca:	8c 81       	ldd	r24, Y+4	; 0x04
     7cc:	9d 81       	ldd	r25, Y+5	; 0x05
     7ce:	b2 01       	movw	r22, r4
     7d0:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <strstr>
     7d4:	00 97       	sbiw	r24, 0x00	; 0
     7d6:	d9 f4       	brne	.+54     	; 0x80e <sim900_send_cmd_wait_reply+0x114>
					break;
				}
			}

			//check error also
			if (strstr((const char*)aDataBuffer, (const char*)RESPON_ERROR) != NULL)
     7d8:	8c 81       	ldd	r24, Y+4	; 0x04
     7da:	9d 81       	ldd	r25, Y+5	; 0x05
     7dc:	b1 01       	movw	r22, r2
     7de:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <strstr>
     7e2:	00 97       	sbiw	r24, 0x00	; 0
     7e4:	59 f0       	breq	.+22     	; 0x7fc <sim900_send_cmd_wait_reply+0x102>
     7e6:	15 c0       	rjmp	.+42     	; 0x812 <sim900_send_cmd_wait_reply+0x118>
     7e8:	61 2e       	mov	r6, r17
     7ea:	7e 2c       	mov	r7, r14
}

uint8_t sim900_send_cmd_wait_reply(const uint8_t send_from_progmem, const uint8_t *aCmd, const uint8_t
*aResponExit, const uint32_t aTimeoutMax, const uint8_t aLenOut, uint8_t
*aResponOut)
{
     7ec:	dd 24       	eor	r13, r13
					break;
				}
			}

			//check error also
			if (strstr((const char*)aDataBuffer, (const char*)RESPON_ERROR) != NULL)
     7ee:	0f 2e       	mov	r0, r31
     7f0:	f0 ee       	ldi	r31, 0xE0	; 224
     7f2:	2f 2e       	mov	r2, r31
     7f4:	f1 e0       	ldi	r31, 0x01	; 1
     7f6:	3f 2e       	mov	r3, r31
     7f8:	f0 2d       	mov	r31, r0
     7fa:	03 c0       	rjmp	.+6      	; 0x802 <sim900_send_cmd_wait_reply+0x108>
	}

	//wait for reply
	id_data = 0;
	uart_tout_cnt = 0;
	while ((id_data < (MAX_BUFFER_TMP - 1)) && (uart_tout_cnt <= aTimeoutMax))
     7fc:	bd 2d       	mov	r27, r13
     7fe:	bf 33       	cpi	r27, 0x3F	; 63
     800:	51 f0       	breq	.+20     	; 0x816 <sim900_send_cmd_wait_reply+0x11c>
}

uint8_t sim900_send_cmd_wait_reply(const uint8_t send_from_progmem, const uint8_t *aCmd, const uint8_t
*aResponExit, const uint32_t aTimeoutMax, const uint8_t aLenOut, uint8_t
*aResponOut)
{
     802:	ee 24       	eor	r14, r14
     804:	ff 24       	eor	r15, r15
     806:	87 01       	movw	r16, r14
     808:	c7 cf       	rjmp	.-114    	; 0x798 <sim900_send_cmd_wait_reply+0x9e>
		}

		//check for timeout
		if (uart_tout_cnt >= aTimeoutMax)
		{
			respons = 0;
     80a:	10 e0       	ldi	r17, 0x00	; 0
     80c:	05 c0       	rjmp	.+10     	; 0x818 <sim900_send_cmd_wait_reply+0x11e>
			// check if the desired answer  is in the response of the module
			if (aResponExit != NULL)
			{
				if (strstr((const char*)aDataBuffer, (const char*)aResponExit) != NULL)
				{
					respons = 1;
     80e:	11 e0       	ldi	r17, 0x01	; 1
     810:	03 c0       	rjmp	.+6      	; 0x818 <sim900_send_cmd_wait_reply+0x11e>
			}

			//check error also
			if (strstr((const char*)aDataBuffer, (const char*)RESPON_ERROR) != NULL)
			{
				respons = 0;
     812:	10 e0       	ldi	r17, 0x00	; 0
     814:	01 c0       	rjmp	.+2      	; 0x818 <sim900_send_cmd_wait_reply+0x11e>
*aResponExit, const uint32_t aTimeoutMax, const uint8_t aLenOut, uint8_t
*aResponOut)
{
	#define MAX_BUFFER_TMP	64

	uint8_t id_data, respons = 0;
     816:	10 e0       	ldi	r17, 0x00	; 0
			}
		}
	}

	//copy it to the out
	if ((aLenOut != 0) && (aResponOut != NULL) && (aLenOut > id_data) && (respons)
     818:	e9 81       	ldd	r30, Y+1	; 0x01
     81a:	ee 23       	and	r30, r30
     81c:	89 f0       	breq	.+34     	; 0x840 <sim900_send_cmd_wait_reply+0x146>
     81e:	ea 80       	ldd	r14, Y+2	; 0x02
     820:	fb 80       	ldd	r15, Y+3	; 0x03
     822:	e1 14       	cp	r14, r1
     824:	f1 04       	cpc	r15, r1
     826:	61 f0       	breq	.+24     	; 0x840 <sim900_send_cmd_wait_reply+0x146>
     828:	de 16       	cp	r13, r30
     82a:	50 f4       	brcc	.+20     	; 0x840 <sim900_send_cmd_wait_reply+0x146>
     82c:	11 23       	and	r17, r17
     82e:	41 f0       	breq	.+16     	; 0x840 <sim900_send_cmd_wait_reply+0x146>
	)
	{
		memcpy(aResponOut, aDataBuffer, id_data *sizeof(uint8_t));
     830:	8a 81       	ldd	r24, Y+2	; 0x02
     832:	9b 81       	ldd	r25, Y+3	; 0x03
     834:	6c 81       	ldd	r22, Y+4	; 0x04
     836:	7d 81       	ldd	r23, Y+5	; 0x05
     838:	4d 2d       	mov	r20, r13
     83a:	50 e0       	ldi	r21, 0x00	; 0
     83c:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <memcpy>
	}
	
	//free the buffer
	free(aDataBuffer);
     840:	8c 81       	ldd	r24, Y+4	; 0x04
     842:	9d 81       	ldd	r25, Y+5	; 0x05
     844:	0e 94 2b 0c 	call	0x1856	; 0x1856 <free>

	//return it
	return respons;
     848:	01 c0       	rjmp	.+2      	; 0x84c <sim900_send_cmd_wait_reply+0x152>
	uint8_t *aDataBuffer = (uint8_t*) calloc(MAX_BUFFER_TMP,sizeof(uint8_t));
	
	//buffer created???
	if (aDataBuffer == NULL)
	{
		return 0;
     84a:	10 e0       	ldi	r17, 0x00	; 0
	//free the buffer
	free(aDataBuffer);

	//return it
	return respons;
}
     84c:	81 2f       	mov	r24, r17
     84e:	0f 90       	pop	r0
     850:	0f 90       	pop	r0
     852:	0f 90       	pop	r0
     854:	0f 90       	pop	r0
     856:	0f 90       	pop	r0
     858:	cf 91       	pop	r28
     85a:	df 91       	pop	r29
     85c:	1f 91       	pop	r17
     85e:	0f 91       	pop	r16
     860:	ff 90       	pop	r15
     862:	ef 90       	pop	r14
     864:	df 90       	pop	r13
     866:	cf 90       	pop	r12
     868:	bf 90       	pop	r11
     86a:	af 90       	pop	r10
     86c:	9f 90       	pop	r9
     86e:	8f 90       	pop	r8
     870:	7f 90       	pop	r7
     872:	6f 90       	pop	r6
     874:	5f 90       	pop	r5
     876:	4f 90       	pop	r4
     878:	3f 90       	pop	r3
     87a:	2f 90       	pop	r2
     87c:	08 95       	ret

0000087e <sim900_is_network_registered>:

uint8_t sim900_is_network_registered()
{
     87e:	cf 92       	push	r12
     880:	df 92       	push	r13
     882:	ef 92       	push	r14
     884:	0f 93       	push	r16
     886:	1f 93       	push	r17
	return (sim900_send_cmd_wait_reply(1,(const uint8_t*)PSTR("AT+CREG?\r"), (const
     888:	81 e0       	ldi	r24, 0x01	; 1
     88a:	61 e7       	ldi	r22, 0x71	; 113
     88c:	71 e0       	ldi	r23, 0x01	; 1
     88e:	46 ee       	ldi	r20, 0xE6	; 230
     890:	51 e0       	ldi	r21, 0x01	; 1
     892:	00 e4       	ldi	r16, 0x40	; 64
     894:	1b e4       	ldi	r17, 0x4B	; 75
     896:	2c e4       	ldi	r18, 0x4C	; 76
     898:	30 e0       	ldi	r19, 0x00	; 0
     89a:	ee 24       	eor	r14, r14
     89c:	cc 24       	eor	r12, r12
     89e:	dd 24       	eor	r13, r13
     8a0:	0e 94 7d 03 	call	0x6fa	; 0x6fa <sim900_send_cmd_wait_reply>
     8a4:	88 23       	and	r24, r24
     8a6:	91 f4       	brne	.+36     	; 0x8cc <sim900_is_network_registered+0x4e>
	uint8_t*)"+CREG: 0,1", 5000000, 0, NULL) || sim900_send_cmd_wait_reply(1,
     8a8:	81 e0       	ldi	r24, 0x01	; 1
     8aa:	67 e6       	ldi	r22, 0x67	; 103
     8ac:	71 e0       	ldi	r23, 0x01	; 1
     8ae:	41 ef       	ldi	r20, 0xF1	; 241
     8b0:	51 e0       	ldi	r21, 0x01	; 1
     8b2:	00 e4       	ldi	r16, 0x40	; 64
     8b4:	1b e4       	ldi	r17, 0x4B	; 75
     8b6:	2c e4       	ldi	r18, 0x4C	; 76
     8b8:	30 e0       	ldi	r19, 0x00	; 0
     8ba:	0e 94 7d 03 	call	0x6fa	; 0x6fa <sim900_send_cmd_wait_reply>
	return respons;
}

uint8_t sim900_is_network_registered()
{
	return (sim900_send_cmd_wait_reply(1,(const uint8_t*)PSTR("AT+CREG?\r"), (const
     8be:	21 e0       	ldi	r18, 0x01	; 1
     8c0:	30 e0       	ldi	r19, 0x00	; 0
     8c2:	88 23       	and	r24, r24
     8c4:	29 f4       	brne	.+10     	; 0x8d0 <sim900_is_network_registered+0x52>
     8c6:	20 e0       	ldi	r18, 0x00	; 0
     8c8:	30 e0       	ldi	r19, 0x00	; 0
     8ca:	02 c0       	rjmp	.+4      	; 0x8d0 <sim900_is_network_registered+0x52>
     8cc:	21 e0       	ldi	r18, 0x01	; 1
     8ce:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t*)"+CREG: 0,1", 5000000, 0, NULL) || sim900_send_cmd_wait_reply(1,
	(const uint8_t*)PSTR("AT+CREG?\r"), (const uint8_t*)"+CREG: 0,5", 5000000, 0,
	NULL));
}
     8d0:	82 2f       	mov	r24, r18
     8d2:	1f 91       	pop	r17
     8d4:	0f 91       	pop	r16
     8d6:	ef 90       	pop	r14
     8d8:	df 90       	pop	r13
     8da:	cf 90       	pop	r12
     8dc:	08 95       	ret

000008de <sim900_setup>:

uint8_t sim900_setup(const uint8_t isWaitingDevice)
{
     8de:	af 92       	push	r10
     8e0:	bf 92       	push	r11
     8e2:	cf 92       	push	r12
     8e4:	df 92       	push	r13
     8e6:	ef 92       	push	r14
     8e8:	0f 93       	push	r16
     8ea:	1f 93       	push	r17
     8ec:	cf 93       	push	r28
     8ee:	df 93       	push	r29
	uint8_t respons = 0;

	//wait modem wake up
	if (isWaitingDevice)
     8f0:	88 23       	and	r24, r24
     8f2:	b9 f0       	breq	.+46     	; 0x922 <sim900_setup+0x44>
	{
		while (!(respons = sim900_send_cmd_wait_reply(1,(const uint8_t*)PSTR("AT\r"),
     8f4:	c3 e6       	ldi	r28, 0x63	; 99
     8f6:	d1 e0       	ldi	r29, 0x01	; 1
     8f8:	0f 2e       	mov	r0, r31
     8fa:	fc ef       	ldi	r31, 0xFC	; 252
     8fc:	af 2e       	mov	r10, r31
     8fe:	f1 e0       	ldi	r31, 0x01	; 1
     900:	bf 2e       	mov	r11, r31
     902:	f0 2d       	mov	r31, r0
     904:	81 e0       	ldi	r24, 0x01	; 1
     906:	be 01       	movw	r22, r28
     908:	a5 01       	movw	r20, r10
     90a:	00 e2       	ldi	r16, 0x20	; 32
     90c:	11 ea       	ldi	r17, 0xA1	; 161
     90e:	27 e0       	ldi	r18, 0x07	; 7
     910:	30 e0       	ldi	r19, 0x00	; 0
     912:	ee 24       	eor	r14, r14
     914:	cc 24       	eor	r12, r12
     916:	dd 24       	eor	r13, r13
     918:	0e 94 7d 03 	call	0x6fa	; 0x6fa <sim900_send_cmd_wait_reply>
     91c:	88 23       	and	r24, r24
     91e:	91 f3       	breq	.-28     	; 0x904 <sim900_setup+0x26>
     920:	10 c0       	rjmp	.+32     	; 0x942 <sim900_setup+0x64>
		(const uint8_t*)RESPON_OK, 500000, 0, NULL)))
		;
	}
	else
	{
		respons = sim900_send_cmd_wait_reply(1,(const uint8_t*)PSTR("AT\r"), (const
     922:	81 e0       	ldi	r24, 0x01	; 1
     924:	6f e5       	ldi	r22, 0x5F	; 95
     926:	71 e0       	ldi	r23, 0x01	; 1
     928:	4c ef       	ldi	r20, 0xFC	; 252
     92a:	51 e0       	ldi	r21, 0x01	; 1
     92c:	00 e2       	ldi	r16, 0x20	; 32
     92e:	11 ea       	ldi	r17, 0xA1	; 161
     930:	27 e0       	ldi	r18, 0x07	; 7
     932:	30 e0       	ldi	r19, 0x00	; 0
     934:	ee 24       	eor	r14, r14
     936:	cc 24       	eor	r12, r12
     938:	dd 24       	eor	r13, r13
     93a:	0e 94 7d 03 	call	0x6fa	; 0x6fa <sim900_send_cmd_wait_reply>
		uint8_t*)RESPON_OK, 500000, 0, NULL);
	}

	//modem is up?
	if (respons)
     93e:	88 23       	and	r24, r24
     940:	41 f1       	breq	.+80     	; 0x992 <sim900_setup+0xb4>
		//no cmd echo
		//if ((respons = sim900_send_cmd_wait_reply(1,(const uint8_t*)PSTR("ATE0\r"), (const
		//uint8_t*)RESPON_OK, 500000, 0, NULL)))
		//{
			//text mode
			if ((respons = sim900_send_cmd_wait_reply(1,(const uint8_t*)PSTR("AT+CMGF=1\r"),
     942:	81 e0       	ldi	r24, 0x01	; 1
     944:	64 e5       	ldi	r22, 0x54	; 84
     946:	71 e0       	ldi	r23, 0x01	; 1
     948:	4c ef       	ldi	r20, 0xFC	; 252
     94a:	51 e0       	ldi	r21, 0x01	; 1
     94c:	00 e2       	ldi	r16, 0x20	; 32
     94e:	11 ea       	ldi	r17, 0xA1	; 161
     950:	27 e0       	ldi	r18, 0x07	; 7
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	ee 24       	eor	r14, r14
     956:	cc 24       	eor	r12, r12
     958:	dd 24       	eor	r13, r13
     95a:	0e 94 7d 03 	call	0x6fa	; 0x6fa <sim900_send_cmd_wait_reply>
     95e:	88 23       	and	r24, r24
     960:	c1 f0       	breq	.+48     	; 0x992 <sim900_setup+0xb4>
			(const uint8_t*)RESPON_OK, 500000, 0, NULL)))
			{
				//storage all to Sim card
				if ((respons = sim900_send_cmd_wait_reply(1,(const uint8_t*)
     962:	81 e0       	ldi	r24, 0x01	; 1
     964:	6c e3       	ldi	r22, 0x3C	; 60
     966:	71 e0       	ldi	r23, 0x01	; 1
     968:	4c ef       	ldi	r20, 0xFC	; 252
     96a:	51 e0       	ldi	r21, 0x01	; 1
     96c:	00 e2       	ldi	r16, 0x20	; 32
     96e:	11 ea       	ldi	r17, 0xA1	; 161
     970:	27 e0       	ldi	r18, 0x07	; 7
     972:	30 e0       	ldi	r19, 0x00	; 0
     974:	0e 94 7d 03 	call	0x6fa	; 0x6fa <sim900_send_cmd_wait_reply>
     978:	88 23       	and	r24, r24
     97a:	59 f0       	breq	.+22     	; 0x992 <sim900_setup+0xb4>
				PSTR("AT+CPMS=\"SM\",\"SM\",\"SM\"\r"), (const uint8_t*)RESPON_OK, 500000,
				0, NULL)))
				{
					//clip=1
					if ((respons = sim900_send_cmd_wait_reply(1,(const uint8_t*)
     97c:	81 e0       	ldi	r24, 0x01	; 1
     97e:	61 e3       	ldi	r22, 0x31	; 49
     980:	71 e0       	ldi	r23, 0x01	; 1
     982:	4c ef       	ldi	r20, 0xFC	; 252
     984:	51 e0       	ldi	r21, 0x01	; 1
     986:	00 e2       	ldi	r16, 0x20	; 32
     988:	11 ea       	ldi	r17, 0xA1	; 161
     98a:	27 e0       	ldi	r18, 0x07	; 7
     98c:	30 e0       	ldi	r19, 0x00	; 0
     98e:	0e 94 7d 03 	call	0x6fa	; 0x6fa <sim900_send_cmd_wait_reply>
	}
}

//return it
return respons;
}
     992:	df 91       	pop	r29
     994:	cf 91       	pop	r28
     996:	1f 91       	pop	r17
     998:	0f 91       	pop	r16
     99a:	ef 90       	pop	r14
     99c:	df 90       	pop	r13
     99e:	cf 90       	pop	r12
     9a0:	bf 90       	pop	r11
     9a2:	af 90       	pop	r10
     9a4:	08 95       	ret

000009a6 <sim900_send_sms>:

//send sms
uint8_t sim900_send_sms(const uint8_t *aSenderNumber, const uint8_t *aMessage)
{
     9a6:	af 92       	push	r10
     9a8:	bf 92       	push	r11
     9aa:	cf 92       	push	r12
     9ac:	df 92       	push	r13
     9ae:	ef 92       	push	r14
     9b0:	ff 92       	push	r15
     9b2:	0f 93       	push	r16
     9b4:	1f 93       	push	r17
     9b6:	cf 93       	push	r28
     9b8:	df 93       	push	r29
     9ba:	7c 01       	movw	r14, r24
     9bc:	b6 2e       	mov	r11, r22
     9be:	a7 2e       	mov	r10, r23
	const uint8_t MAX_BUFFER = 32;
	uint8_t respon = 0/*, cmdx[MAX_BUFFER]*/;
	uint8_t *cmdx = (uint8_t*) calloc(MAX_BUFFER,sizeof(uint8_t));
     9c0:	80 e2       	ldi	r24, 0x20	; 32
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	61 e0       	ldi	r22, 0x01	; 1
     9c6:	70 e0       	ldi	r23, 0x00	; 0
     9c8:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <calloc>
     9cc:	08 2f       	mov	r16, r24
     9ce:	19 2f       	mov	r17, r25
     9d0:	c8 2e       	mov	r12, r24
     9d2:	e6 01       	movw	r28, r12
     9d4:	6e 01       	movw	r12, r28
     9d6:	d9 2e       	mov	r13, r25
     9d8:	e6 01       	movw	r28, r12
	
	//buffer created???
	if (cmdx == NULL)
     9da:	20 97       	sbiw	r28, 0x00	; 0
     9dc:	09 f4       	brne	.+2      	; 0x9e0 <sim900_send_sms+0x3a>
     9de:	5c c0       	rjmp	.+184    	; 0xa98 <sim900_send_sms+0xf2>
	{
		return 0;
	}

	//build the string
	memset(cmdx, '\0', MAX_BUFFER);
     9e0:	e0 2f       	mov	r30, r16
     9e2:	f9 2f       	mov	r31, r25
     9e4:	80 e2       	ldi	r24, 0x20	; 32
     9e6:	df 01       	movw	r26, r30
     9e8:	1d 92       	st	X+, r1
     9ea:	8a 95       	dec	r24
     9ec:	e9 f7       	brne	.-6      	; 0x9e8 <sim900_send_sms+0x42>
	snprintf((char*)cmdx, MAX_BUFFER, "AT+CMGS=\"%s\"\r", aSenderNumber);
     9ee:	8d b7       	in	r24, 0x3d	; 61
     9f0:	9e b7       	in	r25, 0x3e	; 62
     9f2:	08 97       	sbiw	r24, 0x08	; 8
     9f4:	0f b6       	in	r0, 0x3f	; 63
     9f6:	f8 94       	cli
     9f8:	9e bf       	out	0x3e, r25	; 62
     9fa:	0f be       	out	0x3f, r0	; 63
     9fc:	8d bf       	out	0x3d, r24	; 61
     9fe:	ed b7       	in	r30, 0x3d	; 61
     a00:	fe b7       	in	r31, 0x3e	; 62
     a02:	31 96       	adiw	r30, 0x01	; 1
     a04:	ad b7       	in	r26, 0x3d	; 61
     a06:	be b7       	in	r27, 0x3e	; 62
     a08:	11 96       	adiw	r26, 0x01	; 1
     a0a:	0c 93       	st	X, r16
     a0c:	11 97       	sbiw	r26, 0x01	; 1
     a0e:	12 96       	adiw	r26, 0x02	; 2
     a10:	1c 93       	st	X, r17
     a12:	80 e2       	ldi	r24, 0x20	; 32
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	93 83       	std	Z+3, r25	; 0x03
     a18:	82 83       	std	Z+2, r24	; 0x02
     a1a:	8f ef       	ldi	r24, 0xFF	; 255
     a1c:	91 e0       	ldi	r25, 0x01	; 1
     a1e:	95 83       	std	Z+5, r25	; 0x05
     a20:	84 83       	std	Z+4, r24	; 0x04
     a22:	f7 82       	std	Z+7, r15	; 0x07
     a24:	e6 82       	std	Z+6, r14	; 0x06
     a26:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <snprintf>

	if ((respon = sim900_send_cmd_wait_reply(0,(const uint8_t*)cmdx, (const
     a2a:	8d b7       	in	r24, 0x3d	; 61
     a2c:	9e b7       	in	r25, 0x3e	; 62
     a2e:	08 96       	adiw	r24, 0x08	; 8
     a30:	0f b6       	in	r0, 0x3f	; 63
     a32:	f8 94       	cli
     a34:	9e bf       	out	0x3e, r25	; 62
     a36:	0f be       	out	0x3f, r0	; 63
     a38:	8d bf       	out	0x3d, r24	; 61
     a3a:	80 e0       	ldi	r24, 0x00	; 0
     a3c:	60 2f       	mov	r22, r16
     a3e:	71 2f       	mov	r23, r17
     a40:	4d e0       	ldi	r20, 0x0D	; 13
     a42:	52 e0       	ldi	r21, 0x02	; 2
     a44:	00 e8       	ldi	r16, 0x80	; 128
     a46:	14 e8       	ldi	r17, 0x84	; 132
     a48:	2e e1       	ldi	r18, 0x1E	; 30
     a4a:	30 e0       	ldi	r19, 0x00	; 0
     a4c:	ee 24       	eor	r14, r14
     a4e:	cc 24       	eor	r12, r12
     a50:	dd 24       	eor	r13, r13
     a52:	0e 94 7d 03 	call	0x6fa	; 0x6fa <sim900_send_cmd_wait_reply>
     a56:	18 2f       	mov	r17, r24
     a58:	88 23       	and	r24, r24
     a5a:	d1 f0       	breq	.+52     	; 0xa90 <sim900_send_sms+0xea>
	uint8_t*)">", 2000000, 0, NULL)))
	{
		//only copy MAX_BUFFER-2 char max from msg
		memcpy(&cmdx[0], aMessage, MAX_BUFFER - 2);
     a5c:	de 01       	movw	r26, r28
     a5e:	8b 2d       	mov	r24, r11
     a60:	9a 2d       	mov	r25, r10
     a62:	fc 01       	movw	r30, r24
     a64:	8e e1       	ldi	r24, 0x1E	; 30
     a66:	01 90       	ld	r0, Z+
     a68:	0d 92       	st	X+, r0
     a6a:	81 50       	subi	r24, 0x01	; 1
     a6c:	e1 f7       	brne	.-8      	; 0xa66 <sim900_send_sms+0xc0>
		cmdx[MAX_BUFFER - 2] = 0x1a;
     a6e:	8a e1       	ldi	r24, 0x1A	; 26
     a70:	8e 8f       	std	Y+30, r24	; 0x1e
		cmdx[MAX_BUFFER - 1] = 0x00;
     a72:	1f 8e       	std	Y+31, r1	; 0x1f

		if ((respon = sim900_send_cmd_wait_reply(0,(const uint8_t*)cmdx, (const
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	be 01       	movw	r22, r28
     a78:	4c ef       	ldi	r20, 0xFC	; 252
     a7a:	51 e0       	ldi	r21, 0x01	; 1
     a7c:	00 e8       	ldi	r16, 0x80	; 128
     a7e:	16 e9       	ldi	r17, 0x96	; 150
     a80:	28 e9       	ldi	r18, 0x98	; 152
     a82:	30 e0       	ldi	r19, 0x00	; 0
     a84:	ee 24       	eor	r14, r14
     a86:	cc 24       	eor	r12, r12
     a88:	dd 24       	eor	r13, r13
     a8a:	0e 94 7d 03 	call	0x6fa	; 0x6fa <sim900_send_cmd_wait_reply>
     a8e:	18 2f       	mov	r17, r24
	uint8_t*)RESPON_OK, 10000000, 0, NULL))){}
}

//free buffer
free(cmdx);
     a90:	ce 01       	movw	r24, r28
     a92:	0e 94 2b 0c 	call	0x1856	; 0x1856 <free>

return respon;
     a96:	01 c0       	rjmp	.+2      	; 0xa9a <sim900_send_sms+0xf4>
	uint8_t *cmdx = (uint8_t*) calloc(MAX_BUFFER,sizeof(uint8_t));
	
	//buffer created???
	if (cmdx == NULL)
	{
		return 0;
     a98:	10 e0       	ldi	r17, 0x00	; 0

//free buffer
free(cmdx);

return respon;
}
     a9a:	81 2f       	mov	r24, r17
     a9c:	df 91       	pop	r29
     a9e:	cf 91       	pop	r28
     aa0:	1f 91       	pop	r17
     aa2:	0f 91       	pop	r16
     aa4:	ff 90       	pop	r15
     aa6:	ef 90       	pop	r14
     aa8:	df 90       	pop	r13
     aaa:	cf 90       	pop	r12
     aac:	bf 90       	pop	r11
     aae:	af 90       	pop	r10
     ab0:	08 95       	ret

00000ab2 <sim900_call_phone>:

//calling a phone
uint8_t sim900_call_phone(const uint8_t *aSenderNumber)
{
     ab2:	cf 92       	push	r12
     ab4:	df 92       	push	r13
     ab6:	ef 92       	push	r14
     ab8:	ff 92       	push	r15
     aba:	0f 93       	push	r16
     abc:	1f 93       	push	r17
     abe:	cf 93       	push	r28
     ac0:	df 93       	push	r29
     ac2:	8c 01       	movw	r16, r24
	const uint8_t MAX_BUFFER = 30;
	uint8_t respon = 0/*, cmdx[MAX_BUFFER]*/;
	uint8_t *cmdx = (uint8_t*) calloc(MAX_BUFFER,sizeof(uint8_t));
     ac4:	8e e1       	ldi	r24, 0x1E	; 30
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	61 e0       	ldi	r22, 0x01	; 1
     aca:	70 e0       	ldi	r23, 0x00	; 0
     acc:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <calloc>
     ad0:	e8 2e       	mov	r14, r24
     ad2:	e7 01       	movw	r28, r14
     ad4:	7e 01       	movw	r14, r28
     ad6:	f9 2e       	mov	r15, r25
     ad8:	e7 01       	movw	r28, r14
	
	//buffer created?
	if (cmdx == NULL)
     ada:	20 97       	sbiw	r28, 0x00	; 0
     adc:	09 f4       	brne	.+2      	; 0xae0 <sim900_call_phone+0x2e>
     ade:	40 c0       	rjmp	.+128    	; 0xb60 <sim900_call_phone+0xae>
	{
		return 0;
	}

	//init string
	memset(cmdx, '\0', MAX_BUFFER);
     ae0:	ee 2d       	mov	r30, r14
     ae2:	f9 2f       	mov	r31, r25
     ae4:	8e e1       	ldi	r24, 0x1E	; 30
     ae6:	df 01       	movw	r26, r30
     ae8:	1d 92       	st	X+, r1
     aea:	8a 95       	dec	r24
     aec:	e9 f7       	brne	.-6      	; 0xae8 <sim900_call_phone+0x36>
	snprintf((char*)cmdx, MAX_BUFFER, "ATD%s;\r", aSenderNumber);
     aee:	2d b7       	in	r18, 0x3d	; 61
     af0:	3e b7       	in	r19, 0x3e	; 62
     af2:	28 50       	subi	r18, 0x08	; 8
     af4:	30 40       	sbci	r19, 0x00	; 0
     af6:	0f b6       	in	r0, 0x3f	; 63
     af8:	f8 94       	cli
     afa:	3e bf       	out	0x3e, r19	; 62
     afc:	0f be       	out	0x3f, r0	; 63
     afe:	2d bf       	out	0x3d, r18	; 61
     b00:	ed b7       	in	r30, 0x3d	; 61
     b02:	fe b7       	in	r31, 0x3e	; 62
     b04:	31 96       	adiw	r30, 0x01	; 1
     b06:	ad b7       	in	r26, 0x3d	; 61
     b08:	be b7       	in	r27, 0x3e	; 62
     b0a:	12 96       	adiw	r26, 0x02	; 2
     b0c:	fc 92       	st	X, r15
     b0e:	ee 92       	st	-X, r14
     b10:	11 97       	sbiw	r26, 0x01	; 1
     b12:	8e e1       	ldi	r24, 0x1E	; 30
     b14:	90 e0       	ldi	r25, 0x00	; 0
     b16:	93 83       	std	Z+3, r25	; 0x03
     b18:	82 83       	std	Z+2, r24	; 0x02
     b1a:	8f e0       	ldi	r24, 0x0F	; 15
     b1c:	92 e0       	ldi	r25, 0x02	; 2
     b1e:	95 83       	std	Z+5, r25	; 0x05
     b20:	84 83       	std	Z+4, r24	; 0x04
     b22:	17 83       	std	Z+7, r17	; 0x07
     b24:	06 83       	std	Z+6, r16	; 0x06
     b26:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <snprintf>
	respon = sim900_send_cmd_wait_reply(0,(const uint8_t*)cmdx, (const uint8_t*)
     b2a:	2d b7       	in	r18, 0x3d	; 61
     b2c:	3e b7       	in	r19, 0x3e	; 62
     b2e:	28 5f       	subi	r18, 0xF8	; 248
     b30:	3f 4f       	sbci	r19, 0xFF	; 255
     b32:	0f b6       	in	r0, 0x3f	; 63
     b34:	f8 94       	cli
     b36:	3e bf       	out	0x3e, r19	; 62
     b38:	0f be       	out	0x3f, r0	; 63
     b3a:	2d bf       	out	0x3d, r18	; 61
     b3c:	80 e0       	ldi	r24, 0x00	; 0
     b3e:	b7 01       	movw	r22, r14
     b40:	4c ef       	ldi	r20, 0xFC	; 252
     b42:	51 e0       	ldi	r21, 0x01	; 1
     b44:	00 e8       	ldi	r16, 0x80	; 128
     b46:	16 e9       	ldi	r17, 0x96	; 150
     b48:	28 e9       	ldi	r18, 0x98	; 152
     b4a:	30 e0       	ldi	r19, 0x00	; 0
     b4c:	ee 24       	eor	r14, r14
     b4e:	cc 24       	eor	r12, r12
     b50:	dd 24       	eor	r13, r13
     b52:	0e 94 7d 03 	call	0x6fa	; 0x6fa <sim900_send_cmd_wait_reply>
     b56:	08 2f       	mov	r16, r24
	RESPON_OK, 10000000, 0, NULL);
	
	//free buffer
	free(cmdx);
     b58:	ce 01       	movw	r24, r28
     b5a:	0e 94 2b 0c 	call	0x1856	; 0x1856 <free>
	
	return respon;
     b5e:	01 c0       	rjmp	.+2      	; 0xb62 <sim900_call_phone+0xb0>
	uint8_t *cmdx = (uint8_t*) calloc(MAX_BUFFER,sizeof(uint8_t));
	
	//buffer created?
	if (cmdx == NULL)
	{
		return 0;
     b60:	00 e0       	ldi	r16, 0x00	; 0
	
	//free buffer
	free(cmdx);
	
	return respon;
}
     b62:	80 2f       	mov	r24, r16
     b64:	df 91       	pop	r29
     b66:	cf 91       	pop	r28
     b68:	1f 91       	pop	r17
     b6a:	0f 91       	pop	r16
     b6c:	ff 90       	pop	r15
     b6e:	ef 90       	pop	r14
     b70:	df 90       	pop	r13
     b72:	cf 90       	pop	r12
     b74:	08 95       	ret

00000b76 <sim900_gprs_is_opened>:

//cek gprs status
uint8_t sim900_gprs_is_opened()
{
     b76:	cf 92       	push	r12
     b78:	df 92       	push	r13
     b7a:	ef 92       	push	r14
     b7c:	0f 93       	push	r16
     b7e:	1f 93       	push	r17
  uint8_t respon = sim900_send_cmd_wait_reply(1,(const uint8_t*)PSTR("AT+SAPBR=2,1\r"),
     b80:	81 e0       	ldi	r24, 0x01	; 1
     b82:	63 e2       	ldi	r22, 0x23	; 35
     b84:	71 e0       	ldi	r23, 0x01	; 1
     b86:	47 e1       	ldi	r20, 0x17	; 23
     b88:	52 e0       	ldi	r21, 0x02	; 2
     b8a:	00 e2       	ldi	r16, 0x20	; 32
     b8c:	11 ea       	ldi	r17, 0xA1	; 161
     b8e:	27 e0       	ldi	r18, 0x07	; 7
     b90:	30 e0       	ldi	r19, 0x00	; 0
     b92:	ee 24       	eor	r14, r14
     b94:	cc 24       	eor	r12, r12
     b96:	dd 24       	eor	r13, r13
     b98:	0e 94 7d 03 	call	0x6fa	; 0x6fa <sim900_send_cmd_wait_reply>
    (const uint8_t*)"1,1", 500000, 0, NULL);
  return respon;
}
     b9c:	1f 91       	pop	r17
     b9e:	0f 91       	pop	r16
     ba0:	ef 90       	pop	r14
     ba2:	df 90       	pop	r13
     ba4:	cf 90       	pop	r12
     ba6:	08 95       	ret

00000ba8 <sim900_gprs_close_connection>:

//close gprs conn
uint8_t sim900_gprs_close_connection()
{
     ba8:	cf 92       	push	r12
     baa:	df 92       	push	r13
     bac:	ef 92       	push	r14
     bae:	0f 93       	push	r16
     bb0:	1f 93       	push	r17
  //uint8_t respon = (sim900_gprs_is_opened() ? sim900_send_cmd_wait_reply((const
    //uint8_t*)"AT+SAPBR=0,1\r", (const uint8_t*)RESPON_OK, 5000000, 0, NULL): 1);
 uint8_t respon = (sim900_gprs_is_opened() ? sim900_send_cmd_wait_reply(1,(const
     bb2:	0e 94 bb 05 	call	0xb76	; 0xb76 <sim900_gprs_is_opened>
     bb6:	88 23       	and	r24, r24
     bb8:	79 f0       	breq	.+30     	; 0xbd8 <sim900_gprs_close_connection+0x30>
     bba:	81 e0       	ldi	r24, 0x01	; 1
     bbc:	65 e1       	ldi	r22, 0x15	; 21
     bbe:	71 e0       	ldi	r23, 0x01	; 1
     bc0:	4c ef       	ldi	r20, 0xFC	; 252
     bc2:	51 e0       	ldi	r21, 0x01	; 1
     bc4:	00 e4       	ldi	r16, 0x40	; 64
     bc6:	1b e4       	ldi	r17, 0x4B	; 75
     bc8:	2c e4       	ldi	r18, 0x4C	; 76
     bca:	30 e0       	ldi	r19, 0x00	; 0
     bcc:	ee 24       	eor	r14, r14
     bce:	cc 24       	eor	r12, r12
     bd0:	dd 24       	eor	r13, r13
     bd2:	0e 94 7d 03 	call	0x6fa	; 0x6fa <sim900_send_cmd_wait_reply>
     bd6:	01 c0       	rjmp	.+2      	; 0xbda <sim900_gprs_close_connection+0x32>
     bd8:	81 e0       	ldi	r24, 0x01	; 1
 uint8_t*)PSTR("AT+SAPBR=0,1\r"), (const uint8_t*)RESPON_OK, 5000000, 0, NULL): 1);
  return respon;
}
     bda:	1f 91       	pop	r17
     bdc:	0f 91       	pop	r16
     bde:	ef 90       	pop	r14
     be0:	df 90       	pop	r13
     be2:	cf 90       	pop	r12
     be4:	08 95       	ret

00000be6 <sim900_gprs_start_connection>:

//open gprs conn
uint8_t sim900_gprs_start_connection()
{
     be6:	cf 92       	push	r12
     be8:	df 92       	push	r13
     bea:	ef 92       	push	r14
     bec:	0f 93       	push	r16
     bee:	1f 93       	push	r17
  uint8_t respon = sim900_send_cmd_wait_reply(1,(const uint8_t*)PSTR("AT+SAPBR=1,1\r"),
     bf0:	81 e0       	ldi	r24, 0x01	; 1
     bf2:	67 e0       	ldi	r22, 0x07	; 7
     bf4:	71 e0       	ldi	r23, 0x01	; 1
     bf6:	4c ef       	ldi	r20, 0xFC	; 252
     bf8:	51 e0       	ldi	r21, 0x01	; 1
     bfa:	00 e0       	ldi	r16, 0x00	; 0
     bfc:	11 ee       	ldi	r17, 0xE1	; 225
     bfe:	25 ef       	ldi	r18, 0xF5	; 245
     c00:	35 e0       	ldi	r19, 0x05	; 5
     c02:	ee 24       	eor	r14, r14
     c04:	cc 24       	eor	r12, r12
     c06:	dd 24       	eor	r13, r13
     c08:	0e 94 7d 03 	call	0x6fa	; 0x6fa <sim900_send_cmd_wait_reply>
    (const uint8_t*)RESPON_OK, 100000000, 0, NULL);
  return respon;
}
     c0c:	1f 91       	pop	r17
     c0e:	0f 91       	pop	r16
     c10:	ef 90       	pop	r14
     c12:	df 90       	pop	r13
     c14:	cf 90       	pop	r12
     c16:	08 95       	ret

00000c18 <sim900_gprs_open_connection>:

//open gprs session
uint8_t sim900_gprs_open_connection(const uint8_t *apn, const uint8_t *username,
  const uint8_t *password)
{
     c18:	6f 92       	push	r6
     c1a:	7f 92       	push	r7
     c1c:	8f 92       	push	r8
     c1e:	9f 92       	push	r9
     c20:	af 92       	push	r10
     c22:	bf 92       	push	r11
     c24:	cf 92       	push	r12
     c26:	df 92       	push	r13
     c28:	ef 92       	push	r14
     c2a:	ff 92       	push	r15
     c2c:	0f 93       	push	r16
     c2e:	1f 93       	push	r17
     c30:	cf 93       	push	r28
     c32:	df 93       	push	r29
     c34:	5c 01       	movw	r10, r24
     c36:	4b 01       	movw	r8, r22
     c38:	3a 01       	movw	r6, r20
  #define CMD_SAPBR_NEW	"AT+SAPBR=3,1,"

  const uint8_t MAX_BUFFER_NUM = 35;
  //uint8_t cmdx[MAX_BUFFER_NUM];
  uint8_t *cmdx = (uint8_t*) calloc(MAX_BUFFER_NUM,sizeof(uint8_t));
     c3a:	83 e2       	ldi	r24, 0x23	; 35
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	61 e0       	ldi	r22, 0x01	; 1
     c40:	70 e0       	ldi	r23, 0x00	; 0
     c42:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <calloc>
     c46:	38 2f       	mov	r19, r24
     c48:	e8 2e       	mov	r14, r24
     c4a:	e7 01       	movw	r28, r14
     c4c:	7e 01       	movw	r14, r28
     c4e:	f9 2e       	mov	r15, r25
     c50:	e7 01       	movw	r28, r14
  
  //buffer created??
  if (cmdx == NULL)
     c52:	20 97       	sbiw	r28, 0x00	; 0
     c54:	09 f4       	brne	.+2      	; 0xc58 <sim900_gprs_open_connection+0x40>
     c56:	13 c1       	rjmp	.+550    	; 0xe7e <sim900_gprs_open_connection+0x266>
  {
	  return 0;
  }

  //setup string
  memset(cmdx, '\0', MAX_BUFFER_NUM);
     c58:	e3 2f       	mov	r30, r19
     c5a:	f9 2f       	mov	r31, r25
     c5c:	83 e2       	ldi	r24, 0x23	; 35
     c5e:	df 01       	movw	r26, r30
     c60:	1d 92       	st	X+, r1
     c62:	8a 95       	dec	r24
     c64:	e9 f7       	brne	.-6      	; 0xc60 <sim900_gprs_open_connection+0x48>

  //registered to network?
  if (!sim900_is_network_registered())
     c66:	0e 94 3f 04 	call	0x87e	; 0x87e <sim900_is_network_registered>
     c6a:	88 23       	and	r24, r24
     c6c:	29 f4       	brne	.+10     	; 0xc78 <sim900_gprs_open_connection+0x60>
  {
	  free(cmdx);
     c6e:	c7 01       	movw	r24, r14
     c70:	0e 94 2b 0c 	call	0x1856	; 0x1856 <free>
    return 0;
     c74:	80 e0       	ldi	r24, 0x00	; 0
     c76:	04 c1       	rjmp	.+520    	; 0xe80 <sim900_gprs_open_connection+0x268>
  }

  //gprs already opened?
  if (sim900_gprs_is_opened())
     c78:	0e 94 bb 05 	call	0xb76	; 0xb76 <sim900_gprs_is_opened>
     c7c:	88 23       	and	r24, r24
     c7e:	29 f0       	breq	.+10     	; 0xc8a <sim900_gprs_open_connection+0x72>
  {
	  free(cmdx);
     c80:	c7 01       	movw	r24, r14
     c82:	0e 94 2b 0c 	call	0x1856	; 0x1856 <free>
    return 1;
     c86:	81 e0       	ldi	r24, 0x01	; 1
     c88:	fb c0       	rjmp	.+502    	; 0xe80 <sim900_gprs_open_connection+0x268>
  }

  //init gprs connection
  snprintf((char*)cmdx, MAX_BUFFER_NUM, "%s\"CONTYPE\",\"GPRS\"\r",
     c8a:	8d b7       	in	r24, 0x3d	; 61
     c8c:	9e b7       	in	r25, 0x3e	; 62
     c8e:	08 97       	sbiw	r24, 0x08	; 8
     c90:	0f b6       	in	r0, 0x3f	; 63
     c92:	f8 94       	cli
     c94:	9e bf       	out	0x3e, r25	; 62
     c96:	0f be       	out	0x3f, r0	; 63
     c98:	8d bf       	out	0x3d, r24	; 61
     c9a:	ed b7       	in	r30, 0x3d	; 61
     c9c:	fe b7       	in	r31, 0x3e	; 62
     c9e:	31 96       	adiw	r30, 0x01	; 1
     ca0:	ad b7       	in	r26, 0x3d	; 61
     ca2:	be b7       	in	r27, 0x3e	; 62
     ca4:	12 96       	adiw	r26, 0x02	; 2
     ca6:	fc 92       	st	X, r15
     ca8:	ee 92       	st	-X, r14
     caa:	11 97       	sbiw	r26, 0x01	; 1
     cac:	83 e2       	ldi	r24, 0x23	; 35
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	93 83       	std	Z+3, r25	; 0x03
     cb2:	82 83       	std	Z+2, r24	; 0x02
     cb4:	8b e1       	ldi	r24, 0x1B	; 27
     cb6:	92 e0       	ldi	r25, 0x02	; 2
     cb8:	95 83       	std	Z+5, r25	; 0x05
     cba:	84 83       	std	Z+4, r24	; 0x04
     cbc:	8f e2       	ldi	r24, 0x2F	; 47
     cbe:	92 e0       	ldi	r25, 0x02	; 2
     cc0:	97 83       	std	Z+7, r25	; 0x07
     cc2:	86 83       	std	Z+6, r24	; 0x06
     cc4:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <snprintf>
    CMD_SAPBR_NEW);
  if (!sim900_send_cmd_wait_reply(0,(const uint8_t*)cmdx, (const uint8_t*)
     cc8:	8d b7       	in	r24, 0x3d	; 61
     cca:	9e b7       	in	r25, 0x3e	; 62
     ccc:	08 96       	adiw	r24, 0x08	; 8
     cce:	0f b6       	in	r0, 0x3f	; 63
     cd0:	f8 94       	cli
     cd2:	9e bf       	out	0x3e, r25	; 62
     cd4:	0f be       	out	0x3f, r0	; 63
     cd6:	8d bf       	out	0x3d, r24	; 61
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	b7 01       	movw	r22, r14
     cdc:	4c ef       	ldi	r20, 0xFC	; 252
     cde:	51 e0       	ldi	r21, 0x01	; 1
     ce0:	00 e4       	ldi	r16, 0x40	; 64
     ce2:	12 e4       	ldi	r17, 0x42	; 66
     ce4:	2f e0       	ldi	r18, 0x0F	; 15
     ce6:	30 e0       	ldi	r19, 0x00	; 0
     ce8:	ee 24       	eor	r14, r14
     cea:	cc 24       	eor	r12, r12
     cec:	dd 24       	eor	r13, r13
     cee:	0e 94 7d 03 	call	0x6fa	; 0x6fa <sim900_send_cmd_wait_reply>
     cf2:	88 23       	and	r24, r24
     cf4:	29 f4       	brne	.+10     	; 0xd00 <sim900_gprs_open_connection+0xe8>
    RESPON_OK, 1000000, 0, NULL))
  {
	  free(cmdx);
     cf6:	ce 01       	movw	r24, r28
     cf8:	0e 94 2b 0c 	call	0x1856	; 0x1856 <free>
    return 0;
     cfc:	80 e0       	ldi	r24, 0x00	; 0
     cfe:	c0 c0       	rjmp	.+384    	; 0xe80 <sim900_gprs_open_connection+0x268>
  }

  //set apn
  snprintf((char*)cmdx, MAX_BUFFER_NUM, "%s\"APN\",\"%s\"\r", CMD_SAPBR_NEW,
     d00:	ad b7       	in	r26, 0x3d	; 61
     d02:	be b7       	in	r27, 0x3e	; 62
     d04:	1a 97       	sbiw	r26, 0x0a	; 10
     d06:	0f b6       	in	r0, 0x3f	; 63
     d08:	f8 94       	cli
     d0a:	be bf       	out	0x3e, r27	; 62
     d0c:	0f be       	out	0x3f, r0	; 63
     d0e:	ad bf       	out	0x3d, r26	; 61
     d10:	ed b7       	in	r30, 0x3d	; 61
     d12:	fe b7       	in	r31, 0x3e	; 62
     d14:	31 96       	adiw	r30, 0x01	; 1
     d16:	12 96       	adiw	r26, 0x02	; 2
     d18:	dc 93       	st	X, r29
     d1a:	ce 93       	st	-X, r28
     d1c:	11 97       	sbiw	r26, 0x01	; 1
     d1e:	83 e2       	ldi	r24, 0x23	; 35
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	93 83       	std	Z+3, r25	; 0x03
     d24:	82 83       	std	Z+2, r24	; 0x02
     d26:	8d e3       	ldi	r24, 0x3D	; 61
     d28:	92 e0       	ldi	r25, 0x02	; 2
     d2a:	95 83       	std	Z+5, r25	; 0x05
     d2c:	84 83       	std	Z+4, r24	; 0x04
     d2e:	8f e2       	ldi	r24, 0x2F	; 47
     d30:	92 e0       	ldi	r25, 0x02	; 2
     d32:	97 83       	std	Z+7, r25	; 0x07
     d34:	86 83       	std	Z+6, r24	; 0x06
     d36:	b1 86       	std	Z+9, r11	; 0x09
     d38:	a0 86       	std	Z+8, r10	; 0x08
     d3a:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <snprintf>
    apn);
  if (!sim900_send_cmd_wait_reply(0,(const uint8_t*)cmdx, (const uint8_t*)
     d3e:	8d b7       	in	r24, 0x3d	; 61
     d40:	9e b7       	in	r25, 0x3e	; 62
     d42:	0a 96       	adiw	r24, 0x0a	; 10
     d44:	0f b6       	in	r0, 0x3f	; 63
     d46:	f8 94       	cli
     d48:	9e bf       	out	0x3e, r25	; 62
     d4a:	0f be       	out	0x3f, r0	; 63
     d4c:	8d bf       	out	0x3d, r24	; 61
     d4e:	80 e0       	ldi	r24, 0x00	; 0
     d50:	be 01       	movw	r22, r28
     d52:	4c ef       	ldi	r20, 0xFC	; 252
     d54:	51 e0       	ldi	r21, 0x01	; 1
     d56:	00 e4       	ldi	r16, 0x40	; 64
     d58:	12 e4       	ldi	r17, 0x42	; 66
     d5a:	2f e0       	ldi	r18, 0x0F	; 15
     d5c:	30 e0       	ldi	r19, 0x00	; 0
     d5e:	ee 24       	eor	r14, r14
     d60:	cc 24       	eor	r12, r12
     d62:	dd 24       	eor	r13, r13
     d64:	0e 94 7d 03 	call	0x6fa	; 0x6fa <sim900_send_cmd_wait_reply>
     d68:	88 23       	and	r24, r24
     d6a:	29 f4       	brne	.+10     	; 0xd76 <sim900_gprs_open_connection+0x15e>
    RESPON_OK, 1000000, 0, NULL))
  {
	  free(cmdx);
     d6c:	ce 01       	movw	r24, r28
     d6e:	0e 94 2b 0c 	call	0x1856	; 0x1856 <free>
    return 0;
     d72:	80 e0       	ldi	r24, 0x00	; 0
     d74:	85 c0       	rjmp	.+266    	; 0xe80 <sim900_gprs_open_connection+0x268>
  }

  //set username
  snprintf((char*)cmdx, MAX_BUFFER_NUM, "%s\"USER\",\"%s\"\r", CMD_SAPBR_NEW,
     d76:	ad b7       	in	r26, 0x3d	; 61
     d78:	be b7       	in	r27, 0x3e	; 62
     d7a:	1a 97       	sbiw	r26, 0x0a	; 10
     d7c:	0f b6       	in	r0, 0x3f	; 63
     d7e:	f8 94       	cli
     d80:	be bf       	out	0x3e, r27	; 62
     d82:	0f be       	out	0x3f, r0	; 63
     d84:	ad bf       	out	0x3d, r26	; 61
     d86:	ed b7       	in	r30, 0x3d	; 61
     d88:	fe b7       	in	r31, 0x3e	; 62
     d8a:	31 96       	adiw	r30, 0x01	; 1
     d8c:	12 96       	adiw	r26, 0x02	; 2
     d8e:	dc 93       	st	X, r29
     d90:	ce 93       	st	-X, r28
     d92:	11 97       	sbiw	r26, 0x01	; 1
     d94:	83 e2       	ldi	r24, 0x23	; 35
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	93 83       	std	Z+3, r25	; 0x03
     d9a:	82 83       	std	Z+2, r24	; 0x02
     d9c:	8b e4       	ldi	r24, 0x4B	; 75
     d9e:	92 e0       	ldi	r25, 0x02	; 2
     da0:	95 83       	std	Z+5, r25	; 0x05
     da2:	84 83       	std	Z+4, r24	; 0x04
     da4:	8f e2       	ldi	r24, 0x2F	; 47
     da6:	92 e0       	ldi	r25, 0x02	; 2
     da8:	97 83       	std	Z+7, r25	; 0x07
     daa:	86 83       	std	Z+6, r24	; 0x06
     dac:	91 86       	std	Z+9, r9	; 0x09
     dae:	80 86       	std	Z+8, r8	; 0x08
     db0:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <snprintf>
    username);
  if (!sim900_send_cmd_wait_reply(0,(const uint8_t*)cmdx, (const uint8_t*)
     db4:	8d b7       	in	r24, 0x3d	; 61
     db6:	9e b7       	in	r25, 0x3e	; 62
     db8:	0a 96       	adiw	r24, 0x0a	; 10
     dba:	0f b6       	in	r0, 0x3f	; 63
     dbc:	f8 94       	cli
     dbe:	9e bf       	out	0x3e, r25	; 62
     dc0:	0f be       	out	0x3f, r0	; 63
     dc2:	8d bf       	out	0x3d, r24	; 61
     dc4:	80 e0       	ldi	r24, 0x00	; 0
     dc6:	be 01       	movw	r22, r28
     dc8:	4c ef       	ldi	r20, 0xFC	; 252
     dca:	51 e0       	ldi	r21, 0x01	; 1
     dcc:	00 e4       	ldi	r16, 0x40	; 64
     dce:	12 e4       	ldi	r17, 0x42	; 66
     dd0:	2f e0       	ldi	r18, 0x0F	; 15
     dd2:	30 e0       	ldi	r19, 0x00	; 0
     dd4:	ee 24       	eor	r14, r14
     dd6:	cc 24       	eor	r12, r12
     dd8:	dd 24       	eor	r13, r13
     dda:	0e 94 7d 03 	call	0x6fa	; 0x6fa <sim900_send_cmd_wait_reply>
     dde:	88 23       	and	r24, r24
     de0:	29 f4       	brne	.+10     	; 0xdec <sim900_gprs_open_connection+0x1d4>
    RESPON_OK, 1000000, 0, NULL))
  {
	  free(cmdx);
     de2:	ce 01       	movw	r24, r28
     de4:	0e 94 2b 0c 	call	0x1856	; 0x1856 <free>
    return 0;
     de8:	80 e0       	ldi	r24, 0x00	; 0
     dea:	4a c0       	rjmp	.+148    	; 0xe80 <sim900_gprs_open_connection+0x268>
  }

  //set passwd
  snprintf((char*)cmdx, MAX_BUFFER_NUM, "%s\"PWD\",\"%s\"\r", CMD_SAPBR_NEW,
     dec:	ad b7       	in	r26, 0x3d	; 61
     dee:	be b7       	in	r27, 0x3e	; 62
     df0:	1a 97       	sbiw	r26, 0x0a	; 10
     df2:	0f b6       	in	r0, 0x3f	; 63
     df4:	f8 94       	cli
     df6:	be bf       	out	0x3e, r27	; 62
     df8:	0f be       	out	0x3f, r0	; 63
     dfa:	ad bf       	out	0x3d, r26	; 61
     dfc:	ed b7       	in	r30, 0x3d	; 61
     dfe:	fe b7       	in	r31, 0x3e	; 62
     e00:	31 96       	adiw	r30, 0x01	; 1
     e02:	12 96       	adiw	r26, 0x02	; 2
     e04:	dc 93       	st	X, r29
     e06:	ce 93       	st	-X, r28
     e08:	11 97       	sbiw	r26, 0x01	; 1
     e0a:	83 e2       	ldi	r24, 0x23	; 35
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	93 83       	std	Z+3, r25	; 0x03
     e10:	82 83       	std	Z+2, r24	; 0x02
     e12:	8a e5       	ldi	r24, 0x5A	; 90
     e14:	92 e0       	ldi	r25, 0x02	; 2
     e16:	95 83       	std	Z+5, r25	; 0x05
     e18:	84 83       	std	Z+4, r24	; 0x04
     e1a:	8f e2       	ldi	r24, 0x2F	; 47
     e1c:	92 e0       	ldi	r25, 0x02	; 2
     e1e:	97 83       	std	Z+7, r25	; 0x07
     e20:	86 83       	std	Z+6, r24	; 0x06
     e22:	71 86       	std	Z+9, r7	; 0x09
     e24:	60 86       	std	Z+8, r6	; 0x08
     e26:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <snprintf>
    password);
  if (!sim900_send_cmd_wait_reply(0,(const uint8_t*)cmdx, (const uint8_t*)
     e2a:	8d b7       	in	r24, 0x3d	; 61
     e2c:	9e b7       	in	r25, 0x3e	; 62
     e2e:	0a 96       	adiw	r24, 0x0a	; 10
     e30:	0f b6       	in	r0, 0x3f	; 63
     e32:	f8 94       	cli
     e34:	9e bf       	out	0x3e, r25	; 62
     e36:	0f be       	out	0x3f, r0	; 63
     e38:	8d bf       	out	0x3d, r24	; 61
     e3a:	80 e0       	ldi	r24, 0x00	; 0
     e3c:	be 01       	movw	r22, r28
     e3e:	4c ef       	ldi	r20, 0xFC	; 252
     e40:	51 e0       	ldi	r21, 0x01	; 1
     e42:	00 e4       	ldi	r16, 0x40	; 64
     e44:	12 e4       	ldi	r17, 0x42	; 66
     e46:	2f e0       	ldi	r18, 0x0F	; 15
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	ee 24       	eor	r14, r14
     e4c:	cc 24       	eor	r12, r12
     e4e:	dd 24       	eor	r13, r13
     e50:	0e 94 7d 03 	call	0x6fa	; 0x6fa <sim900_send_cmd_wait_reply>
     e54:	88 23       	and	r24, r24
     e56:	29 f4       	brne	.+10     	; 0xe62 <sim900_gprs_open_connection+0x24a>
    RESPON_OK, 1000000, 0, NULL))
  {
	  free(cmdx);
     e58:	ce 01       	movw	r24, r28
     e5a:	0e 94 2b 0c 	call	0x1856	; 0x1856 <free>
    return 0;
     e5e:	80 e0       	ldi	r24, 0x00	; 0
     e60:	0f c0       	rjmp	.+30     	; 0xe80 <sim900_gprs_open_connection+0x268>
  }

  //open gprs connection
  if (!sim900_gprs_start_connection())
     e62:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <sim900_gprs_start_connection>
     e66:	88 23       	and	r24, r24
     e68:	29 f4       	brne	.+10     	; 0xe74 <sim900_gprs_open_connection+0x25c>
  {
	  free(cmdx);
     e6a:	ce 01       	movw	r24, r28
     e6c:	0e 94 2b 0c 	call	0x1856	; 0x1856 <free>
    return 0;
     e70:	80 e0       	ldi	r24, 0x00	; 0
     e72:	06 c0       	rjmp	.+12     	; 0xe80 <sim900_gprs_open_connection+0x268>
  }

	//free buffer
	free(cmdx);
     e74:	ce 01       	movw	r24, r28
     e76:	0e 94 2b 0c 	call	0x1856	; 0x1856 <free>
	
  //return the respon
  return 1;
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	01 c0       	rjmp	.+2      	; 0xe80 <sim900_gprs_open_connection+0x268>
  uint8_t *cmdx = (uint8_t*) calloc(MAX_BUFFER_NUM,sizeof(uint8_t));
  
  //buffer created??
  if (cmdx == NULL)
  {
	  return 0;
     e7e:	80 e0       	ldi	r24, 0x00	; 0
	//free buffer
	free(cmdx);
	
  //return the respon
  return 1;
}
     e80:	df 91       	pop	r29
     e82:	cf 91       	pop	r28
     e84:	1f 91       	pop	r17
     e86:	0f 91       	pop	r16
     e88:	ff 90       	pop	r15
     e8a:	ef 90       	pop	r14
     e8c:	df 90       	pop	r13
     e8e:	cf 90       	pop	r12
     e90:	bf 90       	pop	r11
     e92:	af 90       	pop	r10
     e94:	9f 90       	pop	r9
     e96:	8f 90       	pop	r8
     e98:	7f 90       	pop	r7
     e9a:	6f 90       	pop	r6
     e9c:	08 95       	ret

00000e9e <sim900_http_terminate>:

//terminate http session
uint8_t sim900_http_terminate()
{
     e9e:	cf 92       	push	r12
     ea0:	df 92       	push	r13
     ea2:	ef 92       	push	r14
     ea4:	0f 93       	push	r16
     ea6:	1f 93       	push	r17
  return sim900_send_cmd_wait_reply(1,(const uint8_t*)PSTR("AT+HTTPTERM\r"), (const
     ea8:	81 e0       	ldi	r24, 0x01	; 1
     eaa:	6a ef       	ldi	r22, 0xFA	; 250
     eac:	70 e0       	ldi	r23, 0x00	; 0
     eae:	4c ef       	ldi	r20, 0xFC	; 252
     eb0:	51 e0       	ldi	r21, 0x01	; 1
     eb2:	00 e4       	ldi	r16, 0x40	; 64
     eb4:	1b e4       	ldi	r17, 0x4B	; 75
     eb6:	2c e4       	ldi	r18, 0x4C	; 76
     eb8:	30 e0       	ldi	r19, 0x00	; 0
     eba:	ee 24       	eor	r14, r14
     ebc:	cc 24       	eor	r12, r12
     ebe:	dd 24       	eor	r13, r13
     ec0:	0e 94 7d 03 	call	0x6fa	; 0x6fa <sim900_send_cmd_wait_reply>
    uint8_t*)RESPON_OK, 5000000, 0, NULL);
}
     ec4:	1f 91       	pop	r17
     ec6:	0f 91       	pop	r16
     ec8:	ef 90       	pop	r14
     eca:	df 90       	pop	r13
     ecc:	cf 90       	pop	r12
     ece:	08 95       	ret

00000ed0 <sim900_http_send_data>:

uint8_t sim900_http_send_data(const uint8_t method, const uint8_t *aurl, const uint8_t *adata, const  uint8_t max_out_len, uint8_t *arespon_out)
{
     ed0:	3f 92       	push	r3
     ed2:	4f 92       	push	r4
     ed4:	5f 92       	push	r5
     ed6:	6f 92       	push	r6
     ed8:	7f 92       	push	r7
     eda:	8f 92       	push	r8
     edc:	9f 92       	push	r9
     ede:	af 92       	push	r10
     ee0:	bf 92       	push	r11
     ee2:	cf 92       	push	r12
     ee4:	df 92       	push	r13
     ee6:	ef 92       	push	r14
     ee8:	ff 92       	push	r15
     eea:	0f 93       	push	r16
     eec:	1f 93       	push	r17
     eee:	df 93       	push	r29
     ef0:	cf 93       	push	r28
     ef2:	00 d0       	rcall	.+0      	; 0xef4 <sim900_http_send_data+0x24>
     ef4:	00 d0       	rcall	.+0      	; 0xef6 <sim900_http_send_data+0x26>
     ef6:	00 d0       	rcall	.+0      	; 0xef8 <sim900_http_send_data+0x28>
     ef8:	cd b7       	in	r28, 0x3d	; 61
     efa:	de b7       	in	r29, 0x3e	; 62
     efc:	78 2e       	mov	r7, r24
     efe:	2b 01       	movw	r4, r22
     f00:	64 2e       	mov	r6, r20
     f02:	35 2e       	mov	r3, r21
     f04:	f2 2e       	mov	r15, r18
     f06:	48 01       	movw	r8, r16
	#define HTTP_PARA_URL "AT+HTTPPARA=\"URL\","
	const uint8_t MAX_BUFFER = 100;
	uint8_t respon = 0;
	uint16_t num_data = 0;
	uint8_t *cmdx = (uint8_t*) calloc(MAX_BUFFER,sizeof(uint8_t));
     f08:	84 e6       	ldi	r24, 0x64	; 100
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	61 e0       	ldi	r22, 0x01	; 1
     f0e:	70 e0       	ldi	r23, 0x00	; 0
     f10:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <calloc>
     f14:	a8 2e       	mov	r10, r24
     f16:	b9 2e       	mov	r11, r25
	
	//buffer created?
	if (cmdx == NULL)
     f18:	a1 14       	cp	r10, r1
     f1a:	b1 04       	cpc	r11, r1
     f1c:	09 f4       	brne	.+2      	; 0xf20 <sim900_http_send_data+0x50>
     f1e:	06 c2       	rjmp	.+1036   	; 0x132c <__stack+0x22d>
	{
		return 0;
	}

	//set init result
	if (arespon_out != NULL)
     f20:	01 15       	cp	r16, r1
     f22:	11 05       	cpc	r17, r1
     f24:	41 f0       	breq	.+16     	; 0xf36 <sim900_http_send_data+0x66>
	{
		memset(arespon_out, '\0', max_out_len *sizeof(uint8_t));
     f26:	80 2f       	mov	r24, r16
     f28:	99 2d       	mov	r25, r9
     f2a:	60 e0       	ldi	r22, 0x00	; 0
     f2c:	70 e0       	ldi	r23, 0x00	; 0
     f2e:	4f 2d       	mov	r20, r15
     f30:	50 e0       	ldi	r21, 0x00	; 0
     f32:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <memset>
	}

	//check is connected
	if (!sim900_gprs_is_opened())
     f36:	0e 94 bb 05 	call	0xb76	; 0xb76 <sim900_gprs_is_opened>
     f3a:	88 23       	and	r24, r24
     f3c:	29 f4       	brne	.+10     	; 0xf48 <sim900_http_send_data+0x78>
	{
		free(cmdx);
     f3e:	c5 01       	movw	r24, r10
     f40:	0e 94 2b 0c 	call	0x1856	; 0x1856 <free>
		return 0;
     f44:	10 e0       	ldi	r17, 0x00	; 0
     f46:	f3 c1       	rjmp	.+998    	; 0x132e <__stack+0x22f>
	}
	
	//make sure previous http is terminated
	sim900_http_terminate();
     f48:	0e 94 4f 07 	call	0xe9e	; 0xe9e <sim900_http_terminate>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f4c:	8f ef       	ldi	r24, 0xFF	; 255
     f4e:	90 e7       	ldi	r25, 0x70	; 112
     f50:	a2 e0       	ldi	r26, 0x02	; 2
     f52:	81 50       	subi	r24, 0x01	; 1
     f54:	90 40       	sbci	r25, 0x00	; 0
     f56:	a0 40       	sbci	r26, 0x00	; 0
     f58:	e1 f7       	brne	.-8      	; 0xf52 <sim900_http_send_data+0x82>
     f5a:	00 c0       	rjmp	.+0      	; 0xf5c <sim900_http_send_data+0x8c>
     f5c:	00 00       	nop
	
	//http init
	_delay_ms(100);
	if (!sim900_send_cmd_wait_reply(1,(const uint8_t*)PSTR("AT+HTTPINIT\r"), (const
     f5e:	81 e0       	ldi	r24, 0x01	; 1
     f60:	6d ee       	ldi	r22, 0xED	; 237
     f62:	70 e0       	ldi	r23, 0x00	; 0
     f64:	4c ef       	ldi	r20, 0xFC	; 252
     f66:	51 e0       	ldi	r21, 0x01	; 1
     f68:	00 e4       	ldi	r16, 0x40	; 64
     f6a:	1b e4       	ldi	r17, 0x4B	; 75
     f6c:	2c e4       	ldi	r18, 0x4C	; 76
     f6e:	30 e0       	ldi	r19, 0x00	; 0
     f70:	ee 24       	eor	r14, r14
     f72:	cc 24       	eor	r12, r12
     f74:	dd 24       	eor	r13, r13
     f76:	0e 94 7d 03 	call	0x6fa	; 0x6fa <sim900_send_cmd_wait_reply>
     f7a:	88 23       	and	r24, r24
     f7c:	29 f4       	brne	.+10     	; 0xf88 <sim900_http_send_data+0xb8>
	uint8_t*)RESPON_OK, 5000000, 0, NULL))
	{
		free(cmdx);
     f7e:	c5 01       	movw	r24, r10
     f80:	0e 94 2b 0c 	call	0x1856	; 0x1856 <free>
		return 0;
     f84:	10 e0       	ldi	r17, 0x00	; 0
     f86:	d3 c1       	rjmp	.+934    	; 0x132e <__stack+0x22f>
	}

	//http parameter cid
	if (!sim900_send_cmd_wait_reply(1,(const uint8_t*)PSTR("AT+HTTPPARA=\"CID\",1\r"),
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	68 ed       	ldi	r22, 0xD8	; 216
     f8c:	70 e0       	ldi	r23, 0x00	; 0
     f8e:	4c ef       	ldi	r20, 0xFC	; 252
     f90:	51 e0       	ldi	r21, 0x01	; 1
     f92:	00 e4       	ldi	r16, 0x40	; 64
     f94:	1b e4       	ldi	r17, 0x4B	; 75
     f96:	2c e4       	ldi	r18, 0x4C	; 76
     f98:	30 e0       	ldi	r19, 0x00	; 0
     f9a:	ee 24       	eor	r14, r14
     f9c:	cc 24       	eor	r12, r12
     f9e:	dd 24       	eor	r13, r13
     fa0:	0e 94 7d 03 	call	0x6fa	; 0x6fa <sim900_send_cmd_wait_reply>
     fa4:	88 23       	and	r24, r24
     fa6:	39 f4       	brne	.+14     	; 0xfb6 <sim900_http_send_data+0xe6>
	(const uint8_t*)RESPON_OK, 5000000, 0, NULL))
	{
		sim900_http_terminate();
     fa8:	0e 94 4f 07 	call	0xe9e	; 0xe9e <sim900_http_terminate>
		free(cmdx);
     fac:	c5 01       	movw	r24, r10
     fae:	0e 94 2b 0c 	call	0x1856	; 0x1856 <free>
		return 0;
     fb2:	10 e0       	ldi	r17, 0x00	; 0
     fb4:	bc c1       	rjmp	.+888    	; 0x132e <__stack+0x22f>
	}

	//http parameter url
	memset(cmdx, '\0', MAX_BUFFER);
     fb6:	ea 2d       	mov	r30, r10
     fb8:	fb 2d       	mov	r31, r11
     fba:	84 e6       	ldi	r24, 0x64	; 100
     fbc:	df 01       	movw	r26, r30
     fbe:	1d 92       	st	X+, r1
     fc0:	8a 95       	dec	r24
     fc2:	e9 f7       	brne	.-6      	; 0xfbe <sim900_http_send_data+0xee>
	//snprintf((char*)cmdx, MAX_BUFFER, (method ? "%s\"%s\"\r":"%s\"%s?%s\"\r"), HTTP_PARA_URL, aurl,(method ? ((char*)""):adata));
	if (method) //post
     fc4:	77 20       	and	r7, r7
     fc6:	41 f1       	breq	.+80     	; 0x1018 <sim900_http_send_data+0x148>
	{
		snprintf((char*)cmdx, MAX_BUFFER, "%s\"%s\"\r", HTTP_PARA_URL, aurl);
     fc8:	ed b7       	in	r30, 0x3d	; 61
     fca:	fe b7       	in	r31, 0x3e	; 62
     fcc:	3a 97       	sbiw	r30, 0x0a	; 10
     fce:	0f b6       	in	r0, 0x3f	; 63
     fd0:	f8 94       	cli
     fd2:	fe bf       	out	0x3e, r31	; 62
     fd4:	0f be       	out	0x3f, r0	; 63
     fd6:	ed bf       	out	0x3d, r30	; 61
     fd8:	31 96       	adiw	r30, 0x01	; 1
     fda:	ad b7       	in	r26, 0x3d	; 61
     fdc:	be b7       	in	r27, 0x3e	; 62
     fde:	12 96       	adiw	r26, 0x02	; 2
     fe0:	bc 92       	st	X, r11
     fe2:	ae 92       	st	-X, r10
     fe4:	11 97       	sbiw	r26, 0x01	; 1
     fe6:	84 e6       	ldi	r24, 0x64	; 100
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	93 83       	std	Z+3, r25	; 0x03
     fec:	82 83       	std	Z+2, r24	; 0x02
     fee:	8c e8       	ldi	r24, 0x8C	; 140
     ff0:	92 e0       	ldi	r25, 0x02	; 2
     ff2:	95 83       	std	Z+5, r25	; 0x05
     ff4:	84 83       	std	Z+4, r24	; 0x04
     ff6:	84 e9       	ldi	r24, 0x94	; 148
     ff8:	92 e0       	ldi	r25, 0x02	; 2
     ffa:	97 83       	std	Z+7, r25	; 0x07
     ffc:	86 83       	std	Z+6, r24	; 0x06
     ffe:	51 86       	std	Z+9, r5	; 0x09
    1000:	40 86       	std	Z+8, r4	; 0x08
    1002:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <snprintf>
    1006:	ed b7       	in	r30, 0x3d	; 61
    1008:	fe b7       	in	r31, 0x3e	; 62
    100a:	3a 96       	adiw	r30, 0x0a	; 10
    100c:	0f b6       	in	r0, 0x3f	; 63
    100e:	f8 94       	cli
    1010:	fe bf       	out	0x3e, r31	; 62
    1012:	0f be       	out	0x3f, r0	; 63
    1014:	ed bf       	out	0x3d, r30	; 61
    1016:	2b c0       	rjmp	.+86     	; 0x106e <sim900_http_send_data+0x19e>
	} 
	else //get
	{
		snprintf((char*)cmdx, MAX_BUFFER, "%s\"%s?%s\"\r", HTTP_PARA_URL, aurl, adata);
    1018:	8d b7       	in	r24, 0x3d	; 61
    101a:	9e b7       	in	r25, 0x3e	; 62
    101c:	0c 97       	sbiw	r24, 0x0c	; 12
    101e:	0f b6       	in	r0, 0x3f	; 63
    1020:	f8 94       	cli
    1022:	9e bf       	out	0x3e, r25	; 62
    1024:	0f be       	out	0x3f, r0	; 63
    1026:	8d bf       	out	0x3d, r24	; 61
    1028:	ed b7       	in	r30, 0x3d	; 61
    102a:	fe b7       	in	r31, 0x3e	; 62
    102c:	31 96       	adiw	r30, 0x01	; 1
    102e:	ad b7       	in	r26, 0x3d	; 61
    1030:	be b7       	in	r27, 0x3e	; 62
    1032:	12 96       	adiw	r26, 0x02	; 2
    1034:	bc 92       	st	X, r11
    1036:	ae 92       	st	-X, r10
    1038:	11 97       	sbiw	r26, 0x01	; 1
    103a:	84 e6       	ldi	r24, 0x64	; 100
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	93 83       	std	Z+3, r25	; 0x03
    1040:	82 83       	std	Z+2, r24	; 0x02
    1042:	87 ea       	ldi	r24, 0xA7	; 167
    1044:	92 e0       	ldi	r25, 0x02	; 2
    1046:	95 83       	std	Z+5, r25	; 0x05
    1048:	84 83       	std	Z+4, r24	; 0x04
    104a:	84 e9       	ldi	r24, 0x94	; 148
    104c:	92 e0       	ldi	r25, 0x02	; 2
    104e:	97 83       	std	Z+7, r25	; 0x07
    1050:	86 83       	std	Z+6, r24	; 0x06
    1052:	51 86       	std	Z+9, r5	; 0x09
    1054:	40 86       	std	Z+8, r4	; 0x08
    1056:	62 86       	std	Z+10, r6	; 0x0a
    1058:	33 86       	std	Z+11, r3	; 0x0b
    105a:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <snprintf>
    105e:	ed b7       	in	r30, 0x3d	; 61
    1060:	fe b7       	in	r31, 0x3e	; 62
    1062:	3c 96       	adiw	r30, 0x0c	; 12
    1064:	0f b6       	in	r0, 0x3f	; 63
    1066:	f8 94       	cli
    1068:	fe bf       	out	0x3e, r31	; 62
    106a:	0f be       	out	0x3f, r0	; 63
    106c:	ed bf       	out	0x3d, r30	; 61
	}
	if (!sim900_send_cmd_wait_reply(0,(const uint8_t*)cmdx, (const uint8_t*)
    106e:	80 e0       	ldi	r24, 0x00	; 0
    1070:	b5 01       	movw	r22, r10
    1072:	4c ef       	ldi	r20, 0xFC	; 252
    1074:	51 e0       	ldi	r21, 0x01	; 1
    1076:	00 e4       	ldi	r16, 0x40	; 64
    1078:	1b e4       	ldi	r17, 0x4B	; 75
    107a:	2c e4       	ldi	r18, 0x4C	; 76
    107c:	30 e0       	ldi	r19, 0x00	; 0
    107e:	ee 24       	eor	r14, r14
    1080:	cc 24       	eor	r12, r12
    1082:	dd 24       	eor	r13, r13
    1084:	0e 94 7d 03 	call	0x6fa	; 0x6fa <sim900_send_cmd_wait_reply>
    1088:	88 23       	and	r24, r24
    108a:	39 f4       	brne	.+14     	; 0x109a <sim900_http_send_data+0x1ca>
	RESPON_OK, 5000000, 0, NULL))
	{
		sim900_http_terminate();
    108c:	0e 94 4f 07 	call	0xe9e	; 0xe9e <sim900_http_terminate>
		free(cmdx);
    1090:	c5 01       	movw	r24, r10
    1092:	0e 94 2b 0c 	call	0x1856	; 0x1856 <free>
		return 0;
    1096:	10 e0       	ldi	r17, 0x00	; 0
    1098:	4a c1       	rjmp	.+660    	; 0x132e <__stack+0x22f>
	}

	//set content type for post only
	if(method)
    109a:	77 20       	and	r7, r7
    109c:	09 f4       	brne	.+2      	; 0x10a0 <sim900_http_send_data+0x1d0>
    109e:	78 c0       	rjmp	.+240    	; 0x1190 <__stack+0x91>
	{
		if (!sim900_send_cmd_wait_reply(1,(const uint8_t*)
    10a0:	81 e0       	ldi	r24, 0x01	; 1
    10a2:	6e ea       	ldi	r22, 0xAE	; 174
    10a4:	70 e0       	ldi	r23, 0x00	; 0
    10a6:	4c ef       	ldi	r20, 0xFC	; 252
    10a8:	51 e0       	ldi	r21, 0x01	; 1
    10aa:	00 e4       	ldi	r16, 0x40	; 64
    10ac:	1b e4       	ldi	r17, 0x4B	; 75
    10ae:	2c e4       	ldi	r18, 0x4C	; 76
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	ee 24       	eor	r14, r14
    10b4:	cc 24       	eor	r12, r12
    10b6:	dd 24       	eor	r13, r13
    10b8:	0e 94 7d 03 	call	0x6fa	; 0x6fa <sim900_send_cmd_wait_reply>
    10bc:	88 23       	and	r24, r24
    10be:	39 f4       	brne	.+14     	; 0x10ce <sim900_http_send_data+0x1fe>
		PSTR("AT+HTTPPARA=\"CONTENT\",\"application/json\"\r"), (const
		uint8_t*)RESPON_OK, 5000000, 0, NULL))
		{
			sim900_http_terminate();
    10c0:	0e 94 4f 07 	call	0xe9e	; 0xe9e <sim900_http_terminate>
			free(cmdx);
    10c4:	c5 01       	movw	r24, r10
    10c6:	0e 94 2b 0c 	call	0x1856	; 0x1856 <free>
			return 0;
    10ca:	10 e0       	ldi	r17, 0x00	; 0
    10cc:	30 c1       	rjmp	.+608    	; 0x132e <__stack+0x22f>
		}
		
		//http post data
		memset(cmdx, '\0', MAX_BUFFER);
    10ce:	ea 2d       	mov	r30, r10
    10d0:	fb 2d       	mov	r31, r11
    10d2:	84 e6       	ldi	r24, 0x64	; 100
    10d4:	df 01       	movw	r26, r30
    10d6:	1d 92       	st	X+, r1
    10d8:	8a 95       	dec	r24
    10da:	e9 f7       	brne	.-6      	; 0x10d6 <sim900_http_send_data+0x206>
		snprintf((char*)cmdx, MAX_BUFFER, "AT+HTTPDATA=%d,20000\r", strlen((const
    10dc:	e6 2d       	mov	r30, r6
    10de:	f3 2d       	mov	r31, r3
    10e0:	df 01       	movw	r26, r30
    10e2:	0d 90       	ld	r0, X+
    10e4:	00 20       	and	r0, r0
    10e6:	e9 f7       	brne	.-6      	; 0x10e2 <sim900_http_send_data+0x212>
    10e8:	11 97       	sbiw	r26, 0x01	; 1
    10ea:	9d 01       	movw	r18, r26
    10ec:	2e 1b       	sub	r18, r30
    10ee:	3f 0b       	sbc	r19, r31
    10f0:	ed b7       	in	r30, 0x3d	; 61
    10f2:	fe b7       	in	r31, 0x3e	; 62
    10f4:	38 97       	sbiw	r30, 0x08	; 8
    10f6:	0f b6       	in	r0, 0x3f	; 63
    10f8:	f8 94       	cli
    10fa:	fe bf       	out	0x3e, r31	; 62
    10fc:	0f be       	out	0x3f, r0	; 63
    10fe:	ed bf       	out	0x3d, r30	; 61
    1100:	31 96       	adiw	r30, 0x01	; 1
    1102:	ad b7       	in	r26, 0x3d	; 61
    1104:	be b7       	in	r27, 0x3e	; 62
    1106:	12 96       	adiw	r26, 0x02	; 2
    1108:	bc 92       	st	X, r11
    110a:	ae 92       	st	-X, r10
    110c:	11 97       	sbiw	r26, 0x01	; 1
    110e:	84 e6       	ldi	r24, 0x64	; 100
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	93 83       	std	Z+3, r25	; 0x03
    1114:	82 83       	std	Z+2, r24	; 0x02
    1116:	82 eb       	ldi	r24, 0xB2	; 178
    1118:	92 e0       	ldi	r25, 0x02	; 2
    111a:	95 83       	std	Z+5, r25	; 0x05
    111c:	84 83       	std	Z+4, r24	; 0x04
    111e:	37 83       	std	Z+7, r19	; 0x07
    1120:	26 83       	std	Z+6, r18	; 0x06
    1122:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <snprintf>
		char*)adata));
		if (!sim900_send_cmd_wait_reply(0,(const uint8_t*)cmdx, (const uint8_t*)
    1126:	ed b7       	in	r30, 0x3d	; 61
    1128:	fe b7       	in	r31, 0x3e	; 62
    112a:	38 96       	adiw	r30, 0x08	; 8
    112c:	0f b6       	in	r0, 0x3f	; 63
    112e:	f8 94       	cli
    1130:	fe bf       	out	0x3e, r31	; 62
    1132:	0f be       	out	0x3f, r0	; 63
    1134:	ed bf       	out	0x3d, r30	; 61
    1136:	80 e0       	ldi	r24, 0x00	; 0
    1138:	b5 01       	movw	r22, r10
    113a:	48 ec       	ldi	r20, 0xC8	; 200
    113c:	52 e0       	ldi	r21, 0x02	; 2
    113e:	00 e0       	ldi	r16, 0x00	; 0
    1140:	1d e2       	ldi	r17, 0x2D	; 45
    1142:	21 e3       	ldi	r18, 0x31	; 49
    1144:	31 e0       	ldi	r19, 0x01	; 1
    1146:	ee 24       	eor	r14, r14
    1148:	cc 24       	eor	r12, r12
    114a:	dd 24       	eor	r13, r13
    114c:	0e 94 7d 03 	call	0x6fa	; 0x6fa <sim900_send_cmd_wait_reply>
    1150:	88 23       	and	r24, r24
    1152:	39 f4       	brne	.+14     	; 0x1162 <__stack+0x63>
		"DOWNLOAD", 20000000, 0, NULL))
		{
			sim900_http_terminate();
    1154:	0e 94 4f 07 	call	0xe9e	; 0xe9e <sim900_http_terminate>
			free(cmdx);
    1158:	c5 01       	movw	r24, r10
    115a:	0e 94 2b 0c 	call	0x1856	; 0x1856 <free>
			return 0;
    115e:	10 e0       	ldi	r17, 0x00	; 0
    1160:	e6 c0       	rjmp	.+460    	; 0x132e <__stack+0x22f>
		}

		//send the data
		if (!sim900_send_cmd_wait_reply(0,(const uint8_t*)adata, (const uint8_t*)"OK",
    1162:	80 e0       	ldi	r24, 0x00	; 0
    1164:	66 2d       	mov	r22, r6
    1166:	73 2d       	mov	r23, r3
    1168:	4c ef       	ldi	r20, 0xFC	; 252
    116a:	51 e0       	ldi	r21, 0x01	; 1
    116c:	00 e4       	ldi	r16, 0x40	; 64
    116e:	1b e4       	ldi	r17, 0x4B	; 75
    1170:	2c e4       	ldi	r18, 0x4C	; 76
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	ee 24       	eor	r14, r14
    1176:	cc 24       	eor	r12, r12
    1178:	dd 24       	eor	r13, r13
    117a:	0e 94 7d 03 	call	0x6fa	; 0x6fa <sim900_send_cmd_wait_reply>
    117e:	88 23       	and	r24, r24
    1180:	61 f4       	brne	.+24     	; 0x119a <__stack+0x9b>
		5000000, 0, NULL))
		{
			sim900_http_terminate();
    1182:	0e 94 4f 07 	call	0xe9e	; 0xe9e <sim900_http_terminate>
			free(cmdx);
    1186:	c5 01       	movw	r24, r10
    1188:	0e 94 2b 0c 	call	0x1856	; 0x1856 <free>
			return 0;
    118c:	10 e0       	ldi	r17, 0x00	; 0
    118e:	cf c0       	rjmp	.+414    	; 0x132e <__stack+0x22f>
		}
	}

	//send it
	respon = sim900_send_cmd_wait_reply(1,(const uint8_t*)(method ? PSTR("AT+HTTPACTION=1\r"):PSTR("AT+HTTPACTION=0\r")),
    1190:	6c e8       	ldi	r22, 0x8C	; 140
    1192:	70 e0       	ldi	r23, 0x00	; 0
    1194:	4a e7       	ldi	r20, 0x7A	; 122
    1196:	52 e0       	ldi	r21, 0x02	; 2
    1198:	04 c0       	rjmp	.+8      	; 0x11a2 <__stack+0xa3>
    119a:	6d e9       	ldi	r22, 0x9D	; 157
    119c:	70 e0       	ldi	r23, 0x00	; 0
    119e:	48 e6       	ldi	r20, 0x68	; 104
    11a0:	52 e0       	ldi	r21, 0x02	; 2
    11a2:	81 e0       	ldi	r24, 0x01	; 1
    11a4:	00 e0       	ldi	r16, 0x00	; 0
    11a6:	1d e2       	ldi	r17, 0x2D	; 45
    11a8:	21 e3       	ldi	r18, 0x31	; 49
    11aa:	31 e0       	ldi	r19, 0x01	; 1
    11ac:	ee 24       	eor	r14, r14
    11ae:	cc 24       	eor	r12, r12
    11b0:	dd 24       	eor	r13, r13
    11b2:	0e 94 7d 03 	call	0x6fa	; 0x6fa <sim900_send_cmd_wait_reply>
    11b6:	18 2f       	mov	r17, r24
	(const uint8_t*)(method ? "+HTTPACTION:1,200":"+HTTPACTION:0,200"), 20000000, 0, NULL);

	//if respon=1 then get the rest of data as length of respons
	if (respon)
    11b8:	88 23       	and	r24, r24
    11ba:	09 f4       	brne	.+2      	; 0x11be <__stack+0xbf>
    11bc:	b1 c0       	rjmp	.+354    	; 0x1320 <__stack+0x221>
	{
		memset(cmdx, '\0', MAX_BUFFER);
    11be:	ea 2d       	mov	r30, r10
    11c0:	fb 2d       	mov	r31, r11
    11c2:	84 e6       	ldi	r24, 0x64	; 100
    11c4:	df 01       	movw	r26, r30
    11c6:	1d 92       	st	X+, r1
    11c8:	8a 95       	dec	r24
    11ca:	e9 f7       	brne	.-6      	; 0x11c6 <__stack+0xc7>
		//uint8_t *cmm = (uint8_t*) calloc(MAX_BUFFER,sizeof(uint8_t));
		respon = sim900_send_cmd_wait_reply(0,NULL, (const uint8_t*)"\r", 1000000,
    11cc:	80 e0       	ldi	r24, 0x00	; 0
    11ce:	60 e0       	ldi	r22, 0x00	; 0
    11d0:	70 e0       	ldi	r23, 0x00	; 0
    11d2:	41 ed       	ldi	r20, 0xD1	; 209
    11d4:	52 e0       	ldi	r21, 0x02	; 2
    11d6:	00 e4       	ldi	r16, 0x40	; 64
    11d8:	12 e4       	ldi	r17, 0x42	; 66
    11da:	2f e0       	ldi	r18, 0x0F	; 15
    11dc:	30 e0       	ldi	r19, 0x00	; 0
    11de:	0f 2e       	mov	r0, r31
    11e0:	f4 e6       	ldi	r31, 0x64	; 100
    11e2:	ef 2e       	mov	r14, r31
    11e4:	f0 2d       	mov	r31, r0
    11e6:	65 01       	movw	r12, r10
    11e8:	0e 94 7d 03 	call	0x6fa	; 0x6fa <sim900_send_cmd_wait_reply>
    11ec:	18 2f       	mov	r17, r24
		MAX_BUFFER, cmdx);
		//free(cmm);

		if (respon)
    11ee:	88 23       	and	r24, r24
    11f0:	09 f4       	brne	.+2      	; 0x11f4 <__stack+0xf5>
    11f2:	96 c0       	rjmp	.+300    	; 0x1320 <__stack+0x221>
		{
			//find \r on the data respons
			//cmdx form = ,[respon length]\r
			uint8_t *pr = (uint8_t*)memchr(cmdx, '\r', MAX_BUFFER);
    11f4:	c5 01       	movw	r24, r10
    11f6:	6d e0       	ldi	r22, 0x0D	; 13
    11f8:	70 e0       	ldi	r23, 0x00	; 0
    11fa:	44 e6       	ldi	r20, 0x64	; 100
    11fc:	50 e0       	ldi	r21, 0x00	; 0
    11fe:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <memchr>
    1202:	28 2f       	mov	r18, r24
    1204:	39 2f       	mov	r19, r25

			num_data = 0;
			if (pr != NULL)
    1206:	21 15       	cp	r18, r1
    1208:	31 05       	cpc	r19, r1
    120a:	09 f4       	brne	.+2      	; 0x120e <__stack+0x10f>
    120c:	89 c0       	rjmp	.+274    	; 0x1320 <__stack+0x221>
			{
				uint8_t clen[6];
				memset(clen, '\0', 6); //set all to 0
    120e:	3e 01       	movw	r6, r28
    1210:	08 94       	sec
    1212:	61 1c       	adc	r6, r1
    1214:	71 1c       	adc	r7, r1
    1216:	86 e0       	ldi	r24, 0x06	; 6
    1218:	f3 01       	movw	r30, r6
    121a:	11 92       	st	Z+, r1
    121c:	8a 95       	dec	r24
    121e:	e9 f7       	brne	.-6      	; 0x121a <__stack+0x11b>
				memcpy(clen, &cmdx[1], pr - &cmdx[1]); //copy the data respon length
    1220:	a5 01       	movw	r20, r10
    1222:	4f 5f       	subi	r20, 0xFF	; 255
    1224:	5f 4f       	sbci	r21, 0xFF	; 255
    1226:	24 1b       	sub	r18, r20
    1228:	35 0b       	sbc	r19, r21
    122a:	c3 01       	movw	r24, r6
    122c:	64 2f       	mov	r22, r20
    122e:	75 2f       	mov	r23, r21
    1230:	42 2f       	mov	r20, r18
    1232:	53 2f       	mov	r21, r19
    1234:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <memcpy>
				num_data = atoi((const char*)clen); //convert to int
    1238:	c3 01       	movw	r24, r6
    123a:	0e 94 c4 0c 	call	0x1988	; 0x1988 <atoi>
			}

			//just limit it
			if (num_data > max_out_len)
    123e:	2f 2d       	mov	r18, r15
    1240:	30 e0       	ldi	r19, 0x00	; 0
			if (pr != NULL)
			{
				uint8_t clen[6];
				memset(clen, '\0', 6); //set all to 0
				memcpy(clen, &cmdx[1], pr - &cmdx[1]); //copy the data respon length
				num_data = atoi((const char*)clen); //convert to int
    1242:	68 2e       	mov	r6, r24
    1244:	79 2e       	mov	r7, r25
    1246:	26 15       	cp	r18, r6
    1248:	37 05       	cpc	r19, r7
    124a:	08 f4       	brcc	.+2      	; 0x124e <__stack+0x14f>
    124c:	39 01       	movw	r6, r18
			{
				num_data = max_out_len;
			}

			//read the data respon
			if (num_data > 0)
    124e:	61 14       	cp	r6, r1
    1250:	71 04       	cpc	r7, r1
    1252:	09 f4       	brne	.+2      	; 0x1256 <__stack+0x157>
    1254:	65 c0       	rjmp	.+202    	; 0x1320 <__stack+0x221>
			{
				//allocate memory
				//make sure a respon out is capable of receiveing it
				//beware that you must make sure that the usart rx buffer is capable of receiving it
				memset(cmdx, '\0', MAX_BUFFER);
    1256:	ea 2d       	mov	r30, r10
    1258:	fb 2d       	mov	r31, r11
    125a:	84 e6       	ldi	r24, 0x64	; 100
    125c:	df 01       	movw	r26, r30
    125e:	1d 92       	st	X+, r1
    1260:	8a 95       	dec	r24
    1262:	e9 f7       	brne	.-6      	; 0x125e <__stack+0x15f>
				snprintf((char*)cmdx, MAX_BUFFER, "AT+HTTPREAD=0,%d\r", num_data);
    1264:	ed b7       	in	r30, 0x3d	; 61
    1266:	fe b7       	in	r31, 0x3e	; 62
    1268:	38 97       	sbiw	r30, 0x08	; 8
    126a:	0f b6       	in	r0, 0x3f	; 63
    126c:	f8 94       	cli
    126e:	fe bf       	out	0x3e, r31	; 62
    1270:	0f be       	out	0x3f, r0	; 63
    1272:	ed bf       	out	0x3d, r30	; 61
    1274:	31 96       	adiw	r30, 0x01	; 1
    1276:	ad b7       	in	r26, 0x3d	; 61
    1278:	be b7       	in	r27, 0x3e	; 62
    127a:	12 96       	adiw	r26, 0x02	; 2
    127c:	bc 92       	st	X, r11
    127e:	ae 92       	st	-X, r10
    1280:	11 97       	sbiw	r26, 0x01	; 1
    1282:	84 e6       	ldi	r24, 0x64	; 100
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	93 83       	std	Z+3, r25	; 0x03
    1288:	82 83       	std	Z+2, r24	; 0x02
    128a:	83 ed       	ldi	r24, 0xD3	; 211
    128c:	92 e0       	ldi	r25, 0x02	; 2
    128e:	95 83       	std	Z+5, r25	; 0x05
    1290:	84 83       	std	Z+4, r24	; 0x04
    1292:	77 82       	std	Z+7, r7	; 0x07
    1294:	66 82       	std	Z+6, r6	; 0x06
    1296:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <snprintf>
				respon = sim900_send_cmd_wait_reply(0,(const uint8_t*)cmdx, (const
    129a:	ed b7       	in	r30, 0x3d	; 61
    129c:	fe b7       	in	r31, 0x3e	; 62
    129e:	38 96       	adiw	r30, 0x08	; 8
    12a0:	0f b6       	in	r0, 0x3f	; 63
    12a2:	f8 94       	cli
    12a4:	fe bf       	out	0x3e, r31	; 62
    12a6:	0f be       	out	0x3f, r0	; 63
    12a8:	ed bf       	out	0x3d, r30	; 61
    12aa:	80 e0       	ldi	r24, 0x00	; 0
    12ac:	b5 01       	movw	r22, r10
    12ae:	45 ee       	ldi	r20, 0xE5	; 229
    12b0:	52 e0       	ldi	r21, 0x02	; 2
    12b2:	00 e4       	ldi	r16, 0x40	; 64
    12b4:	1b e4       	ldi	r17, 0x4B	; 75
    12b6:	2c e4       	ldi	r18, 0x4C	; 76
    12b8:	30 e0       	ldi	r19, 0x00	; 0
    12ba:	ee 24       	eor	r14, r14
    12bc:	cc 24       	eor	r12, r12
    12be:	dd 24       	eor	r13, r13
    12c0:	0e 94 7d 03 	call	0x6fa	; 0x6fa <sim900_send_cmd_wait_reply>
    12c4:	18 2f       	mov	r17, r24
				uint8_t*)"+HTTPREAD:", 5000000, 0, NULL);
				if (respon)
    12c6:	88 23       	and	r24, r24
    12c8:	59 f1       	breq	.+86     	; 0x1320 <__stack+0x221>
				{
					//get the rest of data
					memset(cmdx, '\0', MAX_BUFFER);
    12ca:	ea 2d       	mov	r30, r10
    12cc:	fb 2d       	mov	r31, r11
    12ce:	84 e6       	ldi	r24, 0x64	; 100
    12d0:	df 01       	movw	r26, r30
    12d2:	1d 92       	st	X+, r1
    12d4:	8a 95       	dec	r24
    12d6:	e9 f7       	brne	.-6      	; 0x12d2 <__stack+0x1d3>
					respon = sim900_send_cmd_wait_reply(0,NULL, (const uint8_t*)"\r\nOK",
    12d8:	80 e0       	ldi	r24, 0x00	; 0
    12da:	60 e0       	ldi	r22, 0x00	; 0
    12dc:	70 e0       	ldi	r23, 0x00	; 0
    12de:	40 ef       	ldi	r20, 0xF0	; 240
    12e0:	52 e0       	ldi	r21, 0x02	; 2
    12e2:	00 e4       	ldi	r16, 0x40	; 64
    12e4:	12 e4       	ldi	r17, 0x42	; 66
    12e6:	2f e0       	ldi	r18, 0x0F	; 15
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	0f 2e       	mov	r0, r31
    12ec:	f4 e6       	ldi	r31, 0x64	; 100
    12ee:	ef 2e       	mov	r14, r31
    12f0:	f0 2d       	mov	r31, r0
    12f2:	65 01       	movw	r12, r10
    12f4:	0e 94 7d 03 	call	0x6fa	; 0x6fa <sim900_send_cmd_wait_reply>
    12f8:	18 2f       	mov	r17, r24
					1000000, MAX_BUFFER, cmdx);

					//filter out the respon and get clean data
					if (respon)
    12fa:	88 23       	and	r24, r24
    12fc:	89 f0       	breq	.+34     	; 0x1320 <__stack+0x221>
					{
						//find first \n position
						pr = (uint8_t*)memchr(cmdx, '\n', num_data *sizeof(uint8_t));
    12fe:	c5 01       	movw	r24, r10
    1300:	6a e0       	ldi	r22, 0x0A	; 10
    1302:	70 e0       	ldi	r23, 0x00	; 0
    1304:	a3 01       	movw	r20, r6
    1306:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <memchr>

						//copy to result
						memcpy(arespon_out, pr + 1, num_data *sizeof(uint8_t));
    130a:	9c 01       	movw	r18, r24
    130c:	2f 5f       	subi	r18, 0xFF	; 255
    130e:	3f 4f       	sbci	r19, 0xFF	; 255
    1310:	88 2d       	mov	r24, r8
    1312:	99 2d       	mov	r25, r9
    1314:	62 2f       	mov	r22, r18
    1316:	73 2f       	mov	r23, r19
    1318:	46 2d       	mov	r20, r6
    131a:	57 2d       	mov	r21, r7
    131c:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <memcpy>
			}
		}
	}

	//terminate
	sim900_http_terminate();
    1320:	0e 94 4f 07 	call	0xe9e	; 0xe9e <sim900_http_terminate>
	
	//free buffer
	free(cmdx);
    1324:	c5 01       	movw	r24, r10
    1326:	0e 94 2b 0c 	call	0x1856	; 0x1856 <free>

	return respon;
    132a:	01 c0       	rjmp	.+2      	; 0x132e <__stack+0x22f>
	uint8_t *cmdx = (uint8_t*) calloc(MAX_BUFFER,sizeof(uint8_t));
	
	//buffer created?
	if (cmdx == NULL)
	{
		return 0;
    132c:	10 e0       	ldi	r17, 0x00	; 0
	
	//free buffer
	free(cmdx);

	return respon;
    132e:	81 2f       	mov	r24, r17
    1330:	26 96       	adiw	r28, 0x06	; 6
    1332:	0f b6       	in	r0, 0x3f	; 63
    1334:	f8 94       	cli
    1336:	de bf       	out	0x3e, r29	; 62
    1338:	0f be       	out	0x3f, r0	; 63
    133a:	cd bf       	out	0x3d, r28	; 61
    133c:	cf 91       	pop	r28
    133e:	df 91       	pop	r29
    1340:	1f 91       	pop	r17
    1342:	0f 91       	pop	r16
    1344:	ff 90       	pop	r15
    1346:	ef 90       	pop	r14
    1348:	df 90       	pop	r13
    134a:	cf 90       	pop	r12
    134c:	bf 90       	pop	r11
    134e:	af 90       	pop	r10
    1350:	9f 90       	pop	r9
    1352:	8f 90       	pop	r8
    1354:	7f 90       	pop	r7
    1356:	6f 90       	pop	r6
    1358:	5f 90       	pop	r5
    135a:	4f 90       	pop	r4
    135c:	3f 90       	pop	r3
    135e:	08 95       	ret

00001360 <__vector_18>:
ISR (UART0_RECEIVE_INTERRUPT)	
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
    1360:	1f 92       	push	r1
    1362:	0f 92       	push	r0
    1364:	0f b6       	in	r0, 0x3f	; 63
    1366:	0f 92       	push	r0
    1368:	0b b6       	in	r0, 0x3b	; 59
    136a:	0f 92       	push	r0
    136c:	11 24       	eor	r1, r1
    136e:	2f 93       	push	r18
    1370:	3f 93       	push	r19
    1372:	8f 93       	push	r24
    1374:	9f 93       	push	r25
    1376:	ef 93       	push	r30
    1378:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */
    usr  = UART0_STATUS;
    137a:	2b b1       	in	r18, 0x0b	; 11
    data = UART0_DATA;
    137c:	3c b1       	in	r19, 0x0c	; 12
#elif defined(FE) && defined(DOR)
    lastRxError = usr & (_BV(FE)|_BV(DOR) );
#endif

    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    137e:	80 91 63 03 	lds	r24, 0x0363
    1382:	8f 5f       	subi	r24, 0xFF	; 255
    1384:	8f 71       	andi	r24, 0x1F	; 31
    
    if ( tmphead == UART_RxTail ) {
    1386:	90 91 64 03 	lds	r25, 0x0364
    138a:	89 17       	cp	r24, r25
    138c:	49 f0       	breq	.+18     	; 0x13a0 <__vector_18+0x40>
    usr  = UART0_STATUS;
    data = UART0_DATA;
    
    /* get FEn (Frame Error) DORn (Data OverRun) UPEn (USART Parity Error) bits */
#if defined(FE) && defined(DOR) && defined(UPE)
    lastRxError = usr & (_BV(FE)|_BV(DOR)|_BV(UPE) );
    138e:	2c 71       	andi	r18, 0x1C	; 28
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART_RxHead = tmphead;
    1390:	80 93 63 03 	sts	0x0363, r24
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    1394:	e5 e6       	ldi	r30, 0x65	; 101
    1396:	f3 e0       	ldi	r31, 0x03	; 3
    1398:	e8 0f       	add	r30, r24
    139a:	f1 1d       	adc	r31, r1
    139c:	30 83       	st	Z, r19
    139e:	01 c0       	rjmp	.+2      	; 0x13a2 <__vector_18+0x42>
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    13a0:	22 e0       	ldi	r18, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError |= lastRxError;   
    13a2:	90 91 85 03 	lds	r25, 0x0385
    13a6:	82 2f       	mov	r24, r18
    13a8:	89 2b       	or	r24, r25
    13aa:	80 93 85 03 	sts	0x0385, r24
}
    13ae:	ff 91       	pop	r31
    13b0:	ef 91       	pop	r30
    13b2:	9f 91       	pop	r25
    13b4:	8f 91       	pop	r24
    13b6:	3f 91       	pop	r19
    13b8:	2f 91       	pop	r18
    13ba:	0f 90       	pop	r0
    13bc:	0b be       	out	0x3b, r0	; 59
    13be:	0f 90       	pop	r0
    13c0:	0f be       	out	0x3f, r0	; 63
    13c2:	0f 90       	pop	r0
    13c4:	1f 90       	pop	r1
    13c6:	18 95       	reti

000013c8 <__vector_19>:
ISR (UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
    13c8:	1f 92       	push	r1
    13ca:	0f 92       	push	r0
    13cc:	0f b6       	in	r0, 0x3f	; 63
    13ce:	0f 92       	push	r0
    13d0:	0b b6       	in	r0, 0x3b	; 59
    13d2:	0f 92       	push	r0
    13d4:	11 24       	eor	r1, r1
    13d6:	8f 93       	push	r24
    13d8:	9f 93       	push	r25
    13da:	ef 93       	push	r30
    13dc:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
    13de:	90 91 41 03 	lds	r25, 0x0341
    13e2:	80 91 42 03 	lds	r24, 0x0342
    13e6:	98 17       	cp	r25, r24
    13e8:	69 f0       	breq	.+26     	; 0x1404 <__vector_19+0x3c>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
    13ea:	80 91 42 03 	lds	r24, 0x0342
    13ee:	8f 5f       	subi	r24, 0xFF	; 255
    13f0:	8f 71       	andi	r24, 0x1F	; 31
        UART_TxTail = tmptail;
    13f2:	80 93 42 03 	sts	0x0342, r24
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
    13f6:	e3 e4       	ldi	r30, 0x43	; 67
    13f8:	f3 e0       	ldi	r31, 0x03	; 3
    13fa:	e8 0f       	add	r30, r24
    13fc:	f1 1d       	adc	r31, r1
    13fe:	80 81       	ld	r24, Z
    1400:	8c b9       	out	0x0c, r24	; 12
    1402:	01 c0       	rjmp	.+2      	; 0x1406 <__vector_19+0x3e>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
    1404:	55 98       	cbi	0x0a, 5	; 10
    }
}
    1406:	ff 91       	pop	r31
    1408:	ef 91       	pop	r30
    140a:	9f 91       	pop	r25
    140c:	8f 91       	pop	r24
    140e:	0f 90       	pop	r0
    1410:	0b be       	out	0x3b, r0	; 59
    1412:	0f 90       	pop	r0
    1414:	0f be       	out	0x3f, r0	; 63
    1416:	0f 90       	pop	r0
    1418:	1f 90       	pop	r1
    141a:	18 95       	reti

0000141c <uart_init>:
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
    UART_TxHead = 0;
    141c:	10 92 41 03 	sts	0x0341, r1
    UART_TxTail = 0;
    1420:	10 92 42 03 	sts	0x0342, r1
    UART_RxHead = 0;
    1424:	10 92 63 03 	sts	0x0363, r1
    UART_RxTail = 0;
    1428:	10 92 64 03 	sts	0x0364, r1
#endif
#endif
#endif

    /* Set baud rate */
    if ( baudrate & 0x8000 )
    142c:	99 23       	and	r25, r25
    142e:	14 f4       	brge	.+4      	; 0x1434 <uart_init+0x18>
    {
        #if UART0_BIT_U2X
        UART0_STATUS = (1<<UART0_BIT_U2X);  //Enable 2x speed 
    1430:	22 e0       	ldi	r18, 0x02	; 2
    1432:	2b b9       	out	0x0b, r18	; 11
        #endif
    } 
    #if defined(UART0_UBRRH)
    UART0_UBRRH = (unsigned char)((baudrate>>8)&0x80) ;
    1434:	29 2f       	mov	r18, r25
    1436:	20 78       	andi	r18, 0x80	; 128
    1438:	20 93 90 00 	sts	0x0090, r18
    #endif    
    UART0_UBRRL = (unsigned char) (baudrate&0x00FF);
    143c:	89 b9       	out	0x09, r24	; 9
      
    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(UART0_BIT_RXCIE)|(1<<UART0_BIT_RXEN)|(1<<UART0_BIT_TXEN);
    143e:	88 e9       	ldi	r24, 0x98	; 152
    1440:	8a b9       	out	0x0a, r24	; 10
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef UART0_CONTROLC
    #ifdef UART0_BIT_URSEL
    UART0_CONTROLC = (1<<UART0_BIT_URSEL)|(1<<UART0_BIT_UCSZ1)|(1<<UART0_BIT_UCSZ0);
    #else
    UART0_CONTROLC = (1<<UART0_BIT_UCSZ1)|(1<<UART0_BIT_UCSZ0);
    1442:	86 e0       	ldi	r24, 0x06	; 6
    1444:	80 93 95 00 	sts	0x0095, r24
    #endif 
    #endif

}/* uart_init */
    1448:	08 95       	ret

0000144a <uart_getc>:
    unsigned char tmptail;
    unsigned char data;
    unsigned char lastRxError;


    if ( UART_RxHead == UART_RxTail ) {
    144a:	90 91 63 03 	lds	r25, 0x0363
    144e:	80 91 64 03 	lds	r24, 0x0364
    1452:	98 17       	cp	r25, r24
    1454:	a1 f0       	breq	.+40     	; 0x147e <uart_getc+0x34>
        return UART_NO_DATA;   /* no data available */
    }
    
    /* calculate buffer index */
    tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
    1456:	80 91 64 03 	lds	r24, 0x0364
    145a:	8f 5f       	subi	r24, 0xFF	; 255
    145c:	8f 71       	andi	r24, 0x1F	; 31
    
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
    145e:	e5 e6       	ldi	r30, 0x65	; 101
    1460:	f3 e0       	ldi	r31, 0x03	; 3
    1462:	e8 0f       	add	r30, r24
    1464:	f1 1d       	adc	r31, r1
    1466:	90 81       	ld	r25, Z
    lastRxError = UART_LastRxError;
    1468:	40 91 85 03 	lds	r20, 0x0385
    
    /* store buffer index */
    UART_RxTail = tmptail; 
    146c:	80 93 64 03 	sts	0x0364, r24
    
    UART_LastRxError = 0;
    1470:	10 92 85 03 	sts	0x0385, r1
    return (lastRxError << 8) + data;
    1474:	34 2f       	mov	r19, r20
    1476:	20 e0       	ldi	r18, 0x00	; 0
    1478:	29 0f       	add	r18, r25
    147a:	31 1d       	adc	r19, r1
    147c:	02 c0       	rjmp	.+4      	; 0x1482 <uart_getc+0x38>
    unsigned char data;
    unsigned char lastRxError;


    if ( UART_RxHead == UART_RxTail ) {
        return UART_NO_DATA;   /* no data available */
    147e:	20 e0       	ldi	r18, 0x00	; 0
    1480:	31 e0       	ldi	r19, 0x01	; 1
    UART_RxTail = tmptail; 
    
    UART_LastRxError = 0;
    return (lastRxError << 8) + data;

}/* uart_getc */
    1482:	82 2f       	mov	r24, r18
    1484:	93 2f       	mov	r25, r19
    1486:	08 95       	ret

00001488 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
    1488:	20 91 41 03 	lds	r18, 0x0341
    148c:	2f 5f       	subi	r18, 0xFF	; 255
    148e:	2f 71       	andi	r18, 0x1F	; 31
    
    while ( tmphead == UART_TxTail ){
    1490:	90 91 42 03 	lds	r25, 0x0342
    1494:	29 17       	cp	r18, r25
    1496:	e1 f3       	breq	.-8      	; 0x1490 <uart_putc+0x8>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
    1498:	e3 e4       	ldi	r30, 0x43	; 67
    149a:	f3 e0       	ldi	r31, 0x03	; 3
    149c:	e2 0f       	add	r30, r18
    149e:	f1 1d       	adc	r31, r1
    14a0:	80 83       	st	Z, r24
    UART_TxHead = tmphead;
    14a2:	20 93 41 03 	sts	0x0341, r18

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
    14a6:	55 9a       	sbi	0x0a, 5	; 10

}/* uart_putc */
    14a8:	08 95       	ret

000014aa <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    14aa:	cf 93       	push	r28
    14ac:	df 93       	push	r29
    14ae:	ec 01       	movw	r28, r24
    while (*s) 
    14b0:	88 81       	ld	r24, Y
    14b2:	88 23       	and	r24, r24
    14b4:	31 f0       	breq	.+12     	; 0x14c2 <uart_puts+0x18>
Function: uart_puts()
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
    14b6:	21 96       	adiw	r28, 0x01	; 1
{
    while (*s) 
      uart_putc(*s++);
    14b8:	0e 94 44 0a 	call	0x1488	; 0x1488 <uart_putc>
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    while (*s) 
    14bc:	89 91       	ld	r24, Y+
    14be:	88 23       	and	r24, r24
    14c0:	d9 f7       	brne	.-10     	; 0x14b8 <uart_puts+0xe>
      uart_putc(*s++);

}/* uart_puts */
    14c2:	df 91       	pop	r29
    14c4:	cf 91       	pop	r28
    14c6:	08 95       	ret

000014c8 <uart_puts_p>:
Purpose:  transmit string from program memory to UART
Input:    program memory string to be transmitted
Returns:  none
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
    14c8:	cf 93       	push	r28
    14ca:	df 93       	push	r29
    14cc:	ec 01       	movw	r28, r24
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
    14ce:	fc 01       	movw	r30, r24
    14d0:	84 91       	lpm	r24, Z+
    14d2:	88 23       	and	r24, r24
    14d4:	41 f0       	breq	.+16     	; 0x14e6 <uart_puts_p+0x1e>
    14d6:	21 96       	adiw	r28, 0x01	; 1
      uart_putc(c);
    14d8:	0e 94 44 0a 	call	0x1488	; 0x1488 <uart_putc>
    14dc:	fe 01       	movw	r30, r28
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
    14de:	21 96       	adiw	r28, 0x01	; 1
    14e0:	84 91       	lpm	r24, Z+
    14e2:	88 23       	and	r24, r24
    14e4:	c9 f7       	brne	.-14     	; 0x14d8 <uart_puts_p+0x10>
      uart_putc(c);

}/* uart_puts_p */
    14e6:	df 91       	pop	r29
    14e8:	cf 91       	pop	r28
    14ea:	08 95       	ret

000014ec <__vector_30>:
ISR(UART1_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART1 Receive Complete interrupt
Purpose:  called when the UART1 has received a character
**************************************************************************/
{
    14ec:	1f 92       	push	r1
    14ee:	0f 92       	push	r0
    14f0:	0f b6       	in	r0, 0x3f	; 63
    14f2:	0f 92       	push	r0
    14f4:	0b b6       	in	r0, 0x3b	; 59
    14f6:	0f 92       	push	r0
    14f8:	11 24       	eor	r1, r1
    14fa:	2f 93       	push	r18
    14fc:	3f 93       	push	r19
    14fe:	8f 93       	push	r24
    1500:	9f 93       	push	r25
    1502:	ef 93       	push	r30
    1504:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */ 
    usr  = UART1_STATUS;
    1506:	20 91 9b 00 	lds	r18, 0x009B
    data = UART1_DATA;
    150a:	30 91 9c 00 	lds	r19, 0x009C
    
    /* get FEn (Frame Error) DORn (Data OverRun) UPEn (USART Parity Error) bits */
    lastRxError = usr & (_BV(FE1)|_BV(DOR1)|_BV(UPE1) );
            
    /* calculate buffer index */ 
    tmphead = ( UART1_RxHead + 1) & UART_RX_BUFFER_MASK;
    150e:	80 91 1e 03 	lds	r24, 0x031E
    1512:	8f 5f       	subi	r24, 0xFF	; 255
    1514:	8f 71       	andi	r24, 0x1F	; 31
    
    if ( tmphead == UART1_RxTail ) {
    1516:	90 91 1f 03 	lds	r25, 0x031F
    151a:	89 17       	cp	r24, r25
    151c:	49 f0       	breq	.+18     	; 0x1530 <__vector_30+0x44>
    /* read UART status register and UART data register */ 
    usr  = UART1_STATUS;
    data = UART1_DATA;
    
    /* get FEn (Frame Error) DORn (Data OverRun) UPEn (USART Parity Error) bits */
    lastRxError = usr & (_BV(FE1)|_BV(DOR1)|_BV(UPE1) );
    151e:	2c 71       	andi	r18, 0x1C	; 28
    if ( tmphead == UART1_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART1_RxHead = tmphead;
    1520:	80 93 1e 03 	sts	0x031E, r24
        /* store received data in buffer */
        UART1_RxBuf[tmphead] = data;
    1524:	e0 e2       	ldi	r30, 0x20	; 32
    1526:	f3 e0       	ldi	r31, 0x03	; 3
    1528:	e8 0f       	add	r30, r24
    152a:	f1 1d       	adc	r31, r1
    152c:	30 83       	st	Z, r19
    152e:	01 c0       	rjmp	.+2      	; 0x1532 <__vector_30+0x46>
    /* calculate buffer index */ 
    tmphead = ( UART1_RxHead + 1) & UART_RX_BUFFER_MASK;
    
    if ( tmphead == UART1_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    1530:	22 e0       	ldi	r18, 0x02	; 2
        /* store new index */
        UART1_RxHead = tmphead;
        /* store received data in buffer */
        UART1_RxBuf[tmphead] = data;
    }
    UART1_LastRxError |= lastRxError;   
    1532:	90 91 40 03 	lds	r25, 0x0340
    1536:	82 2f       	mov	r24, r18
    1538:	89 2b       	or	r24, r25
    153a:	80 93 40 03 	sts	0x0340, r24
}
    153e:	ff 91       	pop	r31
    1540:	ef 91       	pop	r30
    1542:	9f 91       	pop	r25
    1544:	8f 91       	pop	r24
    1546:	3f 91       	pop	r19
    1548:	2f 91       	pop	r18
    154a:	0f 90       	pop	r0
    154c:	0b be       	out	0x3b, r0	; 59
    154e:	0f 90       	pop	r0
    1550:	0f be       	out	0x3f, r0	; 63
    1552:	0f 90       	pop	r0
    1554:	1f 90       	pop	r1
    1556:	18 95       	reti

00001558 <__vector_31>:
ISR(UART1_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART1 Data Register Empty interrupt
Purpose:  called when the UART1 is ready to transmit the next byte
**************************************************************************/
{
    1558:	1f 92       	push	r1
    155a:	0f 92       	push	r0
    155c:	0f b6       	in	r0, 0x3f	; 63
    155e:	0f 92       	push	r0
    1560:	0b b6       	in	r0, 0x3b	; 59
    1562:	0f 92       	push	r0
    1564:	11 24       	eor	r1, r1
    1566:	8f 93       	push	r24
    1568:	9f 93       	push	r25
    156a:	ef 93       	push	r30
    156c:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART1_TxHead != UART1_TxTail) {
    156e:	90 91 fc 02 	lds	r25, 0x02FC
    1572:	80 91 fd 02 	lds	r24, 0x02FD
    1576:	98 17       	cp	r25, r24
    1578:	71 f0       	breq	.+28     	; 0x1596 <__vector_31+0x3e>
        /* calculate and store new buffer index */
        tmptail = (UART1_TxTail + 1) & UART_TX_BUFFER_MASK;
    157a:	80 91 fd 02 	lds	r24, 0x02FD
    157e:	8f 5f       	subi	r24, 0xFF	; 255
    1580:	8f 71       	andi	r24, 0x1F	; 31
        UART1_TxTail = tmptail;
    1582:	80 93 fd 02 	sts	0x02FD, r24
        /* get one byte from buffer and write it to UART */
        UART1_DATA = UART1_TxBuf[tmptail];  /* start transmission */
    1586:	ee ef       	ldi	r30, 0xFE	; 254
    1588:	f2 e0       	ldi	r31, 0x02	; 2
    158a:	e8 0f       	add	r30, r24
    158c:	f1 1d       	adc	r31, r1
    158e:	80 81       	ld	r24, Z
    1590:	80 93 9c 00 	sts	0x009C, r24
    1594:	05 c0       	rjmp	.+10     	; 0x15a0 <__vector_31+0x48>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART1_CONTROL &= ~_BV(UART1_UDRIE);
    1596:	ea e9       	ldi	r30, 0x9A	; 154
    1598:	f0 e0       	ldi	r31, 0x00	; 0
    159a:	80 81       	ld	r24, Z
    159c:	8f 7d       	andi	r24, 0xDF	; 223
    159e:	80 83       	st	Z, r24
    }
}
    15a0:	ff 91       	pop	r31
    15a2:	ef 91       	pop	r30
    15a4:	9f 91       	pop	r25
    15a6:	8f 91       	pop	r24
    15a8:	0f 90       	pop	r0
    15aa:	0b be       	out	0x3b, r0	; 59
    15ac:	0f 90       	pop	r0
    15ae:	0f be       	out	0x3f, r0	; 63
    15b0:	0f 90       	pop	r0
    15b2:	1f 90       	pop	r1
    15b4:	18 95       	reti

000015b6 <uart1_init>:
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart1_init(unsigned int baudrate)
{
    UART1_TxHead = 0;
    15b6:	10 92 fc 02 	sts	0x02FC, r1
    UART1_TxTail = 0;
    15ba:	10 92 fd 02 	sts	0x02FD, r1
    UART1_RxHead = 0;
    15be:	10 92 1e 03 	sts	0x031E, r1
    UART1_RxTail = 0;
    15c2:	10 92 1f 03 	sts	0x031F, r1
#endif
#endif
#endif

    /* Set baud rate */
    if ( baudrate & 0x8000 ) 
    15c6:	99 23       	and	r25, r25
    15c8:	1c f4       	brge	.+6      	; 0x15d0 <uart1_init+0x1a>
    {
        #if UART1_BIT_U2X
    	UART1_STATUS = (1<<UART1_BIT_U2X);  //Enable 2x speed 
    15ca:	22 e0       	ldi	r18, 0x02	; 2
    15cc:	20 93 9b 00 	sts	0x009B, r18
        #endif
    }
    UART1_UBRRH = (unsigned char)((baudrate>>8)&0x80) ;
    15d0:	29 2f       	mov	r18, r25
    15d2:	20 78       	andi	r18, 0x80	; 128
    15d4:	20 93 98 00 	sts	0x0098, r18
    UART1_UBRRL = (unsigned char) baudrate;
    15d8:	80 93 99 00 	sts	0x0099, r24
        
    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART1_CONTROL = _BV(UART1_BIT_RXCIE)|(1<<UART1_BIT_RXEN)|(1<<UART1_BIT_TXEN);    
    15dc:	88 e9       	ldi	r24, 0x98	; 152
    15de:	80 93 9a 00 	sts	0x009A, r24
    
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */   
    #ifdef UART1_BIT_URSEL
    UART1_CONTROLC = (1<<UART1_BIT_URSEL)|(1<<UART1_BIT_UCSZ1)|(1<<UART1_BIT_UCSZ0);
    #else
    UART1_CONTROLC = (1<<UART1_BIT_UCSZ1)|(1<<UART1_BIT_UCSZ0);
    15e2:	86 e0       	ldi	r24, 0x06	; 6
    15e4:	80 93 9d 00 	sts	0x009D, r24
    #endif 
    
}/* uart_init */
    15e8:	08 95       	ret

000015ea <uart1_getc>:
    unsigned char tmptail;
    unsigned int  data;
    unsigned char lastRxError;


    if ( UART1_RxHead == UART1_RxTail ) {
    15ea:	90 91 1e 03 	lds	r25, 0x031E
    15ee:	80 91 1f 03 	lds	r24, 0x031F
    15f2:	98 17       	cp	r25, r24
    15f4:	a1 f0       	breq	.+40     	; 0x161e <uart1_getc+0x34>
        return UART_NO_DATA;   /* no data available */
    }
    
    /* calculate buffer index */
    tmptail = (UART1_RxTail + 1) & UART_RX_BUFFER_MASK;
    15f6:	80 91 1f 03 	lds	r24, 0x031F
    15fa:	8f 5f       	subi	r24, 0xFF	; 255
    15fc:	8f 71       	andi	r24, 0x1F	; 31
    
    /* get data from receive buffer */
    data = UART1_RxBuf[tmptail];
    15fe:	e0 e2       	ldi	r30, 0x20	; 32
    1600:	f3 e0       	ldi	r31, 0x03	; 3
    1602:	e8 0f       	add	r30, r24
    1604:	f1 1d       	adc	r31, r1
    1606:	90 81       	ld	r25, Z
    lastRxError = UART1_LastRxError;
    1608:	40 91 40 03 	lds	r20, 0x0340
    
    /* store buffer index */
    UART1_RxTail = tmptail; 
    160c:	80 93 1f 03 	sts	0x031F, r24
    
    UART1_LastRxError = 0;
    1610:	10 92 40 03 	sts	0x0340, r1
    return (lastRxError << 8) + data;
    1614:	34 2f       	mov	r19, r20
    1616:	20 e0       	ldi	r18, 0x00	; 0
    1618:	29 0f       	add	r18, r25
    161a:	31 1d       	adc	r19, r1
    161c:	02 c0       	rjmp	.+4      	; 0x1622 <uart1_getc+0x38>
    unsigned int  data;
    unsigned char lastRxError;


    if ( UART1_RxHead == UART1_RxTail ) {
        return UART_NO_DATA;   /* no data available */
    161e:	20 e0       	ldi	r18, 0x00	; 0
    1620:	31 e0       	ldi	r19, 0x01	; 1
    UART1_RxTail = tmptail; 
    
    UART1_LastRxError = 0;
    return (lastRxError << 8) + data;

}/* uart1_getc */
    1622:	82 2f       	mov	r24, r18
    1624:	93 2f       	mov	r25, r19
    1626:	08 95       	ret

00001628 <uart1_putc>:
void uart1_putc(unsigned char data)
{
    unsigned char tmphead;

    
    tmphead  = (UART1_TxHead + 1) & UART_TX_BUFFER_MASK;
    1628:	20 91 fc 02 	lds	r18, 0x02FC
    162c:	2f 5f       	subi	r18, 0xFF	; 255
    162e:	2f 71       	andi	r18, 0x1F	; 31
    
    while ( tmphead == UART1_TxTail ){
    1630:	90 91 fd 02 	lds	r25, 0x02FD
    1634:	29 17       	cp	r18, r25
    1636:	e1 f3       	breq	.-8      	; 0x1630 <uart1_putc+0x8>
        ;/* wait for free space in buffer */
    }
    
    UART1_TxBuf[tmphead] = data;
    1638:	ee ef       	ldi	r30, 0xFE	; 254
    163a:	f2 e0       	ldi	r31, 0x02	; 2
    163c:	e2 0f       	add	r30, r18
    163e:	f1 1d       	adc	r31, r1
    1640:	80 83       	st	Z, r24
    UART1_TxHead = tmphead;
    1642:	20 93 fc 02 	sts	0x02FC, r18

    /* enable UDRE interrupt */
    UART1_CONTROL    |= _BV(UART1_UDRIE);
    1646:	ea e9       	ldi	r30, 0x9A	; 154
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	80 81       	ld	r24, Z
    164c:	80 62       	ori	r24, 0x20	; 32
    164e:	80 83       	st	Z, r24

}/* uart1_putc */
    1650:	08 95       	ret

00001652 <uart1_puts>:
Purpose:  transmit string to UART1
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart1_puts(const char *s )
{
    1652:	cf 93       	push	r28
    1654:	df 93       	push	r29
    1656:	ec 01       	movw	r28, r24
    while (*s) 
    1658:	88 81       	ld	r24, Y
    165a:	88 23       	and	r24, r24
    165c:	31 f0       	breq	.+12     	; 0x166a <uart1_puts+0x18>
Function: uart1_puts()
Purpose:  transmit string to UART1
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart1_puts(const char *s )
    165e:	21 96       	adiw	r28, 0x01	; 1
{
    while (*s) 
      uart1_putc(*s++);
    1660:	0e 94 14 0b 	call	0x1628	; 0x1628 <uart1_putc>
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart1_puts(const char *s )
{
    while (*s) 
    1664:	89 91       	ld	r24, Y+
    1666:	88 23       	and	r24, r24
    1668:	d9 f7       	brne	.-10     	; 0x1660 <uart1_puts+0xe>
      uart1_putc(*s++);

}/* uart1_puts */
    166a:	df 91       	pop	r29
    166c:	cf 91       	pop	r28
    166e:	08 95       	ret

00001670 <uart1_puts_p>:
Purpose:  transmit string from program memory to UART1
Input:    program memory string to be transmitted
Returns:  none
**************************************************************************/
void uart1_puts_p(const char *progmem_s )
{
    1670:	cf 93       	push	r28
    1672:	df 93       	push	r29
    1674:	ec 01       	movw	r28, r24
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
    1676:	fc 01       	movw	r30, r24
    1678:	84 91       	lpm	r24, Z+
    167a:	88 23       	and	r24, r24
    167c:	41 f0       	breq	.+16     	; 0x168e <uart1_puts_p+0x1e>
    167e:	21 96       	adiw	r28, 0x01	; 1
      uart1_putc(c);
    1680:	0e 94 14 0b 	call	0x1628	; 0x1628 <uart1_putc>
    1684:	fe 01       	movw	r30, r28
**************************************************************************/
void uart1_puts_p(const char *progmem_s )
{
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
    1686:	21 96       	adiw	r28, 0x01	; 1
    1688:	84 91       	lpm	r24, Z+
    168a:	88 23       	and	r24, r24
    168c:	c9 f7       	brne	.-14     	; 0x1680 <uart1_puts_p+0x10>
      uart1_putc(c);

}/* uart1_puts_p */
    168e:	df 91       	pop	r29
    1690:	cf 91       	pop	r28
    1692:	08 95       	ret

00001694 <__udivmodsi4>:
    1694:	a1 e2       	ldi	r26, 0x21	; 33
    1696:	1a 2e       	mov	r1, r26
    1698:	aa 1b       	sub	r26, r26
    169a:	bb 1b       	sub	r27, r27
    169c:	fd 01       	movw	r30, r26
    169e:	0d c0       	rjmp	.+26     	; 0x16ba <__udivmodsi4_ep>

000016a0 <__udivmodsi4_loop>:
    16a0:	aa 1f       	adc	r26, r26
    16a2:	bb 1f       	adc	r27, r27
    16a4:	ee 1f       	adc	r30, r30
    16a6:	ff 1f       	adc	r31, r31
    16a8:	a2 17       	cp	r26, r18
    16aa:	b3 07       	cpc	r27, r19
    16ac:	e4 07       	cpc	r30, r20
    16ae:	f5 07       	cpc	r31, r21
    16b0:	20 f0       	brcs	.+8      	; 0x16ba <__udivmodsi4_ep>
    16b2:	a2 1b       	sub	r26, r18
    16b4:	b3 0b       	sbc	r27, r19
    16b6:	e4 0b       	sbc	r30, r20
    16b8:	f5 0b       	sbc	r31, r21

000016ba <__udivmodsi4_ep>:
    16ba:	66 1f       	adc	r22, r22
    16bc:	77 1f       	adc	r23, r23
    16be:	88 1f       	adc	r24, r24
    16c0:	99 1f       	adc	r25, r25
    16c2:	1a 94       	dec	r1
    16c4:	69 f7       	brne	.-38     	; 0x16a0 <__udivmodsi4_loop>
    16c6:	60 95       	com	r22
    16c8:	70 95       	com	r23
    16ca:	80 95       	com	r24
    16cc:	90 95       	com	r25
    16ce:	9b 01       	movw	r18, r22
    16d0:	ac 01       	movw	r20, r24
    16d2:	bd 01       	movw	r22, r26
    16d4:	cf 01       	movw	r24, r30
    16d6:	08 95       	ret

000016d8 <calloc>:
    16d8:	ef 92       	push	r14
    16da:	ff 92       	push	r15
    16dc:	0f 93       	push	r16
    16de:	1f 93       	push	r17
    16e0:	cf 93       	push	r28
    16e2:	df 93       	push	r29
    16e4:	68 9f       	mul	r22, r24
    16e6:	80 01       	movw	r16, r0
    16e8:	69 9f       	mul	r22, r25
    16ea:	10 0d       	add	r17, r0
    16ec:	78 9f       	mul	r23, r24
    16ee:	10 0d       	add	r17, r0
    16f0:	11 24       	eor	r1, r1
    16f2:	c8 01       	movw	r24, r16
    16f4:	0e 94 91 0b 	call	0x1722	; 0x1722 <malloc>
    16f8:	e8 2e       	mov	r14, r24
    16fa:	e7 01       	movw	r28, r14
    16fc:	7e 01       	movw	r14, r28
    16fe:	f9 2e       	mov	r15, r25
    1700:	e7 01       	movw	r28, r14
    1702:	20 97       	sbiw	r28, 0x00	; 0
    1704:	31 f0       	breq	.+12     	; 0x1712 <calloc+0x3a>
    1706:	8e 2d       	mov	r24, r14
    1708:	60 e0       	ldi	r22, 0x00	; 0
    170a:	70 e0       	ldi	r23, 0x00	; 0
    170c:	a8 01       	movw	r20, r16
    170e:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <memset>
    1712:	ce 01       	movw	r24, r28
    1714:	df 91       	pop	r29
    1716:	cf 91       	pop	r28
    1718:	1f 91       	pop	r17
    171a:	0f 91       	pop	r16
    171c:	ff 90       	pop	r15
    171e:	ef 90       	pop	r14
    1720:	08 95       	ret

00001722 <malloc>:
    1722:	cf 93       	push	r28
    1724:	df 93       	push	r29
    1726:	82 30       	cpi	r24, 0x02	; 2
    1728:	91 05       	cpc	r25, r1
    172a:	10 f4       	brcc	.+4      	; 0x1730 <malloc+0xe>
    172c:	82 e0       	ldi	r24, 0x02	; 2
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	e0 91 8a 03 	lds	r30, 0x038A
    1734:	f0 91 8b 03 	lds	r31, 0x038B
    1738:	40 e0       	ldi	r20, 0x00	; 0
    173a:	50 e0       	ldi	r21, 0x00	; 0
    173c:	20 e0       	ldi	r18, 0x00	; 0
    173e:	30 e0       	ldi	r19, 0x00	; 0
    1740:	26 c0       	rjmp	.+76     	; 0x178e <malloc+0x6c>
    1742:	60 81       	ld	r22, Z
    1744:	71 81       	ldd	r23, Z+1	; 0x01
    1746:	68 17       	cp	r22, r24
    1748:	79 07       	cpc	r23, r25
    174a:	e0 f0       	brcs	.+56     	; 0x1784 <malloc+0x62>
    174c:	68 17       	cp	r22, r24
    174e:	79 07       	cpc	r23, r25
    1750:	81 f4       	brne	.+32     	; 0x1772 <malloc+0x50>
    1752:	82 81       	ldd	r24, Z+2	; 0x02
    1754:	93 81       	ldd	r25, Z+3	; 0x03
    1756:	21 15       	cp	r18, r1
    1758:	31 05       	cpc	r19, r1
    175a:	31 f0       	breq	.+12     	; 0x1768 <malloc+0x46>
    175c:	d9 01       	movw	r26, r18
    175e:	13 96       	adiw	r26, 0x03	; 3
    1760:	9c 93       	st	X, r25
    1762:	8e 93       	st	-X, r24
    1764:	12 97       	sbiw	r26, 0x02	; 2
    1766:	2b c0       	rjmp	.+86     	; 0x17be <malloc+0x9c>
    1768:	90 93 8b 03 	sts	0x038B, r25
    176c:	80 93 8a 03 	sts	0x038A, r24
    1770:	26 c0       	rjmp	.+76     	; 0x17be <malloc+0x9c>
    1772:	41 15       	cp	r20, r1
    1774:	51 05       	cpc	r21, r1
    1776:	19 f0       	breq	.+6      	; 0x177e <malloc+0x5c>
    1778:	64 17       	cp	r22, r20
    177a:	75 07       	cpc	r23, r21
    177c:	18 f4       	brcc	.+6      	; 0x1784 <malloc+0x62>
    177e:	ab 01       	movw	r20, r22
    1780:	e9 01       	movw	r28, r18
    1782:	df 01       	movw	r26, r30
    1784:	9f 01       	movw	r18, r30
    1786:	72 81       	ldd	r23, Z+2	; 0x02
    1788:	63 81       	ldd	r22, Z+3	; 0x03
    178a:	e7 2f       	mov	r30, r23
    178c:	f6 2f       	mov	r31, r22
    178e:	30 97       	sbiw	r30, 0x00	; 0
    1790:	c1 f6       	brne	.-80     	; 0x1742 <malloc+0x20>
    1792:	41 15       	cp	r20, r1
    1794:	51 05       	cpc	r21, r1
    1796:	01 f1       	breq	.+64     	; 0x17d8 <malloc+0xb6>
    1798:	48 1b       	sub	r20, r24
    179a:	59 0b       	sbc	r21, r25
    179c:	44 30       	cpi	r20, 0x04	; 4
    179e:	51 05       	cpc	r21, r1
    17a0:	80 f4       	brcc	.+32     	; 0x17c2 <malloc+0xa0>
    17a2:	12 96       	adiw	r26, 0x02	; 2
    17a4:	8d 91       	ld	r24, X+
    17a6:	9c 91       	ld	r25, X
    17a8:	13 97       	sbiw	r26, 0x03	; 3
    17aa:	20 97       	sbiw	r28, 0x00	; 0
    17ac:	19 f0       	breq	.+6      	; 0x17b4 <malloc+0x92>
    17ae:	9b 83       	std	Y+3, r25	; 0x03
    17b0:	8a 83       	std	Y+2, r24	; 0x02
    17b2:	04 c0       	rjmp	.+8      	; 0x17bc <malloc+0x9a>
    17b4:	90 93 8b 03 	sts	0x038B, r25
    17b8:	80 93 8a 03 	sts	0x038A, r24
    17bc:	fd 01       	movw	r30, r26
    17be:	32 96       	adiw	r30, 0x02	; 2
    17c0:	46 c0       	rjmp	.+140    	; 0x184e <malloc+0x12c>
    17c2:	fd 01       	movw	r30, r26
    17c4:	e4 0f       	add	r30, r20
    17c6:	f5 1f       	adc	r31, r21
    17c8:	81 93       	st	Z+, r24
    17ca:	91 93       	st	Z+, r25
    17cc:	42 50       	subi	r20, 0x02	; 2
    17ce:	50 40       	sbci	r21, 0x00	; 0
    17d0:	11 96       	adiw	r26, 0x01	; 1
    17d2:	5c 93       	st	X, r21
    17d4:	4e 93       	st	-X, r20
    17d6:	3b c0       	rjmp	.+118    	; 0x184e <malloc+0x12c>
    17d8:	20 91 88 03 	lds	r18, 0x0388
    17dc:	30 91 89 03 	lds	r19, 0x0389
    17e0:	21 15       	cp	r18, r1
    17e2:	31 05       	cpc	r19, r1
    17e4:	41 f4       	brne	.+16     	; 0x17f6 <malloc+0xd4>
    17e6:	20 91 f7 02 	lds	r18, 0x02F7
    17ea:	30 91 f8 02 	lds	r19, 0x02F8
    17ee:	30 93 89 03 	sts	0x0389, r19
    17f2:	20 93 88 03 	sts	0x0388, r18
    17f6:	20 91 f9 02 	lds	r18, 0x02F9
    17fa:	30 91 fa 02 	lds	r19, 0x02FA
    17fe:	21 15       	cp	r18, r1
    1800:	31 05       	cpc	r19, r1
    1802:	41 f4       	brne	.+16     	; 0x1814 <malloc+0xf2>
    1804:	2d b7       	in	r18, 0x3d	; 61
    1806:	3e b7       	in	r19, 0x3e	; 62
    1808:	40 91 f5 02 	lds	r20, 0x02F5
    180c:	50 91 f6 02 	lds	r21, 0x02F6
    1810:	24 1b       	sub	r18, r20
    1812:	35 0b       	sbc	r19, r21
    1814:	e0 91 88 03 	lds	r30, 0x0388
    1818:	f0 91 89 03 	lds	r31, 0x0389
    181c:	e2 17       	cp	r30, r18
    181e:	f3 07       	cpc	r31, r19
    1820:	a0 f4       	brcc	.+40     	; 0x184a <malloc+0x128>
    1822:	2e 1b       	sub	r18, r30
    1824:	3f 0b       	sbc	r19, r31
    1826:	28 17       	cp	r18, r24
    1828:	39 07       	cpc	r19, r25
    182a:	78 f0       	brcs	.+30     	; 0x184a <malloc+0x128>
    182c:	ac 01       	movw	r20, r24
    182e:	4e 5f       	subi	r20, 0xFE	; 254
    1830:	5f 4f       	sbci	r21, 0xFF	; 255
    1832:	24 17       	cp	r18, r20
    1834:	35 07       	cpc	r19, r21
    1836:	48 f0       	brcs	.+18     	; 0x184a <malloc+0x128>
    1838:	4e 0f       	add	r20, r30
    183a:	5f 1f       	adc	r21, r31
    183c:	50 93 89 03 	sts	0x0389, r21
    1840:	40 93 88 03 	sts	0x0388, r20
    1844:	81 93       	st	Z+, r24
    1846:	91 93       	st	Z+, r25
    1848:	02 c0       	rjmp	.+4      	; 0x184e <malloc+0x12c>
    184a:	e0 e0       	ldi	r30, 0x00	; 0
    184c:	f0 e0       	ldi	r31, 0x00	; 0
    184e:	cf 01       	movw	r24, r30
    1850:	df 91       	pop	r29
    1852:	cf 91       	pop	r28
    1854:	08 95       	ret

00001856 <free>:
    1856:	cf 93       	push	r28
    1858:	df 93       	push	r29
    185a:	00 97       	sbiw	r24, 0x00	; 0
    185c:	09 f4       	brne	.+2      	; 0x1860 <free+0xa>
    185e:	91 c0       	rjmp	.+290    	; 0x1982 <free+0x12c>
    1860:	fc 01       	movw	r30, r24
    1862:	32 97       	sbiw	r30, 0x02	; 2
    1864:	13 82       	std	Z+3, r1	; 0x03
    1866:	12 82       	std	Z+2, r1	; 0x02
    1868:	60 91 8a 03 	lds	r22, 0x038A
    186c:	70 91 8b 03 	lds	r23, 0x038B
    1870:	61 15       	cp	r22, r1
    1872:	71 05       	cpc	r23, r1
    1874:	81 f4       	brne	.+32     	; 0x1896 <free+0x40>
    1876:	20 81       	ld	r18, Z
    1878:	31 81       	ldd	r19, Z+1	; 0x01
    187a:	28 0f       	add	r18, r24
    187c:	39 1f       	adc	r19, r25
    187e:	80 91 88 03 	lds	r24, 0x0388
    1882:	90 91 89 03 	lds	r25, 0x0389
    1886:	82 17       	cp	r24, r18
    1888:	93 07       	cpc	r25, r19
    188a:	99 f5       	brne	.+102    	; 0x18f2 <free+0x9c>
    188c:	f0 93 89 03 	sts	0x0389, r31
    1890:	e0 93 88 03 	sts	0x0388, r30
    1894:	76 c0       	rjmp	.+236    	; 0x1982 <free+0x12c>
    1896:	db 01       	movw	r26, r22
    1898:	80 e0       	ldi	r24, 0x00	; 0
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	02 c0       	rjmp	.+4      	; 0x18a2 <free+0x4c>
    189e:	cd 01       	movw	r24, r26
    18a0:	d9 01       	movw	r26, r18
    18a2:	ae 17       	cp	r26, r30
    18a4:	bf 07       	cpc	r27, r31
    18a6:	48 f4       	brcc	.+18     	; 0x18ba <free+0x64>
    18a8:	12 96       	adiw	r26, 0x02	; 2
    18aa:	2d 91       	ld	r18, X+
    18ac:	3c 91       	ld	r19, X
    18ae:	13 97       	sbiw	r26, 0x03	; 3
    18b0:	21 15       	cp	r18, r1
    18b2:	31 05       	cpc	r19, r1
    18b4:	a1 f7       	brne	.-24     	; 0x189e <free+0x48>
    18b6:	cd 01       	movw	r24, r26
    18b8:	21 c0       	rjmp	.+66     	; 0x18fc <free+0xa6>
    18ba:	b3 83       	std	Z+3, r27	; 0x03
    18bc:	a2 83       	std	Z+2, r26	; 0x02
    18be:	ef 01       	movw	r28, r30
    18c0:	49 91       	ld	r20, Y+
    18c2:	59 91       	ld	r21, Y+
    18c4:	9e 01       	movw	r18, r28
    18c6:	24 0f       	add	r18, r20
    18c8:	35 1f       	adc	r19, r21
    18ca:	a2 17       	cp	r26, r18
    18cc:	b3 07       	cpc	r27, r19
    18ce:	79 f4       	brne	.+30     	; 0x18ee <free+0x98>
    18d0:	2d 91       	ld	r18, X+
    18d2:	3c 91       	ld	r19, X
    18d4:	11 97       	sbiw	r26, 0x01	; 1
    18d6:	24 0f       	add	r18, r20
    18d8:	35 1f       	adc	r19, r21
    18da:	2e 5f       	subi	r18, 0xFE	; 254
    18dc:	3f 4f       	sbci	r19, 0xFF	; 255
    18de:	31 83       	std	Z+1, r19	; 0x01
    18e0:	20 83       	st	Z, r18
    18e2:	12 96       	adiw	r26, 0x02	; 2
    18e4:	2d 91       	ld	r18, X+
    18e6:	3c 91       	ld	r19, X
    18e8:	13 97       	sbiw	r26, 0x03	; 3
    18ea:	33 83       	std	Z+3, r19	; 0x03
    18ec:	22 83       	std	Z+2, r18	; 0x02
    18ee:	00 97       	sbiw	r24, 0x00	; 0
    18f0:	29 f4       	brne	.+10     	; 0x18fc <free+0xa6>
    18f2:	f0 93 8b 03 	sts	0x038B, r31
    18f6:	e0 93 8a 03 	sts	0x038A, r30
    18fa:	43 c0       	rjmp	.+134    	; 0x1982 <free+0x12c>
    18fc:	dc 01       	movw	r26, r24
    18fe:	13 96       	adiw	r26, 0x03	; 3
    1900:	fc 93       	st	X, r31
    1902:	ee 93       	st	-X, r30
    1904:	12 97       	sbiw	r26, 0x02	; 2
    1906:	4d 91       	ld	r20, X+
    1908:	5d 91       	ld	r21, X+
    190a:	a4 0f       	add	r26, r20
    190c:	b5 1f       	adc	r27, r21
    190e:	ea 17       	cp	r30, r26
    1910:	fb 07       	cpc	r31, r27
    1912:	69 f4       	brne	.+26     	; 0x192e <free+0xd8>
    1914:	20 81       	ld	r18, Z
    1916:	31 81       	ldd	r19, Z+1	; 0x01
    1918:	24 0f       	add	r18, r20
    191a:	35 1f       	adc	r19, r21
    191c:	2e 5f       	subi	r18, 0xFE	; 254
    191e:	3f 4f       	sbci	r19, 0xFF	; 255
    1920:	ec 01       	movw	r28, r24
    1922:	39 83       	std	Y+1, r19	; 0x01
    1924:	28 83       	st	Y, r18
    1926:	22 81       	ldd	r18, Z+2	; 0x02
    1928:	33 81       	ldd	r19, Z+3	; 0x03
    192a:	3b 83       	std	Y+3, r19	; 0x03
    192c:	2a 83       	std	Y+2, r18	; 0x02
    192e:	e0 e0       	ldi	r30, 0x00	; 0
    1930:	f0 e0       	ldi	r31, 0x00	; 0
    1932:	02 c0       	rjmp	.+4      	; 0x1938 <free+0xe2>
    1934:	fb 01       	movw	r30, r22
    1936:	bc 01       	movw	r22, r24
    1938:	db 01       	movw	r26, r22
    193a:	12 96       	adiw	r26, 0x02	; 2
    193c:	8d 91       	ld	r24, X+
    193e:	9c 91       	ld	r25, X
    1940:	13 97       	sbiw	r26, 0x03	; 3
    1942:	00 97       	sbiw	r24, 0x00	; 0
    1944:	b9 f7       	brne	.-18     	; 0x1934 <free+0xde>
    1946:	9b 01       	movw	r18, r22
    1948:	2e 5f       	subi	r18, 0xFE	; 254
    194a:	3f 4f       	sbci	r19, 0xFF	; 255
    194c:	8d 91       	ld	r24, X+
    194e:	9c 91       	ld	r25, X
    1950:	11 97       	sbiw	r26, 0x01	; 1
    1952:	82 0f       	add	r24, r18
    1954:	93 1f       	adc	r25, r19
    1956:	40 91 88 03 	lds	r20, 0x0388
    195a:	50 91 89 03 	lds	r21, 0x0389
    195e:	48 17       	cp	r20, r24
    1960:	59 07       	cpc	r21, r25
    1962:	79 f4       	brne	.+30     	; 0x1982 <free+0x12c>
    1964:	30 97       	sbiw	r30, 0x00	; 0
    1966:	29 f4       	brne	.+10     	; 0x1972 <free+0x11c>
    1968:	10 92 8b 03 	sts	0x038B, r1
    196c:	10 92 8a 03 	sts	0x038A, r1
    1970:	02 c0       	rjmp	.+4      	; 0x1976 <free+0x120>
    1972:	13 82       	std	Z+3, r1	; 0x03
    1974:	12 82       	std	Z+2, r1	; 0x02
    1976:	22 50       	subi	r18, 0x02	; 2
    1978:	30 40       	sbci	r19, 0x00	; 0
    197a:	30 93 89 03 	sts	0x0389, r19
    197e:	20 93 88 03 	sts	0x0388, r18
    1982:	df 91       	pop	r29
    1984:	cf 91       	pop	r28
    1986:	08 95       	ret

00001988 <atoi>:
    1988:	fc 01       	movw	r30, r24
    198a:	88 27       	eor	r24, r24
    198c:	99 27       	eor	r25, r25
    198e:	e8 94       	clt
    1990:	21 91       	ld	r18, Z+
    1992:	20 32       	cpi	r18, 0x20	; 32
    1994:	e9 f3       	breq	.-6      	; 0x1990 <atoi+0x8>
    1996:	29 30       	cpi	r18, 0x09	; 9
    1998:	10 f0       	brcs	.+4      	; 0x199e <atoi+0x16>
    199a:	2e 30       	cpi	r18, 0x0E	; 14
    199c:	c8 f3       	brcs	.-14     	; 0x1990 <atoi+0x8>
    199e:	2b 32       	cpi	r18, 0x2B	; 43
    19a0:	41 f0       	breq	.+16     	; 0x19b2 <atoi+0x2a>
    19a2:	2d 32       	cpi	r18, 0x2D	; 45
    19a4:	39 f4       	brne	.+14     	; 0x19b4 <atoi+0x2c>
    19a6:	68 94       	set
    19a8:	04 c0       	rjmp	.+8      	; 0x19b2 <atoi+0x2a>
    19aa:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <__mulhi_const_10>
    19ae:	82 0f       	add	r24, r18
    19b0:	91 1d       	adc	r25, r1
    19b2:	21 91       	ld	r18, Z+
    19b4:	20 53       	subi	r18, 0x30	; 48
    19b6:	2a 30       	cpi	r18, 0x0A	; 10
    19b8:	c0 f3       	brcs	.-16     	; 0x19aa <atoi+0x22>
    19ba:	1e f4       	brtc	.+6      	; 0x19c2 <atoi+0x3a>
    19bc:	90 95       	com	r25
    19be:	81 95       	neg	r24
    19c0:	9f 4f       	sbci	r25, 0xFF	; 255
    19c2:	08 95       	ret

000019c4 <strtok>:
    19c4:	46 e8       	ldi	r20, 0x86	; 134
    19c6:	53 e0       	ldi	r21, 0x03	; 3
    19c8:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <strtok_r>
    19cc:	08 95       	ret

000019ce <memchr>:
    19ce:	fc 01       	movw	r30, r24
    19d0:	41 50       	subi	r20, 0x01	; 1
    19d2:	50 40       	sbci	r21, 0x00	; 0
    19d4:	30 f0       	brcs	.+12     	; 0x19e2 <memchr+0x14>
    19d6:	01 90       	ld	r0, Z+
    19d8:	06 16       	cp	r0, r22
    19da:	d1 f7       	brne	.-12     	; 0x19d0 <memchr+0x2>
    19dc:	31 97       	sbiw	r30, 0x01	; 1
    19de:	cf 01       	movw	r24, r30
    19e0:	08 95       	ret
    19e2:	88 27       	eor	r24, r24
    19e4:	99 27       	eor	r25, r25
    19e6:	08 95       	ret

000019e8 <memcpy>:
    19e8:	fb 01       	movw	r30, r22
    19ea:	dc 01       	movw	r26, r24
    19ec:	02 c0       	rjmp	.+4      	; 0x19f2 <memcpy+0xa>
    19ee:	01 90       	ld	r0, Z+
    19f0:	0d 92       	st	X+, r0
    19f2:	41 50       	subi	r20, 0x01	; 1
    19f4:	50 40       	sbci	r21, 0x00	; 0
    19f6:	d8 f7       	brcc	.-10     	; 0x19ee <memcpy+0x6>
    19f8:	08 95       	ret

000019fa <memset>:
    19fa:	dc 01       	movw	r26, r24
    19fc:	01 c0       	rjmp	.+2      	; 0x1a00 <memset+0x6>
    19fe:	6d 93       	st	X+, r22
    1a00:	41 50       	subi	r20, 0x01	; 1
    1a02:	50 40       	sbci	r21, 0x00	; 0
    1a04:	e0 f7       	brcc	.-8      	; 0x19fe <memset+0x4>
    1a06:	08 95       	ret

00001a08 <strcpy>:
    1a08:	fb 01       	movw	r30, r22
    1a0a:	dc 01       	movw	r26, r24
    1a0c:	01 90       	ld	r0, Z+
    1a0e:	0d 92       	st	X+, r0
    1a10:	00 20       	and	r0, r0
    1a12:	e1 f7       	brne	.-8      	; 0x1a0c <strcpy+0x4>
    1a14:	08 95       	ret

00001a16 <strstr>:
    1a16:	fb 01       	movw	r30, r22
    1a18:	51 91       	ld	r21, Z+
    1a1a:	55 23       	and	r21, r21
    1a1c:	a9 f0       	breq	.+42     	; 0x1a48 <strstr+0x32>
    1a1e:	bf 01       	movw	r22, r30
    1a20:	dc 01       	movw	r26, r24
    1a22:	4d 91       	ld	r20, X+
    1a24:	45 17       	cp	r20, r21
    1a26:	41 11       	cpse	r20, r1
    1a28:	e1 f7       	brne	.-8      	; 0x1a22 <strstr+0xc>
    1a2a:	59 f4       	brne	.+22     	; 0x1a42 <strstr+0x2c>
    1a2c:	cd 01       	movw	r24, r26
    1a2e:	01 90       	ld	r0, Z+
    1a30:	00 20       	and	r0, r0
    1a32:	49 f0       	breq	.+18     	; 0x1a46 <strstr+0x30>
    1a34:	4d 91       	ld	r20, X+
    1a36:	40 15       	cp	r20, r0
    1a38:	41 11       	cpse	r20, r1
    1a3a:	c9 f3       	breq	.-14     	; 0x1a2e <strstr+0x18>
    1a3c:	fb 01       	movw	r30, r22
    1a3e:	41 11       	cpse	r20, r1
    1a40:	ef cf       	rjmp	.-34     	; 0x1a20 <strstr+0xa>
    1a42:	81 e0       	ldi	r24, 0x01	; 1
    1a44:	90 e0       	ldi	r25, 0x00	; 0
    1a46:	01 97       	sbiw	r24, 0x01	; 1
    1a48:	08 95       	ret

00001a4a <strtok_r>:
    1a4a:	fa 01       	movw	r30, r20
    1a4c:	a1 91       	ld	r26, Z+
    1a4e:	b0 81       	ld	r27, Z
    1a50:	00 97       	sbiw	r24, 0x00	; 0
    1a52:	19 f4       	brne	.+6      	; 0x1a5a <strtok_r+0x10>
    1a54:	10 97       	sbiw	r26, 0x00	; 0
    1a56:	e1 f0       	breq	.+56     	; 0x1a90 <strtok_r+0x46>
    1a58:	cd 01       	movw	r24, r26
    1a5a:	dc 01       	movw	r26, r24
    1a5c:	cd 01       	movw	r24, r26
    1a5e:	0d 90       	ld	r0, X+
    1a60:	00 20       	and	r0, r0
    1a62:	11 f4       	brne	.+4      	; 0x1a68 <strtok_r+0x1e>
    1a64:	c0 01       	movw	r24, r0
    1a66:	13 c0       	rjmp	.+38     	; 0x1a8e <strtok_r+0x44>
    1a68:	fb 01       	movw	r30, r22
    1a6a:	21 91       	ld	r18, Z+
    1a6c:	22 23       	and	r18, r18
    1a6e:	19 f0       	breq	.+6      	; 0x1a76 <strtok_r+0x2c>
    1a70:	20 15       	cp	r18, r0
    1a72:	d9 f7       	brne	.-10     	; 0x1a6a <strtok_r+0x20>
    1a74:	f3 cf       	rjmp	.-26     	; 0x1a5c <strtok_r+0x12>
    1a76:	fb 01       	movw	r30, r22
    1a78:	21 91       	ld	r18, Z+
    1a7a:	20 15       	cp	r18, r0
    1a7c:	19 f4       	brne	.+6      	; 0x1a84 <strtok_r+0x3a>
    1a7e:	1e 92       	st	-X, r1
    1a80:	11 96       	adiw	r26, 0x01	; 1
    1a82:	06 c0       	rjmp	.+12     	; 0x1a90 <strtok_r+0x46>
    1a84:	22 23       	and	r18, r18
    1a86:	c1 f7       	brne	.-16     	; 0x1a78 <strtok_r+0x2e>
    1a88:	0d 90       	ld	r0, X+
    1a8a:	00 20       	and	r0, r0
    1a8c:	a1 f7       	brne	.-24     	; 0x1a76 <strtok_r+0x2c>
    1a8e:	d0 01       	movw	r26, r0
    1a90:	fa 01       	movw	r30, r20
    1a92:	a1 93       	st	Z+, r26
    1a94:	b0 83       	st	Z, r27
    1a96:	08 95       	ret

00001a98 <__mulhi_const_10>:
    1a98:	7a e0       	ldi	r23, 0x0A	; 10
    1a9a:	97 9f       	mul	r25, r23
    1a9c:	90 2d       	mov	r25, r0
    1a9e:	87 9f       	mul	r24, r23
    1aa0:	80 2d       	mov	r24, r0
    1aa2:	91 0d       	add	r25, r1
    1aa4:	11 24       	eor	r1, r1
    1aa6:	08 95       	ret

00001aa8 <snprintf>:
    1aa8:	0f 93       	push	r16
    1aaa:	1f 93       	push	r17
    1aac:	df 93       	push	r29
    1aae:	cf 93       	push	r28
    1ab0:	cd b7       	in	r28, 0x3d	; 61
    1ab2:	de b7       	in	r29, 0x3e	; 62
    1ab4:	2e 97       	sbiw	r28, 0x0e	; 14
    1ab6:	0f b6       	in	r0, 0x3f	; 63
    1ab8:	f8 94       	cli
    1aba:	de bf       	out	0x3e, r29	; 62
    1abc:	0f be       	out	0x3f, r0	; 63
    1abe:	cd bf       	out	0x3d, r28	; 61
    1ac0:	0d 89       	ldd	r16, Y+21	; 0x15
    1ac2:	1e 89       	ldd	r17, Y+22	; 0x16
    1ac4:	8f 89       	ldd	r24, Y+23	; 0x17
    1ac6:	98 8d       	ldd	r25, Y+24	; 0x18
    1ac8:	26 e0       	ldi	r18, 0x06	; 6
    1aca:	2c 83       	std	Y+4, r18	; 0x04
    1acc:	1a 83       	std	Y+2, r17	; 0x02
    1ace:	09 83       	std	Y+1, r16	; 0x01
    1ad0:	97 ff       	sbrs	r25, 7
    1ad2:	02 c0       	rjmp	.+4      	; 0x1ad8 <snprintf+0x30>
    1ad4:	80 e0       	ldi	r24, 0x00	; 0
    1ad6:	90 e8       	ldi	r25, 0x80	; 128
    1ad8:	01 97       	sbiw	r24, 0x01	; 1
    1ada:	9e 83       	std	Y+6, r25	; 0x06
    1adc:	8d 83       	std	Y+5, r24	; 0x05
    1ade:	9e 01       	movw	r18, r28
    1ae0:	25 5e       	subi	r18, 0xE5	; 229
    1ae2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ae4:	ce 01       	movw	r24, r28
    1ae6:	01 96       	adiw	r24, 0x01	; 1
    1ae8:	69 8d       	ldd	r22, Y+25	; 0x19
    1aea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1aec:	a9 01       	movw	r20, r18
    1aee:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <vfprintf>
    1af2:	4d 81       	ldd	r20, Y+5	; 0x05
    1af4:	5e 81       	ldd	r21, Y+6	; 0x06
    1af6:	57 fd       	sbrc	r21, 7
    1af8:	0a c0       	rjmp	.+20     	; 0x1b0e <snprintf+0x66>
    1afa:	2f 81       	ldd	r18, Y+7	; 0x07
    1afc:	38 85       	ldd	r19, Y+8	; 0x08
    1afe:	42 17       	cp	r20, r18
    1b00:	53 07       	cpc	r21, r19
    1b02:	0c f4       	brge	.+2      	; 0x1b06 <snprintf+0x5e>
    1b04:	9a 01       	movw	r18, r20
    1b06:	02 0f       	add	r16, r18
    1b08:	13 1f       	adc	r17, r19
    1b0a:	f8 01       	movw	r30, r16
    1b0c:	10 82       	st	Z, r1
    1b0e:	2e 96       	adiw	r28, 0x0e	; 14
    1b10:	0f b6       	in	r0, 0x3f	; 63
    1b12:	f8 94       	cli
    1b14:	de bf       	out	0x3e, r29	; 62
    1b16:	0f be       	out	0x3f, r0	; 63
    1b18:	cd bf       	out	0x3d, r28	; 61
    1b1a:	cf 91       	pop	r28
    1b1c:	df 91       	pop	r29
    1b1e:	1f 91       	pop	r17
    1b20:	0f 91       	pop	r16
    1b22:	08 95       	ret

00001b24 <vfprintf>:
    1b24:	2f 92       	push	r2
    1b26:	3f 92       	push	r3
    1b28:	4f 92       	push	r4
    1b2a:	5f 92       	push	r5
    1b2c:	6f 92       	push	r6
    1b2e:	7f 92       	push	r7
    1b30:	8f 92       	push	r8
    1b32:	9f 92       	push	r9
    1b34:	af 92       	push	r10
    1b36:	bf 92       	push	r11
    1b38:	cf 92       	push	r12
    1b3a:	df 92       	push	r13
    1b3c:	ef 92       	push	r14
    1b3e:	ff 92       	push	r15
    1b40:	0f 93       	push	r16
    1b42:	1f 93       	push	r17
    1b44:	df 93       	push	r29
    1b46:	cf 93       	push	r28
    1b48:	cd b7       	in	r28, 0x3d	; 61
    1b4a:	de b7       	in	r29, 0x3e	; 62
    1b4c:	2c 97       	sbiw	r28, 0x0c	; 12
    1b4e:	0f b6       	in	r0, 0x3f	; 63
    1b50:	f8 94       	cli
    1b52:	de bf       	out	0x3e, r29	; 62
    1b54:	0f be       	out	0x3f, r0	; 63
    1b56:	cd bf       	out	0x3d, r28	; 61
    1b58:	6c 01       	movw	r12, r24
    1b5a:	1b 01       	movw	r2, r22
    1b5c:	8a 01       	movw	r16, r20
    1b5e:	fc 01       	movw	r30, r24
    1b60:	17 82       	std	Z+7, r1	; 0x07
    1b62:	16 82       	std	Z+6, r1	; 0x06
    1b64:	83 81       	ldd	r24, Z+3	; 0x03
    1b66:	81 ff       	sbrs	r24, 1
    1b68:	d1 c1       	rjmp	.+930    	; 0x1f0c <vfprintf+0x3e8>
    1b6a:	2e 01       	movw	r4, r28
    1b6c:	08 94       	sec
    1b6e:	41 1c       	adc	r4, r1
    1b70:	51 1c       	adc	r5, r1
    1b72:	f6 01       	movw	r30, r12
    1b74:	93 81       	ldd	r25, Z+3	; 0x03
    1b76:	f1 01       	movw	r30, r2
    1b78:	93 fd       	sbrc	r25, 3
    1b7a:	85 91       	lpm	r24, Z+
    1b7c:	93 ff       	sbrs	r25, 3
    1b7e:	81 91       	ld	r24, Z+
    1b80:	1f 01       	movw	r2, r30
    1b82:	88 23       	and	r24, r24
    1b84:	09 f4       	brne	.+2      	; 0x1b88 <vfprintf+0x64>
    1b86:	be c1       	rjmp	.+892    	; 0x1f04 <vfprintf+0x3e0>
    1b88:	85 32       	cpi	r24, 0x25	; 37
    1b8a:	39 f4       	brne	.+14     	; 0x1b9a <vfprintf+0x76>
    1b8c:	93 fd       	sbrc	r25, 3
    1b8e:	85 91       	lpm	r24, Z+
    1b90:	93 ff       	sbrs	r25, 3
    1b92:	81 91       	ld	r24, Z+
    1b94:	1f 01       	movw	r2, r30
    1b96:	85 32       	cpi	r24, 0x25	; 37
    1b98:	29 f4       	brne	.+10     	; 0x1ba4 <vfprintf+0x80>
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
    1b9c:	b6 01       	movw	r22, r12
    1b9e:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <fputc>
    1ba2:	e7 cf       	rjmp	.-50     	; 0x1b72 <vfprintf+0x4e>
    1ba4:	ee 24       	eor	r14, r14
    1ba6:	ff 24       	eor	r15, r15
    1ba8:	20 e0       	ldi	r18, 0x00	; 0
    1baa:	20 32       	cpi	r18, 0x20	; 32
    1bac:	b0 f4       	brcc	.+44     	; 0x1bda <vfprintf+0xb6>
    1bae:	8b 32       	cpi	r24, 0x2B	; 43
    1bb0:	69 f0       	breq	.+26     	; 0x1bcc <vfprintf+0xa8>
    1bb2:	8c 32       	cpi	r24, 0x2C	; 44
    1bb4:	28 f4       	brcc	.+10     	; 0x1bc0 <vfprintf+0x9c>
    1bb6:	80 32       	cpi	r24, 0x20	; 32
    1bb8:	51 f0       	breq	.+20     	; 0x1bce <vfprintf+0xaa>
    1bba:	83 32       	cpi	r24, 0x23	; 35
    1bbc:	71 f4       	brne	.+28     	; 0x1bda <vfprintf+0xb6>
    1bbe:	0b c0       	rjmp	.+22     	; 0x1bd6 <vfprintf+0xb2>
    1bc0:	8d 32       	cpi	r24, 0x2D	; 45
    1bc2:	39 f0       	breq	.+14     	; 0x1bd2 <vfprintf+0xae>
    1bc4:	80 33       	cpi	r24, 0x30	; 48
    1bc6:	49 f4       	brne	.+18     	; 0x1bda <vfprintf+0xb6>
    1bc8:	21 60       	ori	r18, 0x01	; 1
    1bca:	2c c0       	rjmp	.+88     	; 0x1c24 <vfprintf+0x100>
    1bcc:	22 60       	ori	r18, 0x02	; 2
    1bce:	24 60       	ori	r18, 0x04	; 4
    1bd0:	29 c0       	rjmp	.+82     	; 0x1c24 <vfprintf+0x100>
    1bd2:	28 60       	ori	r18, 0x08	; 8
    1bd4:	27 c0       	rjmp	.+78     	; 0x1c24 <vfprintf+0x100>
    1bd6:	20 61       	ori	r18, 0x10	; 16
    1bd8:	25 c0       	rjmp	.+74     	; 0x1c24 <vfprintf+0x100>
    1bda:	27 fd       	sbrc	r18, 7
    1bdc:	2c c0       	rjmp	.+88     	; 0x1c36 <vfprintf+0x112>
    1bde:	38 2f       	mov	r19, r24
    1be0:	30 53       	subi	r19, 0x30	; 48
    1be2:	3a 30       	cpi	r19, 0x0A	; 10
    1be4:	98 f4       	brcc	.+38     	; 0x1c0c <vfprintf+0xe8>
    1be6:	26 ff       	sbrs	r18, 6
    1be8:	08 c0       	rjmp	.+16     	; 0x1bfa <vfprintf+0xd6>
    1bea:	8e 2d       	mov	r24, r14
    1bec:	88 0f       	add	r24, r24
    1bee:	e8 2e       	mov	r14, r24
    1bf0:	ee 0c       	add	r14, r14
    1bf2:	ee 0c       	add	r14, r14
    1bf4:	e8 0e       	add	r14, r24
    1bf6:	e3 0e       	add	r14, r19
    1bf8:	15 c0       	rjmp	.+42     	; 0x1c24 <vfprintf+0x100>
    1bfa:	8f 2d       	mov	r24, r15
    1bfc:	88 0f       	add	r24, r24
    1bfe:	f8 2e       	mov	r15, r24
    1c00:	ff 0c       	add	r15, r15
    1c02:	ff 0c       	add	r15, r15
    1c04:	f8 0e       	add	r15, r24
    1c06:	f3 0e       	add	r15, r19
    1c08:	20 62       	ori	r18, 0x20	; 32
    1c0a:	0c c0       	rjmp	.+24     	; 0x1c24 <vfprintf+0x100>
    1c0c:	8e 32       	cpi	r24, 0x2E	; 46
    1c0e:	21 f4       	brne	.+8      	; 0x1c18 <vfprintf+0xf4>
    1c10:	26 fd       	sbrc	r18, 6
    1c12:	78 c1       	rjmp	.+752    	; 0x1f04 <vfprintf+0x3e0>
    1c14:	20 64       	ori	r18, 0x40	; 64
    1c16:	06 c0       	rjmp	.+12     	; 0x1c24 <vfprintf+0x100>
    1c18:	8c 36       	cpi	r24, 0x6C	; 108
    1c1a:	11 f4       	brne	.+4      	; 0x1c20 <vfprintf+0xfc>
    1c1c:	20 68       	ori	r18, 0x80	; 128
    1c1e:	02 c0       	rjmp	.+4      	; 0x1c24 <vfprintf+0x100>
    1c20:	88 36       	cpi	r24, 0x68	; 104
    1c22:	49 f4       	brne	.+18     	; 0x1c36 <vfprintf+0x112>
    1c24:	f1 01       	movw	r30, r2
    1c26:	93 fd       	sbrc	r25, 3
    1c28:	85 91       	lpm	r24, Z+
    1c2a:	93 ff       	sbrs	r25, 3
    1c2c:	81 91       	ld	r24, Z+
    1c2e:	1f 01       	movw	r2, r30
    1c30:	88 23       	and	r24, r24
    1c32:	09 f0       	breq	.+2      	; 0x1c36 <vfprintf+0x112>
    1c34:	ba cf       	rjmp	.-140    	; 0x1baa <vfprintf+0x86>
    1c36:	98 2f       	mov	r25, r24
    1c38:	95 54       	subi	r25, 0x45	; 69
    1c3a:	93 30       	cpi	r25, 0x03	; 3
    1c3c:	18 f0       	brcs	.+6      	; 0x1c44 <vfprintf+0x120>
    1c3e:	90 52       	subi	r25, 0x20	; 32
    1c40:	93 30       	cpi	r25, 0x03	; 3
    1c42:	28 f4       	brcc	.+10     	; 0x1c4e <vfprintf+0x12a>
    1c44:	0c 5f       	subi	r16, 0xFC	; 252
    1c46:	1f 4f       	sbci	r17, 0xFF	; 255
    1c48:	ff e3       	ldi	r31, 0x3F	; 63
    1c4a:	f9 83       	std	Y+1, r31	; 0x01
    1c4c:	0d c0       	rjmp	.+26     	; 0x1c68 <vfprintf+0x144>
    1c4e:	83 36       	cpi	r24, 0x63	; 99
    1c50:	31 f0       	breq	.+12     	; 0x1c5e <vfprintf+0x13a>
    1c52:	83 37       	cpi	r24, 0x73	; 115
    1c54:	71 f0       	breq	.+28     	; 0x1c72 <vfprintf+0x14e>
    1c56:	83 35       	cpi	r24, 0x53	; 83
    1c58:	09 f0       	breq	.+2      	; 0x1c5c <vfprintf+0x138>
    1c5a:	60 c0       	rjmp	.+192    	; 0x1d1c <vfprintf+0x1f8>
    1c5c:	22 c0       	rjmp	.+68     	; 0x1ca2 <vfprintf+0x17e>
    1c5e:	f8 01       	movw	r30, r16
    1c60:	80 81       	ld	r24, Z
    1c62:	89 83       	std	Y+1, r24	; 0x01
    1c64:	0e 5f       	subi	r16, 0xFE	; 254
    1c66:	1f 4f       	sbci	r17, 0xFF	; 255
    1c68:	42 01       	movw	r8, r4
    1c6a:	71 e0       	ldi	r23, 0x01	; 1
    1c6c:	a7 2e       	mov	r10, r23
    1c6e:	b1 2c       	mov	r11, r1
    1c70:	16 c0       	rjmp	.+44     	; 0x1c9e <vfprintf+0x17a>
    1c72:	62 e0       	ldi	r22, 0x02	; 2
    1c74:	66 2e       	mov	r6, r22
    1c76:	71 2c       	mov	r7, r1
    1c78:	60 0e       	add	r6, r16
    1c7a:	71 1e       	adc	r7, r17
    1c7c:	f8 01       	movw	r30, r16
    1c7e:	80 80       	ld	r8, Z
    1c80:	91 80       	ldd	r9, Z+1	; 0x01
    1c82:	26 ff       	sbrs	r18, 6
    1c84:	03 c0       	rjmp	.+6      	; 0x1c8c <vfprintf+0x168>
    1c86:	6e 2d       	mov	r22, r14
    1c88:	70 e0       	ldi	r23, 0x00	; 0
    1c8a:	02 c0       	rjmp	.+4      	; 0x1c90 <vfprintf+0x16c>
    1c8c:	6f ef       	ldi	r22, 0xFF	; 255
    1c8e:	7f ef       	ldi	r23, 0xFF	; 255
    1c90:	c4 01       	movw	r24, r8
    1c92:	2c 87       	std	Y+12, r18	; 0x0c
    1c94:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <strnlen>
    1c98:	5c 01       	movw	r10, r24
    1c9a:	83 01       	movw	r16, r6
    1c9c:	2c 85       	ldd	r18, Y+12	; 0x0c
    1c9e:	2f 77       	andi	r18, 0x7F	; 127
    1ca0:	17 c0       	rjmp	.+46     	; 0x1cd0 <vfprintf+0x1ac>
    1ca2:	52 e0       	ldi	r21, 0x02	; 2
    1ca4:	65 2e       	mov	r6, r21
    1ca6:	71 2c       	mov	r7, r1
    1ca8:	60 0e       	add	r6, r16
    1caa:	71 1e       	adc	r7, r17
    1cac:	f8 01       	movw	r30, r16
    1cae:	80 80       	ld	r8, Z
    1cb0:	91 80       	ldd	r9, Z+1	; 0x01
    1cb2:	26 ff       	sbrs	r18, 6
    1cb4:	03 c0       	rjmp	.+6      	; 0x1cbc <vfprintf+0x198>
    1cb6:	6e 2d       	mov	r22, r14
    1cb8:	70 e0       	ldi	r23, 0x00	; 0
    1cba:	02 c0       	rjmp	.+4      	; 0x1cc0 <vfprintf+0x19c>
    1cbc:	6f ef       	ldi	r22, 0xFF	; 255
    1cbe:	7f ef       	ldi	r23, 0xFF	; 255
    1cc0:	c4 01       	movw	r24, r8
    1cc2:	2c 87       	std	Y+12, r18	; 0x0c
    1cc4:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <strnlen_P>
    1cc8:	5c 01       	movw	r10, r24
    1cca:	2c 85       	ldd	r18, Y+12	; 0x0c
    1ccc:	20 68       	ori	r18, 0x80	; 128
    1cce:	83 01       	movw	r16, r6
    1cd0:	23 fd       	sbrc	r18, 3
    1cd2:	20 c0       	rjmp	.+64     	; 0x1d14 <vfprintf+0x1f0>
    1cd4:	08 c0       	rjmp	.+16     	; 0x1ce6 <vfprintf+0x1c2>
    1cd6:	80 e2       	ldi	r24, 0x20	; 32
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	b6 01       	movw	r22, r12
    1cdc:	2c 87       	std	Y+12, r18	; 0x0c
    1cde:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <fputc>
    1ce2:	fa 94       	dec	r15
    1ce4:	2c 85       	ldd	r18, Y+12	; 0x0c
    1ce6:	8f 2d       	mov	r24, r15
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	a8 16       	cp	r10, r24
    1cec:	b9 06       	cpc	r11, r25
    1cee:	98 f3       	brcs	.-26     	; 0x1cd6 <vfprintf+0x1b2>
    1cf0:	11 c0       	rjmp	.+34     	; 0x1d14 <vfprintf+0x1f0>
    1cf2:	f4 01       	movw	r30, r8
    1cf4:	27 fd       	sbrc	r18, 7
    1cf6:	85 91       	lpm	r24, Z+
    1cf8:	27 ff       	sbrs	r18, 7
    1cfa:	81 91       	ld	r24, Z+
    1cfc:	4f 01       	movw	r8, r30
    1cfe:	90 e0       	ldi	r25, 0x00	; 0
    1d00:	b6 01       	movw	r22, r12
    1d02:	2c 87       	std	Y+12, r18	; 0x0c
    1d04:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <fputc>
    1d08:	2c 85       	ldd	r18, Y+12	; 0x0c
    1d0a:	f1 10       	cpse	r15, r1
    1d0c:	fa 94       	dec	r15
    1d0e:	08 94       	sec
    1d10:	a1 08       	sbc	r10, r1
    1d12:	b1 08       	sbc	r11, r1
    1d14:	a1 14       	cp	r10, r1
    1d16:	b1 04       	cpc	r11, r1
    1d18:	61 f7       	brne	.-40     	; 0x1cf2 <vfprintf+0x1ce>
    1d1a:	f1 c0       	rjmp	.+482    	; 0x1efe <vfprintf+0x3da>
    1d1c:	84 36       	cpi	r24, 0x64	; 100
    1d1e:	11 f0       	breq	.+4      	; 0x1d24 <vfprintf+0x200>
    1d20:	89 36       	cpi	r24, 0x69	; 105
    1d22:	49 f5       	brne	.+82     	; 0x1d76 <vfprintf+0x252>
    1d24:	27 ff       	sbrs	r18, 7
    1d26:	08 c0       	rjmp	.+16     	; 0x1d38 <vfprintf+0x214>
    1d28:	f8 01       	movw	r30, r16
    1d2a:	60 81       	ld	r22, Z
    1d2c:	71 81       	ldd	r23, Z+1	; 0x01
    1d2e:	82 81       	ldd	r24, Z+2	; 0x02
    1d30:	93 81       	ldd	r25, Z+3	; 0x03
    1d32:	0c 5f       	subi	r16, 0xFC	; 252
    1d34:	1f 4f       	sbci	r17, 0xFF	; 255
    1d36:	09 c0       	rjmp	.+18     	; 0x1d4a <vfprintf+0x226>
    1d38:	f8 01       	movw	r30, r16
    1d3a:	60 81       	ld	r22, Z
    1d3c:	71 81       	ldd	r23, Z+1	; 0x01
    1d3e:	88 27       	eor	r24, r24
    1d40:	77 fd       	sbrc	r23, 7
    1d42:	80 95       	com	r24
    1d44:	98 2f       	mov	r25, r24
    1d46:	0e 5f       	subi	r16, 0xFE	; 254
    1d48:	1f 4f       	sbci	r17, 0xFF	; 255
    1d4a:	4f e6       	ldi	r20, 0x6F	; 111
    1d4c:	b4 2e       	mov	r11, r20
    1d4e:	b2 22       	and	r11, r18
    1d50:	97 ff       	sbrs	r25, 7
    1d52:	09 c0       	rjmp	.+18     	; 0x1d66 <vfprintf+0x242>
    1d54:	90 95       	com	r25
    1d56:	80 95       	com	r24
    1d58:	70 95       	com	r23
    1d5a:	61 95       	neg	r22
    1d5c:	7f 4f       	sbci	r23, 0xFF	; 255
    1d5e:	8f 4f       	sbci	r24, 0xFF	; 255
    1d60:	9f 4f       	sbci	r25, 0xFF	; 255
    1d62:	f0 e8       	ldi	r31, 0x80	; 128
    1d64:	bf 2a       	or	r11, r31
    1d66:	a2 01       	movw	r20, r4
    1d68:	2a e0       	ldi	r18, 0x0A	; 10
    1d6a:	30 e0       	ldi	r19, 0x00	; 0
    1d6c:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <__ultoa_invert>
    1d70:	78 2e       	mov	r7, r24
    1d72:	74 18       	sub	r7, r4
    1d74:	45 c0       	rjmp	.+138    	; 0x1e00 <vfprintf+0x2dc>
    1d76:	85 37       	cpi	r24, 0x75	; 117
    1d78:	31 f4       	brne	.+12     	; 0x1d86 <vfprintf+0x262>
    1d7a:	3f ee       	ldi	r19, 0xEF	; 239
    1d7c:	b3 2e       	mov	r11, r19
    1d7e:	b2 22       	and	r11, r18
    1d80:	2a e0       	ldi	r18, 0x0A	; 10
    1d82:	30 e0       	ldi	r19, 0x00	; 0
    1d84:	25 c0       	rjmp	.+74     	; 0x1dd0 <vfprintf+0x2ac>
    1d86:	99 ef       	ldi	r25, 0xF9	; 249
    1d88:	b9 2e       	mov	r11, r25
    1d8a:	b2 22       	and	r11, r18
    1d8c:	8f 36       	cpi	r24, 0x6F	; 111
    1d8e:	c1 f0       	breq	.+48     	; 0x1dc0 <vfprintf+0x29c>
    1d90:	80 37       	cpi	r24, 0x70	; 112
    1d92:	20 f4       	brcc	.+8      	; 0x1d9c <vfprintf+0x278>
    1d94:	88 35       	cpi	r24, 0x58	; 88
    1d96:	09 f0       	breq	.+2      	; 0x1d9a <vfprintf+0x276>
    1d98:	b5 c0       	rjmp	.+362    	; 0x1f04 <vfprintf+0x3e0>
    1d9a:	0d c0       	rjmp	.+26     	; 0x1db6 <vfprintf+0x292>
    1d9c:	80 37       	cpi	r24, 0x70	; 112
    1d9e:	21 f0       	breq	.+8      	; 0x1da8 <vfprintf+0x284>
    1da0:	88 37       	cpi	r24, 0x78	; 120
    1da2:	09 f0       	breq	.+2      	; 0x1da6 <vfprintf+0x282>
    1da4:	af c0       	rjmp	.+350    	; 0x1f04 <vfprintf+0x3e0>
    1da6:	02 c0       	rjmp	.+4      	; 0x1dac <vfprintf+0x288>
    1da8:	20 e1       	ldi	r18, 0x10	; 16
    1daa:	b2 2a       	or	r11, r18
    1dac:	b4 fe       	sbrs	r11, 4
    1dae:	0b c0       	rjmp	.+22     	; 0x1dc6 <vfprintf+0x2a2>
    1db0:	84 e0       	ldi	r24, 0x04	; 4
    1db2:	b8 2a       	or	r11, r24
    1db4:	08 c0       	rjmp	.+16     	; 0x1dc6 <vfprintf+0x2a2>
    1db6:	b4 fe       	sbrs	r11, 4
    1db8:	09 c0       	rjmp	.+18     	; 0x1dcc <vfprintf+0x2a8>
    1dba:	e6 e0       	ldi	r30, 0x06	; 6
    1dbc:	be 2a       	or	r11, r30
    1dbe:	06 c0       	rjmp	.+12     	; 0x1dcc <vfprintf+0x2a8>
    1dc0:	28 e0       	ldi	r18, 0x08	; 8
    1dc2:	30 e0       	ldi	r19, 0x00	; 0
    1dc4:	05 c0       	rjmp	.+10     	; 0x1dd0 <vfprintf+0x2ac>
    1dc6:	20 e1       	ldi	r18, 0x10	; 16
    1dc8:	30 e0       	ldi	r19, 0x00	; 0
    1dca:	02 c0       	rjmp	.+4      	; 0x1dd0 <vfprintf+0x2ac>
    1dcc:	20 e1       	ldi	r18, 0x10	; 16
    1dce:	32 e0       	ldi	r19, 0x02	; 2
    1dd0:	b7 fe       	sbrs	r11, 7
    1dd2:	08 c0       	rjmp	.+16     	; 0x1de4 <vfprintf+0x2c0>
    1dd4:	f8 01       	movw	r30, r16
    1dd6:	60 81       	ld	r22, Z
    1dd8:	71 81       	ldd	r23, Z+1	; 0x01
    1dda:	82 81       	ldd	r24, Z+2	; 0x02
    1ddc:	93 81       	ldd	r25, Z+3	; 0x03
    1dde:	0c 5f       	subi	r16, 0xFC	; 252
    1de0:	1f 4f       	sbci	r17, 0xFF	; 255
    1de2:	07 c0       	rjmp	.+14     	; 0x1df2 <vfprintf+0x2ce>
    1de4:	f8 01       	movw	r30, r16
    1de6:	60 81       	ld	r22, Z
    1de8:	71 81       	ldd	r23, Z+1	; 0x01
    1dea:	80 e0       	ldi	r24, 0x00	; 0
    1dec:	90 e0       	ldi	r25, 0x00	; 0
    1dee:	0e 5f       	subi	r16, 0xFE	; 254
    1df0:	1f 4f       	sbci	r17, 0xFF	; 255
    1df2:	a2 01       	movw	r20, r4
    1df4:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <__ultoa_invert>
    1df8:	78 2e       	mov	r7, r24
    1dfa:	74 18       	sub	r7, r4
    1dfc:	ff e7       	ldi	r31, 0x7F	; 127
    1dfe:	bf 22       	and	r11, r31
    1e00:	b6 fe       	sbrs	r11, 6
    1e02:	0b c0       	rjmp	.+22     	; 0x1e1a <vfprintf+0x2f6>
    1e04:	2e ef       	ldi	r18, 0xFE	; 254
    1e06:	b2 22       	and	r11, r18
    1e08:	7e 14       	cp	r7, r14
    1e0a:	38 f4       	brcc	.+14     	; 0x1e1a <vfprintf+0x2f6>
    1e0c:	b4 fe       	sbrs	r11, 4
    1e0e:	07 c0       	rjmp	.+14     	; 0x1e1e <vfprintf+0x2fa>
    1e10:	b2 fc       	sbrc	r11, 2
    1e12:	05 c0       	rjmp	.+10     	; 0x1e1e <vfprintf+0x2fa>
    1e14:	8f ee       	ldi	r24, 0xEF	; 239
    1e16:	b8 22       	and	r11, r24
    1e18:	02 c0       	rjmp	.+4      	; 0x1e1e <vfprintf+0x2fa>
    1e1a:	a7 2c       	mov	r10, r7
    1e1c:	01 c0       	rjmp	.+2      	; 0x1e20 <vfprintf+0x2fc>
    1e1e:	ae 2c       	mov	r10, r14
    1e20:	8b 2d       	mov	r24, r11
    1e22:	90 e0       	ldi	r25, 0x00	; 0
    1e24:	b4 fe       	sbrs	r11, 4
    1e26:	0d c0       	rjmp	.+26     	; 0x1e42 <vfprintf+0x31e>
    1e28:	fe 01       	movw	r30, r28
    1e2a:	e7 0d       	add	r30, r7
    1e2c:	f1 1d       	adc	r31, r1
    1e2e:	20 81       	ld	r18, Z
    1e30:	20 33       	cpi	r18, 0x30	; 48
    1e32:	19 f4       	brne	.+6      	; 0x1e3a <vfprintf+0x316>
    1e34:	e9 ee       	ldi	r30, 0xE9	; 233
    1e36:	be 22       	and	r11, r30
    1e38:	09 c0       	rjmp	.+18     	; 0x1e4c <vfprintf+0x328>
    1e3a:	a3 94       	inc	r10
    1e3c:	b2 fe       	sbrs	r11, 2
    1e3e:	06 c0       	rjmp	.+12     	; 0x1e4c <vfprintf+0x328>
    1e40:	04 c0       	rjmp	.+8      	; 0x1e4a <vfprintf+0x326>
    1e42:	86 78       	andi	r24, 0x86	; 134
    1e44:	90 70       	andi	r25, 0x00	; 0
    1e46:	00 97       	sbiw	r24, 0x00	; 0
    1e48:	09 f0       	breq	.+2      	; 0x1e4c <vfprintf+0x328>
    1e4a:	a3 94       	inc	r10
    1e4c:	8b 2c       	mov	r8, r11
    1e4e:	99 24       	eor	r9, r9
    1e50:	b3 fc       	sbrc	r11, 3
    1e52:	14 c0       	rjmp	.+40     	; 0x1e7c <vfprintf+0x358>
    1e54:	b0 fe       	sbrs	r11, 0
    1e56:	0f c0       	rjmp	.+30     	; 0x1e76 <vfprintf+0x352>
    1e58:	af 14       	cp	r10, r15
    1e5a:	28 f4       	brcc	.+10     	; 0x1e66 <vfprintf+0x342>
    1e5c:	e7 2c       	mov	r14, r7
    1e5e:	ef 0c       	add	r14, r15
    1e60:	ea 18       	sub	r14, r10
    1e62:	af 2c       	mov	r10, r15
    1e64:	08 c0       	rjmp	.+16     	; 0x1e76 <vfprintf+0x352>
    1e66:	e7 2c       	mov	r14, r7
    1e68:	06 c0       	rjmp	.+12     	; 0x1e76 <vfprintf+0x352>
    1e6a:	80 e2       	ldi	r24, 0x20	; 32
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	b6 01       	movw	r22, r12
    1e70:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <fputc>
    1e74:	a3 94       	inc	r10
    1e76:	af 14       	cp	r10, r15
    1e78:	c0 f3       	brcs	.-16     	; 0x1e6a <vfprintf+0x346>
    1e7a:	04 c0       	rjmp	.+8      	; 0x1e84 <vfprintf+0x360>
    1e7c:	af 14       	cp	r10, r15
    1e7e:	10 f4       	brcc	.+4      	; 0x1e84 <vfprintf+0x360>
    1e80:	fa 18       	sub	r15, r10
    1e82:	01 c0       	rjmp	.+2      	; 0x1e86 <vfprintf+0x362>
    1e84:	ff 24       	eor	r15, r15
    1e86:	84 fe       	sbrs	r8, 4
    1e88:	0f c0       	rjmp	.+30     	; 0x1ea8 <vfprintf+0x384>
    1e8a:	80 e3       	ldi	r24, 0x30	; 48
    1e8c:	90 e0       	ldi	r25, 0x00	; 0
    1e8e:	b6 01       	movw	r22, r12
    1e90:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <fputc>
    1e94:	82 fe       	sbrs	r8, 2
    1e96:	1f c0       	rjmp	.+62     	; 0x1ed6 <vfprintf+0x3b2>
    1e98:	81 fe       	sbrs	r8, 1
    1e9a:	03 c0       	rjmp	.+6      	; 0x1ea2 <vfprintf+0x37e>
    1e9c:	88 e5       	ldi	r24, 0x58	; 88
    1e9e:	90 e0       	ldi	r25, 0x00	; 0
    1ea0:	10 c0       	rjmp	.+32     	; 0x1ec2 <vfprintf+0x39e>
    1ea2:	88 e7       	ldi	r24, 0x78	; 120
    1ea4:	90 e0       	ldi	r25, 0x00	; 0
    1ea6:	0d c0       	rjmp	.+26     	; 0x1ec2 <vfprintf+0x39e>
    1ea8:	c4 01       	movw	r24, r8
    1eaa:	86 78       	andi	r24, 0x86	; 134
    1eac:	90 70       	andi	r25, 0x00	; 0
    1eae:	00 97       	sbiw	r24, 0x00	; 0
    1eb0:	91 f0       	breq	.+36     	; 0x1ed6 <vfprintf+0x3b2>
    1eb2:	81 fc       	sbrc	r8, 1
    1eb4:	02 c0       	rjmp	.+4      	; 0x1eba <vfprintf+0x396>
    1eb6:	80 e2       	ldi	r24, 0x20	; 32
    1eb8:	01 c0       	rjmp	.+2      	; 0x1ebc <vfprintf+0x398>
    1eba:	8b e2       	ldi	r24, 0x2B	; 43
    1ebc:	b7 fc       	sbrc	r11, 7
    1ebe:	8d e2       	ldi	r24, 0x2D	; 45
    1ec0:	90 e0       	ldi	r25, 0x00	; 0
    1ec2:	b6 01       	movw	r22, r12
    1ec4:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <fputc>
    1ec8:	06 c0       	rjmp	.+12     	; 0x1ed6 <vfprintf+0x3b2>
    1eca:	80 e3       	ldi	r24, 0x30	; 48
    1ecc:	90 e0       	ldi	r25, 0x00	; 0
    1ece:	b6 01       	movw	r22, r12
    1ed0:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <fputc>
    1ed4:	ea 94       	dec	r14
    1ed6:	7e 14       	cp	r7, r14
    1ed8:	c0 f3       	brcs	.-16     	; 0x1eca <vfprintf+0x3a6>
    1eda:	7a 94       	dec	r7
    1edc:	f2 01       	movw	r30, r4
    1ede:	e7 0d       	add	r30, r7
    1ee0:	f1 1d       	adc	r31, r1
    1ee2:	80 81       	ld	r24, Z
    1ee4:	90 e0       	ldi	r25, 0x00	; 0
    1ee6:	b6 01       	movw	r22, r12
    1ee8:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <fputc>
    1eec:	77 20       	and	r7, r7
    1eee:	a9 f7       	brne	.-22     	; 0x1eda <vfprintf+0x3b6>
    1ef0:	06 c0       	rjmp	.+12     	; 0x1efe <vfprintf+0x3da>
    1ef2:	80 e2       	ldi	r24, 0x20	; 32
    1ef4:	90 e0       	ldi	r25, 0x00	; 0
    1ef6:	b6 01       	movw	r22, r12
    1ef8:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <fputc>
    1efc:	fa 94       	dec	r15
    1efe:	ff 20       	and	r15, r15
    1f00:	c1 f7       	brne	.-16     	; 0x1ef2 <vfprintf+0x3ce>
    1f02:	37 ce       	rjmp	.-914    	; 0x1b72 <vfprintf+0x4e>
    1f04:	f6 01       	movw	r30, r12
    1f06:	26 81       	ldd	r18, Z+6	; 0x06
    1f08:	37 81       	ldd	r19, Z+7	; 0x07
    1f0a:	02 c0       	rjmp	.+4      	; 0x1f10 <vfprintf+0x3ec>
    1f0c:	2f ef       	ldi	r18, 0xFF	; 255
    1f0e:	3f ef       	ldi	r19, 0xFF	; 255
    1f10:	c9 01       	movw	r24, r18
    1f12:	2c 96       	adiw	r28, 0x0c	; 12
    1f14:	0f b6       	in	r0, 0x3f	; 63
    1f16:	f8 94       	cli
    1f18:	de bf       	out	0x3e, r29	; 62
    1f1a:	0f be       	out	0x3f, r0	; 63
    1f1c:	cd bf       	out	0x3d, r28	; 61
    1f1e:	cf 91       	pop	r28
    1f20:	df 91       	pop	r29
    1f22:	1f 91       	pop	r17
    1f24:	0f 91       	pop	r16
    1f26:	ff 90       	pop	r15
    1f28:	ef 90       	pop	r14
    1f2a:	df 90       	pop	r13
    1f2c:	cf 90       	pop	r12
    1f2e:	bf 90       	pop	r11
    1f30:	af 90       	pop	r10
    1f32:	9f 90       	pop	r9
    1f34:	8f 90       	pop	r8
    1f36:	7f 90       	pop	r7
    1f38:	6f 90       	pop	r6
    1f3a:	5f 90       	pop	r5
    1f3c:	4f 90       	pop	r4
    1f3e:	3f 90       	pop	r3
    1f40:	2f 90       	pop	r2
    1f42:	08 95       	ret

00001f44 <strnlen_P>:
    1f44:	fc 01       	movw	r30, r24
    1f46:	05 90       	lpm	r0, Z+
    1f48:	61 50       	subi	r22, 0x01	; 1
    1f4a:	70 40       	sbci	r23, 0x00	; 0
    1f4c:	01 10       	cpse	r0, r1
    1f4e:	d8 f7       	brcc	.-10     	; 0x1f46 <strnlen_P+0x2>
    1f50:	80 95       	com	r24
    1f52:	90 95       	com	r25
    1f54:	8e 0f       	add	r24, r30
    1f56:	9f 1f       	adc	r25, r31
    1f58:	08 95       	ret

00001f5a <strnlen>:
    1f5a:	fc 01       	movw	r30, r24
    1f5c:	61 50       	subi	r22, 0x01	; 1
    1f5e:	70 40       	sbci	r23, 0x00	; 0
    1f60:	01 90       	ld	r0, Z+
    1f62:	01 10       	cpse	r0, r1
    1f64:	d8 f7       	brcc	.-10     	; 0x1f5c <strnlen+0x2>
    1f66:	80 95       	com	r24
    1f68:	90 95       	com	r25
    1f6a:	8e 0f       	add	r24, r30
    1f6c:	9f 1f       	adc	r25, r31
    1f6e:	08 95       	ret

00001f70 <fputc>:
    1f70:	0f 93       	push	r16
    1f72:	1f 93       	push	r17
    1f74:	cf 93       	push	r28
    1f76:	df 93       	push	r29
    1f78:	8c 01       	movw	r16, r24
    1f7a:	eb 01       	movw	r28, r22
    1f7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f7e:	81 ff       	sbrs	r24, 1
    1f80:	1b c0       	rjmp	.+54     	; 0x1fb8 <fputc+0x48>
    1f82:	82 ff       	sbrs	r24, 2
    1f84:	0d c0       	rjmp	.+26     	; 0x1fa0 <fputc+0x30>
    1f86:	2e 81       	ldd	r18, Y+6	; 0x06
    1f88:	3f 81       	ldd	r19, Y+7	; 0x07
    1f8a:	8c 81       	ldd	r24, Y+4	; 0x04
    1f8c:	9d 81       	ldd	r25, Y+5	; 0x05
    1f8e:	28 17       	cp	r18, r24
    1f90:	39 07       	cpc	r19, r25
    1f92:	64 f4       	brge	.+24     	; 0x1fac <fputc+0x3c>
    1f94:	e8 81       	ld	r30, Y
    1f96:	f9 81       	ldd	r31, Y+1	; 0x01
    1f98:	01 93       	st	Z+, r16
    1f9a:	f9 83       	std	Y+1, r31	; 0x01
    1f9c:	e8 83       	st	Y, r30
    1f9e:	06 c0       	rjmp	.+12     	; 0x1fac <fputc+0x3c>
    1fa0:	e8 85       	ldd	r30, Y+8	; 0x08
    1fa2:	f9 85       	ldd	r31, Y+9	; 0x09
    1fa4:	80 2f       	mov	r24, r16
    1fa6:	09 95       	icall
    1fa8:	00 97       	sbiw	r24, 0x00	; 0
    1faa:	31 f4       	brne	.+12     	; 0x1fb8 <fputc+0x48>
    1fac:	8e 81       	ldd	r24, Y+6	; 0x06
    1fae:	9f 81       	ldd	r25, Y+7	; 0x07
    1fb0:	01 96       	adiw	r24, 0x01	; 1
    1fb2:	9f 83       	std	Y+7, r25	; 0x07
    1fb4:	8e 83       	std	Y+6, r24	; 0x06
    1fb6:	02 c0       	rjmp	.+4      	; 0x1fbc <fputc+0x4c>
    1fb8:	0f ef       	ldi	r16, 0xFF	; 255
    1fba:	1f ef       	ldi	r17, 0xFF	; 255
    1fbc:	c8 01       	movw	r24, r16
    1fbe:	df 91       	pop	r29
    1fc0:	cf 91       	pop	r28
    1fc2:	1f 91       	pop	r17
    1fc4:	0f 91       	pop	r16
    1fc6:	08 95       	ret

00001fc8 <__ultoa_invert>:
    1fc8:	fa 01       	movw	r30, r20
    1fca:	aa 27       	eor	r26, r26
    1fcc:	28 30       	cpi	r18, 0x08	; 8
    1fce:	51 f1       	breq	.+84     	; 0x2024 <__ultoa_invert+0x5c>
    1fd0:	20 31       	cpi	r18, 0x10	; 16
    1fd2:	81 f1       	breq	.+96     	; 0x2034 <__ultoa_invert+0x6c>
    1fd4:	e8 94       	clt
    1fd6:	6f 93       	push	r22
    1fd8:	6e 7f       	andi	r22, 0xFE	; 254
    1fda:	6e 5f       	subi	r22, 0xFE	; 254
    1fdc:	7f 4f       	sbci	r23, 0xFF	; 255
    1fde:	8f 4f       	sbci	r24, 0xFF	; 255
    1fe0:	9f 4f       	sbci	r25, 0xFF	; 255
    1fe2:	af 4f       	sbci	r26, 0xFF	; 255
    1fe4:	b1 e0       	ldi	r27, 0x01	; 1
    1fe6:	3e d0       	rcall	.+124    	; 0x2064 <__ultoa_invert+0x9c>
    1fe8:	b4 e0       	ldi	r27, 0x04	; 4
    1fea:	3c d0       	rcall	.+120    	; 0x2064 <__ultoa_invert+0x9c>
    1fec:	67 0f       	add	r22, r23
    1fee:	78 1f       	adc	r23, r24
    1ff0:	89 1f       	adc	r24, r25
    1ff2:	9a 1f       	adc	r25, r26
    1ff4:	a1 1d       	adc	r26, r1
    1ff6:	68 0f       	add	r22, r24
    1ff8:	79 1f       	adc	r23, r25
    1ffa:	8a 1f       	adc	r24, r26
    1ffc:	91 1d       	adc	r25, r1
    1ffe:	a1 1d       	adc	r26, r1
    2000:	6a 0f       	add	r22, r26
    2002:	71 1d       	adc	r23, r1
    2004:	81 1d       	adc	r24, r1
    2006:	91 1d       	adc	r25, r1
    2008:	a1 1d       	adc	r26, r1
    200a:	20 d0       	rcall	.+64     	; 0x204c <__ultoa_invert+0x84>
    200c:	09 f4       	brne	.+2      	; 0x2010 <__ultoa_invert+0x48>
    200e:	68 94       	set
    2010:	3f 91       	pop	r19
    2012:	2a e0       	ldi	r18, 0x0A	; 10
    2014:	26 9f       	mul	r18, r22
    2016:	11 24       	eor	r1, r1
    2018:	30 19       	sub	r19, r0
    201a:	30 5d       	subi	r19, 0xD0	; 208
    201c:	31 93       	st	Z+, r19
    201e:	de f6       	brtc	.-74     	; 0x1fd6 <__ultoa_invert+0xe>
    2020:	cf 01       	movw	r24, r30
    2022:	08 95       	ret
    2024:	46 2f       	mov	r20, r22
    2026:	47 70       	andi	r20, 0x07	; 7
    2028:	40 5d       	subi	r20, 0xD0	; 208
    202a:	41 93       	st	Z+, r20
    202c:	b3 e0       	ldi	r27, 0x03	; 3
    202e:	0f d0       	rcall	.+30     	; 0x204e <__ultoa_invert+0x86>
    2030:	c9 f7       	brne	.-14     	; 0x2024 <__ultoa_invert+0x5c>
    2032:	f6 cf       	rjmp	.-20     	; 0x2020 <__ultoa_invert+0x58>
    2034:	46 2f       	mov	r20, r22
    2036:	4f 70       	andi	r20, 0x0F	; 15
    2038:	40 5d       	subi	r20, 0xD0	; 208
    203a:	4a 33       	cpi	r20, 0x3A	; 58
    203c:	18 f0       	brcs	.+6      	; 0x2044 <__ultoa_invert+0x7c>
    203e:	49 5d       	subi	r20, 0xD9	; 217
    2040:	31 fd       	sbrc	r19, 1
    2042:	40 52       	subi	r20, 0x20	; 32
    2044:	41 93       	st	Z+, r20
    2046:	02 d0       	rcall	.+4      	; 0x204c <__ultoa_invert+0x84>
    2048:	a9 f7       	brne	.-22     	; 0x2034 <__ultoa_invert+0x6c>
    204a:	ea cf       	rjmp	.-44     	; 0x2020 <__ultoa_invert+0x58>
    204c:	b4 e0       	ldi	r27, 0x04	; 4
    204e:	a6 95       	lsr	r26
    2050:	97 95       	ror	r25
    2052:	87 95       	ror	r24
    2054:	77 95       	ror	r23
    2056:	67 95       	ror	r22
    2058:	ba 95       	dec	r27
    205a:	c9 f7       	brne	.-14     	; 0x204e <__ultoa_invert+0x86>
    205c:	00 97       	sbiw	r24, 0x00	; 0
    205e:	61 05       	cpc	r22, r1
    2060:	71 05       	cpc	r23, r1
    2062:	08 95       	ret
    2064:	9b 01       	movw	r18, r22
    2066:	ac 01       	movw	r20, r24
    2068:	0a 2e       	mov	r0, r26
    206a:	06 94       	lsr	r0
    206c:	57 95       	ror	r21
    206e:	47 95       	ror	r20
    2070:	37 95       	ror	r19
    2072:	27 95       	ror	r18
    2074:	ba 95       	dec	r27
    2076:	c9 f7       	brne	.-14     	; 0x206a <__ultoa_invert+0xa2>
    2078:	62 0f       	add	r22, r18
    207a:	73 1f       	adc	r23, r19
    207c:	84 1f       	adc	r24, r20
    207e:	95 1f       	adc	r25, r21
    2080:	a0 1d       	adc	r26, r0
    2082:	08 95       	ret

00002084 <_exit>:
    2084:	f8 94       	cli

00002086 <__stop_program>:
    2086:	ff cf       	rjmp	.-2      	; 0x2086 <__stop_program>
